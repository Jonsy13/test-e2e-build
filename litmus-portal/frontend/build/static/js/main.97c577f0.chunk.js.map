{"version":3,"sources":["redux/reducers/createReducer.ts","redux/reducers/alert.ts","models/redux/myhub.ts","redux/reducers/analytics.ts","redux/reducers/dashboards.ts","redux/reducers/dataSource.ts","redux/reducers/myhub.ts","redux/reducers/nodeSelection.ts","redux/reducers/tabs.ts","redux/reducers/template.ts","redux/reducers/workflow.ts","redux/reducers/image_registry.ts","redux/configureStore.tsx","redux/reducers/index.ts","models/redux/analytics.ts","utils/cookies.ts","utils/auth.ts","models/redux/tabs.ts","utils/getSearchParams.ts","components/Loader/index.tsx","config/index.ts","graphql/subscriptions.ts","models/redux/workflow.ts","redux/actions/index.ts","models/graphql/user.ts","containers/layouts/Center/index.tsx","graphql/queries.ts","graphql/mutations.ts","models/redux/template.ts","models/redux/dashboards.ts","models/redux/dataSource.ts","models/redux/nodeSelection.ts","models/redux/alert.ts","models/redux/image_registry.ts","redux/actions/analytics.ts","containers/app/App.tsx","utils/createApolloClient.ts","ReduxRoot.tsx","i18n.js","index.tsx"],"names":["createReducer","initialState","handlers","state","action","hasOwnProperty","type","MyHubActions","alert","isAlertOpen","AlertActions","SET_ALERT_STATE","payload","communityData","github","stars","experimentsCount","google","totalRuns","operatorInstalls","geoCity","geoCountry","dailyExperimentData","dailyOperatorData","monthlyExperimentData","monthlyOperatorData","loading","error","AnalyticsActions","COMMUNITY_ANALYTICS_SUCCESS","data","forEach","c","push","name","latitude","longitude","count","date","COMMUNITY_ANALYTICS_LOADING","COMMUNITY_ANALYTICS_ERROR","selectDashboard","selectedDashboardID","activePanelID","refreshRate","range","startDate","endDate","forceUpdate","dashboardJSON","DashboardSelectionActions","SELECT_DASHBOARD","selectDataSource","selectedDataSourceID","selectedDataSourceName","selectedDataSourceURL","DataSourceSelectionActions","SELECT_DATASOURCE","hubDetails","id","HubName","RepoURL","RepoBranch","TotalExp","IsAvailable","IsPrivate","Token","UserName","Password","SSHPrivateKey","SSHPublicKey","LastSyncedAt","SET_MYHUB","selectedNode","children","finishedAt","message","pod_name","phase","startedAt","NodeSelectionActions","SELECT_NODE","tabNumber","workflows","settings","node","analytics","overviewDashboard","TabActions","CHANGE_WORKFLOWS_TAB","CHANGE_SETTINGS_TAB","CHANGE_WORKFLOW_DETAILS_TAB","CHANGE_ANALYTICS_DASHBOARD_TAB","CHANGE_OVERVIEW_DASHBOARD_TAB","selectTemplate","selectedTemplateID","isDisable","TemplateSelectionActions","SELECT_TEMPLATE","workflowData","chaosEngineChanged","namespace","clusterid","cronSyntax","scheduleType","scheduleOnce","recurringSchedule","scheduleInput","hour_interval","day","weekday","time","Date","clustername","WorkflowActions","SET_WORKFLOW_DETAILS","workflowManifest","manifest","engineYAML","isCustomWorkflow","SET_WORKFLOW_MANIFEST","selectedImageRegistry","image_registry_name","image_repo_name","image_registry_type","secret_name","secret_namespace","enable_registry","ImageRegistryActions","SELECT_IMAGE_REGISTRY","persistConfig","key","version","storage","localforage","blacklist","history","createBrowserHistory","middleware","applyMiddleware","thunk","persistedReducer","persistReducer","combineReducers","analyticsReducer","workflowReducer","nodeSelectionReducer","tabsReducer","alertReducer","templateReducer","dataSourceReducer","dashboardReducer","imageRegistryReducer","store","createStore","persistor","persistStore","setCookie","value","exhours","path","now","setTime","getTime","MINUTE","expires","toUTCString","document","cookie","getJWTToken","cookieName","jwtToken","cname","ca","decodeURIComponent","split","i","length","charAt","substring","indexOf","getCookie","logout","window","location","reload","getToken","setUserDetails","token","errorMessage","undefined","Error","jwtDecode","decode","expirationTime","exp","iat","err","console","setJWTToken","getUserDetailsFromJwt","getUsername","username","getUserId","uid","getUserRole","role","getUserEmail","email","getUserFullName","getSearchParams","URL","href","searchParams","get","getProjectID","getProjectRole","useStyles","makeStyles","theme","spinner","color","palette","primary","main","Loader","size","classes","className","sockURL","authURL","apiURL","loc","protocol","process","trim","hostname","host","environment","url","ANALYTICS_API","auth","AUTH_API","grahqlEndpoint","GQL_API","grahqlEndpointSubscription","WORKFLOW_EVENTS_WITH_EXEC_DATA","gql","WORKFLOW_EVENTS","WORKFLOW_LOGS","KUBE_OBJ","useActions","actions","deps","dispatch","useDispatch","useMemo","Array","isArray","map","bindActionCreators","MyHubType","Role","UserRole","InvitationStatus","center","width","height","display","justifyContent","alignItems","Center","WORKFLOW_DETAILS_WITH_EXEC_DATA","WORKFLOW_DETAILS","WORKFLOW_STATS","WORKFLOW_LIST_DETAILS","GET_USER","GET_USER_INFO","GET_CLUSTER","GET_CLUSTER_LENGTH","GET_CLUSTER_NAMES","ALL_USERS","CORE_CHART_FIELDS","GET_CHARTS_DATA","GET_EXPERIMENT_DATA","GET_HUB_STATUS","GET_ENGINE_YAML","GET_EXPERIMENT_YAML","GET_GITOPS_DATA","LIST_MANIFEST_TEMPLATE","LIST_PROJECTS","GET_PROJECT","GET_PROJECT_NAME","LIST_DATASOURCE","LIST_DATASOURCE_OVERVIEW","LIST_DASHBOARD","LIST_DASHBOARD_OVERVIEW","PROM_QUERY","PROM_LABEL_VALUES","PROM_SERIES_LIST","GET_TEMPLATE_BY_ID","GET_PREDEFINED_WORKFLOW_LIST","GET_PREDEFINED_EXPERIMENT_YAML","LIST_IMAGE_REGISTRY","GET_IMAGE_REGISTRY","GET_GLOBAL_STATS","GLOBAL_PROJECT_DATA","CREATE_WORKFLOW","ADD_WORKFLOW_TEMPLATE","DELETE_WORKFLOW_TEMPLATE","CREATE_USER","CREATE_PROJECT","UPDATE_PROJECT_NAME","SEND_INVITE","REMOVE_INVITATION","ACCEPT_INVITE","DECLINE_INVITE","UPDATE_SCHEDULE","UPDATE_DETAILS","ADD_MY_HUB","SAVE_MY_HUB","UPDATE_MY_HUB","SYNC_REPO","DELETE_HUB","GENERATE_SSH","DELETE_CLUSTER","ENABLE_GITOPS","UPDATE_GITOPS","DISABLE_GITOPS","RERUN_CHAOS_WORKFLOW","LEAVE_PROJECT","CREATE_DATASOURCE","UPDATE_DATASOURCE","DELETE_DATASOURCE","CREATE_DASHBOARD","UPDATE_DASHBOARD","DELETE_DASHBOARD","ADD_IMAGE_REGISTRY","UPDATE_IMAGE_REGISTRY","SYNC_WORKFLOW","DELETE_WORKFLOW","loadCommunityAnalytics","fetch","config","then","response","json","catch","ErrorPage","lazy","Workflows","CreateWorkflow","LoginPage","GetStarted","WorkflowDetails","HomePage","Community","Settings","Usage","Targets","EditSchedule","SetNewSchedule","ConnectTargets","AnalyticsPage","AnalyticsDashboard","DataSourceConfigurePage","ChooseAndConfigureDashboards","DashboardPage","MyHub","ChaosChart","MyHubExperiment","Routes","baseRoute","pathname","projectIDFromURL","projectRoleFromURL","useState","projectID","setprojectID","projectRole","setprojectRole","isProjectMember","setIsProjectMember","userID","useQuery","skip","onCompleted","listProjects","project","members","member","user_id","search","fetchPolicy","listen","projectValidation","variables","getProject","onError","exact","component","to","configure","admin","App","analyticsAction","useEffect","fallback","style","createApolloClient","httpLinkUri","wsLinkUri","httpLink","HttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","link","query","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","configureStore","client","ReduxRoot","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","backend","loadPath","parse","yaml","load","interpolation","escapeValue","rootEl","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.97c577f0.chunk.js","sourcesContent":["/* eslint-disable no-prototype-builtins */\nimport { Reducer } from 'redux';\nimport { Action } from '../../models/redux';\n\nexport default function createReducer<S>(\n  initialState: S,\n  handlers: any\n): Reducer<S> {\n  const r = (state: S = initialState, action: Action): S => {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    }\n    return state;\n  };\n\n  return r as Reducer<S>;\n}\n","/* eslint-disable import/prefer-default-export */\nimport { AlertAction, AlertActions, AlertData } from '../../models/redux/alert';\nimport createReducer from './createReducer';\n\nconst initialState: AlertData = {\n  isAlertOpen: false,\n};\n\nexport const alert = createReducer<AlertData>(initialState, {\n  [AlertActions.SET_ALERT_STATE](state: AlertData, action: AlertAction) {\n    return {\n      ...state,\n      isAlertOpen: action.payload,\n    };\n  },\n});\n\nexport default alert;\n","import { MyHubType } from '../graphql/user';\n\nexport interface Chart {\n  ApiVersion: string;\n  Kind: string;\n  Metadata: Metadata;\n  Spec: Spec;\n  PackageInfo: PackageInfo;\n}\n\nexport interface Spec {\n  DisplayName: string;\n  CategoryDescription: string;\n  Keywords: string[];\n  Maturity: string;\n  Maintainers: Maintainer[];\n  MinKubeVersion: string;\n  Provider: string;\n  Links: Link[];\n  Experiments: string[];\n  ChaosExpCRDLink: string;\n  Platforms: string[];\n  ChaosType: string;\n}\n\nexport interface Maintainer {\n  Name: string;\n  Email: string;\n}\n\nexport interface Link {\n  Name: string;\n  Url: string;\n}\n\nexport interface Metadata {\n  Name: string;\n  Version: string;\n  Annotations: Annotation[];\n}\n\nexport interface Annotation {\n  Categories: string;\n  Vendor: string;\n  CreatedAt: string;\n  Repository: string;\n  Support: string;\n  ChartDescription: string;\n}\n\nexport interface PackageInfo {\n  PackageName: string;\n  Experiments: Experiments[];\n}\n\nexport interface Experiments {\n  Name: string;\n  Csv: string;\n  Desc: string;\n}\n\nexport interface ChartsInput {\n  HubName: string;\n  UserName: string;\n  RepoURL: string;\n  RepoBranch: string;\n}\n\nexport interface Charts {\n  getCharts: Chart[];\n}\n\nexport interface ExperimentDetail {\n  getHubExperiment: Chart;\n}\n\nexport interface HubDetails {\n  id: string;\n  HubName: string;\n  RepoURL: string;\n  RepoBranch: string;\n  TotalExp: string;\n  IsAvailable: boolean;\n  AuthType?: MyHubType;\n  IsPrivate: boolean;\n  Token: string;\n  UserName: string;\n  Password: string;\n  SSHPrivateKey: string;\n  SSHPublicKey: string;\n  LastSyncedAt: string;\n}\n\nexport interface HubStatus {\n  getHubStatus: HubDetails[];\n}\n\nexport enum MyHubActions {\n  SET_MYHUB = 'SET_MYHUBS',\n}\n\ninterface MyHubActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type MyHubAction = MyHubActionType<\n  typeof MyHubActions.SET_MYHUB,\n  HubDetails\n>;\n","import {\n  AnalyticsAction,\n  AnalyticsActions,\n  AnalyticsData,\n  CommunityData,\n  GeoCity,\n  SeriesData,\n} from '../../models/redux/analytics';\nimport createReducer from './createReducer';\n\nconst initialState: AnalyticsData = {\n  communityData: {\n    github: { stars: '', experimentsCount: '' },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: [],\n    },\n  },\n  loading: false,\n  error: false,\n};\n\nexport const communityData = createReducer<AnalyticsData>(initialState, {\n  [AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    const data = action.payload as CommunityData;\n    const geoCity: GeoCity[] = [];\n    data.google.geoCity.forEach((c: any) => {\n      geoCity.push({\n        name: c[0],\n        latitude: c[1],\n        longitude: c[2],\n        count: c[3],\n      });\n    });\n\n    const { geoCountry } = data.google;\n\n    const dailyExperimentData: SeriesData[] = [];\n    data.google.dailyExperimentData.forEach((c: any) => {\n      dailyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const dailyOperatorData: SeriesData[] = [];\n    data.google.dailyOperatorData.forEach((c: any) => {\n      dailyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyExperimentData: SeriesData[] = [];\n    data.google.monthlyExperimentData.forEach((c: any) => {\n      monthlyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyOperatorData: SeriesData[] = [];\n    data.google.monthlyOperatorData.forEach((c: any) => {\n      monthlyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    return {\n      ...state,\n      communityData: {\n        github: data.github,\n        google: {\n          totalRuns: data.google.totalRuns,\n          operatorInstalls: data.google.operatorInstalls,\n          geoCountry,\n          geoCity,\n          dailyExperimentData,\n          dailyOperatorData,\n          monthlyExperimentData,\n          monthlyOperatorData,\n        },\n      },\n      loading: false,\n      error: false,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_LOADING](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: action.payload as boolean,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_ERROR](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: false,\n      error: action.payload as boolean,\n    };\n  },\n});\n\nexport default communityData;\n","/* eslint-disable import/prefer-default-export */\nimport {\n  DashboardData,\n  DashboardSelectionAction,\n  DashboardSelectionActions,\n} from '../../models/redux/dashboards';\nimport createReducer from './createReducer';\n\nconst initialState: DashboardData = {\n  selectedDashboardID: '',\n  activePanelID: '',\n  refreshRate: 0,\n  range: {\n    startDate: '',\n    endDate: '',\n  },\n  forceUpdate: false,\n  dashboardJSON: {},\n};\n\nexport const selectDashboard = createReducer<DashboardData>(initialState, {\n  [DashboardSelectionActions.SELECT_DASHBOARD](\n    state: DashboardData,\n    action: DashboardSelectionAction\n  ) {\n    return {\n      ...state,\n      ...action.payload,\n    };\n  },\n});\n\nexport default selectDashboard;\n","/* eslint-disable import/prefer-default-export */\nimport {\n  DataSourceData,\n  DataSourceSelectionAction,\n  DataSourceSelectionActions,\n} from '../../models/redux/dataSource';\nimport createReducer from './createReducer';\n\nconst initialState: DataSourceData = {\n  selectedDataSourceID: '',\n  selectedDataSourceName: '',\n  selectedDataSourceURL: '',\n};\n\nexport const selectDataSource = createReducer<DataSourceData>(initialState, {\n  [DataSourceSelectionActions.SELECT_DATASOURCE](\n    state: DataSourceData,\n    action: DataSourceSelectionAction\n  ) {\n    return {\n      ...state,\n      ...action.payload,\n    };\n  },\n});\n\nexport default selectDataSource;\n","import {\n  MyHubAction,\n  MyHubActions,\n  HubDetails,\n} from '../../models/redux/myhub';\nimport createReducer from './createReducer';\n\nconst initialState: HubDetails = {\n  id: '',\n  HubName: '',\n  RepoURL: '',\n  RepoBranch: '',\n  TotalExp: '',\n  IsAvailable: true,\n  IsPrivate: false,\n  Token: '',\n  UserName: '',\n  Password: '',\n  SSHPrivateKey: '',\n  SSHPublicKey: '',\n  LastSyncedAt: '',\n};\n\nexport const hubDetails = createReducer<HubDetails>(initialState, {\n  [MyHubActions.SET_MYHUB](state: HubDetails, action: MyHubAction) {\n    return {\n      ...state,\n      ...(action.payload as Object),\n    };\n  },\n});\n\nexport default hubDetails;\n","import {\n  NodeSelectionAction,\n  NodeSelectionActions,\n  SelectedNode,\n} from '../../models/redux/nodeSelection';\nimport createReducer from './createReducer';\n\nconst initialState: SelectedNode = {\n  children: null,\n  finishedAt: '',\n  message: '',\n  name: '',\n  pod_name: '',\n  phase: '',\n  startedAt: '',\n  type: '',\n};\n\nexport const selectedNode = createReducer<SelectedNode>(initialState, {\n  [NodeSelectionActions.SELECT_NODE](\n    state: SelectedNode,\n    action: NodeSelectionAction\n  ) {\n    return {\n      ...state,\n      ...action.payload,\n    };\n  },\n});\n\nexport default selectedNode;\n","/* eslint-disable import/prefer-default-export */\nimport { TabAction, TabActions, TabState } from '../../models/redux/tabs';\nimport createReducer from './createReducer';\n\nconst initialState: TabState = {\n  workflows: 0,\n  settings: 0,\n  node: 0,\n  analytics: 0,\n  overviewDashboard: 0,\n};\n\nexport const tabNumber = createReducer<TabState>(initialState, {\n  [TabActions.CHANGE_WORKFLOWS_TAB](state: TabState, action: TabAction) {\n    return {\n      ...state,\n      workflows: action.payload,\n    };\n  },\n  [TabActions.CHANGE_SETTINGS_TAB](state: TabState, action: TabAction) {\n    return {\n      ...state,\n      settings: action.payload,\n    };\n  },\n  [TabActions.CHANGE_WORKFLOW_DETAILS_TAB](state: TabState, action: TabAction) {\n    return {\n      ...state,\n      node: action.payload,\n    };\n  },\n  [TabActions.CHANGE_ANALYTICS_DASHBOARD_TAB](\n    state: TabState,\n    action: TabAction\n  ) {\n    return {\n      ...state,\n      analytics: action.payload,\n    };\n  },\n  [TabActions.CHANGE_OVERVIEW_DASHBOARD_TAB](\n    state: TabState,\n    action: TabAction\n  ) {\n    return {\n      ...state,\n      overviewDashboard: action.payload,\n    };\n  },\n});\n\nexport default tabNumber;\n","/* eslint-disable import/prefer-default-export */\nimport {\n  TemplateData,\n  TemplateSelectionAction,\n  TemplateSelectionActions,\n} from '../../models/redux/template';\nimport createReducer from './createReducer';\n\nconst initialState: TemplateData = {\n  selectedTemplateID: 0,\n  isDisable: true,\n};\n\nexport const selectTemplate = createReducer<TemplateData>(initialState, {\n  [TemplateSelectionActions.SELECT_TEMPLATE](\n    state: TemplateData,\n    action: TemplateSelectionAction\n  ) {\n    return {\n      ...state,\n      ...action.payload,\n    };\n  },\n});\n\nexport default selectTemplate;\n","import {\n  WorkflowAction,\n  WorkflowActions,\n  WorkflowData,\n  WorkflowManifest,\n} from '../../models/redux/workflow';\nimport createReducer from './createReducer';\n\nconst initialState: WorkflowData = {\n  chaosEngineChanged: false,\n  namespace: '',\n  clusterid: '',\n  cronSyntax: '',\n  scheduleType: {\n    scheduleOnce: 'now',\n    recurringSchedule: '',\n  },\n  scheduleInput: {\n    hour_interval: 0,\n    day: 1,\n    weekday: 'Monday',\n    time: new Date(),\n    date: new Date(),\n  },\n  clustername: '',\n};\n\nconst init: WorkflowManifest = {\n  manifest: '',\n  engineYAML: '',\n  isCustomWorkflow: false,\n};\n\nexport const workflowData = createReducer<WorkflowData>(initialState, {\n  [WorkflowActions.SET_WORKFLOW_DETAILS](\n    state: WorkflowData,\n    action: WorkflowAction\n  ) {\n    return {\n      ...state,\n      ...(action.payload as Object),\n    };\n  },\n});\n\nexport const workflowManifest = createReducer<WorkflowManifest>(init, {\n  [WorkflowActions.SET_WORKFLOW_MANIFEST](\n    state: WorkflowManifest,\n    action: WorkflowAction\n  ) {\n    return {\n      ...state,\n      ...action.payload,\n    };\n  },\n});\n","/* eslint-disable import/prefer-default-export */\nimport {\n  ImageRegistryAction,\n  ImageRegistryActions,\n  ImageRegistryInfo,\n} from '../../models/redux/image_registry';\nimport createReducer from './createReducer';\n\nconst initialState: ImageRegistryInfo = {\n  image_registry_name: '',\n  image_repo_name: '',\n  image_registry_type: '',\n  secret_name: '',\n  secret_namespace: '',\n  enable_registry: true,\n};\n\nexport const selectedImageRegistry = createReducer<ImageRegistryInfo>(\n  initialState,\n  {\n    [ImageRegistryActions.SELECT_IMAGE_REGISTRY](\n      state: ImageRegistryInfo,\n      action: ImageRegistryAction\n    ) {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    },\n  }\n);\n\nexport default selectedImageRegistry;\n","import { createBrowserHistory } from 'history'; // eslint-disable-line import/no-extraneous-dependencies\nimport * as localforage from 'localforage';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { PersistConfig, persistReducer, persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst persistConfig: PersistConfig<any> = {\n  key: 'root',\n  version: 1,\n  storage: localforage,\n  blacklist: [],\n};\n\nconst history = createBrowserHistory();\n\nconst dev = process.env.NODE_ENV === 'development';\n\nlet middleware = applyMiddleware(thunk);\n\nif (dev) {\n  middleware = composeWithDevTools(middleware);\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer());\n\nexport default () => {\n  const store = createStore(persistedReducer, {}, middleware) as any;\n  const persistor = persistStore(store);\n  return { store, persistor };\n};\n\nexport { history };\n","import { combineReducers } from 'redux';\nimport { AlertData } from '../../models/redux/alert';\nimport { AnalyticsData } from '../../models/redux/analytics';\nimport { DashboardData } from '../../models/redux/dashboards';\nimport { DataSourceData } from '../../models/redux/dataSource';\nimport { HubDetails } from '../../models/redux/myhub';\nimport { SelectedNode } from '../../models/redux/nodeSelection';\nimport { TabState } from '../../models/redux/tabs';\nimport { TemplateData } from '../../models/redux/template';\nimport { ImageRegistryInfo } from '../../models/redux/image_registry';\nimport { WorkflowData, WorkflowManifest } from '../../models/redux/workflow';\nimport * as alertReducer from './alert';\nimport * as analyticsReducer from './analytics';\nimport * as dashboardReducer from './dashboards';\nimport * as dataSourceReducer from './dataSource';\nimport * as hubDetails from './myhub';\nimport * as nodeSelectionReducer from './nodeSelection';\nimport * as tabsReducer from './tabs';\nimport * as templateReducer from './template';\nimport * as workflowReducer from './workflow';\nimport * as imageRegistryReducer from './image_registry';\n\nexport interface RootState {\n  communityData: AnalyticsData;\n  workflowData: WorkflowData;\n  workflowManifest: WorkflowManifest;\n  selectedNode: SelectedNode;\n  tabNumber: TabState;\n  alert: AlertData;\n  selectTemplate: TemplateData;\n  hubDetails: HubDetails;\n  selectDataSource: DataSourceData;\n  selectDashboard: DashboardData;\n  selectedImageRegistry: ImageRegistryInfo;\n}\n\nexport default () =>\n  combineReducers({\n    ...analyticsReducer,\n    ...workflowReducer,\n    ...nodeSelectionReducer,\n    ...tabsReducer,\n    ...alertReducer,\n    ...templateReducer,\n    ...hubDetails,\n    ...dataSourceReducer,\n    ...dashboardReducer,\n    ...imageRegistryReducer,\n  });\n","export enum AnalyticsActions {\n  COMMUNITY_ANALYTICS_SUCCESS = 'LOAD_COMMUNITY_ANALYTICS',\n  COMMUNITY_ANALYTICS_LOADING = 'COMMUNITY_ANALYTICS_LOADING',\n  COMMUNITY_ANALYTICS_ERROR = 'COMMUNITY_ANALYTICS_ERROR',\n}\n\nexport interface Github {\n  stars: string;\n  experimentsCount: string;\n}\n\nexport interface GeoCity {\n  name: string;\n  latitude: string;\n  longitude: string;\n  count: string;\n}\n\nexport interface SeriesData {\n  date: string;\n  count: string;\n}\n\nexport interface Google {\n  totalRuns: string;\n  operatorInstalls: string;\n  geoCity: GeoCity[];\n  geoCountry: string[][];\n  dailyOperatorData: SeriesData[];\n  dailyExperimentData: SeriesData[];\n  monthlyOperatorData: SeriesData[];\n  monthlyExperimentData: SeriesData[];\n}\n\nexport interface CommunityData {\n  github: Github;\n  google: Google;\n}\n\nexport interface AnalyticsData {\n  communityData: CommunityData;\n  loading: boolean;\n  error: boolean;\n}\n\ninterface AnalyticsActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type AnalyticsAction =\n  | AnalyticsActionType<\n      typeof AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS,\n      CommunityData\n    >\n  | AnalyticsActionType<\n      typeof AnalyticsActions.COMMUNITY_ANALYTICS_LOADING,\n      boolean\n    >\n  | AnalyticsActionType<\n      typeof AnalyticsActions.COMMUNITY_ANALYTICS_ERROR,\n      boolean\n    >;\n","import jwtDecode from 'jsonwebtoken';\n\nconst SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\n\ninterface SetCookieProps {\n  name: string;\n  value: string;\n  exhours: number;\n  path?: string;\n}\ninterface SetCookie {\n  (props: SetCookieProps): void;\n}\n\n// Sets cookie in browser\nexport const setCookie: SetCookie = ({ name, value, exhours, path }) => {\n  const now = new Date();\n  now.setTime(now.getTime() + exhours * HOUR);\n\n  const expires = `expires=${now.toUTCString()}`;\n\n  document.cookie = `${name}=${value};${expires};path=${path ?? '/'}`;\n};\n\n// Gets cookie in browser\nexport function getCookie(cname: string): string {\n  const name = `${cname}=`;\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return '';\n}\n\ninterface SetJWTTokenProps {\n  token: string;\n  cookieName: string;\n  path?: string;\n  errorMessage?: string;\n}\ninterface SetJWTToken {\n  (props: SetJWTTokenProps): void;\n}\n\n// Sets the JWT token to cookie\nexport const setJWTToken: SetJWTToken = ({\n  token,\n  cookieName,\n  path,\n  errorMessage,\n}) => {\n  try {\n    if (token === undefined || token === null) {\n      throw new Error('Token is undefined or null!');\n    }\n    const data: any = jwtDecode.decode(token);\n    const expirationTime = (data.exp - data.iat) / 3600;\n    setCookie({\n      name: cookieName,\n      value: token,\n      exhours: expirationTime,\n      path,\n    });\n  } catch (err) {\n    console.error(errorMessage ?? 'ERROR IN SETTING COOKIE: ', err);\n  }\n};\n\n// Gets the JWT token from cookie\nexport function getJWTToken(cookieName: string): string {\n  const jwtToken = getCookie(cookieName);\n\n  if (jwtToken) return jwtToken;\n\n  return '';\n}\n","import jwtDecode from 'jsonwebtoken';\nimport { history } from '../redux/configureStore';\nimport { getJWTToken, setCookie, setJWTToken } from './cookies';\n\ninterface UserDetails {\n  role: string;\n  uid: string;\n  username: string;\n  name?: string;\n  email?: string;\n  exp: Date;\n  iat: Date;\n}\n\n// Logs out the user and unsets the jwt token\nexport function logout() {\n  setCookie({ name: 'token', value: '', exhours: 1 });\n  window.location.reload();\n}\n\n// Returns the jwt token\nexport function getToken(): string {\n  const jwtToken = getJWTToken('token');\n\n  // Logout user if jwt is expired\n  if (jwtToken === '') {\n    history.push('/login');\n  }\n\n  return jwtToken;\n}\n\n// Sets the jwt token in the cookie\nexport function setUserDetails(token: string) {\n  setJWTToken({\n    token,\n    cookieName: 'token',\n    errorMessage: 'ERROR IN SETTING USER DETAILS: ',\n  });\n}\n\n// Returns the details of a user from jwt token\nexport function getUserDetailsFromJwt(): UserDetails {\n  const jwtToken = getToken();\n  const userDetails = jwtDecode.decode(jwtToken) as UserDetails;\n  return userDetails;\n}\n\n// Returns the username from jwt token\nexport function getUsername(): string {\n  if (getToken()) return getUserDetailsFromJwt().username;\n  return '';\n}\n\n// Returns userId from jwt token\nexport function getUserId(): string {\n  if (getToken()) return getUserDetailsFromJwt().uid;\n  return '';\n}\n\nexport function getUserRole(): string {\n  if (getToken()) return getUserDetailsFromJwt().role;\n  return '';\n}\n\nexport function getUserEmail(): string {\n  if (getToken()) return getUserDetailsFromJwt().email ?? '';\n  return '';\n}\n\nexport function getUserFullName(): string {\n  if (getToken()) return getUserDetailsFromJwt().name ?? '';\n  return '';\n}\n","export interface TabState {\n  workflows: number;\n  settings: number;\n  node: number;\n  analytics: number;\n  overviewDashboard: number;\n}\n\nexport enum TabActions {\n  CHANGE_WORKFLOWS_TAB = 'CHANGE_WORKFLOWS_TAB',\n  CHANGE_SETTINGS_TAB = 'CHANGE_SETTINGS_TAB',\n  CHANGE_WORKFLOW_DETAILS_TAB = 'CHANGE_WORKFLOW_DETAILS_TAB',\n  CHANGE_ANALYTICS_DASHBOARD_TAB = 'CHANGE_ANALYTICS_DASHBOARD_TAB',\n  CHANGE_OVERVIEW_DASHBOARD_TAB = 'CHANGE_OVERVIEW_DASHBOARD_TAB',\n}\n\ninterface TabActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type TabAction =\n  | TabActionType<typeof TabActions.CHANGE_WORKFLOWS_TAB, number>\n  | TabActionType<typeof TabActions.CHANGE_SETTINGS_TAB, number>\n  | TabActionType<typeof TabActions.CHANGE_WORKFLOW_DETAILS_TAB, number>\n  | TabActionType<typeof TabActions.CHANGE_ANALYTICS_DASHBOARD_TAB, number>\n  | TabActionType<typeof TabActions.CHANGE_OVERVIEW_DASHBOARD_TAB, number>;\n","function getSearchParams(key: string): string {\n  return new URL(window.location.href).searchParams.get(key) ?? '';\n}\n\nfunction getProjectID(): string {\n  return getSearchParams('projectID');\n}\n\nfunction getProjectRole(): string {\n  return getSearchParams('projectRole');\n}\n\nexport { getProjectID, getProjectRole };\n","import {\n  CircularProgress,\n  makeStyles,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport Center from '../../containers/layouts/Center';\n\ninterface LoaderProps {\n  size?: number;\n  message?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  spinner: {\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst Loader: React.FC<LoaderProps> = ({ size, message }) => {\n  const classes = useStyles();\n  const defaultSize = 40;\n  return (\n    <>\n      <Center>\n        <CircularProgress\n          className={classes.spinner}\n          size={size || defaultSize}\n        />\n      </Center>\n      <Typography>{message}</Typography>\n    </>\n  );\n};\n\nexport default Loader;\n","const loc = window.location;\nlet sockURL;\nlet authURL;\nlet apiURL;\nif (loc.protocol === 'https:') {\n  sockURL = 'wss:';\n} else {\n  sockURL = 'ws:';\n}\nif (\n  process.env.NODE_ENV.trim() === 'development' ||\n  process.env.NODE_ENV.trim() === 'test'\n) {\n  authURL = `${window.location.protocol}//${window.location.hostname}:3000`;\n  apiURL = `${window.location.protocol}//${window.location.hostname}:8080`;\n  sockURL += `//${window.location.hostname}:8080`;\n} else {\n  authURL = '/auth';\n  apiURL = '/api';\n  sockURL += `//${loc.host}/ws`;\n}\nexport default {\n  environment: process.env.NODE_ENV,\n  analytics: {\n    url:\n      process.env.ANALYTICS_API || 'https://hub.litmuschaos.io/api/community',\n  },\n  auth: {\n    url: process.env.AUTH_API || authURL,\n  },\n  grahqlEndpoint: process.env.GQL_API || apiURL,\n  grahqlEndpointSubscription: process.env.GQL_API || sockURL,\n};\n","import { gql } from '@apollo/client';\n\nexport const WORKFLOW_EVENTS_WITH_EXEC_DATA = gql`\n  subscription workflowEvents($projectID: String!) {\n    workflowEventListener(project_id: $projectID) {\n      workflow_id\n      workflow_name\n      workflow_run_id\n      cluster_name\n      last_updated\n      cluster_id\n      phase\n      execution_data\n      resiliency_score\n    }\n  }\n`;\n\nexport const WORKFLOW_EVENTS = gql`\n  subscription workflowEvents($projectID: String!) {\n    workflowEventListener(project_id: $projectID) {\n      workflow_id\n      workflow_name\n      workflow_run_id\n      cluster_name\n      last_updated\n      phase\n      resiliency_score\n      experiments_passed\n      total_experiments\n    }\n  }\n`;\n\nexport const WORKFLOW_LOGS = gql`\n  subscription podLog($podDetails: PodLogRequest!) {\n    getPodLog(podDetails: $podDetails) {\n      log\n    }\n  }\n`;\n\nexport const KUBE_OBJ = gql`\n  subscription getKubeObject($data: KubeObjectRequest!) {\n    getKubeObject(kubeObjectRequest: $data) {\n      cluster_id\n      kube_obj\n    }\n  }\n`;\n","export interface experimentMap {\n  experimentName: string;\n  weight: number;\n}\n\nexport interface scheduleType {\n  scheduleOnce: string;\n  recurringSchedule: string;\n}\n\nexport interface scheduleInput {\n  hour_interval: number;\n  day: number;\n  weekday: string;\n  time: Date;\n  date: Date;\n}\n\nexport interface customWorkflow {\n  experiment_name: string;\n  hubName?: string;\n  repoUrl?: string;\n  repoBranch?: string;\n  description: string;\n  experimentYAML?: string;\n  yaml?: string;\n  index?: number;\n}\n\nexport interface WorkflowData {\n  chaosEngineChanged: boolean;\n  namespace: string;\n  workflow_id?: string;\n  clusterid: string;\n  clustername: string;\n  cronSyntax: string;\n  scheduleType: scheduleType;\n  scheduleInput: scheduleInput;\n}\n\nexport interface WorkflowManifest {\n  engineYAML: string;\n  manifest: string;\n  isCustomWorkflow: boolean;\n}\n\nexport enum WorkflowActions {\n  SET_WORKFLOW_DETAILS = 'SET_WORKFLOW_DETAILS',\n  SET_CUSTOM_WORKFLOW = 'SET_CUSTOM_WORKFLOW',\n  SET_WORKFLOW_MANIFEST = 'SET_WORKFLOW_MANIFEST',\n}\n\ninterface WorkflowActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type WorkflowAction =\n  | WorkflowActionType<\n      typeof WorkflowActions.SET_WORKFLOW_DETAILS,\n      WorkflowData\n    >\n  | WorkflowActionType<typeof WorkflowActions.SET_CUSTOM_WORKFLOW, WorkflowData>\n  | WorkflowActionType<\n      typeof WorkflowActions.SET_WORKFLOW_MANIFEST,\n      WorkflowManifest\n    >;\n","import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nconst useActions = (actions: any, deps?: any) => {\n  const dispatch = useDispatch();\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((action) => bindActionCreators(action, dispatch));\n      }\n      return bindActionCreators(actions, dispatch);\n    },\n    deps ? [dispatch, ...deps] : deps\n  );\n};\n\nexport default useActions;\n","export interface Member {\n  user_id: string;\n  user_name: string;\n  role: string;\n  invitation: string;\n  name: string;\n  email: string;\n  joined_at: string;\n}\n\nexport interface Project {\n  members: Member[];\n  name: string;\n  id: string;\n}\n\nexport interface UserDetails {\n  username: string;\n  projects: Project[];\n  name: string;\n  email: string;\n  id: string;\n  company_name: string;\n  updated_at: string;\n  created_at: string;\n  removed_at: string;\n  is_email_verified: string;\n  state: string;\n  role: string;\n}\n\nexport interface MyHubDetail {\n  id: string;\n  HubName: string;\n  RepoBranch: string;\n  RepoURL: string;\n}\n\nexport interface CurrentUserDetails {\n  getUser: UserDetails;\n}\n\nexport interface CurrentUserDedtailsVars {\n  username: string;\n}\n\nexport interface CreateUserData {\n  username: string;\n  email: string;\n  name: string;\n  userID: string;\n  role: string;\n}\n\nexport interface UpdateUser {\n  user: {\n    id: string;\n    name: string;\n    email: string;\n  };\n}\n\nexport interface SSHKey {\n  privateKey: string;\n  publicKey: string;\n}\n\nexport interface SSHKeys {\n  generaterSSHKey: SSHKey;\n}\n\nexport interface MyHubInput {\n  id?: string;\n  HubName: string;\n  RepoURL: string;\n  RepoBranch: string;\n  IsPrivate: Boolean;\n  AuthType: MyHubType;\n  Token?: string;\n  UserName?: string;\n  Password?: string;\n  SSHPrivateKey?: string;\n  SSHPublicKey?: string;\n}\n\nexport interface MyHubData {\n  id: string;\n  RepoURL: string;\n  RepoBranch: string;\n  ProjectID: string;\n  HubName: string;\n  CreatedAt: string;\n  UpdatedAt: string;\n}\n\nexport interface CreateMyHub {\n  MyHubDetails: MyHubInput;\n  projectID: string;\n}\n\nexport enum MyHubType {\n  basic = 'basic',\n  token = 'token',\n  ssh = 'ssh',\n  none = 'none',\n}\n\nexport interface Projects {\n  listProjects: Project[];\n}\n\nexport interface ProjectDetail {\n  getProject: Project;\n}\n\nexport interface ProjectDetailVars {\n  projectID: string;\n}\n\nexport enum Role {\n  viewer = 'Viewer',\n  editor = 'Editor',\n  owner = 'Owner',\n}\n\nexport enum UserRole {\n  admin = 'admin',\n  user = 'user',\n}\n\nexport enum InvitationStatus {\n  PENDING = 'Pending',\n  ACCEPTED = 'Accepted',\n}\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  center: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\ninterface CenterProps {\n  className?: string;\n}\n\nconst Center: React.FC<CenterProps> = ({ children, className }) => {\n  const classes = useStyles();\n  return <div className={`${classes.center} ${className}`}>{children}</div>;\n};\n\nexport default Center;\n","import { gql } from '@apollo/client';\n\nexport const WORKFLOW_DETAILS_WITH_EXEC_DATA = gql`\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\n      total_no_of_workflow_runs\n      workflow_runs {\n        workflow_id\n        workflow_name\n        workflow_run_id\n        cluster_name\n        last_updated\n        cluster_id\n        phase\n        execution_data\n        resiliency_score\n        isRemoved\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_DETAILS = gql`\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\n      total_no_of_workflow_runs\n      workflow_runs {\n        workflow_id\n        workflow_name\n        workflow_run_id\n        cluster_name\n        last_updated\n        phase\n        resiliency_score\n        experiments_passed\n        total_experiments\n        isRemoved\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_STATS = gql`\n  query getScheduledWorkflowStats(\n    $filter: TimeFrequency!\n    $project_id: ID!\n    $show_workflow_runs: Boolean!\n  ) {\n    getScheduledWorkflowStats(\n      filter: $filter\n      project_id: $project_id\n      show_workflow_runs: $show_workflow_runs\n    ) {\n      date\n      value\n    }\n  }\n`;\n\nexport const WORKFLOW_LIST_DETAILS = gql`\n  query workflowListDetails($workflowInput: ListWorkflowsInput!) {\n    ListWorkflow(workflowInput: $workflowInput) {\n      total_no_of_workflows\n      workflows {\n        workflow_id\n        workflow_manifest\n        cronSyntax\n        cluster_name\n        workflow_name\n        workflow_description\n        weightages {\n          experiment_name\n          weightage\n        }\n        isCustomWorkflow\n        updated_at\n        created_at\n        project_id\n        cluster_id\n        cluster_type\n        isRemoved\n        workflow_runs {\n          execution_data\n          workflow_run_id\n          last_updated\n        }\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_LIST_DETAILS_FOR_MANIFEST = gql`\n  query workflowListDetails($projectID: String!, $workflowIDs: [ID]) {\n    ListWorkflow(project_id: $projectID, workflow_ids: $workflowIDs) {\n      workflow_id\n      workflow_manifest\n      workflow_name\n    }\n  }\n`;\n\nexport const GET_USER = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      email\n      id\n      name\n      projects {\n        members {\n          user_id\n          user_name\n          role\n          invitation\n          name\n          email\n          joined_at\n        }\n        name\n        id\n      }\n      company_name\n      updated_at\n      created_at\n      removed_at\n      is_email_verified\n      state\n      role\n    }\n  }\n`;\n\nexport const GET_USER_INFO = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      email\n      id\n      name\n    }\n  }\n`;\n\nexport const GET_CLUSTER = gql`\n  query getClusters($project_id: String!, $cluster_type: String) {\n    getCluster(project_id: $project_id, cluster_type: $cluster_type) {\n      cluster_id\n      cluster_name\n      description\n      is_active\n      is_registered\n      is_cluster_confirmed\n      updated_at\n      created_at\n      cluster_type\n      no_of_schedules\n      no_of_workflows\n      token\n      last_workflow_timestamp\n      agent_namespace\n    }\n  }\n`;\n\nexport const GET_CLUSTER_LENGTH = gql`\n  query getClusters($project_id: String!) {\n    getCluster(project_id: $project_id) {\n      cluster_id\n    }\n  }\n`;\n\nexport const GET_CLUSTER_NAMES = gql`\n  query getClusters($project_id: String!) {\n    getCluster(project_id: $project_id) {\n      cluster_name\n    }\n  }\n`;\n\nexport const ALL_USERS = gql`\n  query allUsers {\n    users {\n      id\n      name\n      username\n      email\n    }\n  }\n`;\n\nexport const CORE_CHART_FIELDS = gql`\n  fragment CoreChartFields on Chart {\n    ApiVersion\n    Kind\n    Metadata {\n      Name\n      Version\n      Annotations {\n        Categories\n        Vendor\n        CreatedAt\n        Repository\n        Support\n        ChartDescription\n      }\n    }\n    Spec {\n      DisplayName\n      CategoryDescription\n      Keywords\n      Maturity\n      Experiments\n      Maintainers {\n        Name\n        Email\n      }\n      MinKubeVersion\n      Provider\n      Links {\n        Name\n        Url\n      }\n      ChaosExpCRDLink\n      Platforms\n      ChaosType\n    }\n    PackageInfo {\n      PackageName\n      Experiments {\n        Name\n        CSV\n        Desc\n      }\n    }\n  }\n`;\n\nexport const GET_CHARTS_DATA = gql`\n  ${CORE_CHART_FIELDS}\n  query getCharts($HubName: String!, $projectID: String!) {\n    getCharts(HubName: $HubName, projectID: $projectID) {\n      ...CoreChartFields\n    }\n  }\n`;\n\nexport const GET_EXPERIMENT_DATA = gql`\n  ${CORE_CHART_FIELDS}\n  query getExperiment($data: ExperimentInput!) {\n    getHubExperiment(experimentInput: $data) {\n      ...CoreChartFields\n    }\n  }\n`;\n\nexport const GET_HUB_STATUS = gql`\n  query getHubStatus($data: String!) {\n    getHubStatus(projectID: $data) {\n      id\n      HubName\n      RepoBranch\n      RepoURL\n      TotalExp\n      IsAvailable\n      AuthType\n      IsPrivate\n      Token\n      UserName\n      Password\n      SSHPrivateKey\n      SSHPublicKey\n      LastSyncedAt\n    }\n  }\n`;\n\nexport const GET_ENGINE_YAML = gql`\n  query getEngineData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n\nexport const GET_EXPERIMENT_YAML = gql`\n  query getExperimentData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n\nexport const GET_GITOPS_DATA = gql`\n  query gitOPsData($data: String!) {\n    getGitOpsDetails(project_id: $data) {\n      Enabled\n      ProjectID\n      Branch\n      RepoURL\n      AuthType\n      Token\n      UserName\n      Password\n      SSHPrivateKey\n    }\n  }\n`;\n\nexport const LIST_MANIFEST_TEMPLATE = gql`\n  query ListManifestTemplate($data: String!) {\n    ListManifestTemplate(project_id: $data) {\n      template_id\n      manifest\n      project_name\n      template_description\n      template_name\n      isCustomWorkflow\n    }\n  }\n`;\n\nexport const LIST_PROJECTS = gql`\n  query listProjects {\n    listProjects {\n      id\n      name\n      members {\n        user_name\n        user_id\n        role\n        invitation\n        joined_at\n      }\n      state\n      created_at\n      updated_at\n      removed_at\n    }\n  }\n`;\n\nexport const GET_PROJECT = gql`\n  query getProject($projectID: String!) {\n    getProject(projectID: $projectID) {\n      id\n      name\n      members {\n        user_id\n        user_name\n        role\n        invitation\n        joined_at\n      }\n      state\n      created_at\n      updated_at\n      removed_at\n    }\n  }\n`;\n\nexport const GET_PROJECT_NAME = gql`\n  query getProject($projectID: String!) {\n    getProject(projectID: $projectID) {\n      name\n    }\n  }\n`;\n\nexport const LIST_DATASOURCE = gql`\n  query listDataSource($projectID: String!) {\n    ListDataSource(project_id: $projectID) {\n      ds_id\n      ds_name\n      ds_type\n      ds_url\n      access_type\n      auth_type\n      basic_auth_username\n      basic_auth_password\n      scrape_interval\n      query_timeout\n      http_method\n      project_id\n      created_at\n      updated_at\n      health_status\n    }\n  }\n`;\n\nexport const LIST_DATASOURCE_OVERVIEW = gql`\n  query listDataSource($projectID: String!) {\n    ListDataSource(project_id: $projectID) {\n      ds_id\n    }\n  }\n`;\n\nexport const LIST_DASHBOARD = gql`\n  query listDashboard($projectID: String!) {\n    ListDashboard(project_id: $projectID) {\n      db_id\n      ds_id\n      db_name\n      cluster_name\n      ds_name\n      ds_type\n      db_type_id\n      db_type_name\n      db_information\n      chaos_event_query_template\n      chaos_verdict_query_template\n      application_metadata_map {\n        namespace\n        applications {\n          kind\n          names\n        }\n      }\n      panel_groups {\n        panels {\n          panel_id\n          created_at\n          prom_queries {\n            queryid\n            prom_query_name\n            legend\n            resolution\n            minstep\n            line\n            close_area\n          }\n          panel_options {\n            points\n            grids\n            left_axis\n          }\n          panel_name\n          y_axis_left\n          y_axis_right\n          x_axis_down\n          unit\n        }\n        panel_group_name\n        panel_group_id\n      }\n      end_time\n      start_time\n      refresh_rate\n      project_id\n      cluster_id\n      created_at\n      updated_at\n    }\n  }\n`;\n\nexport const LIST_DASHBOARD_OVERVIEW = gql`\n  query listDashboard($projectID: String!) {\n    ListDashboard(project_id: $projectID) {\n      db_id\n      db_name\n      db_type_id\n      db_type_name\n      cluster_name\n      cluster_id\n      updated_at\n      db_information\n      chaos_event_query_template\n      chaos_verdict_query_template\n      application_metadata_map {\n        namespace\n        applications {\n          kind\n          names\n        }\n      }\n      panel_groups {\n        panels {\n          panel_id\n          created_at\n          prom_queries {\n            queryid\n            prom_query_name\n            legend\n            resolution\n            minstep\n            line\n            close_area\n          }\n          panel_options {\n            points\n            grids\n            left_axis\n          }\n          panel_name\n          y_axis_left\n          y_axis_right\n          x_axis_down\n          unit\n        }\n        panel_group_name\n        panel_group_id\n      }\n    }\n  }\n`;\n\nexport const PROM_QUERY = gql`\n  query PrometheusQuery($prometheusInput: promInput) {\n    GetPromQuery(query: $prometheusInput) {\n      metricsResponse {\n        queryid\n        legends\n        tsvs {\n          date\n          value\n        }\n      }\n      annotationsResponse {\n        queryid\n        legends\n        tsvs {\n          date\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport const PROM_LABEL_VALUES = gql`\n  query PrometheusLabelValues($prometheusInput: promSeriesInput) {\n    GetPromLabelNamesAndValues(series: $prometheusInput) {\n      series\n      labelValues {\n        label\n        values {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const PROM_SERIES_LIST = gql`\n  query PrometheusSeriesList($prometheusDSInput: dsDetails) {\n    GetPromSeriesList(ds_details: $prometheusDSInput) {\n      seriesList\n    }\n  }\n`;\n\nexport const GET_TEMPLATE_BY_ID = gql`\n  query GetManifestTemplate($data: String!) {\n    GetTemplateManifestByID(template_id: $data) {\n      template_id\n      manifest\n    }\n  }\n`;\n\nexport const GET_PREDEFINED_WORKFLOW_LIST = gql`\n  query GetPredefinedWorkflowList($hubname: String!, $projectid: String!) {\n    GetPredefinedWorkflowList(HubName: $hubname, projectID: $projectid)\n  }\n`;\n\nexport const GET_PREDEFINED_EXPERIMENT_YAML = gql`\n  query GetPredefinedExperimentYAML($experimentInput: ExperimentInput!) {\n    GetPredefinedExperimentYAML(experimentInput: $experimentInput)\n  }\n`;\n\nexport const LIST_IMAGE_REGISTRY = gql`\n  query ListImageRegistry($data: String!) {\n    ListImageRegistry(project_id: $data) {\n      image_registry_info {\n        enable_registry\n      }\n      image_registry_id\n    }\n  }\n`;\n\nexport const GET_IMAGE_REGISTRY = gql`\n  query GetImageRegistry($registryid: String!, $projectid: String!) {\n    GetImageRegistry(image_registry_id: $registryid, project_id: $projectid) {\n      image_registry_info {\n        enable_registry\n        secret_name\n        secret_namespace\n        image_registry_name\n        image_repo_name\n        image_registry_type\n      }\n      image_registry_id\n    }\n  }\n`;\n\nexport const GET_GLOBAL_STATS = gql`\n  query getGlobalStats($query: UsageQuery!) {\n    UsageQuery(query: $query) {\n      TotalCount {\n        Workflows {\n          Runs\n          ExpRuns\n          Schedules\n        }\n        Agents {\n          Ns\n          Cluster\n          Total\n        }\n        Projects\n        Users\n      }\n    }\n  }\n`;\n\nexport const GLOBAL_PROJECT_DATA = gql`\n  query getStats($query: UsageQuery!) {\n    UsageQuery(query: $query) {\n      Projects {\n        Name\n        Workflows {\n          Schedules\n          ExpRuns\n          Runs\n        }\n        Agents {\n          Total\n          Ns\n          Cluster\n        }\n        Members {\n          Owner {\n            Name\n            Username\n          }\n          Total\n        }\n      }\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_WORKFLOW = gql`\n  mutation createChaosWorkFlow($ChaosWorkFlowInput: ChaosWorkFlowInput!) {\n    createChaosWorkFlow(input: $ChaosWorkFlowInput) {\n      workflow_id\n      cronSyntax\n      workflow_name\n      workflow_description\n      isCustomWorkflow\n    }\n  }\n`;\n\nexport const ADD_WORKFLOW_TEMPLATE = gql`\n  mutation addWorkflowTemplate($data: TemplateInput!) {\n    createManifestTemplate(templateInput: $data) {\n      template_name\n      template_id\n    }\n  }\n`;\n\nexport const DELETE_WORKFLOW_TEMPLATE = gql`\n  mutation deleteManifestTemplate($data: String!) {\n    deleteManifestTemplate(template_id: $data)\n  }\n`;\n\nexport const CREATE_USER = gql`\n  mutation CreateUser($user: CreateUserInput!) {\n    createUser(user: $user) {\n      username\n      created_at\n      updated_at\n      removed_at\n    }\n  }\n`;\n\nexport const CREATE_PROJECT = gql`\n  mutation createProject($projectName: String!) {\n    createProject(projectName: $projectName) {\n      members {\n        user_id\n        role\n        user_name\n        invitation\n        joined_at\n      }\n      name\n      id\n    }\n  }\n`;\n\nexport const UPDATE_PROJECT_NAME = gql`\n  mutation updateProjectName($projectID: String!, $projectName: String!) {\n    updateProjectName(projectID: $projectID, projectName: $projectName)\n  }\n`;\n\nexport const SEND_INVITE = gql`\n  mutation sendInvite($member: MemberInput!) {\n    sendInvitation(member: $member) {\n      user_id\n      user_name\n      role\n      invitation\n    }\n  }\n`;\n\nexport const REMOVE_INVITATION = gql`\n  mutation RemoveInvitation($data: MemberInput!) {\n    removeInvitation(member: $data)\n  }\n`;\n\nexport const ACCEPT_INVITE = gql`\n  mutation accept($member: MemberInput!) {\n    acceptInvitation(member: $member)\n  }\n`;\n\nexport const DECLINE_INVITE = gql`\n  mutation decline($member: MemberInput!) {\n    declineInvitation(member: $member)\n  }\n`;\n\nexport const UPDATE_SCHEDULE = gql`\n  mutation updateChaos($ChaosWorkFlowInput: ChaosWorkFlowInput!) {\n    updateChaosWorkflow(input: $ChaosWorkFlowInput) {\n      workflow_id\n      workflow_name\n      workflow_description\n      isCustomWorkflow\n      cronSyntax\n    }\n  }\n`;\n\nexport const UPDATE_DETAILS = gql`\n  mutation updateUser($user: UpdateUserInput!) {\n    updateUser(user: $user)\n  }\n`;\n\nexport const USER_CLUSTER_REG = gql`\n  mutation userCluster($ClusterInput: ClusterInput!) {\n    userClusterReg(clusterInput: $ClusterInput) {\n      token\n      cluster_id\n      cluster_name\n    }\n  }\n`;\n\nexport const ADD_MY_HUB = gql`\n  mutation addMyHub($MyHubDetails: CreateMyHub!, $projectID: String!) {\n    addMyHub(myhubInput: $MyHubDetails, projectID: $projectID) {\n      HubName\n      RepoURL\n      RepoBranch\n    }\n  }\n`;\n\nexport const SAVE_MY_HUB = gql`\n  mutation saveMyHub($MyHubDetails: CreateMyHub!, $projectID: String!) {\n    saveMyHub(myhubInput: $MyHubDetails, projectID: $projectID) {\n      HubName\n      RepoURL\n      RepoBranch\n    }\n  }\n`;\n\nexport const UPDATE_MY_HUB = gql`\n  mutation updateMyHub($MyHubDetails: UpdateMyHub!, $projectID: String!) {\n    updateMyHub(myhubInput: $MyHubDetails, projectID: $projectID) {\n      HubName\n      RepoURL\n      RepoBranch\n    }\n  }\n`;\n\nexport const SYNC_REPO = gql`\n  mutation syncHub($id: ID!) {\n    syncHub(id: $id) {\n      id\n      RepoURL\n      RepoBranch\n      IsAvailable\n      TotalExp\n      HubName\n    }\n  }\n`;\n\nexport const DELETE_HUB = gql`\n  mutation deleteMyHub($hub_id: String!) {\n    deleteMyHub(hub_id: $hub_id)\n  }\n`;\n\nexport const GENERATE_SSH = gql`\n  mutation generateSSHKey {\n    generaterSSHKey {\n      privateKey\n      publicKey\n    }\n  }\n`;\n\nexport const DELETE_CLUSTER = gql`\n  mutation deleteCluster($cluster_id: String!) {\n    deleteClusterReg(cluster_id: $cluster_id)\n  }\n`;\n\nexport const ENABLE_GITOPS = gql`\n  mutation enableGitOps($gitConfig: GitConfig!) {\n    enableGitOps(config: $gitConfig)\n  }\n`;\n\nexport const UPDATE_GITOPS = gql`\n  mutation updateGitOps($gitConfig: GitConfig!) {\n    updateGitOps(config: $gitConfig)\n  }\n`;\n\nexport const DISABLE_GITOPS = gql`\n  mutation disableGitOPs($data: String!) {\n    disableGitOps(project_id: $data)\n  }\n`;\n\nexport const RERUN_CHAOS_WORKFLOW = gql`\n  mutation rerunChaosWorkflow($data: String!) {\n    reRunChaosWorkFlow(workflowID: $data)\n  }\n`;\n\nexport const LEAVE_PROJECT = gql`\n  mutation LeaveProject($data: MemberInput!) {\n    leaveProject(member: $data)\n  }\n`;\n\nexport const CREATE_DATASOURCE = gql`\n  mutation createDataSource($DSInput: DSInput) {\n    createDataSource(datasource: $DSInput) {\n      ds_id\n      ds_name\n      ds_type\n      ds_url\n      access_type\n      auth_type\n      basic_auth_username\n      basic_auth_password\n      scrape_interval\n      query_timeout\n      http_method\n      project_id\n      health_status\n    }\n  }\n`;\n\nexport const UPDATE_DATASOURCE = gql`\n  mutation updateDataSource($DSInput: DSInput!) {\n    updateDataSource(datasource: $DSInput) {\n      ds_id\n      ds_name\n      ds_type\n      ds_url\n      access_type\n      auth_type\n      basic_auth_username\n      basic_auth_password\n      scrape_interval\n      query_timeout\n      http_method\n      project_id\n    }\n  }\n`;\n\nexport const DELETE_DATASOURCE = gql`\n  mutation deleteDataSource($deleteDSInput: deleteDSInput!) {\n    deleteDataSource(input: $deleteDSInput)\n  }\n`;\n\nexport const CREATE_DASHBOARD = gql`\n  mutation createDashBoard($createDBInput: createDBInput) {\n    createDashBoard(dashboard: $createDBInput) {\n      db_id\n    }\n  }\n`;\n\nexport const UPDATE_DASHBOARD = gql`\n  mutation updateDashboard($updateDBInput: updateDBInput) {\n    updateDashboard(dashboard: $updateDBInput)\n  }\n`;\n\nexport const DELETE_DASHBOARD = gql`\n  mutation deleteDashboard($dbID: String) {\n    deleteDashboard(db_id: $dbID)\n  }\n`;\n\nexport const UPDATE_PANEL = gql`\n  mutation updatePanel($panelInput: [panel]) {\n    updatePanel(panelInput: $panelInput)\n  }\n`;\n\nexport const ADD_IMAGE_REGISTRY = gql`\n  mutation createImageRegistry(\n    $projectID: String!\n    $imageRegistryInfo: imageRegistryInput!\n  ) {\n    createImageRegistry(\n      project_id: $projectID\n      imageRegistryInfo: $imageRegistryInfo\n    ) {\n      image_registry_info {\n        image_repo_name\n        image_registry_name\n        image_registry_type\n      }\n    }\n  }\n`;\n\nexport const UPDATE_IMAGE_REGISTRY = gql`\n  mutation updateImageRegistry(\n    $imageRegistryID: String!\n    $projectID: String!\n    $imageRegistryInfo: imageRegistryInput!\n  ) {\n    updateImageRegistry(\n      image_registry_id: $imageRegistryID\n      project_id: $projectID\n      imageRegistryInfo: $imageRegistryInfo\n    ) {\n      image_registry_info {\n        image_repo_name\n        image_registry_name\n        image_registry_type\n      }\n    }\n  }\n`;\n\nexport const SYNC_WORKFLOW = gql`\n  mutation syncWorkflow($workflowid: String!, $workflow_run_id: String!) {\n    syncWorkflow(workflowid: $workflowid, workflow_run_id: $workflow_run_id)\n  }\n`;\n\nexport const DELETE_WORKFLOW = gql`\n  mutation deleteWorkflow($workflowid: String!, $workflow_run_id: String!) {\n    deleteChaosWorkflow(\n      workflowid: $workflowid\n      workflow_run_id: $workflow_run_id\n    )\n  }\n`;\n","export interface TemplateData {\n  selectedTemplateID: number;\n  isDisable: boolean;\n}\n\nexport enum TemplateSelectionActions {\n  SELECT_TEMPLATE = 'SELECT_TEMPLATE',\n}\n\ninterface TemplateSelectionActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type TemplateSelectionAction = TemplateSelectionActionType<\n  typeof TemplateSelectionActions.SELECT_TEMPLATE,\n  TemplateData\n>;\n","import { ApplicationMetadata } from '../graphql/dashboardsDetails';\n\ninterface PanelGroupMetadata {\n  groupName: string;\n  panels: string[];\n}\n\ninterface PromQuery {\n  prom_query_name: string;\n  legend: string;\n  resolution: string;\n  minstep: string;\n  line: boolean;\n  close_area: boolean;\n}\n\ninterface Panel {\n  panel_name: string;\n  panel_options: {\n    points: boolean;\n    grids: boolean;\n    left_axis: boolean;\n  };\n  y_axis_left: string;\n  y_axis_right: string;\n  x_axis_down: string;\n  unit: string;\n  prom_queries: PromQuery[];\n}\n\ninterface PanelGroup {\n  panel_group_name: string;\n  panels: Panel[];\n}\n\nexport interface ApplicationDashboard {\n  dashboardID: string;\n  name: string;\n  information: string;\n  chaosEventQueryTemplate: string;\n  chaosVerdictQueryTemplate: string;\n  applicationMetadataMap: ApplicationMetadata[];\n  panelGroupMap: PanelGroupMetadata[];\n  panelGroups: PanelGroup[];\n}\n\nexport interface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface DashboardData {\n  dashboardJSON: any;\n  selectedDashboardID: string;\n  activePanelID: string;\n  refreshRate: number;\n  range: RangeType;\n  forceUpdate: Boolean;\n}\n\nexport enum DashboardSelectionActions {\n  SELECT_DASHBOARD = 'SELECT_DASHBOARD',\n}\n\ninterface DashboardSelectionActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type DashboardSelectionAction = DashboardSelectionActionType<\n  typeof DashboardSelectionActions.SELECT_DASHBOARD,\n  DashboardData\n>;\n","export interface DataSourceData {\n  selectedDataSourceID: string;\n  selectedDataSourceURL: string;\n  selectedDataSourceName: string;\n  selectedDataSourceTemplateID?: number;\n}\n\nexport enum DataSourceSelectionActions {\n  SELECT_DATASOURCE = 'SELECT_DATASOURCE',\n}\n\ninterface DataSourceSelectionActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type DataSourceSelectionAction = DataSourceSelectionActionType<\n  typeof DataSourceSelectionActions.SELECT_DATASOURCE,\n  DataSourceData\n>;\n","import { Node } from '../graphql/workflowData';\n\nexport interface SelectedNode extends Node {\n  pod_name: string;\n}\n\nexport enum NodeSelectionActions {\n  SELECT_NODE = 'SELECT_NODE',\n}\n\ninterface NodeSelectionActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type NodeSelectionAction = NodeSelectionActionType<\n  typeof NodeSelectionActions.SELECT_NODE,\n  SelectedNode\n>;\n","export interface AlertData {\n  isAlertOpen: boolean;\n}\n\nexport enum AlertActions {\n  SET_ALERT_STATE = 'SET_ALERT_STATE',\n}\n\ninterface AlertActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type AlertAction = AlertActionType<\n  typeof AlertActions.SET_ALERT_STATE,\n  AlertData\n>;\n","export interface ImageRegistryInfo {\n  image_registry_name: string;\n  image_repo_name: string;\n  image_registry_type: string;\n  secret_name: string;\n  secret_namespace: string;\n  enable_registry: boolean;\n}\n\nexport enum ImageRegistryActions {\n  SELECT_IMAGE_REGISTRY = 'SELECT_IMAGE_REGISTRY',\n}\n\ninterface ImageRegistryActionType<T, P> {\n  type: T;\n  payload: P;\n}\n\nexport type ImageRegistryAction = ImageRegistryActionType<\n  typeof ImageRegistryActions.SELECT_IMAGE_REGISTRY,\n  ImageRegistryInfo\n>;\n","/* eslint-disable import/prefer-default-export */\nimport config from '../../config';\nimport { AnalyticsActions } from '../../models/redux/analytics';\n\nexport const loadCommunityAnalytics = () => (dispatch: Function) => {\n  dispatch({\n    type: AnalyticsActions.COMMUNITY_ANALYTICS_LOADING,\n    payload: true,\n  });\n  fetch(`${config.analytics.url}`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      dispatch({\n        type: AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS,\n        payload: data,\n      });\n    })\n    .catch(() => {\n      dispatch({\n        type: AnalyticsActions.COMMUNITY_ANALYTICS_ERROR,\n        payload: true,\n      });\n    });\n};\n","import { useQuery } from '@apollo/client';\nimport { LitmusThemeProvider } from 'litmus-ui';\nimport React, { lazy, Suspense, useEffect, useState } from 'react';\nimport { Redirect, Route, Router, Switch } from 'react-router-dom';\nimport Loader from '../../components/Loader';\nimport { GET_PROJECT, LIST_PROJECTS } from '../../graphql';\nimport {\n  Member,\n  ProjectDetail,\n  Projects,\n  UserRole,\n} from '../../models/graphql/user';\nimport useActions from '../../redux/actions';\nimport * as AnalyticsActions from '../../redux/actions/analytics';\nimport { history } from '../../redux/configureStore';\nimport { getToken, getUserId, getUserRole } from '../../utils/auth';\nimport { getProjectID, getProjectRole } from '../../utils/getSearchParams';\n\nconst ErrorPage = lazy(() => import('../../pages/ErrorPage'));\nconst Workflows = lazy(() => import('../../pages/Workflows'));\nconst CreateWorkflow = lazy(() => import('../../pages/CreateWorkflow'));\nconst LoginPage = lazy(() => import('../../pages/LoginPage'));\nconst GetStarted = lazy(() => import('../../pages/GetStartedPage'));\nconst WorkflowDetails = lazy(() => import('../../pages/WorkflowDetails'));\nconst HomePage = lazy(() => import('../../pages/HomePage'));\nconst Community = lazy(() => import('../../pages/Community'));\nconst Settings = lazy(() => import('../../pages/Settings'));\nconst Usage = lazy(() => import('../../pages/Usage'));\nconst Targets = lazy(() => import('../../pages/Targets'));\nconst EditSchedule = lazy(() => import('../../pages/EditSchedule'));\nconst SetNewSchedule = lazy(() => import('../../pages/EditSchedule/Schedule'));\nconst ConnectTargets = lazy(() => import('../../pages/ConnectTarget'));\nconst AnalyticsPage = lazy(() => import('../../pages/WorkflowAnalytics'));\nconst AnalyticsDashboard = lazy(() => import('../../pages/AnalyticsPage'));\nconst DataSourceConfigurePage = lazy(\n  () => import('../../pages/ConfigureDataSources')\n);\nconst ChooseAndConfigureDashboards = lazy(\n  () => import('../../pages/ChooseAndConfigureDashboards')\n);\nconst DashboardPage = lazy(() => import('../../pages/ApplicationDashboard'));\nconst MyHub = lazy(() => import('../../pages/ChaosHub'));\nconst ChaosChart = lazy(() => import('../../views/MyHub/MyHubCharts'));\nconst MyHubExperiment = lazy(() => import('../../views/MyHub/MyHubExperiment'));\n\nconst Routes: React.FC = () => {\n  const baseRoute = window.location.pathname.split('/')[1];\n  const projectIDFromURL = getProjectID();\n  const projectRoleFromURL = getProjectRole();\n  const role = getUserRole();\n  const [projectID, setprojectID] = useState<string>(projectIDFromURL);\n  const [projectRole, setprojectRole] = useState<string>(projectRoleFromURL);\n  const [isProjectMember, setIsProjectMember] = useState<boolean>(false);\n  const userID = getUserId();\n\n  const { loading } = useQuery<Projects>(LIST_PROJECTS, {\n    skip: projectID !== '' && projectID !== undefined,\n    onCompleted: (data) => {\n      if (data.listProjects) {\n        data.listProjects.forEach((project): void => {\n          project.members.forEach((member: Member): void => {\n            if (member.user_id === userID && member.role === 'Owner') {\n              setprojectID(project.id);\n              setprojectRole(member.role);\n              history.push({\n                pathname: `/${baseRoute}`,\n                search: `?projectID=${project.id}&projectRole=${member.role}`,\n              });\n            }\n          });\n        });\n      }\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  history.listen((location) => {\n    if (location.pathname !== '/login') {\n      setprojectID(getProjectID());\n      setprojectRole(getProjectRole());\n    }\n  });\n\n  const { loading: projectValidation } = useQuery<ProjectDetail>(GET_PROJECT, {\n    variables: { projectID },\n    onCompleted: (data) => {\n      if (data?.getProject) {\n        data.getProject.members.forEach((member: Member) => {\n          if (member.user_id === userID) {\n            setIsProjectMember(true);\n            setprojectID(data.getProject.id);\n            setprojectRole(member.role);\n          }\n        });\n        if (!isProjectMember) {\n          setprojectID('');\n          setprojectRole('');\n        }\n      }\n    },\n    onError: () => {\n      if (!isProjectMember) {\n        setprojectID('');\n        setprojectRole('');\n      }\n    },\n  });\n\n  if (getToken() === '') {\n    return (\n      <>\n        {loading ? (\n          <Loader />\n        ) : (\n          <Switch>\n            <Route exact path=\"/login\" component={LoginPage} />\n            <Redirect exact path=\"/api-doc\" to=\"/api-doc/index.html\" />\n            <Redirect to=\"/login\" />\n          </Switch>\n        )}\n      </>\n    );\n  }\n\n  if (!projectID) {\n    return (\n      <>\n        {loading ? (\n          <Loader />\n        ) : (\n          <Switch>\n            <Route exact path=\"/getStarted\" component={GetStarted} />\n            <Redirect exact path=\"/api-doc\" to=\"/api-doc/index.html\" />\n          </Switch>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {projectValidation && loading ? (\n        <Loader />\n      ) : (\n        <Switch>\n          <Route exact path=\"/home\" component={HomePage} />\n          <Redirect exact path=\"/\" to=\"/home\" />\n          <Route exact path=\"/workflows\" component={Workflows} />\n          <Route exact path=\"/analytics\" component={AnalyticsDashboard} />\n          <Route\n            exact\n            path=\"/analytics/datasource/create\"\n            component={() => <DataSourceConfigurePage configure={false} />}\n          />\n          <Route\n            exact\n            path=\"/analytics/datasource/configure\"\n            component={() => <DataSourceConfigurePage configure />}\n          />\n          <Route\n            exact\n            path=\"/analytics/dashboard/create\"\n            component={() => <ChooseAndConfigureDashboards configure={false} />}\n          />\n          <Route\n            exact\n            path=\"/analytics/dashboard/configure\"\n            component={() => <ChooseAndConfigureDashboards configure />}\n          />\n          <Route\n            exact\n            path=\"/analytics/application-dashboard\"\n            component={() => <DashboardPage />}\n          />\n          <Route exact path=\"/create-workflow\" component={CreateWorkflow} />\n          <Route\n            exact\n            path=\"/workflows/:workflowRunId\"\n            component={WorkflowDetails}\n          />\n          <Route\n            exact\n            path=\"/workflows/schedule/:scheduleProjectID/:workflowName\"\n            component={EditSchedule}\n          />\n          <Route\n            exact\n            path=\"/workflows/schedule/:scheduleProjectID/:workflowName/set\"\n            component={SetNewSchedule}\n          />\n          <Route\n            exact\n            path=\"/workflows/analytics/:workflowRunId\"\n            component={AnalyticsPage}\n          />\n          <Route exact path=\"/community\" component={Community} />\n          <Route exact path=\"/targets\" component={Targets} />\n          <Route exact path=\"/target-connect\" component={ConnectTargets} />\n          <Route exact path=\"/myhub\" component={MyHub} />\n          <Route exact path=\"/myhub/:hubname\" component={ChaosChart} />\n          <Route\n            exact\n            path=\"/myhub/:hubname/:chart/:experiment\"\n            component={MyHubExperiment}\n          />\n          {projectRole === 'Owner' ? (\n            <Route path=\"/settings\" component={Settings} />\n          ) : (\n            <Redirect\n              to={{\n                pathname: '/home',\n                search: `?projectID=${projectID}&projectRole=${projectRole}`,\n              }}\n            />\n          )}\n          {role === UserRole.admin ? (\n            <Route path=\"/usage\" component={Usage} />\n          ) : (\n            <Redirect\n              to={{\n                pathname: '/home',\n                search: `?projectID=${projectID}&projectRole=${projectRole}`,\n              }}\n            />\n          )}\n          <Route exact path=\"/404\" component={ErrorPage} />\n          {/* Redirects */}\n          <Redirect exact path=\"/getStarted\" to=\"/home\" />\n          <Redirect exact path=\"/workflows/schedule\" to=\"/workflows\" />\n          <Redirect exact path=\"/workflows/template\" to=\"/workflows\" />\n          <Redirect exact path=\"/analytics/overview\" to=\"/analytics\" />\n          <Redirect exact path=\"/analytics/litmusdashboard\" to=\"/analytics\" />\n          <Redirect\n            exact\n            path=\"/analytics/kubernetesdashborad\"\n            to=\"/analytics\"\n          />\n          <Redirect exact path=\"/analytics/datasource\" to=\"/analytics\" />\n          <Redirect exact path=\"/api-doc\" to=\"/api-doc/index.html\" />\n          <Redirect to=\"/404\" />\n        </Switch>\n      )}\n    </>\n  );\n};\n\nfunction App() {\n  const analyticsAction = useActions(AnalyticsActions);\n  const token = getToken();\n  useEffect(() => {\n    if (token !== '') {\n      analyticsAction.loadCommunityAnalytics();\n    }\n  }, [token]);\n  return (\n    <LitmusThemeProvider>\n      <Suspense\n        fallback={\n          <div style={{ height: '100vh' }}>\n            <Loader />\n          </div>\n        }\n      >\n        <Router history={history}>\n          {/* <Routes /> */}\n          <Routes />\n        </Router>\n      </Suspense>\n    </LitmusThemeProvider>\n  );\n}\n\nexport default App;\n","import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { getToken } from './auth';\n\nfunction createApolloClient(httpLinkUri: string, wsLinkUri: string) {\n  const httpLink = new HttpLink({\n    uri: httpLinkUri,\n  });\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token,\n      },\n    };\n  });\n\n  const wsLink = new WebSocketLink({\n    uri: wsLinkUri,\n    options: {\n      reconnect: true,\n      lazy: true,\n    },\n  });\n\n  const link = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    authLink.concat(wsLink),\n    authLink.concat(httpLink)\n  );\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache(),\n  });\n\n  return client;\n}\n\nexport default createApolloClient;\n","import { ApolloProvider } from '@apollo/client';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport config from './config';\nimport App from './containers/app/App';\nimport configureStore from './redux/configureStore';\nimport createApolloClient from './utils/createApolloClient';\n\nconst { persistor, store } = configureStore();\n\nconst client = createApolloClient(\n  `${config.grahqlEndpoint}/query`,\n  `${config.grahqlEndpointSubscription}/query`\n);\n\nconst ReduxRoot = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <PersistGate persistor={persistor}>\n          <App />\n        </PersistGate>\n      </Provider>\n    </ApolloProvider>\n  );\n};\n\nexport default ReduxRoot;\n","import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport yaml from 'js-yaml';\n\ni18n\n  // load translation using http -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    backend: {\n      loadPath: '/locales/{{lng}}/{{ns}}.yaml',\n      parse(data) {\n        return yaml.load(data);\n      },\n    },\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport ReduxRoot from './ReduxRoot';\nimport './i18n';\n\nconst rootEl = document.getElementById('root');\nReactDOM.render(<ReduxRoot />, rootEl);\n\n// comment in for PWA with service worker in production mode\n// registerServiceWorker();\n"],"sourceRoot":""}