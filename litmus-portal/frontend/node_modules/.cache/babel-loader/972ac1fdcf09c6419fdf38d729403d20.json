{"ast":null,"code":"import jwtDecode from 'jsonwebtoken';\nvar SECOND = 1000;\nvar MINUTE = SECOND * 60;\nvar HOUR = MINUTE * 60;\n// Sets cookie in browser\nexport var setCookie = function setCookie(_ref) {\n  var name = _ref.name,\n      value = _ref.value,\n      exhours = _ref.exhours,\n      path = _ref.path;\n  var now = new Date();\n  now.setTime(now.getTime() + exhours * HOUR);\n  var expires = \"expires=\".concat(now.toUTCString());\n  document.cookie = \"\".concat(name, \"=\").concat(value, \";\").concat(expires, \";path=\").concat(path !== null && path !== void 0 ? path : '/');\n}; // Gets cookie in browser\n\nexport function getCookie(cname) {\n  var name = \"\".concat(cname, \"=\");\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n\n  return '';\n}\n// Sets the JWT token to cookie\nexport var setJWTToken = function setJWTToken(_ref2) {\n  var token = _ref2.token,\n      cookieName = _ref2.cookieName,\n      path = _ref2.path,\n      errorMessage = _ref2.errorMessage;\n\n  try {\n    if (token === undefined || token === null) {\n      throw new Error('Token is undefined or null!');\n    }\n\n    var data = jwtDecode.decode(token);\n    var expirationTime = (data.exp - data.iat) / 3600;\n    setCookie({\n      name: cookieName,\n      value: token,\n      exhours: expirationTime,\n      path: path\n    });\n  } catch (err) {\n    console.error(errorMessage !== null && errorMessage !== void 0 ? errorMessage : 'ERROR IN SETTING COOKIE: ', err);\n  }\n}; // Gets the JWT token from cookie\n\nexport function getJWTToken(cookieName) {\n  var jwtToken = getCookie(cookieName);\n  if (jwtToken) return jwtToken;\n  return '';\n}","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/cookies.ts"],"names":["jwtDecode","SECOND","MINUTE","HOUR","setCookie","name","value","exhours","path","now","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","cname","decodedCookie","decodeURIComponent","ca","split","i","length","c","charAt","substring","indexOf","setJWTToken","token","cookieName","errorMessage","undefined","Error","data","decode","expirationTime","exp","iat","err","console","error","getJWTToken","jwtToken"],"mappings":"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","sourcesContent":["import jwtDecode from 'jsonwebtoken';\n\nconst SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\n\ninterface SetCookieProps {\n  name: string;\n  value: string;\n  exhours: number;\n  path?: string;\n}\ninterface SetCookie {\n  (props: SetCookieProps): void;\n}\n\n// Sets cookie in browser\nexport const setCookie: SetCookie = ({ name, value, exhours, path }) => {\n  const now = new Date();\n  now.setTime(now.getTime() + exhours * HOUR);\n\n  const expires = `expires=${now.toUTCString()}`;\n\n  document.cookie = `${name}=${value};${expires};path=${path ?? '/'}`;\n};\n\n// Gets cookie in browser\nexport function getCookie(cname: string): string {\n  const name = `${cname}=`;\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return '';\n}\n\ninterface SetJWTTokenProps {\n  token: string;\n  cookieName: string;\n  path?: string;\n  errorMessage?: string;\n}\ninterface SetJWTToken {\n  (props: SetJWTTokenProps): void;\n}\n\n// Sets the JWT token to cookie\nexport const setJWTToken: SetJWTToken = ({\n  token,\n  cookieName,\n  path,\n  errorMessage,\n}) => {\n  try {\n    if (token === undefined || token === null) {\n      throw new Error('Token is undefined or null!');\n    }\n    const data: any = jwtDecode.decode(token);\n    const expirationTime = (data.exp - data.iat) / 3600;\n    setCookie({\n      name: cookieName,\n      value: token,\n      exhours: expirationTime,\n      path,\n    });\n  } catch (err) {\n    console.error(errorMessage ?? 'ERROR IN SETTING COOKIE: ', err);\n  }\n};\n\n// Gets the JWT token from cookie\nexport function getJWTToken(cookieName: string): string {\n  const jwtToken = getCookie(cookieName);\n\n  if (jwtToken) return jwtToken;\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}