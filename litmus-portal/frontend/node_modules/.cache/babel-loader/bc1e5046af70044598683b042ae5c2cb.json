{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ConfigureDashboardMetadata/Form/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useQuery, useSubscription } from '@apollo/client';\nimport { FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport { AutocompleteChipInput, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { GET_CLUSTER, KUBE_OBJ } from '../../../../../../graphql';\nimport useActions from '../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../redux/actions/dashboards';\nimport { getProjectID } from '../../../../../../utils/getSearchParams';\nimport { validateTextEmpty } from '../../../../../../utils/validate';\nimport gvrList from './data';\nimport useStyles from './styles';\n\nvar DashboardMetadataForm = function DashboardMetadataForm(_ref) {\n  var _dashboardVars$id, _dashboardVars$name, _dashboardVars$dashbo, _dashboardVars$dashbo2, _dashboardVars$dataSo, _dashboardVars$dataSo2, _dashboardVars$dataSo3, _dashboardVars$chaosE, _dashboardVars$chaosV, _dashboardVars$agentI, _dashboardVars$inform, _dashboardVars$panelG, _dashboardVars$panelG2, _dashboardVars$applic, _dashboardDetails$age, _dashboardDetails$nam, _agentList$getCluster2, _dashboardDetails$das, _dashboardDetails$das2, _availableApplication;\n\n  var dashboardVars = _ref.dashboardVars,\n      dataSourceList = _ref.dataSourceList,\n      configure = _ref.configure,\n      CallbackToSetVars = _ref.CallbackToSetVars,\n      setDisabledNext = _ref.setDisabledNext;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n  var dashboard = useActions(DashboardActions);\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      update = _useState2[0],\n      setUpdate = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      availableApplicationMetadataMap = _useState4[0],\n      setAvailableApplicationMetadataMap = _useState4[1];\n\n  var _useState5 = useState({\n    group: '',\n    version: 'v1',\n    resource: 'pods'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      kubeObjInput = _useState6[0],\n      setKubeObjInput = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedNamespaceList = _useState8[0],\n      setSelectedNamespaceList = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      activeAgents = _useState10[0],\n      setActiveAgents = _useState10[1];\n\n  var getSelectedApps = function getSelectedApps(dashboardJSON) {\n    var _dashboardJSON$applic;\n\n    dashboard.selectDashboard({\n      selectedDashboardID: ''\n    });\n    var selectedApps = [];\n    (_dashboardJSON$applic = dashboardJSON.applicationMetadataMap) === null || _dashboardJSON$applic === void 0 ? void 0 : _dashboardJSON$applic.forEach(function (applicationMetadata) {\n      var namespaceApps = availableApplicationMetadataMap.filter(function (appMeta) {\n        return appMeta.namespace === applicationMetadata.namespace;\n      })[0];\n      applicationMetadata.applications.forEach(function (app) {\n        var kindApps = namespaceApps.applications.filter(function (appKind) {\n          return appKind.kind === app.kind;\n        })[0];\n        var availableApps = app.names.filter(function (name) {\n          return kindApps.names.includes(name);\n        });\n\n        if (availableApps.length) {\n          var nsIndex = -1;\n          selectedApps.forEach(function (existingApp, index) {\n            if (existingApp.namespace === applicationMetadata.namespace) {\n              nsIndex = index;\n            }\n          });\n\n          if (nsIndex !== -1) {\n            selectedApps[nsIndex].applications.push({\n              kind: app.kind,\n              names: availableApps\n            });\n          } else {\n            selectedApps.push({\n              namespace: applicationMetadata.namespace,\n              applications: [{\n                kind: app.kind,\n                names: availableApps\n              }]\n            });\n          }\n        }\n      });\n    });\n    return selectedApps;\n  };\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      activeDataSources = _useState12[0],\n      setActiveDataSources = _useState12[1];\n\n  var _useState13 = useState({\n    id: !configure ? '' : (_dashboardVars$id = dashboardVars.id) !== null && _dashboardVars$id !== void 0 ? _dashboardVars$id : '',\n    name: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.name : 'custom' : (_dashboardVars$name = dashboardVars.name) !== null && _dashboardVars$name !== void 0 ? _dashboardVars$name : '',\n    dashboardTypeID: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.dashboardID : 'custom' : (_dashboardVars$dashbo = dashboardVars.dashboardTypeID) !== null && _dashboardVars$dashbo !== void 0 ? _dashboardVars$dashbo : '',\n    dashboardTypeName: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.name : 'Custom' : (_dashboardVars$dashbo2 = dashboardVars.dashboardTypeName) !== null && _dashboardVars$dashbo2 !== void 0 ? _dashboardVars$dashbo2 : '',\n    dataSourceType: !configure ? 'Prometheus' : (_dashboardVars$dataSo = dashboardVars.dataSourceType) !== null && _dashboardVars$dataSo !== void 0 ? _dashboardVars$dataSo : '',\n    dataSourceID: (_dashboardVars$dataSo2 = dashboardVars.dataSourceID) !== null && _dashboardVars$dataSo2 !== void 0 ? _dashboardVars$dataSo2 : '',\n    dataSourceURL: (_dashboardVars$dataSo3 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo3 !== void 0 ? _dashboardVars$dataSo3 : '',\n    chaosEventQueryTemplate: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.chaosEventQueryTemplate : 'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}' : (_dashboardVars$chaosE = dashboardVars.chaosEventQueryTemplate) !== null && _dashboardVars$chaosE !== void 0 ? _dashboardVars$chaosE : '',\n    chaosVerdictQueryTemplate: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.chaosVerdictQueryTemplate : 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}' : (_dashboardVars$chaosV = dashboardVars.chaosVerdictQueryTemplate) !== null && _dashboardVars$chaosV !== void 0 ? _dashboardVars$chaosV : '',\n    agentID: (_dashboardVars$agentI = dashboardVars.agentID) !== null && _dashboardVars$agentI !== void 0 ? _dashboardVars$agentI : '',\n    information: !configure ? selectedDashboard.dashboardJSON ? selectedDashboard.dashboardJSON.information : 'Customized dashboard' : (_dashboardVars$inform = dashboardVars.information) !== null && _dashboardVars$inform !== void 0 ? _dashboardVars$inform : '',\n    panelGroupMap: (_dashboardVars$panelG = dashboardVars.panelGroupMap) !== null && _dashboardVars$panelG !== void 0 ? _dashboardVars$panelG : [],\n    panelGroups: (_dashboardVars$panelG2 = dashboardVars.panelGroups) !== null && _dashboardVars$panelG2 !== void 0 ? _dashboardVars$panelG2 : [],\n    applicationMetadataMap: !configure && selectedDashboard.selectedDashboardID === 'upload' ? getSelectedApps(selectedDashboard.dashboardJSON) : (_dashboardVars$applic = dashboardVars.applicationMetadataMap) !== null && _dashboardVars$applic !== void 0 ? _dashboardVars$applic : []\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      dashboardDetails = _useState14[0],\n      setDashboardDetails = _useState14[1]; // Apollo query to get the agent data\n\n\n  var _useQuery = useQuery(GET_CLUSTER, {\n    variables: {\n      project_id: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      agentList = _useQuery.data,\n      loading = _useQuery.loading;\n  /**\n   * GraphQL subscription to fetch the KubeObjData from the server\n   */\n\n\n  var _useSubscription = useSubscription(KUBE_OBJ, {\n    variables: {\n      data: {\n        cluster_id: (_dashboardDetails$age = dashboardDetails.agentID) !== null && _dashboardDetails$age !== void 0 ? _dashboardDetails$age : '',\n        object_type: 'kubeobject',\n        kube_obj_request: {\n          group: kubeObjInput.group,\n          version: kubeObjInput.version,\n          resource: kubeObjInput.resource\n        }\n      }\n    },\n    onSubscriptionComplete: function onSubscriptionComplete() {\n      var newAvailableApplicationMetadataMap = [];\n\n      try {\n        var _kubeObjectData$getKu;\n\n        var kubeData = JSON.parse((_kubeObjectData$getKu = kubeObjectData === null || kubeObjectData === void 0 ? void 0 : kubeObjectData.getKubeObject.kube_obj) !== null && _kubeObjectData$getKu !== void 0 ? _kubeObjectData$getKu : '');\n        kubeData.forEach(function (obj) {\n          var newAvailableApplicationMetadata = {\n            namespace: obj.namespace,\n            applications: [{\n              kind: kubeObjInput.resource,\n              names: []\n            }]\n          };\n\n          if (obj.data != null) {\n            obj.data.forEach(function (objData) {\n              if (objData.name != null) {\n                newAvailableApplicationMetadata.applications[0].names.push(objData.name);\n              }\n            });\n          }\n\n          newAvailableApplicationMetadataMap.push(newAvailableApplicationMetadata);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n\n      setAvailableApplicationMetadataMap(newAvailableApplicationMetadataMap);\n    },\n    fetchPolicy: 'network-only'\n  }),\n      kubeObjectData = _useSubscription.data;\n\n  var nameChangeHandler = function nameChangeHandler(event) {\n    setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n      name: event.target.value\n    }));\n    setUpdate(true);\n  };\n\n  var getSelectedDsURL = function getSelectedDsURL(selectedDsID) {\n    var selectedDsURL = '';\n    dataSourceList.forEach(function (ds) {\n      if (ds.ds_id === selectedDsID) {\n        selectedDsURL = ds.ds_url;\n      }\n    });\n    return selectedDsURL;\n  };\n\n  useEffect(function () {\n    var _dashboardDetails$pan, _dashboardDetails$pan2;\n\n    if (dashboardDetails.name === '' || dashboardDetails.dashboardTypeID === '' || dashboardDetails.dashboardTypeName === '' || dashboardDetails.dataSourceType === '' || dashboardDetails.dataSourceID === '' || dashboardDetails.dataSourceURL === '' || dashboardDetails.chaosEventQueryTemplate === '' || dashboardDetails.chaosVerdictQueryTemplate === '' || dashboardDetails.agentID === '' || dashboardDetails.information === '') {\n      setDisabledNext(true);\n    } else if (configure === true && (dashboardDetails.id === '' || ((_dashboardDetails$pan = dashboardDetails.panelGroupMap) === null || _dashboardDetails$pan === void 0 ? void 0 : _dashboardDetails$pan.length) === 0 || ((_dashboardDetails$pan2 = dashboardDetails.panelGroups) === null || _dashboardDetails$pan2 === void 0 ? void 0 : _dashboardDetails$pan2.length) === 0)) {\n      setDisabledNext(true);\n    } else {\n      setDisabledNext(false);\n    }\n\n    if (update === true) {\n      CallbackToSetVars(dashboardDetails);\n      setUpdate(false);\n    }\n  }, [update]);\n  useEffect(function () {\n    var _agentList$getCluster;\n\n    var availableAgents = ((_agentList$getCluster = agentList === null || agentList === void 0 ? void 0 : agentList.getCluster) !== null && _agentList$getCluster !== void 0 ? _agentList$getCluster : []).filter(function (cluster) {\n      return cluster.is_active && cluster.is_cluster_confirmed && cluster.is_registered;\n    });\n    setActiveAgents(availableAgents);\n\n    if (dashboardDetails.agentID === '' && !configure) {\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        agentID: availableAgents.length ? availableAgents[0].cluster_id : ''\n      }));\n      setUpdate(true);\n    }\n  }, [agentList]);\n  useEffect(function () {\n    var availableDataSources = dataSourceList.filter(function (dataSource) {\n      return dataSource.health_status === 'Active';\n    });\n    setActiveDataSources(availableDataSources);\n\n    if (dashboardDetails.dataSourceID === '' && !configure) {\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        dataSourceID: availableDataSources.length ? availableDataSources[0].ds_id : '',\n        dataSourceURL: availableDataSources.length ? availableDataSources[0].ds_url : ''\n      }));\n      setUpdate(true);\n    }\n  }, [dataSourceList]);\n  useEffect(function () {\n    if (!configure && selectedDashboard.selectedDashboardID === 'upload') {\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        applicationMetadataMap: getSelectedApps(selectedDashboard.dashboardJSON)\n      }));\n    }\n  }, [availableApplicationMetadataMap]);\n\n  var getAvailableApplications = function getAvailableApplications() {\n    var availableApplications = [];\n    availableApplicationMetadataMap.forEach(function (appMetadata) {\n      if (selectedNamespaceList.length) {\n        selectedNamespaceList.forEach(function (namespaceOption) {\n          if (namespaceOption.name === appMetadata.namespace) {\n            var apps = appMetadata.applications.filter(function (application) {\n              return application.kind === kubeObjInput.resource;\n            });\n\n            if (apps.length) {\n              apps[0].names.forEach(function (appName) {\n                availableApplications.push({\n                  name: \"\".concat(namespaceOption.name, \" / \").concat(kubeObjInput.resource.substring(0, kubeObjInput.resource.length - 1), \" / \").concat(appName)\n                });\n              });\n            }\n          }\n        });\n      }\n    });\n    return availableApplications;\n  };\n\n  var getSelectedAppDetails = function getSelectedAppDetails() {\n    var _dashboardDetails$app;\n\n    var options = [];\n    (_dashboardDetails$app = dashboardDetails.applicationMetadataMap) === null || _dashboardDetails$app === void 0 ? void 0 : _dashboardDetails$app.forEach(function (app) {\n      app.applications.forEach(function (resources) {\n        resources.names.forEach(function (name) {\n          options.push({\n            name: \"\".concat(app.namespace, \" / \").concat(resources.kind, \" / \").concat(name)\n          });\n        });\n      });\n    });\n    return options;\n  };\n\n  var getSelectedAppNamespaces = function getSelectedAppNamespaces() {\n    var _dashboardDetails$app2;\n\n    var options = [];\n    (_dashboardDetails$app2 = dashboardDetails.applicationMetadataMap) === null || _dashboardDetails$app2 === void 0 ? void 0 : _dashboardDetails$app2.forEach(function (app) {\n      options.push({\n        name: app.namespace\n      });\n    });\n    return options;\n  };\n\n  useEffect(function () {\n    if (configure) {\n      var _dashboardDetails$pan3, _dashboardDetails$pan4;\n\n      setDashboardDetails(_objectSpread({}, dashboardVars));\n\n      if (dashboardDetails.name === '' || dashboardDetails.dashboardTypeID === '' || dashboardDetails.dashboardTypeName === '' || dashboardDetails.dataSourceType === '' || dashboardDetails.dataSourceID === '' || dashboardDetails.dataSourceURL === '' || dashboardDetails.chaosEventQueryTemplate === '' || dashboardDetails.chaosVerdictQueryTemplate === '' || dashboardDetails.agentID === '' || dashboardDetails.information === '' || ((_dashboardDetails$pan3 = dashboardDetails.panelGroupMap) === null || _dashboardDetails$pan3 === void 0 ? void 0 : _dashboardDetails$pan3.length) === 0 || ((_dashboardDetails$pan4 = dashboardDetails.panelGroups) === null || _dashboardDetails$pan4 === void 0 ? void 0 : _dashboardDetails$pan4.length) === 0) {\n        setDisabledNext(true);\n      } else {\n        setDisabledNext(false);\n      }\n    }\n  }, [dashboardVars]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexDisplay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.name'),\n    \"data-cy\": \"inputDashboardName\",\n    width: \"20rem\",\n    variant: validateTextEmpty((_dashboardDetails$nam = dashboardDetails.name) !== null && _dashboardDetails$nam !== void 0 ? _dashboardDetails$nam : '') ? 'error' : 'primary',\n    onChange: nameChangeHandler,\n    value: dashboardDetails.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agent')), /*#__PURE__*/React.createElement(Select, {\n    value: dashboardDetails.agentID,\n    onChange: function onChange(event) {\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        agentID: event.target.value\n      }));\n      setUpdate(true);\n    },\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agent'),\n    className: classes.selectText,\n    disabled: activeAgents.length === 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, activeAgents.map(function (agent) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: agent.cluster_id,\n      value: agent.cluster_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 15\n      }\n    }, agent.cluster_name);\n  })), !activeAgents.length && !loading ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.formErrorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.noActiveAgent')) : !((_agentList$getCluster2 = agentList === null || agentList === void 0 ? void 0 : agentList.getCluster) !== null && _agentList$getCluster2 !== void 0 ? _agentList$getCluster2 : []).filter(function (cluster) {\n    return cluster.cluster_id === dashboardDetails.agentID && cluster.is_active && cluster.is_cluster_confirmed && cluster.is_registered;\n  }).length ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.formErrorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agentInactive')) : /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexDisplay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSource')), /*#__PURE__*/React.createElement(Select, {\n    value: dashboardDetails.dataSourceID,\n    onChange: function onChange(event) {\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        dataSourceID: event.target.value,\n        dataSourceURL: getSelectedDsURL(event.target.value)\n      }));\n      setUpdate(true);\n    },\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSource'),\n    className: classes.selectText,\n    disabled: activeDataSources.length === 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 11\n    }\n  }, activeDataSources.map(function (dataSource) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: dataSource.ds_id,\n      value: dataSource.ds_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 15\n      }\n    }, dataSource.ds_name);\n  })), !activeDataSources.length ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.formErrorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.noActiveDataSource')) : !dataSourceList.filter(function (dataSource) {\n    return dataSource.health_status === 'Active' && dataSource.ds_id === dashboardDetails.dataSourceID;\n  }).length ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.formErrorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSourceInactive')) : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(InputField, {\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dashboardType'),\n    \"data-cy\": \"inputDashboardType\",\n    width: \"20rem\",\n    variant: validateTextEmpty((_dashboardDetails$das = dashboardDetails.dashboardTypeName) !== null && _dashboardDetails$das !== void 0 ? _dashboardDetails$das : '') ? 'error' : 'primary',\n    disabled: true,\n    value: dashboardDetails.dashboardTypeName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 9\n    }\n  })), (dashboardDetails.dashboardTypeID === 'custom' || ((_dashboardDetails$das2 = dashboardDetails.dashboardTypeID) === null || _dashboardDetails$das2 === void 0 ? void 0 : _dashboardDetails$das2.startsWith('generic'))) && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.applications')), /*#__PURE__*/React.createElement(AutocompleteChipInput, {\n    defaultValue: getSelectedAppNamespaces(),\n    onChange: function onChange(event, value) {\n      return setSelectedNamespaceList(value);\n    },\n    getOptionSelected: function getOptionSelected(option) {\n      return selectedNamespaceList.map(function (selections) {\n        return selections.name;\n      }).includes(option.name);\n    },\n    options: (_availableApplication = availableApplicationMetadataMap.map(function (value) {\n      return {\n        name: value.namespace\n      };\n    })) !== null && _availableApplication !== void 0 ? _availableApplication : [],\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectNamespaces'),\n    placeholder: \"\".concat(t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.addNamespace')),\n    disableCloseOnSelect: true,\n    disableClearable: false,\n    limitTags: 4,\n    className: classes.namespaceSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.appSelectFlex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    style: {\n      width: '12.5rem'\n    },\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplicationType')), /*#__PURE__*/React.createElement(Select, {\n    value: kubeObjInput.resource,\n    onChange: function onChange(event) {\n      setKubeObjInput(gvrList.filter(function (gvr) {\n        return gvr.resource === event.target.value;\n      })[0]);\n    },\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplicationType'),\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 15\n    }\n  }, gvrList.map(function (gvr) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: gvr.resource,\n      value: gvr.resource,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 19\n      }\n    }, gvr.resource);\n  }))), /*#__PURE__*/React.createElement(AutocompleteChipInput, {\n    defaultValue: getSelectedAppDetails(),\n    onChange: function onChange(event, value) {\n      var _dashboardDetails$das3;\n\n      var newSelection = [];\n      var selectedApps = value;\n      selectedApps.forEach(function (nsKindApp) {\n        var selectedNs = nsKindApp.name.split('/')[0].trim();\n        var selectedKind = nsKindApp.name.split('/')[1].trim();\n        var selectedApp = nsKindApp.name.split('/')[2].trim();\n        var nsFound = false;\n        newSelection.forEach(function (nsMap, index) {\n          if (nsMap.namespace === selectedNs) {\n            nsFound = true;\n            var kindFound = false;\n            newSelection[index].applications.forEach(function (kindMap, matchIndex) {\n              if (kindMap.kind === selectedKind) {\n                kindFound = true;\n                newSelection[index].applications[matchIndex].names.push(selectedApp);\n              }\n            });\n\n            if (!kindFound) {\n              newSelection[index].applications.push({\n                kind: selectedKind,\n                names: [selectedApp]\n              });\n            }\n          }\n        });\n\n        if (!nsFound) {\n          newSelection.push({\n            namespace: selectedNs,\n            applications: [{\n              kind: selectedKind,\n              names: [selectedApp]\n            }]\n          });\n        }\n      });\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        applicationMetadataMap: dashboardDetails.dashboardTypeID === 'custom' || ((_dashboardDetails$das3 = dashboardDetails.dashboardTypeID) === null || _dashboardDetails$das3 === void 0 ? void 0 : _dashboardDetails$das3.startsWith('generic')) ? newSelection : []\n      }));\n      setUpdate(true);\n    },\n    getOptionSelected: function getOptionSelected(option) {\n      return getSelectedAppDetails().map(function (selections) {\n        return selections.name;\n      }).includes(option.name);\n    },\n    options: getAvailableApplications(),\n    label: t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplications'),\n    placeholder: \"\".concat(t('analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.addApplication')),\n    disableCloseOnSelect: true,\n    disableClearable: false,\n    limitTags: 4,\n    style: {\n      width: '27.5rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default DashboardMetadataForm;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ConfigureDashboardMetadata/Form/index.tsx"],"names":["useQuery","useSubscription","FormControl","InputLabel","MenuItem","Select","Typography","AutocompleteChipInput","InputField","React","useEffect","useState","useTranslation","useSelector","GET_CLUSTER","KUBE_OBJ","useActions","DashboardActions","getProjectID","validateTextEmpty","gvrList","useStyles","DashboardMetadataForm","dashboardVars","dataSourceList","configure","CallbackToSetVars","setDisabledNext","classes","t","projectID","dashboard","selectedDashboard","state","selectDashboard","update","setUpdate","availableApplicationMetadataMap","setAvailableApplicationMetadataMap","group","version","resource","kubeObjInput","setKubeObjInput","selectedNamespaceList","setSelectedNamespaceList","activeAgents","setActiveAgents","getSelectedApps","dashboardJSON","selectedDashboardID","selectedApps","applicationMetadataMap","forEach","applicationMetadata","namespaceApps","filter","appMeta","namespace","applications","app","kindApps","appKind","kind","availableApps","names","name","includes","length","nsIndex","existingApp","index","push","activeDataSources","setActiveDataSources","id","dashboardTypeID","dashboardID","dashboardTypeName","dataSourceType","dataSourceID","dataSourceURL","chaosEventQueryTemplate","chaosVerdictQueryTemplate","agentID","information","panelGroupMap","panelGroups","dashboardDetails","setDashboardDetails","variables","project_id","fetchPolicy","agentList","data","loading","cluster_id","object_type","kube_obj_request","onSubscriptionComplete","newAvailableApplicationMetadataMap","kubeData","JSON","parse","kubeObjectData","getKubeObject","kube_obj","obj","newAvailableApplicationMetadata","objData","err","console","error","nameChangeHandler","event","target","value","getSelectedDsURL","selectedDsID","selectedDsURL","ds","ds_id","ds_url","availableAgents","getCluster","cluster","is_active","is_cluster_confirmed","is_registered","availableDataSources","dataSource","health_status","getAvailableApplications","availableApplications","appMetadata","namespaceOption","apps","application","appName","substring","getSelectedAppDetails","options","resources","getSelectedAppNamespaces","root","flexDisplay","formControl","selectTextLabel","selectText","map","agent","cluster_name","formErrorText","ds_name","startsWith","heading","option","selections","namespaceSelect","appSelectFlex","width","gvr","newSelection","nsKindApp","selectedNs","split","trim","selectedKind","selectedApp","nsFound","nsMap","kindFound","kindMap","matchIndex"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useQuery, useSubscription } from '@apollo/client';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport { AutocompleteChipInput, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { GET_CLUSTER, KUBE_OBJ } from '../../../../../../graphql';\nimport { DashboardDetails } from '../../../../../../models/dashboardsData';\nimport {\n  Cluster,\n  Clusters,\n  ClusterVars,\n} from '../../../../../../models/graphql/clusterData';\nimport {\n  GVRRequest,\n  KubeObjData,\n  KubeObjRequest,\n  KubeObjResource,\n  KubeObjResponse,\n} from '../../../../../../models/graphql/createWorkflowData';\nimport {\n  ApplicationMetadata,\n  Resource,\n} from '../../../../../../models/graphql/dashboardsDetails';\nimport { ListDataSourceResponse } from '../../../../../../models/graphql/dataSourceDetails';\nimport useActions from '../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../redux/actions/dashboards';\nimport { RootState } from '../../../../../../redux/reducers';\nimport { getProjectID } from '../../../../../../utils/getSearchParams';\nimport { validateTextEmpty } from '../../../../../../utils/validate';\nimport gvrList from './data';\nimport useStyles from './styles';\n\ninterface DashboardMetadataFormProps {\n  dashboardVars: DashboardDetails;\n  dataSourceList: ListDataSourceResponse[];\n  configure: boolean;\n  CallbackToSetVars: (vars: DashboardDetails) => void;\n  setDisabledNext: (next: boolean) => void;\n}\n\ninterface Option {\n  name: string;\n  [index: string]: any;\n}\n\nconst DashboardMetadataForm: React.FC<DashboardMetadataFormProps> = ({\n  dashboardVars,\n  dataSourceList,\n  configure,\n  CallbackToSetVars,\n  setDisabledNext,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const dashboard = useActions(DashboardActions);\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n  const [update, setUpdate] = useState(false);\n  const [availableApplicationMetadataMap, setAvailableApplicationMetadataMap] =\n    useState<ApplicationMetadata[]>([]);\n  const [kubeObjInput, setKubeObjInput] = useState<GVRRequest>({\n    group: '',\n    version: 'v1',\n    resource: 'pods',\n  });\n  const [selectedNamespaceList, setSelectedNamespaceList] = useState<\n    Array<Option>\n  >([]);\n  const [activeAgents, setActiveAgents] = useState<Cluster[]>([]);\n\n  const getSelectedApps = (dashboardJSON: any) => {\n    dashboard.selectDashboard({\n      selectedDashboardID: '',\n    });\n    const selectedApps: ApplicationMetadata[] = [];\n    dashboardJSON.applicationMetadataMap?.forEach(\n      (applicationMetadata: ApplicationMetadata) => {\n        const namespaceApps = availableApplicationMetadataMap.filter(\n          (appMeta) => appMeta.namespace === applicationMetadata.namespace\n        )[0];\n        applicationMetadata.applications.forEach((app) => {\n          const kindApps = namespaceApps.applications.filter(\n            (appKind) => appKind.kind === app.kind\n          )[0];\n          const availableApps = app.names.filter((name) =>\n            kindApps.names.includes(name)\n          );\n          if (availableApps.length) {\n            let nsIndex = -1;\n            selectedApps.forEach((existingApp, index) => {\n              if (existingApp.namespace === applicationMetadata.namespace) {\n                nsIndex = index;\n              }\n            });\n            if (nsIndex !== -1) {\n              selectedApps[nsIndex].applications.push({\n                kind: app.kind,\n                names: availableApps,\n              });\n            } else {\n              selectedApps.push({\n                namespace: applicationMetadata.namespace,\n                applications: [\n                  {\n                    kind: app.kind,\n                    names: availableApps,\n                  },\n                ],\n              });\n            }\n          }\n        });\n      }\n    );\n    return selectedApps;\n  };\n\n  const [activeDataSources, setActiveDataSources] = useState<\n    ListDataSourceResponse[]\n  >([]);\n  const [dashboardDetails, setDashboardDetails] = useState<DashboardDetails>({\n    id: !configure ? '' : dashboardVars.id ?? '',\n    name: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.name\n        : 'custom'\n      : dashboardVars.name ?? '',\n    dashboardTypeID: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.dashboardID\n        : 'custom'\n      : dashboardVars.dashboardTypeID ?? '',\n    dashboardTypeName: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.name\n        : 'Custom'\n      : dashboardVars.dashboardTypeName ?? '',\n    dataSourceType: !configure\n      ? 'Prometheus'\n      : dashboardVars.dataSourceType ?? '',\n    dataSourceID: dashboardVars.dataSourceID ?? '',\n    dataSourceURL: dashboardVars.dataSourceURL ?? '',\n    chaosEventQueryTemplate: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.chaosEventQueryTemplate\n        : 'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}'\n      : dashboardVars.chaosEventQueryTemplate ?? '',\n    chaosVerdictQueryTemplate: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.chaosVerdictQueryTemplate\n        : 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}'\n      : dashboardVars.chaosVerdictQueryTemplate ?? '',\n    agentID: dashboardVars.agentID ?? '',\n    information: !configure\n      ? selectedDashboard.dashboardJSON\n        ? selectedDashboard.dashboardJSON.information\n        : 'Customized dashboard'\n      : dashboardVars.information ?? '',\n    panelGroupMap: dashboardVars.panelGroupMap ?? [],\n    panelGroups: dashboardVars.panelGroups ?? [],\n    applicationMetadataMap:\n      !configure && selectedDashboard.selectedDashboardID === 'upload'\n        ? getSelectedApps(selectedDashboard.dashboardJSON)\n        : dashboardVars.applicationMetadataMap ?? [],\n  });\n\n  // Apollo query to get the agent data\n  const { data: agentList, loading } = useQuery<Clusters, ClusterVars>(\n    GET_CLUSTER,\n    {\n      variables: { project_id: projectID },\n      fetchPolicy: 'cache-and-network',\n    }\n  );\n\n  /**\n   * GraphQL subscription to fetch the KubeObjData from the server\n   */\n  const { data: kubeObjectData } = useSubscription<\n    KubeObjResponse,\n    KubeObjRequest\n  >(KUBE_OBJ, {\n    variables: {\n      data: {\n        cluster_id: dashboardDetails.agentID ?? '',\n        object_type: 'kubeobject',\n        kube_obj_request: {\n          group: kubeObjInput.group,\n          version: kubeObjInput.version,\n          resource: kubeObjInput.resource,\n        },\n      },\n    },\n    onSubscriptionComplete: () => {\n      const newAvailableApplicationMetadataMap: ApplicationMetadata[] = [];\n      try {\n        const kubeData: KubeObjData[] = JSON.parse(\n          kubeObjectData?.getKubeObject.kube_obj ?? ''\n        );\n        kubeData.forEach((obj: KubeObjData) => {\n          const newAvailableApplicationMetadata: ApplicationMetadata = {\n            namespace: obj.namespace,\n            applications: [\n              {\n                kind: kubeObjInput.resource,\n                names: [],\n              },\n            ],\n          };\n          if (obj.data != null) {\n            obj.data.forEach((objData: KubeObjResource) => {\n              if (objData.name != null) {\n                newAvailableApplicationMetadata.applications[0].names.push(\n                  objData.name\n                );\n              }\n            });\n          }\n          newAvailableApplicationMetadataMap.push(\n            newAvailableApplicationMetadata\n          );\n        });\n      } catch (err) {\n        console.error(err);\n      }\n      setAvailableApplicationMetadataMap(newAvailableApplicationMetadataMap);\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const nameChangeHandler = (event: React.ChangeEvent<{ value: string }>) => {\n    setDashboardDetails({\n      ...dashboardDetails,\n      name: (event.target as HTMLInputElement).value,\n    });\n    setUpdate(true);\n  };\n\n  const getSelectedDsURL = (selectedDsID: string) => {\n    let selectedDsURL: string = '';\n    dataSourceList.forEach((ds) => {\n      if (ds.ds_id === selectedDsID) {\n        selectedDsURL = ds.ds_url;\n      }\n    });\n    return selectedDsURL;\n  };\n\n  useEffect(() => {\n    if (\n      dashboardDetails.name === '' ||\n      dashboardDetails.dashboardTypeID === '' ||\n      dashboardDetails.dashboardTypeName === '' ||\n      dashboardDetails.dataSourceType === '' ||\n      dashboardDetails.dataSourceID === '' ||\n      dashboardDetails.dataSourceURL === '' ||\n      dashboardDetails.chaosEventQueryTemplate === '' ||\n      dashboardDetails.chaosVerdictQueryTemplate === '' ||\n      dashboardDetails.agentID === '' ||\n      dashboardDetails.information === ''\n    ) {\n      setDisabledNext(true);\n    } else if (\n      configure === true &&\n      (dashboardDetails.id === '' ||\n        dashboardDetails.panelGroupMap?.length === 0 ||\n        dashboardDetails.panelGroups?.length === 0)\n    ) {\n      setDisabledNext(true);\n    } else {\n      setDisabledNext(false);\n    }\n    if (update === true) {\n      CallbackToSetVars(dashboardDetails);\n      setUpdate(false);\n    }\n  }, [update]);\n\n  useEffect(() => {\n    const availableAgents = (agentList?.getCluster ?? []).filter((cluster) => {\n      return (\n        cluster.is_active &&\n        cluster.is_cluster_confirmed &&\n        cluster.is_registered\n      );\n    });\n    setActiveAgents(availableAgents);\n    if (dashboardDetails.agentID === '' && !configure) {\n      setDashboardDetails({\n        ...dashboardDetails,\n        agentID: availableAgents.length ? availableAgents[0].cluster_id : '',\n      });\n      setUpdate(true);\n    }\n  }, [agentList]);\n\n  useEffect(() => {\n    const availableDataSources = dataSourceList.filter((dataSource) => {\n      return dataSource.health_status === 'Active';\n    });\n    setActiveDataSources(availableDataSources);\n    if (dashboardDetails.dataSourceID === '' && !configure) {\n      setDashboardDetails({\n        ...dashboardDetails,\n        dataSourceID: availableDataSources.length\n          ? availableDataSources[0].ds_id\n          : '',\n        dataSourceURL: availableDataSources.length\n          ? availableDataSources[0].ds_url\n          : '',\n      });\n      setUpdate(true);\n    }\n  }, [dataSourceList]);\n\n  useEffect(() => {\n    if (!configure && selectedDashboard.selectedDashboardID === 'upload') {\n      setDashboardDetails({\n        ...dashboardDetails,\n        applicationMetadataMap: getSelectedApps(\n          selectedDashboard.dashboardJSON\n        ),\n      });\n    }\n  }, [availableApplicationMetadataMap]);\n\n  const getAvailableApplications = () => {\n    const availableApplications: Array<Option> = [];\n    availableApplicationMetadataMap.forEach((appMetadata) => {\n      if (selectedNamespaceList.length) {\n        selectedNamespaceList.forEach((namespaceOption) => {\n          if (namespaceOption.name === appMetadata.namespace) {\n            const apps: Resource[] = appMetadata.applications.filter(\n              (application) => application.kind === kubeObjInput.resource\n            );\n            if (apps.length) {\n              apps[0].names.forEach((appName) => {\n                availableApplications.push({\n                  name: `${\n                    namespaceOption.name\n                  } / ${kubeObjInput.resource.substring(\n                    0,\n                    kubeObjInput.resource.length - 1\n                  )} / ${appName}`,\n                });\n              });\n            }\n          }\n        });\n      }\n    });\n    return availableApplications;\n  };\n\n  const getSelectedAppDetails = () => {\n    const options: Array<Option> = [];\n    dashboardDetails.applicationMetadataMap?.forEach((app) => {\n      app.applications.forEach((resources) => {\n        resources.names.forEach((name) => {\n          options.push({\n            name: `${app.namespace} / ${resources.kind} / ${name}`,\n          });\n        });\n      });\n    });\n    return options;\n  };\n\n  const getSelectedAppNamespaces = () => {\n    const options: Array<Option> = [];\n    dashboardDetails.applicationMetadataMap?.forEach((app) => {\n      options.push({\n        name: app.namespace,\n      });\n    });\n    return options;\n  };\n\n  useEffect(() => {\n    if (configure) {\n      setDashboardDetails({\n        ...dashboardVars,\n      });\n      if (\n        dashboardDetails.name === '' ||\n        dashboardDetails.dashboardTypeID === '' ||\n        dashboardDetails.dashboardTypeName === '' ||\n        dashboardDetails.dataSourceType === '' ||\n        dashboardDetails.dataSourceID === '' ||\n        dashboardDetails.dataSourceURL === '' ||\n        dashboardDetails.chaosEventQueryTemplate === '' ||\n        dashboardDetails.chaosVerdictQueryTemplate === '' ||\n        dashboardDetails.agentID === '' ||\n        dashboardDetails.information === '' ||\n        dashboardDetails.panelGroupMap?.length === 0 ||\n        dashboardDetails.panelGroups?.length === 0\n      ) {\n        setDisabledNext(true);\n      } else {\n        setDisabledNext(false);\n      }\n    }\n  }, [dashboardVars]);\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.flexDisplay}>\n        <InputField\n          label={t(\n            'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.name'\n          )}\n          data-cy=\"inputDashboardName\"\n          width=\"20rem\"\n          variant={\n            validateTextEmpty(dashboardDetails.name ?? '') ? 'error' : 'primary'\n          }\n          onChange={nameChangeHandler}\n          value={dashboardDetails.name}\n        />\n\n        <FormControl\n          variant=\"outlined\"\n          className={classes.formControl}\n          color=\"primary\"\n        >\n          <InputLabel className={classes.selectTextLabel}>\n            {t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agent'\n            )}\n          </InputLabel>\n          <Select\n            value={dashboardDetails.agentID}\n            onChange={(event) => {\n              setDashboardDetails({\n                ...dashboardDetails,\n                agentID: event.target.value as string,\n              });\n              setUpdate(true);\n            }}\n            label={t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agent'\n            )}\n            className={classes.selectText}\n            disabled={activeAgents.length === 0}\n          >\n            {activeAgents.map((agent: Cluster) => (\n              <MenuItem key={agent.cluster_id} value={agent.cluster_id}>\n                {agent.cluster_name}\n              </MenuItem>\n            ))}\n          </Select>\n          {!activeAgents.length && !loading ? (\n            <Typography className={classes.formErrorText}>\n              {t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.noActiveAgent'\n              )}\n            </Typography>\n          ) : !(agentList?.getCluster ?? []).filter((cluster) => {\n              return (\n                cluster.cluster_id === dashboardDetails.agentID &&\n                cluster.is_active &&\n                cluster.is_cluster_confirmed &&\n                cluster.is_registered\n              );\n            }).length ? (\n            <Typography className={classes.formErrorText}>\n              {t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.agentInactive'\n              )}\n            </Typography>\n          ) : (\n            <></>\n          )}\n        </FormControl>\n      </div>\n\n      <div className={classes.flexDisplay}>\n        <FormControl\n          variant=\"outlined\"\n          className={classes.formControl}\n          color=\"primary\"\n        >\n          <InputLabel className={classes.selectTextLabel}>\n            {t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSource'\n            )}\n          </InputLabel>\n          <Select\n            value={dashboardDetails.dataSourceID}\n            onChange={(event) => {\n              setDashboardDetails({\n                ...dashboardDetails,\n                dataSourceID: event.target.value as string,\n                dataSourceURL: getSelectedDsURL(event.target.value as string),\n              });\n              setUpdate(true);\n            }}\n            label={t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSource'\n            )}\n            className={classes.selectText}\n            disabled={activeDataSources.length === 0}\n          >\n            {activeDataSources.map((dataSource: ListDataSourceResponse) => (\n              <MenuItem key={dataSource.ds_id} value={dataSource.ds_id}>\n                {dataSource.ds_name}\n              </MenuItem>\n            ))}\n          </Select>\n          {!activeDataSources.length ? (\n            <Typography className={classes.formErrorText}>\n              {t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.noActiveDataSource'\n              )}\n            </Typography>\n          ) : !dataSourceList.filter((dataSource) => {\n              return (\n                dataSource.health_status === 'Active' &&\n                dataSource.ds_id === dashboardDetails.dataSourceID\n              );\n            }).length ? (\n            <Typography className={classes.formErrorText}>\n              {t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dataSourceInactive'\n              )}\n            </Typography>\n          ) : (\n            <></>\n          )}\n        </FormControl>\n\n        <InputField\n          label={t(\n            'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.dashboardType'\n          )}\n          data-cy=\"inputDashboardType\"\n          width=\"20rem\"\n          variant={\n            validateTextEmpty(dashboardDetails.dashboardTypeName ?? '')\n              ? 'error'\n              : 'primary'\n          }\n          disabled\n          value={dashboardDetails.dashboardTypeName}\n        />\n      </div>\n\n      {(dashboardDetails.dashboardTypeID === 'custom' ||\n        dashboardDetails.dashboardTypeID?.startsWith('generic')) && (\n        <div>\n          <Typography className={classes.heading}>\n            {t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.applications'\n            )}\n          </Typography>\n\n          <AutocompleteChipInput\n            defaultValue={getSelectedAppNamespaces()}\n            onChange={(event, value) =>\n              setSelectedNamespaceList(value as Array<Option>)\n            }\n            getOptionSelected={(option) =>\n              selectedNamespaceList\n                .map((selections) => selections.name)\n                .includes(option.name)\n            }\n            options={\n              availableApplicationMetadataMap.map((value) => {\n                return { name: value.namespace };\n              }) ?? []\n            }\n            label={t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectNamespaces'\n            )}\n            placeholder={`${t(\n              'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.addNamespace'\n            )}`}\n            disableCloseOnSelect\n            disableClearable={false}\n            limitTags={4}\n            className={classes.namespaceSelect}\n          />\n\n          <div className={classes.appSelectFlex}>\n            <FormControl\n              variant=\"outlined\"\n              className={classes.formControl}\n              style={{ width: '12.5rem' }}\n              color=\"primary\"\n            >\n              <InputLabel className={classes.selectTextLabel}>\n                {t(\n                  'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplicationType'\n                )}\n              </InputLabel>\n              <Select\n                value={kubeObjInput.resource}\n                onChange={(event: any) => {\n                  setKubeObjInput(\n                    gvrList.filter(\n                      (gvr) => gvr.resource === (event.target.value as string)\n                    )[0]\n                  );\n                }}\n                label={t(\n                  'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplicationType'\n                )}\n                className={classes.selectText}\n              >\n                {gvrList.map((gvr: GVRRequest) => (\n                  <MenuItem key={gvr.resource} value={gvr.resource}>\n                    {gvr.resource}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            <AutocompleteChipInput\n              defaultValue={getSelectedAppDetails()}\n              onChange={(event, value) => {\n                const newSelection: ApplicationMetadata[] = [];\n                const selectedApps: Array<Option> = value as Array<Option>;\n                selectedApps.forEach((nsKindApp) => {\n                  const selectedNs = nsKindApp.name.split('/')[0].trim();\n                  const selectedKind = nsKindApp.name.split('/')[1].trim();\n                  const selectedApp = nsKindApp.name.split('/')[2].trim();\n                  let nsFound = false;\n                  newSelection.forEach((nsMap, index) => {\n                    if (nsMap.namespace === selectedNs) {\n                      nsFound = true;\n                      let kindFound = false;\n                      newSelection[index].applications.forEach(\n                        (kindMap, matchIndex) => {\n                          if (kindMap.kind === selectedKind) {\n                            kindFound = true;\n                            newSelection[index].applications[\n                              matchIndex\n                            ].names.push(selectedApp);\n                          }\n                        }\n                      );\n                      if (!kindFound) {\n                        newSelection[index].applications.push({\n                          kind: selectedKind,\n                          names: [selectedApp],\n                        });\n                      }\n                    }\n                  });\n                  if (!nsFound) {\n                    newSelection.push({\n                      namespace: selectedNs,\n                      applications: [\n                        { kind: selectedKind, names: [selectedApp] },\n                      ],\n                    });\n                  }\n                });\n                setDashboardDetails({\n                  ...dashboardDetails,\n                  applicationMetadataMap:\n                    dashboardDetails.dashboardTypeID === 'custom' ||\n                    dashboardDetails.dashboardTypeID?.startsWith('generic')\n                      ? newSelection\n                      : [],\n                });\n                setUpdate(true);\n              }}\n              getOptionSelected={(option) =>\n                getSelectedAppDetails()\n                  .map((selections) => selections.name)\n                  .includes(option.name)\n              }\n              options={getAvailableApplications()}\n              label={t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.selectApplications'\n              )}\n              placeholder={`${t(\n                'analyticsDashboard.applicationDashboards.configureDashboardMetadata.form.addApplication'\n              )}`}\n              disableCloseOnSelect\n              disableClearable={false}\n              limitTags={4}\n              style={{ width: '27.5rem' }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardMetadataForm;\n"]},"metadata":{},"sourceType":"module"}