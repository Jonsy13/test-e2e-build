{"ast":null,"code":"import _defineProperty from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * Function for reordering the result\n */\nexport var reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport var reorderSteps = function reorderSteps(steps, source, destination) {\n  var _objectSpread3;\n\n  var current = _toConsumableArray(steps[source.droppableId]);\n\n  var next = _toConsumableArray(steps[destination.droppableId]);\n\n  var target = current[source.index];\n  /**\n   * Moving data to same list\n   */\n\n  if (source.droppableId === destination.droppableId) {\n    var reordered = reorder(current, source.index, destination.index);\n    return _objectSpread(_objectSpread({}, steps), {}, _defineProperty({}, source.droppableId, reordered));\n  }\n  /**\n   * Moving to different list\n   */\n\n\n  current.splice(source.index, 1); // Remove from original list\n\n  next.splice(destination.index, 0, target); // Insert into the new list\n\n  return _objectSpread(_objectSpread({}, steps), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, source.droppableId, current), _defineProperty(_objectSpread3, destination.droppableId, next), _objectSpread3));\n};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/WorkflowSequence/reorder.ts"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderSteps","steps","source","destination","current","droppableId","next","target","index","reordered"],"mappings":";;;;;AAWA;AACA;AACA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CACrBC,IADqB,EAErBC,UAFqB,EAGrBC,QAHqB,EAID;AACpB,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AACA,uBAAkBG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAAlB;AAAA;AAAA,MAAOM,OAAP;;AACAJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACD,CAVM;AAYP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAC1BC,KAD0B,EAE1BC,MAF0B,EAG1BC,WAH0B,EAIvB;AAAA;;AACH,MAAMC,OAAO,sBAAOH,KAAK,CAACC,MAAM,CAACG,WAAR,CAAZ,CAAb;;AACA,MAAMC,IAAI,sBAAOL,KAAK,CAACE,WAAW,CAACE,WAAb,CAAZ,CAAV;;AACA,MAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB;AACA;AACF;AACA;;AACE,MAAIN,MAAM,CAACG,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAClD,QAAMI,SAAS,GAAGlB,OAAO,CAACa,OAAD,EAAUF,MAAM,CAACM,KAAjB,EAAwBL,WAAW,CAACK,KAApC,CAAzB;AACA,2CACKP,KADL,2BAEGC,MAAM,CAACG,WAFV,EAEwBI,SAFxB;AAID;AAED;AACF;AACA;;;AACEL,EAAAA,OAAO,CAACN,MAAR,CAAeI,MAAM,CAACM,KAAtB,EAA6B,CAA7B,EAlBG,CAkB8B;;AACjCF,EAAAA,IAAI,CAACR,MAAL,CAAYK,WAAW,CAACK,KAAxB,EAA+B,CAA/B,EAAkCD,MAAlC,EAnBG,CAmBwC;;AAE3C,yCACKN,KADL,6DAEGC,MAAM,CAACG,WAFV,EAEwBD,OAFxB,mCAGGD,WAAW,CAACE,WAHf,EAG6BC,IAH7B;AAKD,CA9BM","sourcesContent":["import { DraggableLocation } from 'react-beautiful-dnd';\n\ninterface ManifestSteps {\n  name: string;\n  template: string;\n}\n\ninterface StepType {\n  [key: string]: ManifestSteps[];\n}\n\n/**\n * Function for reordering the result\n */\nexport const reorder = (\n  list: ManifestSteps[],\n  startIndex: number,\n  endIndex: number\n): ManifestSteps[] => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderSteps = (\n  steps: StepType,\n  source: DraggableLocation,\n  destination: DraggableLocation\n) => {\n  const current = [...steps[source.droppableId]];\n  const next = [...steps[destination.droppableId]];\n  const target = current[source.index];\n  /**\n   * Moving data to same list\n   */\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    return {\n      ...steps,\n      [source.droppableId]: reordered,\n    };\n  }\n\n  /**\n   * Moving to different list\n   */\n  current.splice(source.index, 1); // Remove from original list\n  next.splice(destination.index, 0, target); // Insert into the new list\n\n  return {\n    ...steps,\n    [source.droppableId]: current,\n    [destination.droppableId]: next,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}