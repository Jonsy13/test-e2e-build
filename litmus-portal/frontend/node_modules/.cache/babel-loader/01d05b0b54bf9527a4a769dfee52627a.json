{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/ToolBar/index.tsx\";\n\nimport { FormControl, IconButton, MenuItem, OutlinedInput, Select, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport WatchLaterRoundedIcon from '@material-ui/icons/WatchLaterRounded';\nimport { ButtonOutlined } from 'litmus-ui';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport { DEFAULT_REFRESH_RATE, DEFAULT_TOLERANCE_LIMIT, MAX_REFRESH_RATE, MINIMUM_TOLERANCE_LIMIT } from '../../../../pages/ApplicationDashboard/constants';\nimport refreshData from '../../../../pages/ApplicationDashboard/refreshData';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\nvar ToolBar = function ToolBar() {\n  var classes = useStyles();\n  var outlinedInputClasses = useOutlinedInputStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dashboard = useActions(DashboardActions);\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n  var dateRangeSelectorRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isDateRangeSelectorPopoverOpen = _React$useState2[0],\n      setDateRangeSelectorPopoverOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(selectedDashboard.refreshRate ? selectedDashboard.refreshRate : 0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      refreshRate = _React$useState4[0],\n      setRefreshRate = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      openRefresh = _React$useState6[0],\n      setOpenRefresh = _React$useState6[1];\n\n  var handleCloseRefresh = function handleCloseRefresh() {\n    setOpenRefresh(false);\n  };\n\n  var handleOpenRefresh = function handleOpenRefresh() {\n    setOpenRefresh(true);\n  };\n\n  var clearTimeOuts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = window.setTimeout(function () {}, 0);\n\n              while (id--) {\n                window.clearTimeout(id);\n              }\n\n              return _context.abrupt(\"return\", Promise.resolve(id === 0));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function clearTimeOuts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var CallbackFromRangeSelector = function CallbackFromRangeSelector(selectedStartDate, selectedEndDate) {\n    var _selectedDashboard$re, _selectedDashboard$re2;\n\n    var startDateFormatted = moment(selectedStartDate).format();\n    var endDateFormatted = moment(selectedEndDate).add(23, 'hours').add(59, 'minutes').add(59, 'seconds').format();\n    dashboard.selectDashboard({\n      range: {\n        startDate: startDateFormatted,\n        endDate: endDateFormatted\n      }\n    });\n    var endDate = new Date(moment(endDateFormatted).format()).getTime() / 1000;\n    var now = Math.round(new Date().getTime() / 1000);\n    var diff = Math.abs(now - endDate);\n    var maxLim = ((_selectedDashboard$re = selectedDashboard.refreshRate) !== null && _selectedDashboard$re !== void 0 ? _selectedDashboard$re : DEFAULT_REFRESH_RATE) / 1000 !== 0 ? ((_selectedDashboard$re2 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re2 !== void 0 ? _selectedDashboard$re2 : DEFAULT_REFRESH_RATE) / 1000 + MINIMUM_TOLERANCE_LIMIT : DEFAULT_TOLERANCE_LIMIT;\n\n    if (!(diff >= 0 && diff <= maxLim) && selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n      clearTimeOuts().then(function () {\n        setRefreshRate(MAX_REFRESH_RATE);\n      });\n    }\n  };\n\n  var getRefreshRateStatus = function getRefreshRateStatus() {\n    if (selectedDashboard.range) {\n      var _selectedDashboard$re3, _selectedDashboard$re4;\n\n      var endDate = new Date(moment(selectedDashboard.range.endDate).format()).getTime() / 1000;\n      var now = Math.round(new Date().getTime() / 1000);\n      var diff = Math.abs(now - endDate);\n      var maxLim = ((_selectedDashboard$re3 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re3 !== void 0 ? _selectedDashboard$re3 : DEFAULT_REFRESH_RATE) / 1000 !== 0 ? ((_selectedDashboard$re4 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re4 !== void 0 ? _selectedDashboard$re4 : DEFAULT_REFRESH_RATE) / 1000 + MINIMUM_TOLERANCE_LIMIT : DEFAULT_TOLERANCE_LIMIT;\n\n      if (!(diff >= 0 && diff <= maxLim)) {\n        // A non relative time range has been selected.\n        // Refresh rate switch is not acknowledged and it's state is locked (Off).\n        // Select a relative time range or select a different refresh rate to unlock again.\n        return true;\n      }\n    } // For relative time ranges.\n\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.headerInfoText')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.controls,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: dateRangeSelectorRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    className: \"\".concat(classes.selectDate, \" \").concat(isDateRangeSelectorPopoverOpen ? classes.selectDateFocused : ''),\n    onClick: function onClick() {\n      return setDateRangeSelectorPopoverOpen(true);\n    },\n    \"aria-label\": \"time range\",\n    \"aria-haspopup\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.displayDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.rangeSelectorClockIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(WatchLaterRoundedIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })), !selectedDashboard.range || selectedDashboard.range.startDate === ' ' ? \"\".concat(t('analyticsDashboard.monitoringDashboardPage.rangeSelector.selectPeriod')) : \"\".concat(selectedDashboard.range.startDate.split('-')[0], \"-\").concat(selectedDashboard.range.startDate.split('-')[1], \"-\").concat(selectedDashboard.range.startDate.substring(selectedDashboard.range.startDate.lastIndexOf('-') + 1, selectedDashboard.range.startDate.lastIndexOf('T')), \" \\n                    \\n                  \").concat(selectedDashboard.range.startDate.substring(selectedDashboard.range.startDate.lastIndexOf('T') + 1, selectedDashboard.range.startDate.lastIndexOf('+')), \" \\n                    \").concat(t('analyticsDashboard.monitoringDashboardPage.rangeSelector.to'), \"\\n                   \").concat(selectedDashboard.range.endDate.split('-')[0], \"-\").concat(selectedDashboard.range.endDate.split('-')[1], \"-\").concat(selectedDashboard.range.endDate.substring(selectedDashboard.range.endDate.lastIndexOf('-') + 1, selectedDashboard.range.endDate.lastIndexOf('T')), \" \\n                    \\n                  \").concat(selectedDashboard.range.endDate.substring(selectedDashboard.range.endDate.lastIndexOf('T') + 1, selectedDashboard.range.endDate.lastIndexOf('+'))), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.rangeSelectorIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(DateRangeSelector, {\n    anchorEl: dateRangeSelectorRef.current,\n    isOpen: isDateRangeSelectorPopoverOpen,\n    onClose: function onClose() {\n      setDateRangeSelectorPopoverOpen(false);\n    },\n    callbackToSetRange: CallbackFromRangeSelector,\n    className: classes.rangeSelectorPopover,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.refreshDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      clearTimeOuts().then(function () {\n        dashboard.selectDashboard({\n          forceUpdate: true\n        });\n      });\n    },\n    className: classes.refreshButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/refresh-dashboard.svg\",\n    alt: \"refresh icon\",\n    className: classes.refreshIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    labelId: \"refresh-controlled-open-select-label\",\n    id: \"refresh-controlled-open-select\",\n    open: openRefresh,\n    disabled: getRefreshRateStatus(),\n    onClose: handleCloseRefresh,\n    onOpen: handleOpenRefresh,\n    native: false,\n    displayEmpty: true,\n    value: refreshRate !== 0 ? refreshRate : null,\n    onChange: function onChange(event) {\n      // When viewing data for non-relative time range, refresh should be Off ideally.\n      // UI can auto detect if it is not Off and switches it to Off.\n      // Now the user can try to view the non-relative time range data again.\n      if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n        dashboard.selectDashboard({\n          refreshRate: event.target.value\n        });\n        setRefreshRate(event.target.value);\n      } else {\n        dashboard.selectDashboard({\n          refreshRate: event.target.value\n        });\n        setRefreshRate(event.target.value);\n        dashboard.selectDashboard({\n          forceUpdate: true\n        });\n      }\n    },\n    input: /*#__PURE__*/React.createElement(OutlinedInput, {\n      classes: outlinedInputClasses,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 22\n      }\n    }),\n    renderValue: function renderValue() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }, t('analyticsDashboard.monitoringDashboardPage.refresh.heading'));\n    },\n    IconComponent: KeyboardArrowDownIcon,\n    MenuProps: {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      getContentAnchorEl: null,\n      classes: {\n        paper: classes.menuList\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"Off-refresh-option\",\n    value: MAX_REFRESH_RATE,\n    className: classes.menuListItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.refresh.off')), refreshData.map(function (data) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(data.label, \"-refresh-option\"),\n      value: data.value,\n      className: classes.menuListItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, t(data.label));\n  }))))));\n};\n\nexport default ToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/ToolBar/index.tsx"],"names":["FormControl","IconButton","MenuItem","OutlinedInput","Select","Typography","KeyboardArrowDownIcon","WatchLaterRoundedIcon","ButtonOutlined","moment","React","useTranslation","useSelector","DateRangeSelector","DEFAULT_REFRESH_RATE","DEFAULT_TOLERANCE_LIMIT","MAX_REFRESH_RATE","MINIMUM_TOLERANCE_LIMIT","refreshData","useActions","DashboardActions","useStyles","useOutlinedInputStyles","ToolBar","classes","outlinedInputClasses","t","dashboard","selectedDashboard","state","selectDashboard","dateRangeSelectorRef","useRef","useState","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","refreshRate","setRefreshRate","openRefresh","setOpenRefresh","handleCloseRefresh","handleOpenRefresh","clearTimeOuts","id","window","setTimeout","clearTimeout","Promise","resolve","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","startDateFormatted","format","endDateFormatted","add","range","startDate","endDate","Date","getTime","now","Math","round","diff","abs","maxLim","then","getRefreshRateStatus","headerDiv","headerInfoText","controls","selectDate","selectDateFocused","displayDate","rangeSelectorClockIcon","split","substring","lastIndexOf","rangeSelectorIcon","current","rangeSelectorPopover","refreshDiv","forceUpdate","refreshButton","refreshIcon","formControl","event","target","value","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","paper","menuList","menuListItem","map","data","label"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  IconButton,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport WatchLaterRoundedIcon from '@material-ui/icons/WatchLaterRounded';\nimport { ButtonOutlined } from 'litmus-ui';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport {\n  DEFAULT_REFRESH_RATE,\n  DEFAULT_TOLERANCE_LIMIT,\n  MAX_REFRESH_RATE,\n  MINIMUM_TOLERANCE_LIMIT,\n} from '../../../../pages/ApplicationDashboard/constants';\nimport refreshData from '../../../../pages/ApplicationDashboard/refreshData';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { RootState } from '../../../../redux/reducers';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface RefreshObjectType {\n  label: string;\n  value: number;\n}\n\nconst ToolBar: React.FC = () => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { t } = useTranslation();\n  const dashboard = useActions(DashboardActions);\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n\n  const dateRangeSelectorRef = React.useRef<HTMLDivElement>(null);\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    React.useState(false);\n  const [refreshRate, setRefreshRate] = React.useState<number>(\n    selectedDashboard.refreshRate ? selectedDashboard.refreshRate : 0\n  );\n  const [openRefresh, setOpenRefresh] = React.useState(false);\n  const handleCloseRefresh = () => {\n    setOpenRefresh(false);\n  };\n\n  const handleOpenRefresh = () => {\n    setOpenRefresh(true);\n  };\n\n  const clearTimeOuts = async () => {\n    let id = window.setTimeout(() => {}, 0);\n    while (id--) {\n      window.clearTimeout(id);\n    }\n\n    return Promise.resolve(id === 0);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    const startDateFormatted: string = moment(selectedStartDate).format();\n    const endDateFormatted: string = moment(selectedEndDate)\n      .add(23, 'hours')\n      .add(59, 'minutes')\n      .add(59, 'seconds')\n      .format();\n    dashboard.selectDashboard({\n      range: { startDate: startDateFormatted, endDate: endDateFormatted },\n    });\n    const endDate: number =\n      new Date(moment(endDateFormatted).format()).getTime() / 1000;\n    const now: number = Math.round(new Date().getTime() / 1000);\n    const diff: number = Math.abs(now - endDate);\n    const maxLim: number =\n      (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n        ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n          MINIMUM_TOLERANCE_LIMIT\n        : DEFAULT_TOLERANCE_LIMIT;\n    if (\n      !(diff >= 0 && diff <= maxLim) &&\n      selectedDashboard.refreshRate !== MAX_REFRESH_RATE\n    ) {\n      clearTimeOuts().then(() => {\n        setRefreshRate(MAX_REFRESH_RATE);\n      });\n    }\n  };\n\n  const getRefreshRateStatus = () => {\n    if (selectedDashboard.range) {\n      const endDate: number =\n        new Date(moment(selectedDashboard.range.endDate).format()).getTime() /\n        1000;\n      const now: number = Math.round(new Date().getTime() / 1000);\n      const diff: number = Math.abs(now - endDate);\n      const maxLim: number =\n        (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n          ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n            MINIMUM_TOLERANCE_LIMIT\n          : DEFAULT_TOLERANCE_LIMIT;\n      if (!(diff >= 0 && diff <= maxLim)) {\n        // A non relative time range has been selected.\n        // Refresh rate switch is not acknowledged and it's state is locked (Off).\n        // Select a relative time range or select a different refresh rate to unlock again.\n        return true;\n      }\n    }\n    // For relative time ranges.\n    return false;\n  };\n\n  return (\n    <div className={classes.headerDiv}>\n      <Typography className={classes.headerInfoText}>\n        {t('analyticsDashboard.monitoringDashboardPage.headerInfoText')}\n      </Typography>\n      <div className={classes.controls}>\n        <div ref={dateRangeSelectorRef}>\n          <ButtonOutlined\n            className={`${classes.selectDate} ${\n              isDateRangeSelectorPopoverOpen ? classes.selectDateFocused : ''\n            }`}\n            onClick={() => setDateRangeSelectorPopoverOpen(true)}\n            aria-label=\"time range\"\n            aria-haspopup=\"true\"\n          >\n            <Typography className={classes.displayDate}>\n              <IconButton className={classes.rangeSelectorClockIcon}>\n                <WatchLaterRoundedIcon />\n              </IconButton>\n              {!selectedDashboard.range ||\n              selectedDashboard.range.startDate === ' '\n                ? `${t(\n                    'analyticsDashboard.monitoringDashboardPage.rangeSelector.selectPeriod'\n                  )}`\n                : `${selectedDashboard.range.startDate.split('-')[0]}-${\n                    selectedDashboard.range.startDate.split('-')[1]\n                  }-${selectedDashboard.range.startDate.substring(\n                    selectedDashboard.range.startDate.lastIndexOf('-') + 1,\n                    selectedDashboard.range.startDate.lastIndexOf('T')\n                  )} \n                    \n                  ${selectedDashboard.range.startDate.substring(\n                    selectedDashboard.range.startDate.lastIndexOf('T') + 1,\n                    selectedDashboard.range.startDate.lastIndexOf('+')\n                  )} \n                    ${t(\n                      'analyticsDashboard.monitoringDashboardPage.rangeSelector.to'\n                    )}\n                   ${selectedDashboard.range.endDate.split('-')[0]}-${\n                    selectedDashboard.range.endDate.split('-')[1]\n                  }-${selectedDashboard.range.endDate.substring(\n                    selectedDashboard.range.endDate.lastIndexOf('-') + 1,\n                    selectedDashboard.range.endDate.lastIndexOf('T')\n                  )} \n                    \n                  ${selectedDashboard.range.endDate.substring(\n                    selectedDashboard.range.endDate.lastIndexOf('T') + 1,\n                    selectedDashboard.range.endDate.lastIndexOf('+')\n                  )}`}\n\n              <IconButton className={classes.rangeSelectorIcon}>\n                <KeyboardArrowDownIcon />\n              </IconButton>\n            </Typography>\n          </ButtonOutlined>\n        </div>\n        <DateRangeSelector\n          anchorEl={dateRangeSelectorRef.current}\n          isOpen={isDateRangeSelectorPopoverOpen}\n          onClose={() => {\n            setDateRangeSelectorPopoverOpen(false);\n          }}\n          callbackToSetRange={CallbackFromRangeSelector}\n          className={classes.rangeSelectorPopover}\n        />\n\n        <div className={classes.refreshDiv}>\n          <ButtonOutlined\n            onClick={() => {\n              clearTimeOuts().then(() => {\n                dashboard.selectDashboard({\n                  forceUpdate: true,\n                });\n              });\n            }}\n            className={classes.refreshButton}\n          >\n            <img\n              src=\"/icons/refresh-dashboard.svg\"\n              alt=\"refresh icon\"\n              className={classes.refreshIcon}\n            />\n          </ButtonOutlined>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <Select\n              labelId=\"refresh-controlled-open-select-label\"\n              id=\"refresh-controlled-open-select\"\n              open={openRefresh}\n              disabled={getRefreshRateStatus()}\n              onClose={handleCloseRefresh}\n              onOpen={handleOpenRefresh}\n              native={false}\n              displayEmpty\n              value={refreshRate !== 0 ? refreshRate : null}\n              onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                // When viewing data for non-relative time range, refresh should be Off ideally.\n                // UI can auto detect if it is not Off and switches it to Off.\n                // Now the user can try to view the non-relative time range data again.\n                if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n                  dashboard.selectDashboard({\n                    refreshRate: event.target.value as number,\n                  });\n                  setRefreshRate(event.target.value as number);\n                } else {\n                  dashboard.selectDashboard({\n                    refreshRate: event.target.value as number,\n                  });\n                  setRefreshRate(event.target.value as number);\n                  dashboard.selectDashboard({\n                    forceUpdate: true,\n                  });\n                }\n              }}\n              input={<OutlinedInput classes={outlinedInputClasses} />}\n              renderValue={() => (\n                <div>\n                  {t(\n                    'analyticsDashboard.monitoringDashboardPage.refresh.heading'\n                  )}\n                </div>\n              )}\n              IconComponent={KeyboardArrowDownIcon}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n                },\n                getContentAnchorEl: null,\n                classes: { paper: classes.menuList },\n              }}\n            >\n              <MenuItem\n                key=\"Off-refresh-option\"\n                value={MAX_REFRESH_RATE}\n                className={classes.menuListItem}\n              >\n                {t('analyticsDashboard.monitoringDashboardPage.refresh.off')}\n              </MenuItem>\n              {refreshData.map((data: RefreshObjectType) => (\n                <MenuItem\n                  key={`${data.label}-refresh-option`}\n                  value={data.value}\n                  className={classes.menuListItem}\n                >\n                  {t(data.label)}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToolBar;\n"]},"metadata":{},"sourceType":"module"}