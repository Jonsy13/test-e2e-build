{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable no-useless-escape */\n\n/* eslint-disable no-param-reassign */\nimport { DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION, PROMETHEUS_QUERY_RESOLUTION_LIMIT } from '../pages/ApplicationDashboard/constants';\nvar labelMatchOperators = ['==', '!=', '<=', '<', '>=', '>', '=~', '!~', '='];\nexport var getPromQueryInput = function getPromQueryInput(prom_queries, timeRangeDiff, withEvents) {\n  var promQueries = [];\n  prom_queries.forEach(function (query) {\n    promQueries.push({\n      queryid: query.queryid,\n      query: query.prom_query_name,\n      legend: query.legend,\n      resolution: query.resolution,\n      minstep: Math.floor(timeRangeDiff / parseInt(query.minstep, 10)) * prom_queries.length < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1 ? parseInt(query.minstep, 10) : Math.floor(timeRangeDiff * prom_queries.length / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1))\n    });\n  });\n\n  if (withEvents) {\n    promQueries.push({\n      queryid: 'chaos-interval',\n      query: 'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}',\n      legend: '{{chaosengine_name}}',\n      resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n      minstep: timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1 ? 1 : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1))\n    }); // promQueries.push({\n    //   queryid: 'chaos-verdict',\n    //   query: 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}',\n    //   legend: '{{chaosengine_name}}',\n    //   resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n    //   minstep:\n    //     timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n    //       ? 1\n    //       : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n    // });\n  }\n\n  return promQueries;\n};\nexport var DataParserForPrometheus = function DataParserForPrometheus(prometheusData, lineGraph, areaGraph, closedAreaQueryIDs, selectedApplications) {\n  var _prometheusData$GetPr, _prometheusData$GetPr2;\n\n  var parsedPrometheusData = {\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: []\n  };\n  (_prometheusData$GetPr = prometheusData.GetPromQuery.annotationsResponse) === null || _prometheusData$GetPr === void 0 ? void 0 : _prometheusData$GetPr.forEach(function (queryResponse, mainIndex) {\n    if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n      var _parsedPrometheusData;\n\n      (_parsedPrometheusData = parsedPrometheusData.chaosData).push.apply(_parsedPrometheusData, _toConsumableArray(queryResponse.legends.map(function (elem, index) {\n        return {\n          metricName: elem,\n          data: queryResponse.tsvs[index].map(function (dataPoint) {\n            return _objectSpread({}, dataPoint);\n          }),\n          baseColor: areaGraph[(mainIndex + index % areaGraph.length) % areaGraph.length],\n          subData: []\n        };\n      })));\n    }\n  });\n  (_prometheusData$GetPr2 = prometheusData.GetPromQuery.metricsResponse) === null || _prometheusData$GetPr2 === void 0 ? void 0 : _prometheusData$GetPr2.forEach(function (queryResponse, mainIndex) {\n    if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n      var legends = queryResponse.legends;\n      var tsvs = queryResponse.tsvs;\n\n      if (selectedApplications && selectedApplications.length) {\n        var newLegends = [];\n        var newTsvs = [];\n        queryResponse.legends.forEach(function (legend, index) {\n          var filteredApps = selectedApplications.filter(function (app) {\n            return legend.includes(app);\n          });\n\n          if (filteredApps.length) {\n            newLegends.push(legend);\n            newTsvs.push(queryResponse.tsvs[index]);\n          }\n        });\n        legends = newLegends;\n        tsvs = newTsvs;\n      }\n\n      if (closedAreaQueryIDs.includes(queryResponse.queryid)) {\n        var _parsedPrometheusData2;\n\n        (_parsedPrometheusData2 = parsedPrometheusData.closedAreaData).push.apply(_parsedPrometheusData2, _toConsumableArray(legends.map(function (elem, index) {\n          return {\n            metricName: elem,\n            data: tsvs[index].map(function (dataPoint) {\n              return _objectSpread({}, dataPoint);\n            }),\n            baseColor: areaGraph[(mainIndex + index % areaGraph.length) % areaGraph.length]\n          };\n        })));\n      } else {\n        var _parsedPrometheusData3;\n\n        (_parsedPrometheusData3 = parsedPrometheusData.seriesData).push.apply(_parsedPrometheusData3, _toConsumableArray(legends.map(function (elem, index) {\n          return {\n            metricName: elem,\n            data: tsvs[index].map(function (dataPoint) {\n              return _objectSpread({}, dataPoint);\n            }),\n            baseColor: lineGraph[(mainIndex + index % lineGraph.length) % lineGraph.length]\n          };\n        })));\n      }\n    }\n  });\n  return parsedPrometheusData;\n};\nexport var replaceBetween = function replaceBetween(origin, startIndex, endIndex, insertion) {\n  return \"\".concat(origin.substring(0, startIndex)).concat(insertion).concat(origin.substring(endIndex));\n};\nexport var getLabelsAndValues = function getLabelsAndValues(queryString) {\n  var labelValuesList = [];\n  var re = /\\{(.*?)\\}/g;\n  var arr = queryString.match(re);\n\n  if (arr) {\n    var tempLabelValueList = arr[0].split(',');\n    tempLabelValueList.forEach(function (labelValue, index) {\n      var adjustedLabelValue = labelValue;\n\n      if (index === 0) {\n        adjustedLabelValue = adjustedLabelValue.substring(1, labelValue.length);\n      }\n\n      if (index === tempLabelValueList.length - 1) {\n        adjustedLabelValue = adjustedLabelValue.substring(0, labelValue.length - 2);\n      }\n\n      var splitOperator = '';\n      labelMatchOperators.some(function (val) {\n        var ret = adjustedLabelValue.indexOf(val) !== -1;\n\n        if (ret) {\n          splitOperator = val;\n        }\n\n        return ret;\n      });\n      var labelAndValue = adjustedLabelValue.trim().split(splitOperator);\n      var re1 = /\\\"(.*?)\\\"/g;\n\n      if (labelAndValue.length > 0 && labelAndValue[1]) {\n        var arr1 = labelAndValue[1].match(re1);\n\n        if (arr1 && arr1.length > 0) {\n          var updateStatus = false;\n          labelValuesList.forEach(function (labVal) {\n            if (labVal.label === labelAndValue[0]) {\n              labVal.value = labVal.value.concat(arr1[0].substring(1, arr1[0].length - 1).split('|'));\n              updateStatus = true;\n            }\n          });\n\n          if (!updateStatus) {\n            labelValuesList.push({\n              label: labelAndValue[0],\n              value: arr1[0].substring(1, arr1[0].length - 1).split('|')\n            });\n          }\n        }\n      }\n    });\n  }\n\n  return labelValuesList;\n};\nexport var setLabelsAndValues = function setLabelsAndValues(baseQueryString, queryString, labelValuesList) {\n  var existingQueryString = queryString;\n  labelValuesList.forEach(function (labVal) {\n    var matchBracketIndex = existingQueryString.indexOf('{');\n    var matchLabelIndex = -1;\n\n    if (matchBracketIndex !== -1) {\n      matchLabelIndex = existingQueryString.indexOf(labVal.label, matchBracketIndex);\n    }\n\n    if (matchLabelIndex === -1) {\n      if (matchBracketIndex === -1) {\n        var baseConcatIndex = queryString.indexOf(baseQueryString) + baseQueryString.length - 1;\n        existingQueryString = \"\".concat(existingQueryString.slice(0, baseConcatIndex + 1), \"{\").concat(labVal.label, \"=~\\\"\").concat(labVal.value.join('|'), \"\\\"}\").concat(existingQueryString.slice(baseConcatIndex + 1));\n      } else {\n        existingQueryString = \"\".concat(existingQueryString.slice(0, matchBracketIndex + 1)).concat(labVal.label, \"=~\\\"\").concat(labVal.value.join('|'), \"\\\",\").concat(existingQueryString.slice(matchBracketIndex + 1));\n      }\n    } else {\n      var lastIndexOfOpr = existingQueryString.indexOf(\"\\\"\", matchLabelIndex);\n      var lastIndexOfVal = existingQueryString.indexOf(\"\\\"\", lastIndexOfOpr + 1);\n      var subStrToReplace = existingQueryString.substring(lastIndexOfOpr, lastIndexOfVal + 1);\n\n      if (lastIndexOfOpr !== -1 && lastIndexOfVal !== -1) {\n        if (labVal.value.length) {\n          existingQueryString = existingQueryString.replace(subStrToReplace, \"\\\"\".concat(labVal.value.join('|'), \"\\\"\"));\n          existingQueryString = replaceBetween(existingQueryString, matchLabelIndex + labVal.label.length, lastIndexOfOpr, '=~');\n        } else {\n          var graceIndexForBrackets = (existingQueryString[lastIndexOfVal + 1] === '}' || existingQueryString[lastIndexOfVal + 2] === '}') && existingQueryString[matchLabelIndex - 1] === '{' ? 1 : 0;\n          existingQueryString = existingQueryString.replace(existingQueryString.substring(matchLabelIndex - graceIndexForBrackets, existingQueryString[lastIndexOfVal + 1] === ',' ? lastIndexOfVal + 2 + graceIndexForBrackets : lastIndexOfVal + 1 + graceIndexForBrackets), \"\");\n        }\n      }\n    }\n  });\n  return existingQueryString;\n};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/promUtils.ts"],"names":["DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION","PROMETHEUS_QUERY_RESOLUTION_LIMIT","labelMatchOperators","getPromQueryInput","prom_queries","timeRangeDiff","withEvents","promQueries","forEach","query","push","queryid","prom_query_name","legend","resolution","minstep","Math","floor","parseInt","length","DataParserForPrometheus","prometheusData","lineGraph","areaGraph","closedAreaQueryIDs","selectedApplications","parsedPrometheusData","seriesData","closedAreaData","chaosData","GetPromQuery","annotationsResponse","queryResponse","mainIndex","legends","tsvs","map","elem","index","metricName","data","dataPoint","baseColor","subData","metricsResponse","newLegends","newTsvs","filteredApps","filter","app","includes","replaceBetween","origin","startIndex","endIndex","insertion","substring","getLabelsAndValues","queryString","labelValuesList","re","arr","match","tempLabelValueList","split","labelValue","adjustedLabelValue","splitOperator","some","val","ret","indexOf","labelAndValue","trim","re1","arr1","updateStatus","labVal","label","value","concat","setLabelsAndValues","baseQueryString","existingQueryString","matchBracketIndex","matchLabelIndex","baseConcatIndex","slice","join","lastIndexOfOpr","lastIndexOfVal","subStrToReplace","replace","graceIndexForBrackets"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-param-reassign */\nimport {\n  ParsedPrometheusData,\n  PromQueryDetails,\n  QueryLabelValue,\n} from '../models/dashboardsData';\nimport {\n  metricsTimeStampValue,\n  PrometheusResponse,\n  promQueryInput,\n} from '../models/graphql/prometheus';\nimport {\n  DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n  PROMETHEUS_QUERY_RESOLUTION_LIMIT,\n} from '../pages/ApplicationDashboard/constants';\n\nconst labelMatchOperators = ['==', '!=', '<=', '<', '>=', '>', '=~', '!~', '='];\n\nexport const getPromQueryInput = (\n  prom_queries: PromQueryDetails[],\n  timeRangeDiff: number,\n  withEvents: Boolean\n) => {\n  const promQueries: promQueryInput[] = [];\n  prom_queries.forEach((query: PromQueryDetails) => {\n    promQueries.push({\n      queryid: query.queryid,\n      query: query.prom_query_name,\n      legend: query.legend,\n      resolution: query.resolution,\n      minstep:\n        Math.floor(timeRangeDiff / parseInt(query.minstep, 10)) *\n          prom_queries.length <\n        PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n          ? parseInt(query.minstep, 10)\n          : Math.floor(\n              (timeRangeDiff * prom_queries.length) /\n                (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)\n            ),\n    });\n  });\n  if (withEvents) {\n    promQueries.push({\n      queryid: 'chaos-interval',\n      query: 'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}',\n      legend: '{{chaosengine_name}}',\n      resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n      minstep:\n        timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n          ? 1\n          : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n    });\n    // promQueries.push({\n    //   queryid: 'chaos-verdict',\n    //   query: 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}',\n    //   legend: '{{chaosengine_name}}',\n    //   resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n    //   minstep:\n    //     timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n    //       ? 1\n    //       : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n    // });\n  }\n  return promQueries;\n};\n\nexport const DataParserForPrometheus = (\n  prometheusData: PrometheusResponse,\n  lineGraph: string[],\n  areaGraph: string[],\n  closedAreaQueryIDs: string[],\n  selectedApplications?: string[]\n) => {\n  const parsedPrometheusData: ParsedPrometheusData = {\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: [],\n  };\n  prometheusData.GetPromQuery.annotationsResponse?.forEach(\n    (queryResponse, mainIndex) => {\n      if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n        parsedPrometheusData.chaosData.push(\n          ...queryResponse.legends.map((elem, index) => ({\n            metricName: elem,\n            data: queryResponse.tsvs[index].map((dataPoint) => ({\n              ...dataPoint,\n            })),\n            baseColor:\n              areaGraph[\n                (mainIndex + (index % areaGraph.length)) % areaGraph.length\n              ],\n            subData: [],\n          }))\n        );\n      }\n    }\n  );\n  prometheusData.GetPromQuery.metricsResponse?.forEach(\n    (queryResponse, mainIndex) => {\n      if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n        let { legends } = queryResponse;\n        let { tsvs } = queryResponse;\n        if (selectedApplications && selectedApplications.length) {\n          const newLegends: string[] = [];\n          const newTsvs: metricsTimeStampValue[][] = [];\n          queryResponse.legends.forEach((legend, index) => {\n            const filteredApps: string[] = selectedApplications.filter((app) =>\n              legend.includes(app)\n            );\n            if (filteredApps.length) {\n              newLegends.push(legend);\n              newTsvs.push(queryResponse.tsvs[index]);\n            }\n          });\n          legends = newLegends;\n          tsvs = newTsvs;\n        }\n        if (closedAreaQueryIDs.includes(queryResponse.queryid)) {\n          parsedPrometheusData.closedAreaData.push(\n            ...legends.map((elem, index) => ({\n              metricName: elem,\n              data: tsvs[index].map((dataPoint) => ({\n                ...dataPoint,\n              })),\n              baseColor:\n                areaGraph[\n                  (mainIndex + (index % areaGraph.length)) % areaGraph.length\n                ],\n            }))\n          );\n        } else {\n          parsedPrometheusData.seriesData.push(\n            ...legends.map((elem, index) => ({\n              metricName: elem,\n              data: tsvs[index].map((dataPoint) => ({\n                ...dataPoint,\n              })),\n              baseColor:\n                lineGraph[\n                  (mainIndex + (index % lineGraph.length)) % lineGraph.length\n                ],\n            }))\n          );\n        }\n      }\n    }\n  );\n  return parsedPrometheusData;\n};\n\nexport const replaceBetween = (\n  origin: string,\n  startIndex: number,\n  endIndex: number,\n  insertion: string\n) =>\n  `${origin.substring(0, startIndex)}${insertion}${origin.substring(endIndex)}`;\n\nexport const getLabelsAndValues = (queryString: string) => {\n  const labelValuesList: QueryLabelValue[] = [];\n  const re = /\\{(.*?)\\}/g;\n  const arr: string[] = queryString.match(re) as string[];\n  if (arr) {\n    const tempLabelValueList = arr[0].split(',');\n    tempLabelValueList.forEach((labelValue, index) => {\n      let adjustedLabelValue = labelValue;\n      if (index === 0) {\n        adjustedLabelValue = adjustedLabelValue.substring(1, labelValue.length);\n      }\n      if (index === tempLabelValueList.length - 1) {\n        adjustedLabelValue = adjustedLabelValue.substring(\n          0,\n          labelValue.length - 2\n        );\n      }\n      let splitOperator = '';\n      labelMatchOperators.some((val) => {\n        const ret = adjustedLabelValue.indexOf(val) !== -1;\n        if (ret) {\n          splitOperator = val;\n        }\n        return ret;\n      });\n      const labelAndValue = adjustedLabelValue.trim().split(splitOperator);\n      const re1 = /\\\"(.*?)\\\"/g;\n      if (labelAndValue.length > 0 && labelAndValue[1]) {\n        const arr1: string[] = labelAndValue[1].match(re1) as string[];\n        if (arr1 && arr1.length > 0) {\n          let updateStatus = false;\n          labelValuesList.forEach((labVal) => {\n            if (labVal.label === labelAndValue[0]) {\n              labVal.value = labVal.value.concat(\n                arr1[0].substring(1, arr1[0].length - 1).split('|')\n              );\n              updateStatus = true;\n            }\n          });\n          if (!updateStatus) {\n            labelValuesList.push({\n              label: labelAndValue[0],\n              value: arr1[0].substring(1, arr1[0].length - 1).split('|'),\n            });\n          }\n        }\n      }\n    });\n  }\n  return labelValuesList;\n};\n\nexport const setLabelsAndValues = (\n  baseQueryString: string,\n  queryString: string,\n  labelValuesList: QueryLabelValue[]\n) => {\n  let existingQueryString: string = queryString;\n  labelValuesList.forEach((labVal) => {\n    const matchBracketIndex = existingQueryString.indexOf('{');\n    let matchLabelIndex = -1;\n    if (matchBracketIndex !== -1) {\n      matchLabelIndex = existingQueryString.indexOf(\n        labVal.label,\n        matchBracketIndex\n      );\n    }\n    if (matchLabelIndex === -1) {\n      if (matchBracketIndex === -1) {\n        const baseConcatIndex =\n          queryString.indexOf(baseQueryString) + baseQueryString.length - 1;\n        existingQueryString = `${existingQueryString.slice(\n          0,\n          baseConcatIndex + 1\n        )}{${labVal.label}=~\"${labVal.value.join(\n          '|'\n        )}\"}${existingQueryString.slice(baseConcatIndex + 1)}`;\n      } else {\n        existingQueryString = `${existingQueryString.slice(\n          0,\n          matchBracketIndex + 1\n        )}${labVal.label}=~\"${labVal.value.join(\n          '|'\n        )}\",${existingQueryString.slice(matchBracketIndex + 1)}`;\n      }\n    } else {\n      const lastIndexOfOpr = existingQueryString.indexOf(`\"`, matchLabelIndex);\n      const lastIndexOfVal = existingQueryString.indexOf(\n        `\"`,\n        lastIndexOfOpr + 1\n      );\n      const subStrToReplace = existingQueryString.substring(\n        lastIndexOfOpr,\n        lastIndexOfVal + 1\n      );\n      if (lastIndexOfOpr !== -1 && lastIndexOfVal !== -1) {\n        if (labVal.value.length) {\n          existingQueryString = existingQueryString.replace(\n            subStrToReplace,\n            `\"${labVal.value.join('|')}\"`\n          );\n          existingQueryString = replaceBetween(\n            existingQueryString,\n            matchLabelIndex + labVal.label.length,\n            lastIndexOfOpr,\n            '=~'\n          );\n        } else {\n          const graceIndexForBrackets =\n            (existingQueryString[lastIndexOfVal + 1] === '}' ||\n              existingQueryString[lastIndexOfVal + 2] === '}') &&\n            existingQueryString[matchLabelIndex - 1] === '{'\n              ? 1\n              : 0;\n          existingQueryString = existingQueryString.replace(\n            existingQueryString.substring(\n              matchLabelIndex - graceIndexForBrackets,\n              existingQueryString[lastIndexOfVal + 1] === ','\n                ? lastIndexOfVal + 2 + graceIndexForBrackets\n                : lastIndexOfVal + 1 + graceIndexForBrackets\n            ),\n            ``\n          );\n        }\n      }\n    }\n  });\n  return existingQueryString;\n};\n"]},"metadata":{},"sourceType":"module"}