{"ast":null,"code":"import _defineProperty from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var _createReducer;import{AnalyticsActions}from'../../models/redux/analytics';import createReducer from'./createReducer';var initialState={communityData:{github:{stars:'',experimentsCount:''},google:{totalRuns:'',operatorInstalls:'',geoCity:[],geoCountry:[],dailyExperimentData:[],dailyOperatorData:[],monthlyExperimentData:[],monthlyOperatorData:[]}},loading:false,error:false};export var communityData=createReducer(initialState,(_createReducer={},_defineProperty(_createReducer,AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS,function(state,action){var data=action.payload;var geoCity=[];data.google.geoCity.forEach(function(c){geoCity.push({name:c[0],latitude:c[1],longitude:c[2],count:c[3]});});var geoCountry=data.google.geoCountry;var dailyExperimentData=[];data.google.dailyExperimentData.forEach(function(c){dailyExperimentData.push({date:c[0],count:c[1]});});var dailyOperatorData=[];data.google.dailyOperatorData.forEach(function(c){dailyOperatorData.push({date:c[0],count:c[1]});});var monthlyExperimentData=[];data.google.monthlyExperimentData.forEach(function(c){monthlyExperimentData.push({date:c[0],count:c[1]});});var monthlyOperatorData=[];data.google.monthlyOperatorData.forEach(function(c){monthlyOperatorData.push({date:c[0],count:c[1]});});return _objectSpread(_objectSpread({},state),{},{communityData:{github:data.github,google:{totalRuns:data.google.totalRuns,operatorInstalls:data.google.operatorInstalls,geoCountry:geoCountry,geoCity:geoCity,dailyExperimentData:dailyExperimentData,dailyOperatorData:dailyOperatorData,monthlyExperimentData:monthlyExperimentData,monthlyOperatorData:monthlyOperatorData}},loading:false,error:false});}),_defineProperty(_createReducer,AnalyticsActions.COMMUNITY_ANALYTICS_LOADING,function(state,action){return _objectSpread(_objectSpread({},state),{},{loading:action.payload});}),_defineProperty(_createReducer,AnalyticsActions.COMMUNITY_ANALYTICS_ERROR,function(state,action){return _objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});}),_createReducer));export default communityData;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/redux/reducers/analytics.ts"],"names":["AnalyticsActions","createReducer","initialState","communityData","github","stars","experimentsCount","google","totalRuns","operatorInstalls","geoCity","geoCountry","dailyExperimentData","dailyOperatorData","monthlyExperimentData","monthlyOperatorData","loading","error","COMMUNITY_ANALYTICS_SUCCESS","state","action","data","payload","forEach","c","push","name","latitude","longitude","count","date","COMMUNITY_ANALYTICS_LOADING","COMMUNITY_ANALYTICS_ERROR"],"mappings":"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","sourcesContent":["import {\n  AnalyticsAction,\n  AnalyticsActions,\n  AnalyticsData,\n  CommunityData,\n  GeoCity,\n  SeriesData,\n} from '../../models/redux/analytics';\nimport createReducer from './createReducer';\n\nconst initialState: AnalyticsData = {\n  communityData: {\n    github: { stars: '', experimentsCount: '' },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: [],\n    },\n  },\n  loading: false,\n  error: false,\n};\n\nexport const communityData = createReducer<AnalyticsData>(initialState, {\n  [AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    const data = action.payload as CommunityData;\n    const geoCity: GeoCity[] = [];\n    data.google.geoCity.forEach((c: any) => {\n      geoCity.push({\n        name: c[0],\n        latitude: c[1],\n        longitude: c[2],\n        count: c[3],\n      });\n    });\n\n    const { geoCountry } = data.google;\n\n    const dailyExperimentData: SeriesData[] = [];\n    data.google.dailyExperimentData.forEach((c: any) => {\n      dailyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const dailyOperatorData: SeriesData[] = [];\n    data.google.dailyOperatorData.forEach((c: any) => {\n      dailyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyExperimentData: SeriesData[] = [];\n    data.google.monthlyExperimentData.forEach((c: any) => {\n      monthlyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyOperatorData: SeriesData[] = [];\n    data.google.monthlyOperatorData.forEach((c: any) => {\n      monthlyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    return {\n      ...state,\n      communityData: {\n        github: data.github,\n        google: {\n          totalRuns: data.google.totalRuns,\n          operatorInstalls: data.google.operatorInstalls,\n          geoCountry,\n          geoCity,\n          dailyExperimentData,\n          dailyOperatorData,\n          monthlyExperimentData,\n          monthlyOperatorData,\n        },\n      },\n      loading: false,\n      error: false,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_LOADING](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: action.payload as boolean,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_ERROR](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: false,\n      error: action.payload as boolean,\n    };\n  },\n});\n\nexport default communityData;\n"]},"metadata":{},"sourceType":"module"}