{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/Cards/DashBoardCards.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useActions from '../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../redux/actions/dashboards';\nimport DashboardCard from './index';\nimport useStyles from './styles';\nimport UploadJSON from './UploadDashboard';\n\nvar DashboardCards = function DashboardCards(_ref) {\n  var dashboards = _ref.dashboards,\n      _handleClick = _ref.handleClick,\n      generateAlert = _ref.generateAlert;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dashboard = useActions(DashboardActions); // Function to fetch json\n\n  var fetchJson = function fetchJson(link) {\n    fetch(link).then(function (response) {\n      if (!response.ok) {\n        throw new Error(\"HTTP status \".concat(response.status));\n      }\n\n      response.text().then(function (jsonText) {\n        dashboard.selectDashboard({\n          dashboardJSON: JSON.parse(jsonText)\n        });\n\n        _handleClick();\n      });\n    }).catch(function (err) {\n      console.error(err);\n      generateAlert();\n    });\n  };\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      upload = _React$useState2[0],\n      setUpload = _React$useState2[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, dashboards && dashboards.map(function (d) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: d.dashboardTypeID,\n      \"data-cy\": \"dashboardCard\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DashboardCard, {\n      key: d.dashboardTypeID,\n      dashboardTypeID: d.dashboardTypeID,\n      typeName: d.typeName,\n      urlToIcon: d.urlToIcon,\n      handleClick: function handleClick() {\n        if (d.dashboardTypeID !== 'custom' && d.dashboardTypeID !== 'upload') {\n          var _d$urlToDashboard;\n\n          fetchJson((_d$urlToDashboard = d.urlToDashboard) !== null && _d$urlToDashboard !== void 0 ? _d$urlToDashboard : '');\n        } else if (d.dashboardTypeID === 'custom') {\n          dashboard.selectDashboard({\n            dashboardJSON: null\n          });\n\n          _handleClick();\n        } else if (d.dashboardTypeID === 'upload') {\n          setUpload(true);\n        }\n      },\n      information: d.information,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }));\n  })), upload && /*#__PURE__*/React.createElement(Modal, {\n    open: true,\n    onClose: function onClose() {\n      return setUpload(false);\n    },\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      className: classes.closeButton,\n      onClick: function onClick() {\n        return setUpload(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"\\u2715\"),\n    width: \"50%\",\n    height: \"fit-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.modalHeading,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.heading')), /*#__PURE__*/React.createElement(UploadJSON, {\n    successHandler: function successHandler() {\n      return _handleClick();\n    },\n    errorHandler: function errorHandler() {\n      return generateAlert();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default DashboardCards;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/Cards/DashBoardCards.tsx"],"names":["Typography","ButtonOutlined","Modal","React","useTranslation","useActions","DashboardActions","DashboardCard","useStyles","UploadJSON","DashboardCards","dashboards","handleClick","generateAlert","classes","t","dashboard","fetchJson","link","fetch","then","response","ok","Error","status","text","jsonText","selectDashboard","dashboardJSON","JSON","parse","catch","err","console","error","useState","upload","setUpload","root","map","d","dashboardTypeID","typeName","urlToIcon","urlToDashboard","information","closeButton","modal","modalHeading"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardData } from '../../../../../../models/dashboardsData';\nimport useActions from '../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../redux/actions/dashboards';\nimport DashboardCard from './index';\nimport useStyles from './styles';\nimport UploadJSON from './UploadDashboard';\n\ninterface DashboardCardsProps {\n  dashboards: DashboardData[];\n  handleClick: () => void;\n  generateAlert: () => void;\n}\n\nconst DashboardCards: React.FC<DashboardCardsProps> = ({\n  dashboards,\n  handleClick,\n  generateAlert,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const dashboard = useActions(DashboardActions);\n\n  // Function to fetch json\n\n  const fetchJson = (link: string) => {\n    fetch(link)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP status ${response.status}`);\n        }\n        response.text().then((jsonText) => {\n          dashboard.selectDashboard({\n            dashboardJSON: JSON.parse(jsonText),\n          });\n          handleClick();\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        generateAlert();\n      });\n  };\n\n  const [upload, setUpload] = React.useState(false);\n\n  return (\n    <div>\n      <div className={classes.root}>\n        {dashboards &&\n          dashboards.map((d: DashboardData) => (\n            <div key={d.dashboardTypeID} data-cy=\"dashboardCard\">\n              <DashboardCard\n                key={d.dashboardTypeID}\n                dashboardTypeID={d.dashboardTypeID}\n                typeName={d.typeName}\n                urlToIcon={d.urlToIcon}\n                handleClick={() => {\n                  if (\n                    d.dashboardTypeID !== 'custom' &&\n                    d.dashboardTypeID !== 'upload'\n                  ) {\n                    fetchJson(d.urlToDashboard ?? '');\n                  } else if (d.dashboardTypeID === 'custom') {\n                    dashboard.selectDashboard({\n                      dashboardJSON: null,\n                    });\n                    handleClick();\n                  } else if (d.dashboardTypeID === 'upload') {\n                    setUpload(true);\n                  }\n                }}\n                information={d.information}\n              />\n            </div>\n          ))}\n      </div>\n\n      {upload && (\n        <Modal\n          open\n          onClose={() => setUpload(false)}\n          modalActions={\n            <ButtonOutlined\n              className={classes.closeButton}\n              onClick={() => setUpload(false)}\n            >\n              &#x2715;\n            </ButtonOutlined>\n          }\n          width=\"50%\"\n          height=\"fit-content\"\n        >\n          <div className={classes.modal}>\n            <Typography className={classes.modalHeading} align=\"left\">\n              {t(\n                'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.heading'\n              )}\n            </Typography>\n            <UploadJSON\n              successHandler={() => handleClick()}\n              errorHandler={() => generateAlert()}\n            />\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardCards;\n"]},"metadata":{},"sourceType":"module"}