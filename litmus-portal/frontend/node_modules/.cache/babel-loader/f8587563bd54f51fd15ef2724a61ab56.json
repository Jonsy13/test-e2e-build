{"ast":null,"code":"import YAML from 'yaml';\nvar steps;\nexport var extractSteps = function extractSteps(isCustom, crd) {\n  if (isCustom) {\n    // If Custom YAML is provided then save the experiments Serially\n    var parsedYaml = YAML.parse(crd);\n\n    var customYAMLExtraction = function customYAMLExtraction(template) {\n      steps = template.steps && template.steps;\n    };\n\n    if (parsedYaml.kind === 'Workflow') {\n      customYAMLExtraction(parsedYaml.spec.templates[0]);\n    } else if (parsedYaml.kind === 'CronWorkflow') {\n      customYAMLExtraction(parsedYaml.spec.workflowSpec.templates[0]);\n    }\n  } else {\n    // Save the Pre-defined experiments Serial/Parallel\n    var _parsedYaml = YAML.parse(crd);\n\n    var preDefinedExtraction = function preDefinedExtraction(template) {\n      // Extracting Run Chaos Steps and appending to the array\n      if (template.name === 'argowf-chaos' && template.steps[1][0].name === 'run-chaos') {\n        // Adding install-experiment step\n        steps.push([{\n          name: template.steps[0][0].name,\n          template: template.steps[0][0].name\n        }]); // Serialized Steps\n\n        _parsedYaml.spec.templates.forEach(function (template) {\n          if (template.name === 'run-chaos') {\n            template.inputs.artifacts.forEach(function (artifact) {\n              var chaosEngine = YAML.parse(artifact.raw.data);\n\n              if (chaosEngine.kind === 'ChaosEngine') {\n                steps.push([{\n                  name: chaosEngine.metadata.name,\n                  template: chaosEngine.metadata.template\n                }]);\n              }\n            });\n          }\n        }); // Adding revert-chaos step\n\n\n        template.steps.forEach(function (step) {\n          if (step[0].name === 'revert-chaos') {\n            steps.push([{\n              name: step[0].name,\n              template: step[0].name\n            }]);\n          }\n        });\n      } else if (template.name === 'argowf-chaos' && template.steps[1][0].name !== 'run-chaos') {\n        // Nested Steps\n        steps = template.steps;\n      }\n    };\n\n    steps = [];\n\n    if (_parsedYaml.kind === 'Workflow') {\n      _parsedYaml.spec.templates.forEach(function (template) {\n        return preDefinedExtraction(template);\n      });\n    } else if (_parsedYaml.kind === 'CronWorkflow') {\n      _parsedYaml.spec.workflowSpec.templates.forEach(function (template) {\n        return preDefinedExtraction(template);\n      });\n    }\n  }\n\n  return steps;\n};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/ExtractSteps.ts"],"names":["YAML","steps","extractSteps","isCustom","crd","parsedYaml","parse","customYAMLExtraction","template","kind","spec","templates","workflowSpec","preDefinedExtraction","name","push","forEach","inputs","artifacts","artifact","chaosEngine","raw","data","metadata","step"],"mappings":"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","sourcesContent":["import YAML from 'yaml';\nimport { Steps } from '../../../models/chaosWorkflowYaml';\n\nlet steps: Steps[][];\n\nexport const extractSteps = (isCustom: boolean, crd: string) => {\n  if (isCustom) {\n    // If Custom YAML is provided then save the experiments Serially\n    const parsedYaml = YAML.parse(crd);\n\n    const customYAMLExtraction = (template: any) => {\n      steps = template.steps && (template.steps as Steps[][]);\n    };\n\n    if (parsedYaml.kind === 'Workflow') {\n      customYAMLExtraction(parsedYaml.spec.templates[0]);\n    } else if (parsedYaml.kind === 'CronWorkflow') {\n      customYAMLExtraction(parsedYaml.spec.workflowSpec.templates[0]);\n    }\n  } else {\n    // Save the Pre-defined experiments Serial/Parallel\n    const parsedYaml = YAML.parse(crd);\n\n    const preDefinedExtraction = (template: any) => {\n      // Extracting Run Chaos Steps and appending to the array\n      if (\n        template.name === 'argowf-chaos' &&\n        template.steps[1][0].name === 'run-chaos'\n      ) {\n        // Adding install-experiment step\n        steps.push([\n          {\n            name: template.steps[0][0].name,\n            template: template.steps[0][0].name,\n          },\n        ]);\n\n        // Serialized Steps\n        parsedYaml.spec.templates.forEach((template: any) => {\n          if (template.name === 'run-chaos') {\n            template.inputs.artifacts.forEach((artifact: any) => {\n              const chaosEngine = YAML.parse(artifact.raw.data);\n              if (chaosEngine.kind === 'ChaosEngine') {\n                steps.push([\n                  {\n                    name: chaosEngine.metadata.name,\n                    template: chaosEngine.metadata.template,\n                  },\n                ]);\n              }\n            });\n          }\n        });\n\n        // Adding revert-chaos step\n        template.steps.forEach((step: any) => {\n          if (step[0].name === 'revert-chaos') {\n            steps.push([\n              {\n                name: step[0].name,\n                template: step[0].name,\n              },\n            ]);\n          }\n        });\n      } else if (\n        template.name === 'argowf-chaos' &&\n        template.steps[1][0].name !== 'run-chaos'\n      ) {\n        // Nested Steps\n        steps = template.steps as Steps[][];\n      }\n    };\n\n    steps = [];\n    if (parsedYaml.kind === 'Workflow') {\n      parsedYaml.spec.templates.forEach((template: any) =>\n        preDefinedExtraction(template)\n      );\n    } else if (parsedYaml.kind === 'CronWorkflow') {\n      parsedYaml.spec.workflowSpec.templates.forEach((template: any) =>\n        preDefinedExtraction(template)\n      );\n    }\n  }\n  return steps;\n};\n"]},"metadata":{},"sourceType":"module"}