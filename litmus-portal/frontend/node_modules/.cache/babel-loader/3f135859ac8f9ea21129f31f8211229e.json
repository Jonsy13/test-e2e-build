{"ast":null,"code":"import jwtDecode from'jsonwebtoken';import{history}from'../redux/configureStore';import{getJWTToken,setCookie,setJWTToken}from'./cookies';// Logs out the user and unsets the jwt token\nexport function logout(){setCookie({name:'token',value:'',exhours:1});window.location.reload();}// Returns the jwt token\nexport function getToken(){var jwtToken=getJWTToken('token');// Logout user if jwt is expired\nif(jwtToken===''){history.push('/login');}return jwtToken;}// Sets the jwt token in the cookie\nexport function setUserDetails(token){setJWTToken({token:token,cookieName:'token',errorMessage:'ERROR IN SETTING USER DETAILS: '});}// Returns the details of a user from jwt token\nexport function getUserDetailsFromJwt(){var jwtToken=getToken();var userDetails=jwtDecode.decode(jwtToken);return userDetails;}// Returns the username from jwt token\nexport function getUsername(){if(getToken())return getUserDetailsFromJwt().username;return'';}// Returns userId from jwt token\nexport function getUserId(){if(getToken())return getUserDetailsFromJwt().uid;return'';}export function getUserRole(){if(getToken())return getUserDetailsFromJwt().role;return'';}export function getUserEmail(){var _getUserDetailsFromJw;if(getToken())return(_getUserDetailsFromJw=getUserDetailsFromJwt().email)!==null&&_getUserDetailsFromJw!==void 0?_getUserDetailsFromJw:'';return'';}export function getUserFullName(){var _getUserDetailsFromJw2;if(getToken())return(_getUserDetailsFromJw2=getUserDetailsFromJwt().name)!==null&&_getUserDetailsFromJw2!==void 0?_getUserDetailsFromJw2:'';return'';}","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/auth.ts"],"names":["jwtDecode","history","getJWTToken","setCookie","setJWTToken","logout","name","value","exhours","window","location","reload","getToken","jwtToken","push","setUserDetails","token","cookieName","errorMessage","getUserDetailsFromJwt","userDetails","decode","getUsername","username","getUserId","uid","getUserRole","role","getUserEmail","email","getUserFullName"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,OAAT,KAAwB,yBAAxB,CACA,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,WAAjC,KAAoD,WAApD,CAYA;AACA,MAAO,SAASC,CAAAA,MAAT,EAAkB,CACvBF,SAAS,CAAC,CAAEG,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAE,EAAxB,CAA4BC,OAAO,CAAE,CAArC,CAAD,CAAT,CACAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GACD,CAED;AACA,MAAO,SAASC,CAAAA,QAAT,EAA4B,CACjC,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,CAAC,OAAD,CAA5B,CAEA;AACA,GAAIW,QAAQ,GAAK,EAAjB,CAAqB,CACnBZ,OAAO,CAACa,IAAR,CAAa,QAAb,EACD,CAED,MAAOD,CAAAA,QAAP,CACD,CAED;AACA,MAAO,SAASE,CAAAA,cAAT,CAAwBC,KAAxB,CAAuC,CAC5CZ,WAAW,CAAC,CACVY,KAAK,CAALA,KADU,CAEVC,UAAU,CAAE,OAFF,CAGVC,YAAY,CAAE,iCAHJ,CAAD,CAAX,CAKD,CAED;AACA,MAAO,SAASC,CAAAA,qBAAT,EAA8C,CACnD,GAAMN,CAAAA,QAAQ,CAAGD,QAAQ,EAAzB,CACA,GAAMQ,CAAAA,WAAW,CAAGpB,SAAS,CAACqB,MAAV,CAAiBR,QAAjB,CAApB,CACA,MAAOO,CAAAA,WAAP,CACD,CAED;AACA,MAAO,SAASE,CAAAA,WAAT,EAA+B,CACpC,GAAIV,QAAQ,EAAZ,CAAgB,MAAOO,CAAAA,qBAAqB,GAAGI,QAA/B,CAChB,MAAO,EAAP,CACD,CAED;AACA,MAAO,SAASC,CAAAA,SAAT,EAA6B,CAClC,GAAIZ,QAAQ,EAAZ,CAAgB,MAAOO,CAAAA,qBAAqB,GAAGM,GAA/B,CAChB,MAAO,EAAP,CACD,CAED,MAAO,SAASC,CAAAA,WAAT,EAA+B,CACpC,GAAId,QAAQ,EAAZ,CAAgB,MAAOO,CAAAA,qBAAqB,GAAGQ,IAA/B,CAChB,MAAO,EAAP,CACD,CAED,MAAO,SAASC,CAAAA,YAAT,EAAgC,2BACrC,GAAIhB,QAAQ,EAAZ,CAAgB,6BAAOO,qBAAqB,GAAGU,KAA/B,+DAAwC,EAAxC,CAChB,MAAO,EAAP,CACD,CAED,MAAO,SAASC,CAAAA,eAAT,EAAmC,4BACxC,GAAIlB,QAAQ,EAAZ,CAAgB,8BAAOO,qBAAqB,GAAGb,IAA/B,iEAAuC,EAAvC,CAChB,MAAO,EAAP,CACD","sourcesContent":["import jwtDecode from 'jsonwebtoken';\nimport { history } from '../redux/configureStore';\nimport { getJWTToken, setCookie, setJWTToken } from './cookies';\n\ninterface UserDetails {\n  role: string;\n  uid: string;\n  username: string;\n  name?: string;\n  email?: string;\n  exp: Date;\n  iat: Date;\n}\n\n// Logs out the user and unsets the jwt token\nexport function logout() {\n  setCookie({ name: 'token', value: '', exhours: 1 });\n  window.location.reload();\n}\n\n// Returns the jwt token\nexport function getToken(): string {\n  const jwtToken = getJWTToken('token');\n\n  // Logout user if jwt is expired\n  if (jwtToken === '') {\n    history.push('/login');\n  }\n\n  return jwtToken;\n}\n\n// Sets the jwt token in the cookie\nexport function setUserDetails(token: string) {\n  setJWTToken({\n    token,\n    cookieName: 'token',\n    errorMessage: 'ERROR IN SETTING USER DETAILS: ',\n  });\n}\n\n// Returns the details of a user from jwt token\nexport function getUserDetailsFromJwt(): UserDetails {\n  const jwtToken = getToken();\n  const userDetails = jwtDecode.decode(jwtToken) as UserDetails;\n  return userDetails;\n}\n\n// Returns the username from jwt token\nexport function getUsername(): string {\n  if (getToken()) return getUserDetailsFromJwt().username;\n  return '';\n}\n\n// Returns userId from jwt token\nexport function getUserId(): string {\n  if (getToken()) return getUserDetailsFromJwt().uid;\n  return '';\n}\n\nexport function getUserRole(): string {\n  if (getToken()) return getUserDetailsFromJwt().role;\n  return '';\n}\n\nexport function getUserEmail(): string {\n  if (getToken()) return getUserDetailsFromJwt().email ?? '';\n  return '';\n}\n\nexport function getUserFullName(): string {\n  if (getToken()) return getUserDetailsFromJwt().name ?? '';\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}