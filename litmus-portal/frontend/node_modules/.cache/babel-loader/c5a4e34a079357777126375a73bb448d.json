{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/Graph/index.tsx\";\n\nimport { useLazyQuery } from '@apollo/client';\nimport { useTheme } from '@material-ui/core';\nimport { LineAreaGraph } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { PROM_QUERY } from '../../../../../../../../graphql';\nimport { DataParserForPrometheus } from '../../../../../../../../utils/promUtils';\nimport useStyles from './styles';\n\nvar Graph = function Graph(_ref) {\n  var prometheusQueryData = _ref.prometheusQueryData,\n      panelVars = _ref.panelVars;\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var classes = useStyles();\n  var lineGraph = palette.graph.line;\n  var areaGraph = palette.graph.area;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstLoad = _useState2[0],\n      setFirstLoad = _useState2[1];\n\n  var _React$useState = React.useState({\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      graphData = _React$useState2[0],\n      setGraphData = _React$useState2[1];\n\n  var _useLazyQuery = useLazyQuery(PROM_QUERY, {\n    variables: {\n      prometheusInput: prometheusQueryData\n    },\n    fetchPolicy: 'no-cache',\n    onCompleted: function onCompleted(prometheusData) {\n      if (prometheusData) {\n        var parsedData = DataParserForPrometheus(prometheusData, lineGraph, areaGraph, panelVars.prom_queries.filter(function (query) {\n          return query.close_area;\n        }).map(function (query) {\n          return query.queryid;\n        }));\n        setGraphData(parsedData);\n      }\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getGraphData = _useLazyQuery2[0];\n\n  useEffect(function () {\n    var _prometheusQueryData$;\n\n    if (firstLoad && (prometheusQueryData === null || prometheusQueryData === void 0 ? void 0 : prometheusQueryData.ds_details.url) !== '' && (prometheusQueryData === null || prometheusQueryData === void 0 ? void 0 : (_prometheusQueryData$ = prometheusQueryData.queries) === null || _prometheusQueryData$ === void 0 ? void 0 : _prometheusQueryData$.length) !== 0) {\n      getGraphData();\n      setFirstLoad(false);\n    }\n  }, [firstLoad]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.graph,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LineAreaGraph, {\n    legendTableHeight: 120,\n    openSeries: graphData.seriesData,\n    closedSeries: graphData.closedAreaData,\n    showGrid: panelVars.panel_options.grids,\n    showPoints: panelVars.panel_options.points,\n    showLegendTable: true,\n    showTips: false,\n    unit: panelVars.unit,\n    yLabel: panelVars.y_axis_left,\n    yLabelOffset: 55,\n    margin: {\n      left: 80,\n      right: 20,\n      top: 20,\n      bottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/Graph/index.tsx"],"names":["useLazyQuery","useTheme","LineAreaGraph","React","useEffect","useState","PROM_QUERY","DataParserForPrometheus","useStyles","Graph","prometheusQueryData","panelVars","palette","classes","lineGraph","graph","line","areaGraph","area","firstLoad","setFirstLoad","seriesData","closedAreaData","chaosData","graphData","setGraphData","variables","prometheusInput","fetchPolicy","onCompleted","prometheusData","parsedData","prom_queries","filter","query","close_area","map","queryid","getGraphData","ds_details","url","queries","length","panel_options","grids","points","unit","y_axis_left","left","right","top","bottom"],"mappings":"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","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport { useTheme } from '@material-ui/core';\nimport { LineAreaGraph } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { PROM_QUERY } from '../../../../../../../../graphql';\nimport {\n  PanelDetails,\n  ParsedPrometheusData,\n} from '../../../../../../../../models/dashboardsData';\nimport {\n  PrometheusQueryVars,\n  PrometheusResponse,\n  promInput,\n} from '../../../../../../../../models/graphql/prometheus';\nimport { DataParserForPrometheus } from '../../../../../../../../utils/promUtils';\nimport useStyles from './styles';\n\ninterface GraphProps {\n  prometheusQueryData: promInput;\n  panelVars: PanelDetails;\n}\n\nconst Graph: React.FC<GraphProps> = ({ prometheusQueryData, panelVars }) => {\n  const { palette } = useTheme();\n  const classes = useStyles();\n  const lineGraph: string[] = palette.graph.line;\n  const areaGraph: string[] = palette.graph.area;\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\n  const [graphData, setGraphData] = React.useState<ParsedPrometheusData>({\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: [],\n  });\n\n  const [getGraphData] = useLazyQuery<PrometheusResponse, PrometheusQueryVars>(\n    PROM_QUERY,\n    {\n      variables: {\n        prometheusInput: prometheusQueryData,\n      },\n      fetchPolicy: 'no-cache',\n      onCompleted: (prometheusData) => {\n        if (prometheusData) {\n          const parsedData: ParsedPrometheusData = DataParserForPrometheus(\n            prometheusData,\n            lineGraph,\n            areaGraph,\n            panelVars.prom_queries\n              .filter((query) => query.close_area)\n              .map((query) => query.queryid)\n          );\n          setGraphData(parsedData);\n        }\n      },\n    }\n  );\n\n  useEffect(() => {\n    if (\n      firstLoad &&\n      prometheusQueryData?.ds_details.url !== '' &&\n      prometheusQueryData?.queries?.length !== 0\n    ) {\n      getGraphData();\n      setFirstLoad(false);\n    }\n  }, [firstLoad]);\n\n  return (\n    <div className={classes.graph}>\n      <LineAreaGraph\n        legendTableHeight={120}\n        openSeries={graphData.seriesData}\n        closedSeries={graphData.closedAreaData}\n        showGrid={panelVars.panel_options.grids}\n        showPoints={panelVars.panel_options.points}\n        showLegendTable\n        showTips={false}\n        unit={panelVars.unit}\n        yLabel={panelVars.y_axis_left}\n        yLabelOffset={55}\n        margin={{ left: 80, right: 20, top: 20, bottom: 10 }}\n      />\n    </div>\n  );\n};\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}