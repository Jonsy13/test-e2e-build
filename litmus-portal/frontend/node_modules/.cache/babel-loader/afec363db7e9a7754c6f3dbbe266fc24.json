{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/index.tsx\";\n\nimport { useQuery } from '@apollo/client';\nimport { AppBar, Typography, useTheme } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs/Tabs';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport BackButton from '../../components/Button/BackButton';\nimport Loader from '../../components/Loader';\nimport { StyledTab, TabPanel } from '../../components/Tabs';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_DETAILS_WITH_EXEC_DATA, WORKFLOW_EVENTS_WITH_EXEC_DATA, WORKFLOW_LIST_DETAILS } from '../../graphql';\nimport useActions from '../../redux/actions';\nimport * as NodeSelectionActions from '../../redux/actions/nodeSelection';\nimport * as TabActions from '../../redux/actions/tabs';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport ArgoWorkflow from '../../views/WorkflowDetails/ArgoWorkflow';\nimport NodeLogsModal from '../../views/WorkflowDetails/LogsModal';\nimport WorkflowInfo from '../../views/WorkflowDetails/WorkflowInfo';\nimport WorkflowNodeInfo from '../../views/WorkflowDetails/WorkflowNodeInfo';\nimport NodeTable from '../../views/WorkflowDetails/WorkflowTable';\nimport useStyles from './styles';\n\nvar WorkflowDetails = function WorkflowDetails() {\n  var _workflowRun$workflow;\n\n  var theme = useTheme();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      logsModalOpen = _useState2[0],\n      setLogsModalOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isInfoToggled = _useState4[0],\n      setIsInfoToggled = _useState4[1]; // State for Checking if workflow failed\n\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isWorkflowFailed = _useState6[0],\n      setWorkflowFailed = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      workflowSchedulesDetails = _useState8[0],\n      setworkflowSchedulesDetails = _useState8[1];\n\n  var tabs = useActions(TabActions);\n  var nodeSelection = useActions(NodeSelectionActions); // get ProjectID\n\n  var projectID = getProjectID();\n  var workflowDetailsTabValue = useSelector(function (state) {\n    return state.tabNumber.node;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.selectedNode;\n  }),\n      pod_name = _useSelector.pod_name;\n\n  var _useParams = useParams(),\n      workflowRunId = _useParams.workflowRunId; // Query to get workflows\n\n\n  var _useQuery = useQuery(WORKFLOW_DETAILS_WITH_EXEC_DATA, {\n    variables: {\n      workflowRunsInput: {\n        project_id: projectID,\n        workflow_run_ids: [workflowRunId]\n      }\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      subscribeToMore = _useQuery.subscribeToMore,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var workflowRun = data === null || data === void 0 ? void 0 : data.getWorkflowRuns.workflow_runs[0];\n\n  var _useQuery2 = useQuery(WORKFLOW_LIST_DETAILS, {\n    variables: {\n      workflowInput: {\n        project_id: projectID,\n        workflow_ids: [(_workflowRun$workflow = workflowRun === null || workflowRun === void 0 ? void 0 : workflowRun.workflow_id) !== null && _workflowRun$workflow !== void 0 ? _workflowRun$workflow : ' ']\n      }\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      workflowData = _useQuery2.data,\n      loading = _useQuery2.loading; // Using subscription to get realtime data\n\n\n  useEffect(function () {\n    if ((workflowRun === null || workflowRun === void 0 ? void 0 : workflowRun.phase) && workflowRun.phase === 'Running') {\n      subscribeToMore({\n        document: WORKFLOW_EVENTS_WITH_EXEC_DATA,\n        variables: {\n          projectID: projectID\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var subscriptionData = _ref.subscriptionData;\n          if (!subscriptionData.data || !prev || !prev.getWorkflowRuns) return prev;\n          var modifiedWorkflows = prev.getWorkflowRuns.workflow_runs.slice();\n          var newWorkflow = subscriptionData.data.workflowEventListener; // Update only the required workflowRun\n\n          if (modifiedWorkflows[0].workflow_run_id === newWorkflow.workflow_run_id) modifiedWorkflows[0] = newWorkflow;\n          var totalNoOfWorkflows = prev.getWorkflowRuns.total_no_of_workflow_runs;\n          return {\n            getWorkflowRuns: {\n              total_no_of_workflow_runs: totalNoOfWorkflows,\n              workflow_runs: modifiedWorkflows\n            }\n          };\n        }\n      });\n    }\n  }, [data]);\n\n  var handleChange = function handleChange(event, newValue) {\n    tabs.changeWorkflowDetailsTabs(newValue);\n  };\n\n  useEffect(function () {\n    var scheduledWorkflow = workflowData === null || workflowData === void 0 ? void 0 : workflowData.ListWorkflow.workflows;\n\n    if (scheduledWorkflow) {\n      setworkflowSchedulesDetails(scheduledWorkflow[0] ? scheduledWorkflow[0] : null);\n    }\n  }, [workflowData]); // On fresh screen refresh 'Workflow' Tab would be selected\n\n  useEffect(function () {\n    tabs.changeWorkflowDetailsTabs(0);\n  }, []); // Setting NodeId of first Node in redux for selection of first node in Argo graph by default\n\n  useEffect(function () {\n    if (workflowRun && pod_name === '') {\n      if (Object.keys(JSON.parse(workflowRun.execution_data).nodes).length) {\n        var firstNodeId = JSON.parse(workflowRun.execution_data).nodes[Object.keys(JSON.parse(workflowRun.execution_data).nodes)[0]].name;\n        nodeSelection.selectNode(_objectSpread(_objectSpread({}, JSON.parse(workflowRun.execution_data).nodes[firstNodeId]), {}, {\n          pod_name: firstNodeId\n        }));\n      } else {\n        setWorkflowFailed(true);\n      }\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  })), workflowRun && pod_name !== '' && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"wfName\",\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.headerDesc'), \" \", workflowRun.workflow_name), /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    className: classes.appBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: workflowDetailsTabValue || 0,\n    onChange: handleChange,\n    TabIndicatorProps: {\n      style: {\n        backgroundColor: theme.palette.highlight\n      }\n    },\n    variant: \"fullWidth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Graph View\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Table View\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(TabPanel, {\n    value: workflowDetailsTabValue,\n    index: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.graphView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArgoWorkflow, {\n    nodes: JSON.parse(workflowRun.execution_data).nodes,\n    setIsInfoToggled: setIsInfoToggled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }), isInfoToggled ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }\n  }, pod_name !== JSON.parse(workflowRun.execution_data).nodes[Object.keys(JSON.parse(workflowRun.execution_data).nodes)[0]].name ?\n  /*#__PURE__*/\n\n  /* Node details and Logs */\n  React.createElement(WorkflowNodeInfo, {\n    manifest: workflowSchedulesDetails === null || workflowSchedulesDetails === void 0 ? void 0 : workflowSchedulesDetails.workflow_manifest,\n    setIsInfoToggled: setIsInfoToggled,\n    cluster_id: workflowRun.cluster_id,\n    workflow_run_id: workflowRun.workflow_run_id,\n    data: JSON.parse(workflowRun.execution_data),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 23\n    }\n  }) :\n  /*#__PURE__*/\n\n  /* Workflow Details */\n  React.createElement(WorkflowInfo, {\n    tab: 1,\n    setIsInfoToggled: setIsInfoToggled,\n    cluster_name: workflowRun.cluster_name,\n    data: JSON.parse(workflowRun.execution_data),\n    resiliency_score: workflowRun.resiliency_score,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 23\n    }\n  })) : null)), /*#__PURE__*/React.createElement(TabPanel, {\n    value: workflowDetailsTabValue,\n    index: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowInfo, {\n    tab: 2,\n    cluster_name: workflowRun.cluster_name,\n    data: JSON.parse(workflowRun.execution_data),\n    resiliency_score: workflowRun.resiliency_score,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(NodeTable, {\n    manifest: workflowSchedulesDetails === null || workflowSchedulesDetails === void 0 ? void 0 : workflowSchedulesDetails.workflow_manifest,\n    data: JSON.parse(workflowRun.execution_data),\n    handleClose: function handleClose() {\n      return setLogsModalOpen(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(NodeLogsModal, {\n    logsOpen: logsModalOpen,\n    handleClose: function handleClose() {\n      return setLogsModalOpen(false);\n    },\n    cluster_id: workflowRun.cluster_id,\n    workflow_run_id: workflowRun.workflow_run_id,\n    data: JSON.parse(workflowRun.execution_data),\n    workflow_name: workflowRun.workflow_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 15\n    }\n  }))) : error ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, t('workflowDetails.fetchError')) : isWorkflowFailed ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, t('workflowDetails.workflowNotStarted')) : /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default WorkflowDetails;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/WorkflowDetails/index.tsx"],"names":["useQuery","AppBar","Typography","useTheme","Tabs","React","useEffect","useState","useTranslation","useSelector","useParams","BackButton","Loader","StyledTab","TabPanel","Scaffold","WORKFLOW_DETAILS_WITH_EXEC_DATA","WORKFLOW_EVENTS_WITH_EXEC_DATA","WORKFLOW_LIST_DETAILS","useActions","NodeSelectionActions","TabActions","getProjectID","ArgoWorkflow","NodeLogsModal","WorkflowInfo","WorkflowNodeInfo","NodeTable","useStyles","WorkflowDetails","theme","t","classes","logsModalOpen","setLogsModalOpen","isInfoToggled","setIsInfoToggled","isWorkflowFailed","setWorkflowFailed","workflowSchedulesDetails","setworkflowSchedulesDetails","tabs","nodeSelection","projectID","workflowDetailsTabValue","state","tabNumber","node","selectedNode","pod_name","workflowRunId","variables","workflowRunsInput","project_id","workflow_run_ids","fetchPolicy","subscribeToMore","data","error","workflowRun","getWorkflowRuns","workflow_runs","workflowInput","workflow_ids","workflow_id","workflowData","loading","phase","document","updateQuery","prev","subscriptionData","modifiedWorkflows","slice","newWorkflow","workflowEventListener","workflow_run_id","totalNoOfWorkflows","total_no_of_workflow_runs","handleChange","event","newValue","changeWorkflowDetailsTabs","scheduledWorkflow","ListWorkflow","workflows","Object","keys","JSON","parse","execution_data","nodes","length","firstNodeId","name","selectNode","root","button","title","workflow_name","appBar","style","backgroundColor","palette","highlight","graphView","workflow_manifest","cluster_id","cluster_name","resiliency_score"],"mappings":"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","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { AppBar, Typography, useTheme } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs/Tabs';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport BackButton from '../../components/Button/BackButton';\nimport Loader from '../../components/Loader';\nimport { StyledTab, TabPanel } from '../../components/Tabs';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport {\n  WORKFLOW_DETAILS_WITH_EXEC_DATA,\n  WORKFLOW_EVENTS_WITH_EXEC_DATA,\n  WORKFLOW_LIST_DETAILS,\n} from '../../graphql';\nimport { ScheduleWorkflow } from '../../models/graphql/scheduleData';\nimport {\n  ExecutionData,\n  Workflow,\n  WorkflowDataVars,\n  WorkflowSubscription,\n  WorkflowSubscriptionInput,\n} from '../../models/graphql/workflowData';\nimport {\n  ListWorkflowsInput,\n  ScheduledWorkflows,\n} from '../../models/graphql/workflowListData';\nimport useActions from '../../redux/actions';\nimport * as NodeSelectionActions from '../../redux/actions/nodeSelection';\nimport * as TabActions from '../../redux/actions/tabs';\nimport { RootState } from '../../redux/reducers';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport ArgoWorkflow from '../../views/WorkflowDetails/ArgoWorkflow';\nimport NodeLogsModal from '../../views/WorkflowDetails/LogsModal';\nimport WorkflowInfo from '../../views/WorkflowDetails/WorkflowInfo';\nimport WorkflowNodeInfo from '../../views/WorkflowDetails/WorkflowNodeInfo';\nimport NodeTable from '../../views/WorkflowDetails/WorkflowTable';\nimport useStyles from './styles';\n\ninterface URLParams {\n  workflowRunId: string;\n}\n\nconst WorkflowDetails: React.FC = () => {\n  const theme = useTheme();\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const [logsModalOpen, setLogsModalOpen] = useState<boolean>(false);\n  const [isInfoToggled, setIsInfoToggled] = useState<boolean>(false);\n  // State for Checking if workflow failed\n  const [isWorkflowFailed, setWorkflowFailed] = useState<boolean>(false);\n  const [workflowSchedulesDetails, setworkflowSchedulesDetails] =\n    useState<ScheduleWorkflow>();\n\n  const tabs = useActions(TabActions);\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  // get ProjectID\n  const projectID = getProjectID();\n\n  const workflowDetailsTabValue = useSelector(\n    (state: RootState) => state.tabNumber.node\n  );\n\n  const { pod_name } = useSelector((state: RootState) => state.selectedNode);\n\n  const { workflowRunId }: URLParams = useParams();\n\n  // Query to get workflows\n  const { subscribeToMore, data, error } = useQuery<Workflow, WorkflowDataVars>(\n    WORKFLOW_DETAILS_WITH_EXEC_DATA,\n    {\n      variables: {\n        workflowRunsInput: {\n          project_id: projectID,\n          workflow_run_ids: [workflowRunId],\n        },\n      },\n      fetchPolicy: 'cache-and-network',\n    }\n  );\n\n  const workflowRun = data?.getWorkflowRuns.workflow_runs[0];\n\n  const { data: workflowData, loading } = useQuery<\n    ScheduledWorkflows,\n    ListWorkflowsInput\n  >(WORKFLOW_LIST_DETAILS, {\n    variables: {\n      workflowInput: {\n        project_id: projectID,\n        workflow_ids: [workflowRun?.workflow_id ?? ' '],\n      },\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  // Using subscription to get realtime data\n  useEffect(() => {\n    if (workflowRun?.phase && workflowRun.phase === 'Running') {\n      subscribeToMore<WorkflowSubscription, WorkflowSubscriptionInput>({\n        document: WORKFLOW_EVENTS_WITH_EXEC_DATA,\n        variables: { projectID },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data || !prev || !prev.getWorkflowRuns)\n            return prev;\n\n          const modifiedWorkflows = prev.getWorkflowRuns.workflow_runs.slice();\n          const newWorkflow = subscriptionData.data.workflowEventListener;\n\n          // Update only the required workflowRun\n          if (\n            modifiedWorkflows[0].workflow_run_id === newWorkflow.workflow_run_id\n          )\n            modifiedWorkflows[0] = newWorkflow;\n\n          const totalNoOfWorkflows =\n            prev.getWorkflowRuns.total_no_of_workflow_runs;\n\n          return {\n            getWorkflowRuns: {\n              total_no_of_workflow_runs: totalNoOfWorkflows,\n              workflow_runs: modifiedWorkflows,\n            },\n          };\n        },\n      });\n    }\n  }, [data]);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    tabs.changeWorkflowDetailsTabs(newValue);\n  };\n\n  useEffect(() => {\n    const scheduledWorkflow = workflowData?.ListWorkflow.workflows;\n    if (scheduledWorkflow) {\n      setworkflowSchedulesDetails(\n        (scheduledWorkflow[0] ? scheduledWorkflow[0] : null) as ScheduleWorkflow\n      );\n    }\n  }, [workflowData]);\n\n  // On fresh screen refresh 'Workflow' Tab would be selected\n  useEffect(() => {\n    tabs.changeWorkflowDetailsTabs(0);\n  }, []);\n\n  // Setting NodeId of first Node in redux for selection of first node in Argo graph by default\n  useEffect(() => {\n    if (workflowRun && pod_name === '') {\n      if (\n        Object.keys(JSON.parse(workflowRun.execution_data as string).nodes)\n          .length\n      ) {\n        const firstNodeId = JSON.parse(workflowRun.execution_data as string)\n          .nodes[\n          Object.keys(JSON.parse(workflowRun.execution_data as string).nodes)[0]\n        ].name;\n        nodeSelection.selectNode({\n          ...JSON.parse(workflowRun.execution_data as string).nodes[\n            firstNodeId\n          ],\n          pod_name: firstNodeId,\n        });\n      } else {\n        setWorkflowFailed(true);\n      }\n    }\n  }, [data]);\n\n  return (\n    <Scaffold>\n      <div className={classes.root}>\n        <div className={classes.button}>\n          <BackButton />\n        </div>\n        {/* If workflowRun data is present then display the workflowRun details */}\n        {workflowRun && pod_name !== '' && !loading ? (\n          <div>\n            <Typography data-cy=\"wfName\" className={classes.title}>\n              {t('workflowDetailsView.headerDesc')} {workflowRun.workflow_name}\n            </Typography>\n\n            {/* AppBar */}\n            <AppBar\n              position=\"static\"\n              color=\"default\"\n              className={classes.appBar}\n            >\n              <Tabs\n                value={workflowDetailsTabValue || 0}\n                onChange={handleChange}\n                TabIndicatorProps={{\n                  style: {\n                    backgroundColor: theme.palette.highlight,\n                  },\n                }}\n                variant=\"fullWidth\"\n              >\n                <StyledTab label=\"Graph View\" />\n                <StyledTab label=\"Table View\" />\n              </Tabs>\n            </AppBar>\n            <TabPanel value={workflowDetailsTabValue} index={0}>\n              <div className={classes.graphView}>\n                {/* Argo Workflow DAG Graph */}\n                <ArgoWorkflow\n                  nodes={\n                    (JSON.parse(workflowRun.execution_data) as ExecutionData)\n                      .nodes\n                  }\n                  setIsInfoToggled={setIsInfoToggled}\n                />\n                {/* Workflow Details and Experiment Logs */}\n                {isInfoToggled ? (\n                  <div>\n                    {pod_name !==\n                    JSON.parse(workflowRun.execution_data).nodes[\n                      Object.keys(\n                        JSON.parse(workflowRun.execution_data as string).nodes\n                      )[0]\n                    ].name ? (\n                      /* Node details and Logs */\n                      <WorkflowNodeInfo\n                        manifest={\n                          workflowSchedulesDetails?.workflow_manifest as string\n                        }\n                        setIsInfoToggled={setIsInfoToggled}\n                        cluster_id={workflowRun.cluster_id}\n                        workflow_run_id={workflowRun.workflow_run_id}\n                        data={\n                          JSON.parse(\n                            workflowRun.execution_data\n                          ) as ExecutionData\n                        }\n                      />\n                    ) : (\n                      /* Workflow Details */\n                      <WorkflowInfo\n                        tab={1}\n                        setIsInfoToggled={setIsInfoToggled}\n                        cluster_name={workflowRun.cluster_name}\n                        data={\n                          JSON.parse(\n                            workflowRun.execution_data\n                          ) as ExecutionData\n                        }\n                        resiliency_score={workflowRun.resiliency_score}\n                      />\n                    )}\n                  </div>\n                ) : null}\n              </div>\n            </TabPanel>\n            <TabPanel value={workflowDetailsTabValue} index={1}>\n              {/* Workflow Info */}\n              <WorkflowInfo\n                tab={2}\n                cluster_name={workflowRun.cluster_name}\n                data={JSON.parse(workflowRun.execution_data) as ExecutionData}\n                resiliency_score={workflowRun.resiliency_score}\n              />\n              {/* Table for all Node details */}\n              <NodeTable\n                manifest={workflowSchedulesDetails?.workflow_manifest as string}\n                data={JSON.parse(workflowRun.execution_data) as ExecutionData}\n                handleClose={() => setLogsModalOpen(true)}\n              />\n              {/* Modal for viewing logs of a node */}\n              <NodeLogsModal\n                logsOpen={logsModalOpen}\n                handleClose={() => setLogsModalOpen(false)}\n                cluster_id={workflowRun.cluster_id}\n                workflow_run_id={workflowRun.workflow_run_id}\n                data={JSON.parse(workflowRun.execution_data) as ExecutionData}\n                workflow_name={workflowRun.workflow_name}\n              />\n            </TabPanel>\n          </div>\n        ) : error ? (\n          <Typography>{t('workflowDetails.fetchError')}</Typography>\n        ) : isWorkflowFailed ? (\n          <Typography>{t('workflowDetails.workflowNotStarted')}</Typography>\n        ) : (\n          <Loader />\n        )}\n      </div>\n    </Scaffold>\n  );\n};\n\nexport default WorkflowDetails;\n"]},"metadata":{},"sourceType":"module"}