{"ast":null,"code":"/* eslint-disable import/prefer-default-export */import config from'../../config';import{AnalyticsActions}from'../../models/redux/analytics';export var loadCommunityAnalytics=function loadCommunityAnalytics(){return function(dispatch){dispatch({type:AnalyticsActions.COMMUNITY_ANALYTICS_LOADING,payload:true});fetch(\"\".concat(config.analytics.url)).then(function(response){return response.json();}).then(function(data){dispatch({type:AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS,payload:data});}).catch(function(){dispatch({type:AnalyticsActions.COMMUNITY_ANALYTICS_ERROR,payload:true});});};};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/redux/actions/analytics.ts"],"names":["config","AnalyticsActions","loadCommunityAnalytics","dispatch","type","COMMUNITY_ANALYTICS_LOADING","payload","fetch","analytics","url","then","response","json","data","COMMUNITY_ANALYTICS_SUCCESS","catch","COMMUNITY_ANALYTICS_ERROR"],"mappings":"AAAA,iDACA,MAAOA,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAASC,gBAAT,KAAiC,8BAAjC,CAEA,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,SAAM,UAACC,QAAD,CAAwB,CAClEA,QAAQ,CAAC,CACPC,IAAI,CAAEH,gBAAgB,CAACI,2BADhB,CAEPC,OAAO,CAAE,IAFF,CAAD,CAAR,CAIAC,KAAK,WAAIP,MAAM,CAACQ,SAAP,CAAiBC,GAArB,EAAL,CACGC,IADH,CACQ,SAACC,QAAD,CAAc,CAClB,MAAOA,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CAHH,EAIGF,IAJH,CAIQ,SAACG,IAAD,CAAU,CACdV,QAAQ,CAAC,CACPC,IAAI,CAAEH,gBAAgB,CAACa,2BADhB,CAEPR,OAAO,CAAEO,IAFF,CAAD,CAAR,CAID,CATH,EAUGE,KAVH,CAUS,UAAM,CACXZ,QAAQ,CAAC,CACPC,IAAI,CAAEH,gBAAgB,CAACe,yBADhB,CAEPV,OAAO,CAAE,IAFF,CAAD,CAAR,CAID,CAfH,EAgBD,CArBqC,EAA/B","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport config from '../../config';\nimport { AnalyticsActions } from '../../models/redux/analytics';\n\nexport const loadCommunityAnalytics = () => (dispatch: Function) => {\n  dispatch({\n    type: AnalyticsActions.COMMUNITY_ANALYTICS_LOADING,\n    payload: true,\n  });\n  fetch(`${config.analytics.url}`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      dispatch({\n        type: AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS,\n        payload: data,\n      });\n    })\n    .catch(() => {\n      dispatch({\n        type: AnalyticsActions.COMMUNITY_ANALYTICS_ERROR,\n        payload: true,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}