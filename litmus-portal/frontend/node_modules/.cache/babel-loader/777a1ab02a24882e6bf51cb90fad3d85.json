{"ast":null,"code":"import _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/QueryEditor/PrometheusQueryBox/index.tsx\";\n\n/* eslint-disable no-param-reassign */\nimport { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-min-noconflict/ext-beautify';\nimport 'ace-builds/src-min-noconflict/ext-code_lens';\nimport 'ace-builds/src-min-noconflict/ext-elastic_tabstops_lite';\nimport 'ace-builds/src-min-noconflict/ext-emmet';\nimport 'ace-builds/src-min-noconflict/ext-error_marker';\nimport 'ace-builds/src-min-noconflict/ext-keybinding_menu';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\nimport 'ace-builds/src-min-noconflict/ext-linking';\nimport 'ace-builds/src-min-noconflict/ext-modelist';\nimport 'ace-builds/src-min-noconflict/ext-options';\nimport 'ace-builds/src-min-noconflict/ext-prompt';\nimport 'ace-builds/src-min-noconflict/ext-rtl';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-spellcheck';\nimport 'ace-builds/src-min-noconflict/ext-split';\nimport 'ace-builds/src-min-noconflict/ext-static_highlight';\nimport 'ace-builds/src-min-noconflict/ext-statusbar';\nimport 'ace-builds/src-min-noconflict/ext-textarea';\nimport 'ace-builds/src-min-noconflict/ext-themelist';\nimport 'ace-builds/src-min-noconflict/ext-whitespace';\nimport { useTranslation } from 'react-i18next';\nimport './prometheus';\nimport useStyles from './styles';\nimport './theme';\n\nvar PrometheusQueryEditor = function PrometheusQueryEditor(_ref) {\n  var index = _ref.index,\n      content = _ref.content,\n      saveQueryChange = _ref.saveQueryChange,\n      seriesListCompletionOptions = _ref.seriesListCompletionOptions,\n      labelListCompletionOptions = _ref.labelListCompletionOptions,\n      valueListCompletionOptions = _ref.valueListCompletionOptions;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(content),\n      _useState2 = _slicedToArray(_useState, 2),\n      modifiedPrometheusQuery = _useState2[0],\n      setModifiedPrometheusQuery = _useState2[1];\n\n  var _useState3 = useState([].concat(_toConsumableArray(seriesListCompletionOptions), _toConsumableArray(labelListCompletionOptions), _toConsumableArray(valueListCompletionOptions))),\n      _useState4 = _slicedToArray(_useState3, 2),\n      autoCompleteOptions = _useState4[0],\n      setAutoCompleteOptions = _useState4[1];\n\n  var PromAce = React.createRef();\n  useEffect(function () {\n    setModifiedPrometheusQuery(content);\n  }, [content]);\n  useEffect(function () {\n    setAutoCompleteOptions([].concat(_toConsumableArray(seriesListCompletionOptions), _toConsumableArray(labelListCompletionOptions), _toConsumableArray(valueListCompletionOptions)));\n  }, [seriesListCompletionOptions, labelListCompletionOptions, valueListCompletionOptions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"editor-\".concat(index),\n    \"data-cy\": \"WorkflowEditor\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.query')), /*#__PURE__*/React.createElement(\"pre\", {\n    id: \"prom-query-editor\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AceEditor, {\n    mode: \"prometheus\",\n    theme: \"prom-query-editor\",\n    width: \"100%\",\n    height: \"100%\",\n    maxLines: 12000,\n    minLines: 1,\n    highlightActiveLine: false,\n    readOnly: false,\n    tabSize: 2,\n    wrapEnabled: true,\n    ref: PromAce,\n    showGutter: false,\n    onChange: function onChange(value) {\n      setModifiedPrometheusQuery(value);\n      saveQueryChange(value);\n    },\n    showPrintMargin: false,\n    enableSnippets: false,\n    value: modifiedPrometheusQuery,\n    editorProps: {\n      $blockScrolling: Infinity,\n      $useWorker: true\n    },\n    onLoad: function onLoad(editor) {\n      editor.setReadOnly(false);\n      editor.setOptions({\n        fontFamily: 'monospace',\n        highlightGutterLine: false,\n        autoScrollEditorIntoView: true,\n        tooltipFollowsMouse: true,\n        displayIndentGuides: false,\n        enableBasicAutocompletion: [{\n          getCompletions: function getCompletions(_editor, _session, _pos, _prefix, callback) {\n            // note, won't fire if caret is at a word that does not have these letters\n            callback(null, autoCompleteOptions);\n          }\n        }],\n        // to make popup appear automatically, without explicit _ctrl+space_\n        enableLiveAutocompletion: true\n      });\n      editor.setHighlightSelectedWord(true);\n      editor.session.setFoldStyle('markbeginend');\n      editor.setShowFoldWidgets(false);\n      editor.setAnimatedScroll(true);\n      editor.setShowInvisibles(false);\n      editor.setFontSize('0.98rem');\n      editor.container.style.lineHeight = '160%';\n    },\n    onCursorChange: function onCursorChange() {\n      if (PromAce.current) {\n        PromAce.current.editor.setOptions({\n          autoScrollEditorIntoView: true,\n          tooltipFollowsMouse: true\n        });\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default PrometheusQueryEditor;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/QueryEditor/PrometheusQueryBox/index.tsx"],"names":["Typography","React","useEffect","useState","AceEditor","useTranslation","useStyles","PrometheusQueryEditor","index","content","saveQueryChange","seriesListCompletionOptions","labelListCompletionOptions","valueListCompletionOptions","classes","t","modifiedPrometheusQuery","setModifiedPrometheusQuery","autoCompleteOptions","setAutoCompleteOptions","PromAce","createRef","editor","heading","value","$blockScrolling","Infinity","$useWorker","setReadOnly","setOptions","fontFamily","highlightGutterLine","autoScrollEditorIntoView","tooltipFollowsMouse","displayIndentGuides","enableBasicAutocompletion","getCompletions","_editor","_session","_pos","_prefix","callback","enableLiveAutocompletion","setHighlightSelectedWord","session","setFoldStyle","setShowFoldWidgets","setAnimatedScroll","setShowInvisibles","setFontSize","container","style","lineHeight","current"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-min-noconflict/ext-beautify';\nimport 'ace-builds/src-min-noconflict/ext-code_lens';\nimport 'ace-builds/src-min-noconflict/ext-elastic_tabstops_lite';\nimport 'ace-builds/src-min-noconflict/ext-emmet';\nimport 'ace-builds/src-min-noconflict/ext-error_marker';\nimport 'ace-builds/src-min-noconflict/ext-keybinding_menu';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\nimport 'ace-builds/src-min-noconflict/ext-linking';\nimport 'ace-builds/src-min-noconflict/ext-modelist';\nimport 'ace-builds/src-min-noconflict/ext-options';\nimport 'ace-builds/src-min-noconflict/ext-prompt';\nimport 'ace-builds/src-min-noconflict/ext-rtl';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-spellcheck';\nimport 'ace-builds/src-min-noconflict/ext-split';\nimport 'ace-builds/src-min-noconflict/ext-static_highlight';\nimport 'ace-builds/src-min-noconflict/ext-statusbar';\nimport 'ace-builds/src-min-noconflict/ext-textarea';\nimport 'ace-builds/src-min-noconflict/ext-themelist';\nimport 'ace-builds/src-min-noconflict/ext-whitespace';\nimport { useTranslation } from 'react-i18next';\nimport './prometheus';\nimport useStyles from './styles';\nimport './theme';\n\ninterface PrometheusQueryEditorProps {\n  index: number;\n  content: string;\n  saveQueryChange: (updatedQuery: string) => void;\n  seriesListCompletionOptions: any;\n  labelListCompletionOptions: any;\n  valueListCompletionOptions: any;\n}\n\nconst PrometheusQueryEditor: React.FC<PrometheusQueryEditorProps> = ({\n  index,\n  content,\n  saveQueryChange,\n  seriesListCompletionOptions,\n  labelListCompletionOptions,\n  valueListCompletionOptions,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [modifiedPrometheusQuery, setModifiedPrometheusQuery] =\n    useState(content);\n  const [autoCompleteOptions, setAutoCompleteOptions] = useState([\n    ...seriesListCompletionOptions,\n    ...labelListCompletionOptions,\n    ...valueListCompletionOptions,\n  ]);\n  const PromAce = React.createRef() as React.RefObject<AceEditor>;\n\n  useEffect(() => {\n    setModifiedPrometheusQuery(content);\n  }, [content]);\n\n  useEffect(() => {\n    setAutoCompleteOptions([\n      ...seriesListCompletionOptions,\n      ...labelListCompletionOptions,\n      ...valueListCompletionOptions,\n    ]);\n  }, [\n    seriesListCompletionOptions,\n    labelListCompletionOptions,\n    valueListCompletionOptions,\n  ]);\n\n  return (\n    <div id={`editor-${index}`} data-cy=\"WorkflowEditor\">\n      <div className={classes.editor}>\n        <Typography className={classes.heading}>\n          {t('analyticsDashboard.applicationDashboards.tuneTheQueries.query')}\n        </Typography>\n        <pre id=\"prom-query-editor\">\n          <AceEditor\n            mode=\"prometheus\"\n            theme=\"prom-query-editor\"\n            width=\"100%\"\n            height=\"100%\"\n            maxLines={12000}\n            minLines={1}\n            highlightActiveLine={false}\n            readOnly={false}\n            tabSize={2}\n            wrapEnabled\n            ref={PromAce}\n            showGutter={false}\n            onChange={(value: string) => {\n              setModifiedPrometheusQuery(value);\n              saveQueryChange(value);\n            }}\n            showPrintMargin={false}\n            enableSnippets={false}\n            value={modifiedPrometheusQuery}\n            editorProps={{\n              $blockScrolling: Infinity,\n              $useWorker: true,\n            }}\n            onLoad={(editor) => {\n              editor.setReadOnly(false);\n              editor.setOptions({\n                fontFamily: 'monospace',\n                highlightGutterLine: false,\n                autoScrollEditorIntoView: true,\n                tooltipFollowsMouse: true,\n                displayIndentGuides: false,\n                enableBasicAutocompletion: [\n                  {\n                    getCompletions: (\n                      _editor: any,\n                      _session: any,\n                      _pos: any,\n                      _prefix: any,\n                      callback: any\n                    ) => {\n                      // note, won't fire if caret is at a word that does not have these letters\n                      callback(null, autoCompleteOptions);\n                    },\n                  },\n                ],\n                // to make popup appear automatically, without explicit _ctrl+space_\n                enableLiveAutocompletion: true,\n              });\n              editor.setHighlightSelectedWord(true);\n              editor.session.setFoldStyle('markbeginend');\n              editor.setShowFoldWidgets(false);\n              editor.setAnimatedScroll(true);\n              editor.setShowInvisibles(false);\n              editor.setFontSize('0.98rem');\n              editor.container.style.lineHeight = '160%';\n            }}\n            onCursorChange={() => {\n              if (PromAce.current) {\n                (PromAce.current!.editor as any).setOptions({\n                  autoScrollEditorIntoView: true,\n                  tooltipFollowsMouse: true,\n                });\n              }\n            }}\n          />\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nexport default PrometheusQueryEditor;\n"]},"metadata":{},"sourceType":"module"}