{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/Overview/ApplicationDashboardCard/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { IconButton, Typography } from '@material-ui/core';\nimport React from 'react';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../redux/actions/dataSource';\nimport { history } from '../../../../redux/configureStore';\nimport { ReactComponent as AnalyticsIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/analytics.svg\";\nimport { ReactComponent as CogwheelIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/cogwheel.svg\";\nimport { ReactComponent as DownloadIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/download.svg\";\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport useStyles from './styles';\n\nvar ApplicationDashboardCard = function ApplicationDashboardCard(_ref) {\n  var data = _ref.data;\n  var classes = useStyles();\n  var dashboard = useActions(DashboardActions);\n  var dataSource = useActions(DataSourceActions);\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n\n  var onDashboardLoadRoutine = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dashboard.selectDashboard({\n                selectedDashboardID: data.db_id,\n                refreshRate: 0\n              });\n              dataSource.selectDataSource({\n                selectedDataSourceURL: '',\n                selectedDataSourceID: '',\n                selectedDataSourceName: ''\n              });\n              return _context.abrupt(\"return\", true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onDashboardLoadRoutine() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getDashboard = function getDashboard() {\n    var _data$application_met;\n\n    var panelGroupMap = [];\n    var panelGroups = [];\n    data.panel_groups.forEach(function (panelGroup) {\n      panelGroupMap.push({\n        groupName: panelGroup.panel_group_name,\n        panels: []\n      });\n      var len = panelGroupMap.length;\n      var selectedPanels = [];\n      panelGroup.panels.forEach(function (panel) {\n        panelGroupMap[len - 1].panels.push(panel.panel_name);\n        var queries = [];\n        panel.prom_queries.forEach(function (query) {\n          queries.push({\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area\n          });\n        });\n        var options = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis\n        };\n        var selectedPanel = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels\n      });\n    });\n    var applicationMetadataMap = [];\n    (_data$application_met = data.application_metadata_map) === null || _data$application_met === void 0 ? void 0 : _data$application_met.forEach(function (applicationMetadata) {\n      var applications = [];\n      applicationMetadata.applications.forEach(function (application) {\n        applications.push({\n          kind: application.kind,\n          names: application.names\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications: applications\n      });\n    });\n    var exportedDashboard = {\n      dashboardID: data.db_type_id,\n      name: data.db_name,\n      information: data.db_information,\n      chaosEventQueryTemplate: data.chaos_event_query_template,\n      chaosVerdictQueryTemplate: data.chaos_verdict_query_template,\n      applicationMetadataMap: applicationMetadataMap,\n      panelGroupMap: panelGroupMap,\n      panelGroups: panelGroups\n    };\n    return exportedDashboard;\n  }; // Function to download the JSON\n\n\n  var downloadJSON = function downloadJSON() {\n    var element = document.createElement('a');\n    var file = new Blob([JSON.stringify(getDashboard(), null, 2)], {\n      type: 'text/json'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"\".concat(data.db_name, \".json\");\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.animatedContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowDataContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.statusDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/\".concat(data.db_type_id, \"_dashboard.svg\"),\n    alt: \"k8s\",\n    title: data.db_type,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.testName, \" \").concat(classes.noWrapProvider),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, data.db_name), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, \"Agent: \", data.cluster_name)))), /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.noWrapProvider, \" \").concat(classes.hint),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, timeDifferenceForDate(data.updated_at)), /*#__PURE__*/React.createElement(\"section\", {\n    className: classes.cardActionsSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      onDashboardLoadRoutine().then(function () {\n        history.push({\n          pathname: '/analytics/application-dashboard',\n          search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n        });\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AnalyticsIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, \"View\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      dashboard.selectDashboard({\n        selectedDashboardID: data.db_id,\n        activePanelID: ''\n      });\n      history.push({\n        pathname: '/analytics/dashboard/configure',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CogwheelIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, \"Configure\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return downloadJSON();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DownloadIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, \"JSON\"))))));\n};\n\nexport { ApplicationDashboardCard };","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/Overview/ApplicationDashboardCard/index.tsx"],"names":["IconButton","Typography","React","useActions","DashboardActions","DataSourceActions","history","timeDifferenceForDate","getProjectID","getProjectRole","useStyles","ApplicationDashboardCard","data","classes","dashboard","dataSource","projectID","projectRole","onDashboardLoadRoutine","selectDashboard","selectedDashboardID","db_id","refreshRate","selectDataSource","selectedDataSourceURL","selectedDataSourceID","selectedDataSourceName","getDashboard","panelGroupMap","panelGroups","panel_groups","forEach","panelGroup","push","groupName","panel_group_name","panels","len","length","selectedPanels","panel","panel_name","queries","prom_queries","query","prom_query_name","legend","resolution","minstep","line","close_area","options","points","panel_options","grids","left_axis","selectedPanel","y_axis_left","y_axis_right","x_axis_down","unit","applicationMetadataMap","application_metadata_map","applicationMetadata","applications","application","kind","names","namespace","exportedDashboard","dashboardID","db_type_id","name","db_name","information","db_information","chaosEventQueryTemplate","chaos_event_query_template","chaosVerdictQueryTemplate","chaos_verdict_query_template","downloadJSON","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","animatedContainer","workflowDataContainer","statusDiv","db_type","testName","noWrapProvider","hint","cluster_name","updated_at","cardActionsSection","cardActions","then","pathname","search","activePanelID"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { IconButton, Typography } from '@material-ui/core';\nimport React from 'react';\nimport {\n  DashboardExport,\n  PanelExport,\n  PanelGroupExport,\n  PanelGroupMap,\n  PromQueryExport,\n} from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  ListDashboardResponse,\n  PanelOption,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../redux/actions/dataSource';\nimport { history } from '../../../../redux/configureStore';\nimport { ReactComponent as AnalyticsIcon } from '../../../../svg/analytics.svg';\nimport { ReactComponent as CogwheelIcon } from '../../../../svg/cogwheel.svg';\nimport { ReactComponent as DownloadIcon } from '../../../../svg/download.svg';\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport useStyles from './styles';\n\ninterface ApplicationDashboardCardProps {\n  data: ListDashboardResponse;\n}\n\nconst ApplicationDashboardCard: React.FC<ApplicationDashboardCardProps> = ({\n  data,\n}) => {\n  const classes = useStyles();\n\n  const dashboard = useActions(DashboardActions);\n  const dataSource = useActions(DataSourceActions);\n\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n\n  const onDashboardLoadRoutine = async () => {\n    dashboard.selectDashboard({\n      selectedDashboardID: data.db_id,\n      refreshRate: 0,\n    });\n    dataSource.selectDataSource({\n      selectedDataSourceURL: '',\n      selectedDataSourceID: '',\n      selectedDataSourceName: '',\n    });\n    return true;\n  };\n\n  const getDashboard = () => {\n    const panelGroupMap: PanelGroupMap[] = [];\n    const panelGroups: PanelGroupExport[] = [];\n    data.panel_groups.forEach((panelGroup) => {\n      panelGroupMap.push({\n        groupName: panelGroup.panel_group_name,\n        panels: [],\n      });\n      const len: number = panelGroupMap.length;\n      const selectedPanels: PanelExport[] = [];\n      panelGroup.panels.forEach((panel) => {\n        panelGroupMap[len - 1].panels.push(panel.panel_name);\n        const queries: PromQueryExport[] = [];\n        panel.prom_queries.forEach((query) => {\n          queries.push({\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const options: PanelOption = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis,\n        };\n        const selectedPanel: PanelExport = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels,\n      });\n    });\n\n    const applicationMetadataMap: ApplicationMetadata[] = [];\n\n    data.application_metadata_map?.forEach((applicationMetadata) => {\n      const applications: Resource[] = [];\n\n      applicationMetadata.applications.forEach((application) => {\n        applications.push({\n          kind: application.kind,\n          names: application.names,\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications,\n      });\n    });\n\n    const exportedDashboard: DashboardExport = {\n      dashboardID: data.db_type_id,\n      name: data.db_name,\n      information: data.db_information,\n      chaosEventQueryTemplate: data.chaos_event_query_template,\n      chaosVerdictQueryTemplate: data.chaos_verdict_query_template,\n      applicationMetadataMap,\n      panelGroupMap,\n      panelGroups,\n    };\n\n    return exportedDashboard;\n  };\n\n  // Function to download the JSON\n  const downloadJSON = () => {\n    const element = document.createElement('a');\n    const file = new Blob([JSON.stringify(getDashboard(), null, 2)], {\n      type: 'text/json',\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${data.db_name}.json`;\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return (\n    <>\n      <div className={classes.animatedContainer}>\n        <div className={classes.workflowDataContainer}>\n          <div>\n            <div className={classes.statusDiv}>\n              <img\n                src={`/icons/${data.db_type_id}_dashboard.svg`}\n                alt=\"k8s\"\n                title={data.db_type}\n              />\n              <div>\n                <Typography\n                  className={`${classes.testName} ${classes.noWrapProvider}`}\n                >\n                  {data.db_name}\n                </Typography>\n                <Typography className={classes.hint}>\n                  Agent: {data.cluster_name}\n                </Typography>\n              </div>\n            </div>\n          </div>\n          <Typography className={`${classes.noWrapProvider} ${classes.hint}`}>\n            {timeDifferenceForDate(data.updated_at)}\n          </Typography>\n          <section className={classes.cardActionsSection}>\n            <div className={classes.cardActions}>\n              <IconButton\n                onClick={() => {\n                  onDashboardLoadRoutine().then(() => {\n                    history.push({\n                      pathname: '/analytics/application-dashboard',\n                      search: `?projectID=${projectID}&projectRole=${projectRole}`,\n                    });\n                  });\n                }}\n              >\n                <AnalyticsIcon />\n              </IconButton>\n              <Typography align=\"center\">View</Typography>\n            </div>\n            <div className={classes.cardActions}>\n              <IconButton\n                onClick={() => {\n                  dashboard.selectDashboard({\n                    selectedDashboardID: data.db_id,\n                    activePanelID: '',\n                  });\n                  history.push({\n                    pathname: '/analytics/dashboard/configure',\n                    search: `?projectID=${projectID}&projectRole=${projectRole}`,\n                  });\n                }}\n              >\n                <CogwheelIcon />\n              </IconButton>\n              <Typography align=\"center\">Configure</Typography>\n            </div>\n            <div className={classes.cardActions}>\n              <IconButton onClick={() => downloadJSON()}>\n                <DownloadIcon />\n              </IconButton>\n              <Typography align=\"center\">JSON</Typography>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport { ApplicationDashboardCard };\n"]},"metadata":{},"sourceType":"module"}