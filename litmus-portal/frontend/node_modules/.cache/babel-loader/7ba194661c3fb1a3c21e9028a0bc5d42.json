{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Divider,FormControl,FormControlLabel,Radio,RadioGroup,Select,Typography}from'@material-ui/core';import React,{forwardRef,useEffect,useImperativeHandle,useState}from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import YAML from'yaml';import CustomDate from'../../../components/DateTime/CustomDate/index';import CustomTime from'../../../components/DateTime/CustomTime/index';import{constants}from'../../../constants';import useActions from'../../../redux/actions';import*as TemplateSelectionActions from'../../../redux/actions/template';import*as WorkflowActions from'../../../redux/actions/workflow';import{cronWorkflow,workflowOnce}from'../../../utils/workflowTemplate';import{fetchWorkflowNameFromManifest}from'../../../utils/yamlUtils';import SetTime from'./SetTime/index';import useStyles from'./styles';var ScheduleWorkflow=forwardRef(function(_,ref){// Initial Cron State\nvar _useState=useState({minute:'*',hour:'*',day_month:'*',month:'*',day_week:'*'}),_useState2=_slicedToArray(_useState,2),cronValue=_useState2[0],setCronValue=_useState2[1];var manifest=useSelector(function(state){return state.workflowManifest.manifest;});var _useSelector=useSelector(function(state){return state.workflowData;}),namespace=_useSelector.namespace;// Redux States for Schedule\nvar workflowData=useSelector(function(state){return state.workflowData;});var workflow=useActions(WorkflowActions);var template=useActions(TemplateSelectionActions);var scheduleOnce=workflowOnce;var scheduleMore=cronWorkflow;// Controls Radio Buttons\nvar _React$useState=React.useState(workflowData.scheduleType.scheduleOnce),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];var handleChange=function handleChange(event){setValue(event.target.value);};// Controls inner radio buttons of Recurring Schedule\nvar _React$useState3=React.useState(workflowData.scheduleType.recurringSchedule),_React$useState4=_slicedToArray(_React$useState3,2),valueDef=_React$useState4[0],setValueDef=_React$useState4[1];var handleChangeInstance=function handleChangeInstance(event){setValueDef(event.target.value);};// UseEffect to update the cron syntax with changes\nuseEffect(function(){var cronSyntax=\"\".concat(cronValue.minute,\" \").concat(cronValue.hour,\" \").concat(cronValue.day_month,\" \").concat(cronValue.month,\" \").concat(cronValue.day_week);if(value==='now')workflow.setWorkflowDetails({cronSyntax:''});else workflow.setWorkflowDetails({cronSyntax:cronSyntax});},[cronValue]);var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;// Sets individual minutes\nvar _React$useState5=React.useState(workflowData.scheduleInput.hour_interval),_React$useState6=_slicedToArray(_React$useState5,2),minute=_React$useState6[0],setMinute=_React$useState6[1];// Sets Weekdays\nvar _React$useState7=React.useState(workflowData.scheduleInput.weekday),_React$useState8=_slicedToArray(_React$useState7,2),days=_React$useState8[0],setDays=_React$useState8[1];// Sets Day in number\nvar _React$useState9=React.useState(workflowData.scheduleInput.day),_React$useState10=_slicedToArray(_React$useState9,2),dates=_React$useState10[0],setDates=_React$useState10[1];// Sets Time\nvar _React$useState11=React.useState(new Date(workflowData.scheduleInput.time)),_React$useState12=_slicedToArray(_React$useState11,2),selectedTime=_React$useState12[0],setSelectedTime=_React$useState12[1];// Sets Date\nvar _React$useState13=React.useState(new Date(workflowData.scheduleInput.date)),_React$useState14=_slicedToArray(_React$useState13,2),selectedDate=_React$useState14[0],setSelectedDate=_React$useState14[1];// Function to validate the date and time for \"Specific Time\" radio button\nvar validateTime=function validateTime(time,date){if(value==='specificTime'&&(time===null||time===void 0?void 0:time.setSeconds(0))<=new Date().setSeconds(0)&&(date===null||date===void 0?void 0:date.getTime())<=new Date().getTime()){var _ref;var newTime=new Date();newTime.setMinutes(newTime.getMinutes()+5);setSelectedTime(newTime);workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{date:date,time:newTime})});setCronValue(_objectSpread(_objectSpread({},cronValue),{},{minute:newTime.getMinutes().toString(),hour:newTime.getHours().toString(),day_month:date===null||date===void 0?void 0:date.getDate().toString(),month:(_ref=date&&date.getMonth()+1)===null||_ref===void 0?void 0:_ref.toString()}));}else{var _ref2;workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{date:date,time:time})});setCronValue(_objectSpread(_objectSpread({},cronValue),{},{minute:time===null||time===void 0?void 0:time.getMinutes().toString(),hour:time===null||time===void 0?void 0:time.getHours().toString(),day_month:date===null||date===void 0?void 0:date.getDate().toString(),month:(_ref2=date&&date.getMonth()+1)===null||_ref2===void 0?void 0:_ref2.toString()}));}};var handleTimeChange=function handleTimeChange(time){setSelectedTime(time);validateTime(time,selectedDate);};var _handleDateChange=function handleDateChange(date){setSelectedDate(date);validateTime(selectedTime,date);};function EditYaml(){var oldParsedYaml=YAML.parse(manifest);var NewYaml;if(oldParsedYaml.kind==='Workflow'&&workflowData.scheduleType.scheduleOnce!=='now'){var _oldParsedYaml=YAML.parse(manifest);var newParsedYaml=YAML.parse(scheduleMore);delete newParsedYaml.spec.workflowSpec;newParsedYaml.spec.schedule=workflowData.cronSyntax;delete newParsedYaml.metadata.generateName;newParsedYaml.metadata.name=fetchWorkflowNameFromManifest(manifest);newParsedYaml.metadata.namespace=namespace;newParsedYaml.metadata.labels={workflow_id:workflowData.workflow_id};newParsedYaml.spec.workflowSpec=_oldParsedYaml.spec;var tz={timezone:Intl.DateTimeFormat().resolvedOptions().timeZone||'UTC'};Object.entries(tz).forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];newParsedYaml.spec[key]=value;});NewYaml=YAML.stringify(newParsedYaml);workflow.setWorkflowManifest({manifest:NewYaml});}if(oldParsedYaml.kind==='CronWorkflow'&&workflowData.scheduleType.scheduleOnce==='now'){var _oldParsedYaml2=YAML.parse(manifest);var _newParsedYaml=YAML.parse(scheduleOnce);delete _newParsedYaml.spec;delete _newParsedYaml.metadata.generateName;_newParsedYaml.metadata.name=fetchWorkflowNameFromManifest(manifest);_newParsedYaml.metadata.namespace=namespace;_newParsedYaml.spec=_oldParsedYaml2.spec.workflowSpec;_newParsedYaml.metadata.labels={workflow_id:workflowData.workflow_id};NewYaml=YAML.stringify(_newParsedYaml);workflow.setWorkflowManifest({manifest:NewYaml});}if(oldParsedYaml.kind==='CronWorkflow'&&workflowData.scheduleType.scheduleOnce!=='now'//   && !isDisabled\n){var _newParsedYaml2=YAML.parse(manifest);_newParsedYaml2.spec.schedule=workflowData.cronSyntax;//   newParsedYaml.spec.suspend = false;\ndelete _newParsedYaml2.metadata.generateName;_newParsedYaml2.metadata.name=fetchWorkflowNameFromManifest(manifest);_newParsedYaml2.metadata.namespace=namespace;_newParsedYaml2.metadata.labels={workflow_id:workflowData.workflow_id};var _tz={timezone:Intl.DateTimeFormat().resolvedOptions().timeZone||'UTC'};Object.entries(_tz).forEach(function(_ref5){var _ref6=_slicedToArray(_ref5,2),key=_ref6[0],value=_ref6[1];_newParsedYaml2.spec[key]=value;});NewYaml=YAML.stringify(_newParsedYaml2);workflow.setWorkflowManifest({manifest:NewYaml});}}// Function for recurring date change\nvar reccuringDateChange=function reccuringDateChange(date){setSelectedTime(date);setCronValue(_objectSpread(_objectSpread({},cronValue),{},{minute:date===null||date===void 0?void 0:date.getMinutes().toString(),hour:date===null||date===void 0?void 0:date.getHours().toString()}));workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{time:date})});};// Stores dates in an array\nvar names=[1];for(var i=1;i<=30;i+=1){names[i]=i+1;}var mins=[0];for(var _i=0;_i<=59;_i+=1){mins[_i]=_i;}// Day names\nvar weekdays=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'];// UseEffect to update the values of CronSyntax on radio button change\nuseEffect(function(){if(value==='now'){setValueDef('');setCronValue({minute:'',hour:'',day_month:'',month:'',day_week:''});}if(value==='specificTime'){var _ref7;setValueDef('');setCronValue({minute:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getMinutes().toString(),hour:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getHours().toString(),day_month:selectedDate===null||selectedDate===void 0?void 0:selectedDate.getDate().toString(),month:(_ref7=selectedDate&&selectedDate.getMonth()+1)===null||_ref7===void 0?void 0:_ref7.toString(),day_week:'*'});if(workflowData.scheduleInput.time<=new Date()){var _ref8;var newTime=new Date();newTime.setMinutes(newTime.getMinutes()+5);setSelectedTime(newTime);setCronValue({minute:newTime.getMinutes().toString(),hour:newTime.getHours().toString(),day_month:selectedDate===null||selectedDate===void 0?void 0:selectedDate.getDate().toString(),month:(_ref8=selectedDate&&selectedDate.getMonth()+1)===null||_ref8===void 0?void 0:_ref8.toString(),day_week:'*'});workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{time:newTime})});}}if(valueDef===constants.recurringEveryHour){setCronValue({minute:minute.toString(),hour:'0-23',day_month:'*',month:'*',day_week:'*'});}if(valueDef===constants.recurringEveryDay){setCronValue({minute:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getMinutes().toString(),hour:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getHours().toString(),day_month:'*',month:'*',day_week:'0-6'});}if(valueDef===constants.recurringEveryWeek){setCronValue({minute:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getMinutes().toString(),hour:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getHours().toString(),day_month:'*',month:'*',day_week:days.slice(0,3)});}if(valueDef===constants.recurringEveryMonth){setCronValue({minute:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getMinutes().toString(),hour:selectedTime===null||selectedTime===void 0?void 0:selectedTime.getHours().toString(),day_month:dates.toString(),month:'*',day_week:'*'});}if(value==='recurringSchedule'&&valueDef===''){template.selectTemplate({isDisable:true});}else{template.selectTemplate({isDisable:false});}workflow.setWorkflowDetails({scheduleType:{scheduleOnce:value,recurringSchedule:valueDef}});},[valueDef,value]);function onNext(){EditYaml();return true;}useImperativeHandle(ref,function(){return{onNext:onNext};});return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(\"div\",{className:classes.innerContainer},/*#__PURE__*/React.createElement(\"div\",{className:classes.scSegments},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Typography,{className:classes.headerText},/*#__PURE__*/React.createElement(\"strong\",null,t('createWorkflow.scheduleWorkflow.header'))),/*#__PURE__*/React.createElement(\"div\",{className:classes.schBody},/*#__PURE__*/React.createElement(Typography,{align:\"left\",className:classes.description},t('createWorkflow.scheduleWorkflow.info')))),/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/calendarWorkflowIcon.svg\",alt:\"calendar\",className:classes.calIcon})),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(\"div\",{className:classes.scFormControl},/*#__PURE__*/React.createElement(FormControl,{component:\"fieldset\",className:classes.formControl},/*#__PURE__*/React.createElement(RadioGroup,{\"data-cy\":\"ScheduleOptions\",\"aria-label\":\"schedule\",name:\"schedule\",value:value,onChange:handleChange},/*#__PURE__*/React.createElement(FormControlLabel,{value:\"now\",control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:/*#__PURE__*/React.createElement(Typography,{className:classes.radioText},t('createWorkflow.scheduleWorkflow.radio.now'))}),value==='specificTime'&&/*#__PURE__*/React.createElement(\"div\",{className:classes.schLater},/*#__PURE__*/React.createElement(Typography,{className:classes.captionText},t('createWorkflow.scheduleWorkflow.radio.future')),/*#__PURE__*/React.createElement(\"div\",{className:classes.innerSpecific},/*#__PURE__*/React.createElement(CustomDate,{selectedDate:selectedDate,handleDateChange:function handleDateChange(event){_handleDateChange(event);},disabled:false}),/*#__PURE__*/React.createElement(CustomTime,{handleDateChange:function handleDateChange(event){handleTimeChange(event);},value:selectedTime,ampm:true,disabled:false}))),/*#__PURE__*/React.createElement(FormControlLabel,{value:\"recurringSchedule\",control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:/*#__PURE__*/React.createElement(Typography,{className:classes.radioText},t('createWorkflow.scheduleWorkflow.radio.recurr'))}),value==='recurringSchedule'&&/*#__PURE__*/React.createElement(\"div\",{className:classes.schLater},/*#__PURE__*/React.createElement(Typography,{className:classes.captionText},t('createWorkflow.scheduleWorkflow.radio.rightRecurr')),/*#__PURE__*/React.createElement(\"div\",{className:classes.innerRecurring},/*#__PURE__*/React.createElement(FormControl,{component:\"fieldset\"},/*#__PURE__*/React.createElement(RadioGroup,{\"aria-label\":\"instanceDef\",name:\"instanceDef\",value:valueDef,onChange:function onChange(event){handleChangeInstance(event);}},/*#__PURE__*/React.createElement(FormControlLabel,{value:constants.recurringEveryHour,control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:t('createWorkflow.scheduleWorkflow.every.hr')}),valueDef===constants.recurringEveryHour&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.scRandom},/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.at')),/*#__PURE__*/React.createElement(SetTime,{data:mins,handleChange:function handleChange(event){setMinute(event.target.value);setCronValue(_objectSpread(_objectSpread({},cronValue),{},{minute:event.target.value.toString(),hour:'0-23'}));workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{hour_interval:event.target.value})});},value:minute}),minute===0||minute===1?/*#__PURE__*/React.createElement(Typography,null,t('createWorkflow.scheduleWorkflow.min')):/*#__PURE__*/React.createElement(Typography,null,t('createWorkflow.scheduleWorkflow.mins')))),/*#__PURE__*/React.createElement(FormControlLabel,{value:constants.recurringEveryDay,control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:t('createWorkflow.scheduleWorkflow.every.day')}),valueDef===constants.recurringEveryDay&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.scRandom},/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.at')),/*#__PURE__*/React.createElement(CustomTime,{handleDateChange:function handleDateChange(date){setSelectedTime(date);setCronValue(_objectSpread(_objectSpread({},cronValue),{},{minute:date===null||date===void 0?void 0:date.getMinutes().toString(),hour:date===null||date===void 0?void 0:date.getHours().toString(),day_week:'0-6'}));workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{time:date})});},value:selectedTime,ampm:true,disabled:false}))),/*#__PURE__*/React.createElement(FormControlLabel,{value:constants.recurringEveryWeek,control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:t('createWorkflow.scheduleWorkflow.every.week')}),valueDef===constants.recurringEveryWeek&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.scRandom},/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.on')),/*#__PURE__*/React.createElement(FormControl,{className:classes.formControlDT},/*#__PURE__*/React.createElement(Select,{className:classes.select,disableUnderline:true,value:days,onChange:function onChange(e){setCronValue(_objectSpread(_objectSpread({},cronValue),{},{month:'*',day_week:e.target.value.slice(0,3)}));setDays(e.target.value);workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{weekday:e.target.value})});},label:\"days\",inputProps:{name:'days',style:{fontSize:'0.75rem',height:7}}},weekdays.map(function(day){return/*#__PURE__*/React.createElement(\"option\",{key:day,className:classes.opt,value:day},day);}))),/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.at')),/*#__PURE__*/React.createElement(CustomTime,{handleDateChange:function handleDateChange(date){reccuringDateChange(date);},value:selectedTime,ampm:true,disabled:false}))),/*#__PURE__*/React.createElement(FormControlLabel,{value:constants.recurringEveryMonth,control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),label:t('createWorkflow.scheduleWorkflow.every.month')}),valueDef===constants.recurringEveryMonth&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.scRandom},/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.on')),/*#__PURE__*/React.createElement(SetTime,{data:names,handleChange:function handleChange(event){setCronValue(_objectSpread(_objectSpread({},cronValue),{},{day_month:event.target.value.toString()}));setDates(event.target.value);workflow.setWorkflowDetails({scheduleInput:_objectSpread(_objectSpread({},workflowData.scheduleInput),{},{day:event.target.value})});},value:dates}),/*#__PURE__*/React.createElement(Typography,{className:classes.scRandsub1},t('createWorkflow.scheduleWorkflow.at')),/*#__PURE__*/React.createElement(CustomTime,{handleDateChange:function handleDateChange(date){reccuringDateChange(date);},value:selectedTime,ampm:true,disabled:false}))))))))))));});export default ScheduleWorkflow;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ScheduleWorkflow/index.tsx"],"names":["Divider","FormControl","FormControlLabel","Radio","RadioGroup","Select","Typography","React","forwardRef","useEffect","useImperativeHandle","useState","useTranslation","useSelector","YAML","CustomDate","CustomTime","constants","useActions","TemplateSelectionActions","WorkflowActions","cronWorkflow","workflowOnce","fetchWorkflowNameFromManifest","SetTime","useStyles","ScheduleWorkflow","_","ref","minute","hour","day_month","month","day_week","cronValue","setCronValue","manifest","state","workflowManifest","workflowData","namespace","workflow","template","scheduleOnce","scheduleMore","scheduleType","value","setValue","handleChange","event","target","recurringSchedule","valueDef","setValueDef","handleChangeInstance","cronSyntax","setWorkflowDetails","classes","t","scheduleInput","hour_interval","setMinute","weekday","days","setDays","day","dates","setDates","Date","time","selectedTime","setSelectedTime","date","selectedDate","setSelectedDate","validateTime","setSeconds","getTime","newTime","setMinutes","getMinutes","toString","getHours","getDate","getMonth","handleTimeChange","handleDateChange","EditYaml","oldParsedYaml","parse","NewYaml","kind","newParsedYaml","spec","workflowSpec","schedule","metadata","generateName","name","labels","workflow_id","tz","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","Object","entries","forEach","key","stringify","setWorkflowManifest","reccuringDateChange","names","i","mins","weekdays","recurringEveryHour","recurringEveryDay","recurringEveryWeek","slice","recurringEveryMonth","selectTemplate","isDisable","onNext","root","innerContainer","scSegments","headerText","schBody","description","calIcon","scFormControl","formControl","radio","checked","radioText","schLater","captionText","innerSpecific","innerRecurring","scRandom","scRandsub1","formControlDT","select","e","style","fontSize","height","map","opt"],"mappings":"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","sourcesContent":["import {\n  Divider,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport CustomDate from '../../../components/DateTime/CustomDate/index';\nimport CustomTime from '../../../components/DateTime/CustomTime/index';\nimport { constants } from '../../../constants';\nimport { WorkflowData } from '../../../models/redux/workflow';\nimport useActions from '../../../redux/actions';\nimport * as TemplateSelectionActions from '../../../redux/actions/template';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { cronWorkflow, workflowOnce } from '../../../utils/workflowTemplate';\nimport { fetchWorkflowNameFromManifest } from '../../../utils/yamlUtils';\nimport SetTime from './SetTime/index';\nimport useStyles from './styles';\n\ninterface ScheduleSyntax {\n  minute: string | undefined;\n  hour: string | undefined;\n  day_month: string | undefined;\n  month: string | undefined;\n  day_week: string;\n}\n\nconst ScheduleWorkflow = forwardRef((_, ref) => {\n  // Initial Cron State\n  const [cronValue, setCronValue] = useState<ScheduleSyntax>({\n    minute: '*',\n    hour: '*',\n    day_month: '*',\n    month: '*',\n    day_week: '*',\n  });\n\n  const manifest = useSelector(\n    (state: RootState) => state.workflowManifest.manifest\n  );\n  const { namespace } = useSelector((state: RootState) => state.workflowData);\n  // Redux States for Schedule\n  const workflowData: WorkflowData = useSelector(\n    (state: RootState) => state.workflowData\n  );\n  const workflow = useActions(WorkflowActions);\n  const template = useActions(TemplateSelectionActions);\n\n  const scheduleOnce = workflowOnce;\n  const scheduleMore = cronWorkflow;\n\n  // Controls Radio Buttons\n  const [value, setValue] = React.useState(\n    workflowData.scheduleType.scheduleOnce\n  );\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  // Controls inner radio buttons of Recurring Schedule\n  const [valueDef, setValueDef] = React.useState(\n    workflowData.scheduleType.recurringSchedule\n  );\n  const handleChangeInstance = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValueDef(event.target.value);\n  };\n\n  // UseEffect to update the cron syntax with changes\n  useEffect(() => {\n    const cronSyntax = `${cronValue.minute} ${cronValue.hour} ${cronValue.day_month} ${cronValue.month} ${cronValue.day_week}`;\n    if (value === 'now')\n      workflow.setWorkflowDetails({\n        cronSyntax: '',\n      });\n    else\n      workflow.setWorkflowDetails({\n        cronSyntax,\n      });\n  }, [cronValue]);\n\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  // Sets individual minutes\n  const [minute, setMinute] = React.useState(\n    workflowData.scheduleInput.hour_interval\n  );\n\n  // Sets Weekdays\n  const [days, setDays] = React.useState(workflowData.scheduleInput.weekday);\n\n  // Sets Day in number\n  const [dates, setDates] = React.useState(workflowData.scheduleInput.day);\n\n  // Sets Time\n  const [selectedTime, setSelectedTime] = React.useState<Date | null>(\n    new Date(workflowData.scheduleInput.time)\n  );\n\n  // Sets Date\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n    new Date(workflowData.scheduleInput.date)\n  );\n\n  // Function to validate the date and time for \"Specific Time\" radio button\n  const validateTime = (time: Date | null, date: Date | null) => {\n    if (\n      value === 'specificTime' &&\n      (time?.setSeconds(0) as number) <= new Date().setSeconds(0) &&\n      (date?.getTime() as number) <= new Date().getTime()\n    ) {\n      const newTime = new Date();\n      newTime.setMinutes(newTime.getMinutes() + 5);\n      setSelectedTime(newTime);\n      workflow.setWorkflowDetails({\n        scheduleInput: {\n          ...workflowData.scheduleInput,\n          date,\n          time: newTime,\n        },\n      });\n      setCronValue({\n        ...cronValue,\n        minute: newTime.getMinutes().toString(),\n        hour: newTime.getHours().toString(),\n        day_month: date?.getDate().toString(),\n        month: (date && date.getMonth() + 1)?.toString(),\n      });\n    } else {\n      workflow.setWorkflowDetails({\n        scheduleInput: {\n          ...workflowData.scheduleInput,\n          date,\n          time,\n        },\n      });\n      setCronValue({\n        ...cronValue,\n        minute: time?.getMinutes().toString(),\n        hour: time?.getHours().toString(),\n        day_month: date?.getDate().toString(),\n        month: (date && date.getMonth() + 1)?.toString(),\n      });\n    }\n  };\n\n  const handleTimeChange = (time: Date | null) => {\n    setSelectedTime(time);\n    validateTime(time, selectedDate);\n  };\n\n  const handleDateChange = (date: Date | null) => {\n    setSelectedDate(date);\n    validateTime(selectedTime, date);\n  };\n\n  function EditYaml() {\n    const oldParsedYaml = YAML.parse(manifest);\n    let NewYaml: string;\n    if (\n      oldParsedYaml.kind === 'Workflow' &&\n      workflowData.scheduleType.scheduleOnce !== 'now'\n    ) {\n      const oldParsedYaml = YAML.parse(manifest);\n      const newParsedYaml = YAML.parse(scheduleMore);\n      delete newParsedYaml.spec.workflowSpec;\n      newParsedYaml.spec.schedule = workflowData.cronSyntax;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id,\n      };\n      newParsedYaml.spec.workflowSpec = oldParsedYaml.spec;\n      const tz = {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC',\n      };\n      Object.entries(tz).forEach(([key, value]) => {\n        newParsedYaml.spec[key] = value;\n      });\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n    if (\n      oldParsedYaml.kind === 'CronWorkflow' &&\n      workflowData.scheduleType.scheduleOnce === 'now'\n    ) {\n      const oldParsedYaml = YAML.parse(manifest);\n      const newParsedYaml = YAML.parse(scheduleOnce);\n      delete newParsedYaml.spec;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.spec = oldParsedYaml.spec.workflowSpec;\n      newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id,\n      };\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n    if (\n      oldParsedYaml.kind === 'CronWorkflow' &&\n      workflowData.scheduleType.scheduleOnce !== 'now'\n      //   && !isDisabled\n    ) {\n      const newParsedYaml = YAML.parse(manifest);\n      newParsedYaml.spec.schedule = workflowData.cronSyntax;\n      //   newParsedYaml.spec.suspend = false;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.metadata.labels = { workflow_id: workflowData.workflow_id };\n      const tz = {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC',\n      };\n      Object.entries(tz).forEach(([key, value]) => {\n        newParsedYaml.spec[key] = value;\n      });\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n  }\n\n  // Function for recurring date change\n  const reccuringDateChange = (date: Date | null) => {\n    setSelectedTime(date);\n    setCronValue({\n      ...cronValue,\n      minute: date?.getMinutes().toString(),\n      hour: date?.getHours().toString(),\n    });\n    workflow.setWorkflowDetails({\n      scheduleInput: {\n        ...workflowData.scheduleInput,\n        time: date,\n      },\n    });\n  };\n\n  // Stores dates in an array\n  const names: number[] = [1];\n  for (let i = 1; i <= 30; i += 1) {\n    names[i] = i + 1;\n  }\n  const mins: number[] = [0];\n  for (let i = 0; i <= 59; i += 1) {\n    mins[i] = i;\n  }\n  // Day names\n  const weekdays: string[] = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n  ];\n\n  // UseEffect to update the values of CronSyntax on radio button change\n  useEffect(() => {\n    if (value === 'now') {\n      setValueDef('');\n      setCronValue({\n        minute: '',\n        hour: '',\n        day_month: '',\n        month: '',\n        day_week: '',\n      });\n    }\n    if (value === 'specificTime') {\n      setValueDef('');\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: selectedDate?.getDate().toString(),\n        month: (selectedDate && selectedDate.getMonth() + 1)?.toString(),\n        day_week: '*',\n      });\n      if (workflowData.scheduleInput.time <= new Date()) {\n        const newTime = new Date();\n        newTime.setMinutes(newTime.getMinutes() + 5);\n        setSelectedTime(newTime);\n        setCronValue({\n          minute: newTime.getMinutes().toString(),\n          hour: newTime.getHours().toString(),\n          day_month: selectedDate?.getDate().toString(),\n          month: (selectedDate && selectedDate.getMonth() + 1)?.toString(),\n          day_week: '*',\n        });\n        workflow.setWorkflowDetails({\n          scheduleInput: {\n            ...workflowData.scheduleInput,\n            time: newTime,\n          },\n        });\n      }\n    }\n    if (valueDef === constants.recurringEveryHour) {\n      setCronValue({\n        minute: minute.toString(),\n        hour: '0-23',\n        day_month: '*',\n        month: '*',\n        day_week: '*',\n      });\n    }\n    if (valueDef === constants.recurringEveryDay) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: '0-6',\n      });\n    }\n    if (valueDef === constants.recurringEveryWeek) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: days.slice(0, 3),\n      });\n    }\n    if (valueDef === constants.recurringEveryMonth) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: dates.toString(),\n        month: '*',\n        day_week: '*',\n      });\n    }\n    if (value === 'recurringSchedule' && valueDef === '') {\n      template.selectTemplate({ isDisable: true });\n    } else {\n      template.selectTemplate({ isDisable: false });\n    }\n    workflow.setWorkflowDetails({\n      scheduleType: {\n        scheduleOnce: value,\n        recurringSchedule: valueDef,\n      },\n    });\n  }, [valueDef, value]);\n\n  function onNext() {\n    EditYaml();\n    return true;\n  }\n\n  useImperativeHandle(ref, () => ({\n    onNext,\n  }));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.innerContainer}>\n        {/* Upper segment */}\n        <div className={classes.scSegments}>\n          <div>\n            <Typography className={classes.headerText}>\n              <strong>{t('createWorkflow.scheduleWorkflow.header')}</strong>\n            </Typography>\n\n            <div className={classes.schBody}>\n              <Typography align=\"left\" className={classes.description}>\n                {t('createWorkflow.scheduleWorkflow.info')}\n              </Typography>\n            </div>\n          </div>\n          <img\n            src=\"/icons/calendarWorkflowIcon.svg\"\n            alt=\"calendar\"\n            className={classes.calIcon}\n          />\n        </div>\n        <Divider />\n\n        {/* Lower segment */}\n        <div className={classes.scFormControl}>\n          <FormControl component=\"fieldset\" className={classes.formControl}>\n            <RadioGroup\n              data-cy=\"ScheduleOptions\"\n              aria-label=\"schedule\"\n              name=\"schedule\"\n              value={value}\n              onChange={handleChange}\n            >\n              {/* options to choose schedule */}\n              <FormControlLabel\n                value=\"now\"\n                control={\n                  <Radio\n                    classes={{\n                      root: classes.radio,\n                      checked: classes.checked,\n                    }}\n                  />\n                }\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.now')}\n                  </Typography>\n                }\n              />\n              {value === 'specificTime' && (\n                <div className={classes.schLater}>\n                  <Typography className={classes.captionText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.future')}\n                  </Typography>\n                  <div className={classes.innerSpecific}>\n                    <CustomDate\n                      selectedDate={selectedDate}\n                      handleDateChange={(event) => {\n                        handleDateChange(event);\n                      }}\n                      disabled={false}\n                    />\n                    <CustomTime\n                      handleDateChange={(event) => {\n                        handleTimeChange(event);\n                      }}\n                      value={selectedTime}\n                      ampm\n                      disabled={false}\n                    />\n                  </div>\n                </div>\n              )}\n              <FormControlLabel\n                value=\"recurringSchedule\"\n                control={\n                  <Radio\n                    classes={{ root: classes.radio, checked: classes.checked }}\n                  />\n                }\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.recurr')}\n                  </Typography>\n                }\n              />\n              {value === 'recurringSchedule' && (\n                <div className={classes.schLater}>\n                  <Typography className={classes.captionText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.rightRecurr')}\n                  </Typography>\n\n                  {/* options to select time of recurring schedule */}\n                  <div className={classes.innerRecurring}>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"instanceDef\"\n                        name=\"instanceDef\"\n                        value={valueDef}\n                        onChange={(event) => {\n                          handleChangeInstance(event);\n                        }}\n                      >\n                        <FormControlLabel\n                          value={constants.recurringEveryHour}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t('createWorkflow.scheduleWorkflow.every.hr')}\n                        />\n                        {valueDef === constants.recurringEveryHour && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <SetTime\n                                data={mins}\n                                handleChange={(event) => {\n                                  setMinute(event.target.value as number);\n                                  setCronValue({\n                                    ...cronValue,\n                                    minute: (\n                                      event.target.value as number\n                                    ).toString(),\n                                    hour: '0-23',\n                                  });\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      hour_interval: event.target\n                                        .value as number,\n                                    },\n                                  });\n                                }}\n                                value={minute}\n                              />\n                              {minute === 0 || minute === 1 ? (\n                                <Typography>\n                                  {t('createWorkflow.scheduleWorkflow.min')}\n                                </Typography>\n                              ) : (\n                                <Typography>\n                                  {t('createWorkflow.scheduleWorkflow.mins')}\n                                </Typography>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryDay}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t('createWorkflow.scheduleWorkflow.every.day')}\n                        />\n                        {valueDef === constants.recurringEveryDay && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  setSelectedTime(date);\n                                  setCronValue({\n                                    ...cronValue,\n                                    minute: date?.getMinutes().toString(),\n                                    hour: date?.getHours().toString(),\n                                    day_week: '0-6',\n                                  });\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      time: date,\n                                    },\n                                  });\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryWeek}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t(\n                            'createWorkflow.scheduleWorkflow.every.week'\n                          )}\n                        />\n                        {valueDef === constants.recurringEveryWeek && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.on')}\n                              </Typography>\n                              <FormControl className={classes.formControlDT}>\n                                <Select\n                                  className={classes.select}\n                                  disableUnderline\n                                  value={days}\n                                  onChange={(e) => {\n                                    setCronValue({\n                                      ...cronValue,\n                                      month: '*',\n                                      day_week: (\n                                        e.target.value as unknown as string\n                                      ).slice(0, 3),\n                                    });\n                                    setDays(\n                                      e.target.value as unknown as string\n                                    );\n                                    workflow.setWorkflowDetails({\n                                      scheduleInput: {\n                                        ...workflowData.scheduleInput,\n                                        weekday: e.target\n                                          .value as unknown as string,\n                                      },\n                                    });\n                                  }}\n                                  label=\"days\"\n                                  inputProps={{\n                                    name: 'days',\n                                    style: {\n                                      fontSize: '0.75rem',\n                                      height: 7,\n                                    },\n                                  }}\n                                >\n                                  {weekdays.map((day) => (\n                                    <option\n                                      key={day}\n                                      className={classes.opt}\n                                      value={day}\n                                    >\n                                      {day}\n                                    </option>\n                                  ))}\n                                </Select>\n                              </FormControl>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  reccuringDateChange(date);\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryMonth}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t(\n                            'createWorkflow.scheduleWorkflow.every.month'\n                          )}\n                        />\n                        {valueDef === constants.recurringEveryMonth && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.on')}\n                              </Typography>\n                              <SetTime\n                                data={names}\n                                handleChange={(event) => {\n                                  setCronValue({\n                                    ...cronValue,\n                                    day_month: (\n                                      event.target.value as number\n                                    ).toString(),\n                                  });\n                                  setDates(event.target.value as number);\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      day: event.target.value as number,\n                                    },\n                                  });\n                                }}\n                                value={dates}\n                              />\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  reccuringDateChange(date);\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </RadioGroup>\n                    </FormControl>\n                  </div>\n                </div>\n              )}\n            </RadioGroup>\n          </FormControl>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default ScheduleWorkflow;\n"]},"metadata":{},"sourceType":"module"}