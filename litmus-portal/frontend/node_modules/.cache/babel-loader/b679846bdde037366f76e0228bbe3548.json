{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36;\n\nimport { gql } from '@apollo/client';\nexport var WORKFLOW_DETAILS_WITH_EXEC_DATA = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\\n      total_no_of_workflow_runs\\n      workflow_runs {\\n        workflow_id\\n        workflow_name\\n        workflow_run_id\\n        cluster_name\\n        last_updated\\n        cluster_id\\n        phase\\n        execution_data\\n        resiliency_score\\n        isRemoved\\n      }\\n    }\\n  }\\n\"])));\nexport var WORKFLOW_DETAILS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\\n      total_no_of_workflow_runs\\n      workflow_runs {\\n        workflow_id\\n        workflow_name\\n        workflow_run_id\\n        cluster_name\\n        last_updated\\n        phase\\n        resiliency_score\\n        experiments_passed\\n        total_experiments\\n        isRemoved\\n      }\\n    }\\n  }\\n\"])));\nexport var WORKFLOW_STATS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query getWorkflowStats(\\n    $filter: TimeFrequency!\\n    $project_id: ID!\\n    $show_workflow_runs: Boolean!\\n  ) {\\n    getWorkflowStats(\\n      filter: $filter\\n      project_id: $project_id\\n      show_workflow_runs: $show_workflow_runs\\n    ) {\\n      date\\n      value\\n    }\\n  }\\n\"])));\nexport var WORKFLOW_LIST_DETAILS = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  query workflowListDetails($workflowInput: ListWorkflowsInput!) {\\n    ListWorkflow(workflowInput: $workflowInput) {\\n      total_no_of_workflows\\n      workflows {\\n        workflow_id\\n        workflow_manifest\\n        cronSyntax\\n        cluster_name\\n        workflow_name\\n        workflow_description\\n        weightages {\\n          experiment_name\\n          weightage\\n        }\\n        isCustomWorkflow\\n        updated_at\\n        created_at\\n        project_id\\n        cluster_id\\n        cluster_type\\n        isRemoved\\n        workflow_runs {\\n          execution_data\\n          workflow_run_id\\n          last_updated\\n        }\\n      }\\n    }\\n  }\\n\"])));\nexport var WORKFLOW_LIST_DETAILS_FOR_MANIFEST = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  query workflowListDetails($projectID: String!, $workflowIDs: [ID]) {\\n    ListWorkflow(project_id: $projectID, workflow_ids: $workflowIDs) {\\n      workflow_id\\n      workflow_manifest\\n      workflow_name\\n    }\\n  }\\n\"])));\nexport var GET_USER = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n  query getUser($username: String!) {\\n    getUser(username: $username) {\\n      username\\n      email\\n      id\\n      name\\n      projects {\\n        members {\\n          user_id\\n          user_name\\n          role\\n          invitation\\n          name\\n          email\\n          joined_at\\n        }\\n        name\\n        id\\n      }\\n      company_name\\n      updated_at\\n      created_at\\n      removed_at\\n      is_email_verified\\n      state\\n      role\\n    }\\n  }\\n\"])));\nexport var GET_USER_INFO = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n  query getUser($username: String!) {\\n    getUser(username: $username) {\\n      username\\n      email\\n      id\\n      name\\n    }\\n  }\\n\"])));\nexport var GET_CLUSTER = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n  query getClusters($project_id: String!, $cluster_type: String) {\\n    getCluster(project_id: $project_id, cluster_type: $cluster_type) {\\n      cluster_id\\n      cluster_name\\n      description\\n      is_active\\n      is_registered\\n      is_cluster_confirmed\\n      updated_at\\n      created_at\\n      cluster_type\\n      no_of_schedules\\n      no_of_workflows\\n      token\\n      last_workflow_timestamp\\n      agent_namespace\\n    }\\n  }\\n\"])));\nexport var GET_CLUSTER_LENGTH = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n  query getClusters($project_id: String!) {\\n    getCluster(project_id: $project_id) {\\n      cluster_id\\n    }\\n  }\\n\"])));\nexport var GET_CLUSTER_NAMES = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\\n  query getClusters($project_id: String!) {\\n    getCluster(project_id: $project_id) {\\n      cluster_name\\n    }\\n  }\\n\"])));\nexport var ALL_USERS = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\n  query allUsers {\\n    users {\\n      id\\n      name\\n      username\\n      email\\n    }\\n  }\\n\"])));\nexport var CORE_CHART_FIELDS = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\\n  fragment CoreChartFields on Chart {\\n    ApiVersion\\n    Kind\\n    Metadata {\\n      Name\\n      Version\\n      Annotations {\\n        Categories\\n        Vendor\\n        CreatedAt\\n        Repository\\n        Support\\n        ChartDescription\\n      }\\n    }\\n    Spec {\\n      DisplayName\\n      CategoryDescription\\n      Keywords\\n      Maturity\\n      Experiments\\n      Maintainers {\\n        Name\\n        Email\\n      }\\n      MinKubeVersion\\n      Provider\\n      Links {\\n        Name\\n        Url\\n      }\\n      ChaosExpCRDLink\\n      Platforms\\n      ChaosType\\n    }\\n    PackageInfo {\\n      PackageName\\n      Experiments {\\n        Name\\n        CSV\\n        Desc\\n      }\\n    }\\n  }\\n\"])));\nexport var GET_CHARTS_DATA = gql(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\\n  \", \"\\n  query getCharts($HubName: String!, $projectID: String!) {\\n    getCharts(HubName: $HubName, projectID: $projectID) {\\n      ...CoreChartFields\\n    }\\n  }\\n\"])), CORE_CHART_FIELDS);\nexport var GET_EXPERIMENT_DATA = gql(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\\n  \", \"\\n  query getExperiment($data: ExperimentInput!) {\\n    getHubExperiment(experimentInput: $data) {\\n      ...CoreChartFields\\n    }\\n  }\\n\"])), CORE_CHART_FIELDS);\nexport var GET_HUB_STATUS = gql(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"\\n  query getHubStatus($data: String!) {\\n    getHubStatus(projectID: $data) {\\n      id\\n      HubName\\n      RepoBranch\\n      RepoURL\\n      TotalExp\\n      IsAvailable\\n      AuthType\\n      IsPrivate\\n      Token\\n      UserName\\n      Password\\n      SSHPrivateKey\\n      SSHPublicKey\\n      LastSyncedAt\\n    }\\n  }\\n\"])));\nexport var GET_ENGINE_YAML = gql(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\\n  query getEngineData($experimentInput: ExperimentInput!) {\\n    getYAMLData(experimentInput: $experimentInput)\\n  }\\n\"])));\nexport var GET_EXPERIMENT_YAML = gql(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\\n  query getExperimentData($experimentInput: ExperimentInput!) {\\n    getYAMLData(experimentInput: $experimentInput)\\n  }\\n\"])));\nexport var GET_GITOPS_DATA = gql(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"\\n  query gitOPsData($data: String!) {\\n    getGitOpsDetails(project_id: $data) {\\n      Enabled\\n      ProjectID\\n      Branch\\n      RepoURL\\n      AuthType\\n      Token\\n      UserName\\n      Password\\n      SSHPrivateKey\\n    }\\n  }\\n\"])));\nexport var LIST_MANIFEST_TEMPLATE = gql(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\\n  query ListManifestTemplate($data: String!) {\\n    ListManifestTemplate(project_id: $data) {\\n      template_id\\n      manifest\\n      project_name\\n      template_description\\n      template_name\\n      isCustomWorkflow\\n    }\\n  }\\n\"])));\nexport var LIST_PROJECTS = gql(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"\\n  query listProjects {\\n    listProjects {\\n      id\\n      name\\n      members {\\n        user_name\\n        user_id\\n        role\\n        invitation\\n        joined_at\\n      }\\n      state\\n      created_at\\n      updated_at\\n      removed_at\\n    }\\n  }\\n\"])));\nexport var GET_PROJECT = gql(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"\\n  query getProject($projectID: String!) {\\n    getProject(projectID: $projectID) {\\n      id\\n      name\\n      members {\\n        user_id\\n        user_name\\n        role\\n        invitation\\n        joined_at\\n      }\\n      state\\n      created_at\\n      updated_at\\n      removed_at\\n    }\\n  }\\n\"])));\nexport var GET_PROJECT_NAME = gql(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"\\n  query getProject($projectID: String!) {\\n    getProject(projectID: $projectID) {\\n      name\\n    }\\n  }\\n\"])));\nexport var LIST_DATASOURCE = gql(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\\n  query listDataSource($projectID: String!) {\\n    ListDataSource(project_id: $projectID) {\\n      ds_id\\n      ds_name\\n      ds_type\\n      ds_url\\n      access_type\\n      auth_type\\n      basic_auth_username\\n      basic_auth_password\\n      scrape_interval\\n      query_timeout\\n      http_method\\n      project_id\\n      created_at\\n      updated_at\\n      health_status\\n    }\\n  }\\n\"])));\nexport var LIST_DATASOURCE_OVERVIEW = gql(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"\\n  query listDataSource($projectID: String!) {\\n    ListDataSource(project_id: $projectID) {\\n      ds_id\\n    }\\n  }\\n\"])));\nexport var LIST_DASHBOARD = gql(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\\n  query listDashboard($projectID: String!) {\\n    ListDashboard(project_id: $projectID) {\\n      db_id\\n      ds_id\\n      db_name\\n      cluster_name\\n      ds_name\\n      ds_type\\n      db_type_id\\n      db_type_name\\n      db_information\\n      chaos_event_query_template\\n      chaos_verdict_query_template\\n      application_metadata_map {\\n        namespace\\n        applications {\\n          kind\\n          names\\n        }\\n      }\\n      panel_groups {\\n        panels {\\n          panel_id\\n          created_at\\n          prom_queries {\\n            queryid\\n            prom_query_name\\n            legend\\n            resolution\\n            minstep\\n            line\\n            close_area\\n          }\\n          panel_options {\\n            points\\n            grids\\n            left_axis\\n          }\\n          panel_name\\n          y_axis_left\\n          y_axis_right\\n          x_axis_down\\n          unit\\n        }\\n        panel_group_name\\n        panel_group_id\\n      }\\n      end_time\\n      start_time\\n      refresh_rate\\n      project_id\\n      cluster_id\\n      created_at\\n      updated_at\\n    }\\n  }\\n\"])));\nexport var LIST_DASHBOARD_OVERVIEW = gql(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([\"\\n  query listDashboard($projectID: String!) {\\n    ListDashboard(project_id: $projectID) {\\n      db_id\\n      db_name\\n      db_type_id\\n      db_type_name\\n      cluster_name\\n      cluster_id\\n      updated_at\\n      db_information\\n      chaos_event_query_template\\n      chaos_verdict_query_template\\n      application_metadata_map {\\n        namespace\\n        applications {\\n          kind\\n          names\\n        }\\n      }\\n      panel_groups {\\n        panels {\\n          panel_id\\n          created_at\\n          prom_queries {\\n            queryid\\n            prom_query_name\\n            legend\\n            resolution\\n            minstep\\n            line\\n            close_area\\n          }\\n          panel_options {\\n            points\\n            grids\\n            left_axis\\n          }\\n          panel_name\\n          y_axis_left\\n          y_axis_right\\n          x_axis_down\\n          unit\\n        }\\n        panel_group_name\\n        panel_group_id\\n      }\\n    }\\n  }\\n\"])));\nexport var PROM_QUERY = gql(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([\"\\n  query PrometheusQuery($prometheusInput: promInput) {\\n    GetPromQuery(query: $prometheusInput) {\\n      metricsResponse {\\n        queryid\\n        legends\\n        tsvs {\\n          date\\n          value\\n        }\\n      }\\n      annotationsResponse {\\n        queryid\\n        legends\\n        tsvs {\\n          date\\n          value\\n        }\\n      }\\n    }\\n  }\\n\"])));\nexport var PROM_LABEL_VALUES = gql(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral([\"\\n  query PrometheusLabelValues($prometheusInput: promSeriesInput) {\\n    GetPromLabelNamesAndValues(series: $prometheusInput) {\\n      series\\n      labelValues {\\n        label\\n        values {\\n          name\\n        }\\n      }\\n    }\\n  }\\n\"])));\nexport var PROM_SERIES_LIST = gql(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([\"\\n  query PrometheusSeriesList($prometheusDSInput: dsDetails) {\\n    GetPromSeriesList(ds_details: $prometheusDSInput) {\\n      seriesList\\n    }\\n  }\\n\"])));\nexport var GET_TEMPLATE_BY_ID = gql(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([\"\\n  query GetManifestTemplate($data: String!) {\\n    GetTemplateManifestByID(template_id: $data) {\\n      template_id\\n      template_name\\n      template_description\\n      manifest\\n    }\\n  }\\n\"])));\nexport var GET_PREDEFINED_WORKFLOW_LIST = gql(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral([\"\\n  query GetPredefinedWorkflowList($hubname: String!, $projectid: String!) {\\n    GetPredefinedWorkflowList(HubName: $hubname, projectID: $projectid)\\n  }\\n\"])));\nexport var GET_PREDEFINED_EXPERIMENT_YAML = gql(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral([\"\\n  query GetPredefinedExperimentYAML($experimentInput: ExperimentInput!) {\\n    GetPredefinedExperimentYAML(experimentInput: $experimentInput)\\n  }\\n\"])));\nexport var LIST_IMAGE_REGISTRY = gql(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral([\"\\n  query ListImageRegistry($data: String!) {\\n    ListImageRegistry(project_id: $data) {\\n      image_registry_info {\\n        enable_registry\\n      }\\n      image_registry_id\\n    }\\n  }\\n\"])));\nexport var GET_IMAGE_REGISTRY = gql(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral([\"\\n  query GetImageRegistry($registryid: String!, $projectid: String!) {\\n    GetImageRegistry(image_registry_id: $registryid, project_id: $projectid) {\\n      image_registry_info {\\n        enable_registry\\n        secret_name\\n        secret_namespace\\n        image_registry_name\\n        image_repo_name\\n        image_registry_type\\n      }\\n      image_registry_id\\n    }\\n  }\\n\"])));\nexport var GET_GLOBAL_STATS = gql(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral([\"\\n  query getGlobalStats($query: UsageQuery!) {\\n    UsageQuery(query: $query) {\\n      TotalCount {\\n        Workflows {\\n          Runs\\n          ExpRuns\\n          Schedules\\n        }\\n        Agents {\\n          Ns\\n          Cluster\\n          Total\\n        }\\n        Projects\\n        Users\\n      }\\n    }\\n  }\\n\"])));\nexport var GLOBAL_PROJECT_DATA = gql(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral([\"\\n  query getStats($query: UsageQuery!) {\\n    UsageQuery(query: $query) {\\n      TotalCount {\\n        Projects\\n      }\\n      Projects {\\n        Name\\n        Workflows {\\n          Schedules\\n          ExpRuns\\n          Runs\\n        }\\n        Agents {\\n          Total\\n          Ns\\n          Cluster\\n        }\\n        Members {\\n          Owner {\\n            Name\\n            Username\\n          }\\n          Total\\n        }\\n      }\\n    }\\n  }\\n\"])));","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/graphql/queries.ts"],"names":["gql","WORKFLOW_DETAILS_WITH_EXEC_DATA","WORKFLOW_DETAILS","WORKFLOW_STATS","WORKFLOW_LIST_DETAILS","WORKFLOW_LIST_DETAILS_FOR_MANIFEST","GET_USER","GET_USER_INFO","GET_CLUSTER","GET_CLUSTER_LENGTH","GET_CLUSTER_NAMES","ALL_USERS","CORE_CHART_FIELDS","GET_CHARTS_DATA","GET_EXPERIMENT_DATA","GET_HUB_STATUS","GET_ENGINE_YAML","GET_EXPERIMENT_YAML","GET_GITOPS_DATA","LIST_MANIFEST_TEMPLATE","LIST_PROJECTS","GET_PROJECT","GET_PROJECT_NAME","LIST_DATASOURCE","LIST_DATASOURCE_OVERVIEW","LIST_DASHBOARD","LIST_DASHBOARD_OVERVIEW","PROM_QUERY","PROM_LABEL_VALUES","PROM_SERIES_LIST","GET_TEMPLATE_BY_ID","GET_PREDEFINED_WORKFLOW_LIST","GET_PREDEFINED_EXPERIMENT_YAML","LIST_IMAGE_REGISTRY","GET_IMAGE_REGISTRY","GET_GLOBAL_STATS","GLOBAL_PROJECT_DATA"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,OAAO,IAAMC,+BAA+B,GAAGD,GAAH,ifAArC;AAoBP,OAAO,IAAME,gBAAgB,GAAGF,GAAH,8fAAtB;AAoBP,OAAO,IAAMG,cAAc,GAAGH,GAAH,2WAApB;AAiBP,OAAO,IAAMI,qBAAqB,GAAGJ,GAAH,yuBAA3B;AAgCP,OAAO,IAAMK,kCAAkC,GAAGL,GAAH,sSAAxC;AAUP,OAAO,IAAMM,QAAQ,GAAGN,GAAH,siBAAd;AA+BP,OAAO,IAAMO,aAAa,GAAGP,GAAH,mNAAnB;AAWP,OAAO,IAAMQ,WAAW,GAAGR,GAAH,qgBAAjB;AAqBP,OAAO,IAAMS,kBAAkB,GAAGT,GAAH,+LAAxB;AAQP,OAAO,IAAMU,iBAAiB,GAAGV,GAAH,mMAAvB;AAQP,OAAO,IAAMW,SAAS,GAAGX,GAAH,2KAAf;AAWP,OAAO,IAAMY,iBAAiB,GAAGZ,GAAH,4wBAAvB;AA+CP,OAAO,IAAMa,eAAe,GAAGb,GAAH,kPACxBY,iBADwB,CAArB;AASP,OAAO,IAAME,mBAAmB,GAAGd,GAAH,4NAC5BY,iBAD4B,CAAzB;AASP,OAAO,IAAMG,cAAc,GAAGf,GAAH,6YAApB;AAqBP,OAAO,IAAMgB,eAAe,GAAGhB,GAAH,iMAArB;AAMP,OAAO,IAAMiB,mBAAmB,GAAGjB,GAAH,qMAAzB;AAMP,OAAO,IAAMkB,eAAe,GAAGlB,GAAH,uTAArB;AAgBP,OAAO,IAAMmB,sBAAsB,GAAGnB,GAAH,sTAA5B;AAaP,OAAO,IAAMoB,aAAa,GAAGpB,GAAH,+UAAnB;AAoBP,OAAO,IAAMqB,WAAW,GAAGrB,GAAH,uXAAjB;AAoBP,OAAO,IAAMsB,gBAAgB,GAAGtB,GAAH,uLAAtB;AAQP,OAAO,IAAMuB,eAAe,GAAGvB,GAAH,idAArB;AAsBP,OAAO,IAAMwB,wBAAwB,GAAGxB,GAAH,iMAA9B;AAQP,OAAO,IAAMyB,cAAc,GAAGzB,GAAH,6rCAApB;AA2DP,OAAO,IAAM0B,uBAAuB,GAAG1B,GAAH,wjCAA7B;AAmDP,OAAO,IAAM2B,UAAU,GAAG3B,GAAH,gcAAhB;AAuBP,OAAO,IAAM4B,iBAAiB,GAAG5B,GAAH,+TAAvB;AAcP,OAAO,IAAM6B,gBAAgB,GAAG7B,GAAH,iOAAtB;AAQP,OAAO,IAAM8B,kBAAkB,GAAG9B,GAAH,6QAAxB;AAWP,OAAO,IAAM+B,4BAA4B,GAAG/B,GAAH,sOAAlC;AAMP,OAAO,IAAMgC,8BAA8B,GAAGhC,GAAH,+NAApC;AAMP,OAAO,IAAMiC,mBAAmB,GAAGjC,GAAH,wQAAzB;AAWP,OAAO,IAAMkC,kBAAkB,GAAGlC,GAAH,wcAAxB;AAgBP,OAAO,IAAMmC,gBAAgB,GAAGnC,GAAH,4YAAtB;AAqBP,OAAO,IAAMoC,mBAAmB,GAAGpC,GAAH,uhBAAzB","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const WORKFLOW_DETAILS_WITH_EXEC_DATA = gql`\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\n      total_no_of_workflow_runs\n      workflow_runs {\n        workflow_id\n        workflow_name\n        workflow_run_id\n        cluster_name\n        last_updated\n        cluster_id\n        phase\n        execution_data\n        resiliency_score\n        isRemoved\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_DETAILS = gql`\n  query workflowDetails($workflowRunsInput: GetWorkflowRunsInput!) {\n    getWorkflowRuns(workflowRunsInput: $workflowRunsInput) {\n      total_no_of_workflow_runs\n      workflow_runs {\n        workflow_id\n        workflow_name\n        workflow_run_id\n        cluster_name\n        last_updated\n        phase\n        resiliency_score\n        experiments_passed\n        total_experiments\n        isRemoved\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_STATS = gql`\n  query getWorkflowStats(\n    $filter: TimeFrequency!\n    $project_id: ID!\n    $show_workflow_runs: Boolean!\n  ) {\n    getWorkflowStats(\n      filter: $filter\n      project_id: $project_id\n      show_workflow_runs: $show_workflow_runs\n    ) {\n      date\n      value\n    }\n  }\n`;\n\nexport const WORKFLOW_LIST_DETAILS = gql`\n  query workflowListDetails($workflowInput: ListWorkflowsInput!) {\n    ListWorkflow(workflowInput: $workflowInput) {\n      total_no_of_workflows\n      workflows {\n        workflow_id\n        workflow_manifest\n        cronSyntax\n        cluster_name\n        workflow_name\n        workflow_description\n        weightages {\n          experiment_name\n          weightage\n        }\n        isCustomWorkflow\n        updated_at\n        created_at\n        project_id\n        cluster_id\n        cluster_type\n        isRemoved\n        workflow_runs {\n          execution_data\n          workflow_run_id\n          last_updated\n        }\n      }\n    }\n  }\n`;\n\nexport const WORKFLOW_LIST_DETAILS_FOR_MANIFEST = gql`\n  query workflowListDetails($projectID: String!, $workflowIDs: [ID]) {\n    ListWorkflow(project_id: $projectID, workflow_ids: $workflowIDs) {\n      workflow_id\n      workflow_manifest\n      workflow_name\n    }\n  }\n`;\n\nexport const GET_USER = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      email\n      id\n      name\n      projects {\n        members {\n          user_id\n          user_name\n          role\n          invitation\n          name\n          email\n          joined_at\n        }\n        name\n        id\n      }\n      company_name\n      updated_at\n      created_at\n      removed_at\n      is_email_verified\n      state\n      role\n    }\n  }\n`;\n\nexport const GET_USER_INFO = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      email\n      id\n      name\n    }\n  }\n`;\n\nexport const GET_CLUSTER = gql`\n  query getClusters($project_id: String!, $cluster_type: String) {\n    getCluster(project_id: $project_id, cluster_type: $cluster_type) {\n      cluster_id\n      cluster_name\n      description\n      is_active\n      is_registered\n      is_cluster_confirmed\n      updated_at\n      created_at\n      cluster_type\n      no_of_schedules\n      no_of_workflows\n      token\n      last_workflow_timestamp\n      agent_namespace\n    }\n  }\n`;\n\nexport const GET_CLUSTER_LENGTH = gql`\n  query getClusters($project_id: String!) {\n    getCluster(project_id: $project_id) {\n      cluster_id\n    }\n  }\n`;\n\nexport const GET_CLUSTER_NAMES = gql`\n  query getClusters($project_id: String!) {\n    getCluster(project_id: $project_id) {\n      cluster_name\n    }\n  }\n`;\n\nexport const ALL_USERS = gql`\n  query allUsers {\n    users {\n      id\n      name\n      username\n      email\n    }\n  }\n`;\n\nexport const CORE_CHART_FIELDS = gql`\n  fragment CoreChartFields on Chart {\n    ApiVersion\n    Kind\n    Metadata {\n      Name\n      Version\n      Annotations {\n        Categories\n        Vendor\n        CreatedAt\n        Repository\n        Support\n        ChartDescription\n      }\n    }\n    Spec {\n      DisplayName\n      CategoryDescription\n      Keywords\n      Maturity\n      Experiments\n      Maintainers {\n        Name\n        Email\n      }\n      MinKubeVersion\n      Provider\n      Links {\n        Name\n        Url\n      }\n      ChaosExpCRDLink\n      Platforms\n      ChaosType\n    }\n    PackageInfo {\n      PackageName\n      Experiments {\n        Name\n        CSV\n        Desc\n      }\n    }\n  }\n`;\n\nexport const GET_CHARTS_DATA = gql`\n  ${CORE_CHART_FIELDS}\n  query getCharts($HubName: String!, $projectID: String!) {\n    getCharts(HubName: $HubName, projectID: $projectID) {\n      ...CoreChartFields\n    }\n  }\n`;\n\nexport const GET_EXPERIMENT_DATA = gql`\n  ${CORE_CHART_FIELDS}\n  query getExperiment($data: ExperimentInput!) {\n    getHubExperiment(experimentInput: $data) {\n      ...CoreChartFields\n    }\n  }\n`;\n\nexport const GET_HUB_STATUS = gql`\n  query getHubStatus($data: String!) {\n    getHubStatus(projectID: $data) {\n      id\n      HubName\n      RepoBranch\n      RepoURL\n      TotalExp\n      IsAvailable\n      AuthType\n      IsPrivate\n      Token\n      UserName\n      Password\n      SSHPrivateKey\n      SSHPublicKey\n      LastSyncedAt\n    }\n  }\n`;\n\nexport const GET_ENGINE_YAML = gql`\n  query getEngineData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n\nexport const GET_EXPERIMENT_YAML = gql`\n  query getExperimentData($experimentInput: ExperimentInput!) {\n    getYAMLData(experimentInput: $experimentInput)\n  }\n`;\n\nexport const GET_GITOPS_DATA = gql`\n  query gitOPsData($data: String!) {\n    getGitOpsDetails(project_id: $data) {\n      Enabled\n      ProjectID\n      Branch\n      RepoURL\n      AuthType\n      Token\n      UserName\n      Password\n      SSHPrivateKey\n    }\n  }\n`;\n\nexport const LIST_MANIFEST_TEMPLATE = gql`\n  query ListManifestTemplate($data: String!) {\n    ListManifestTemplate(project_id: $data) {\n      template_id\n      manifest\n      project_name\n      template_description\n      template_name\n      isCustomWorkflow\n    }\n  }\n`;\n\nexport const LIST_PROJECTS = gql`\n  query listProjects {\n    listProjects {\n      id\n      name\n      members {\n        user_name\n        user_id\n        role\n        invitation\n        joined_at\n      }\n      state\n      created_at\n      updated_at\n      removed_at\n    }\n  }\n`;\n\nexport const GET_PROJECT = gql`\n  query getProject($projectID: String!) {\n    getProject(projectID: $projectID) {\n      id\n      name\n      members {\n        user_id\n        user_name\n        role\n        invitation\n        joined_at\n      }\n      state\n      created_at\n      updated_at\n      removed_at\n    }\n  }\n`;\n\nexport const GET_PROJECT_NAME = gql`\n  query getProject($projectID: String!) {\n    getProject(projectID: $projectID) {\n      name\n    }\n  }\n`;\n\nexport const LIST_DATASOURCE = gql`\n  query listDataSource($projectID: String!) {\n    ListDataSource(project_id: $projectID) {\n      ds_id\n      ds_name\n      ds_type\n      ds_url\n      access_type\n      auth_type\n      basic_auth_username\n      basic_auth_password\n      scrape_interval\n      query_timeout\n      http_method\n      project_id\n      created_at\n      updated_at\n      health_status\n    }\n  }\n`;\n\nexport const LIST_DATASOURCE_OVERVIEW = gql`\n  query listDataSource($projectID: String!) {\n    ListDataSource(project_id: $projectID) {\n      ds_id\n    }\n  }\n`;\n\nexport const LIST_DASHBOARD = gql`\n  query listDashboard($projectID: String!) {\n    ListDashboard(project_id: $projectID) {\n      db_id\n      ds_id\n      db_name\n      cluster_name\n      ds_name\n      ds_type\n      db_type_id\n      db_type_name\n      db_information\n      chaos_event_query_template\n      chaos_verdict_query_template\n      application_metadata_map {\n        namespace\n        applications {\n          kind\n          names\n        }\n      }\n      panel_groups {\n        panels {\n          panel_id\n          created_at\n          prom_queries {\n            queryid\n            prom_query_name\n            legend\n            resolution\n            minstep\n            line\n            close_area\n          }\n          panel_options {\n            points\n            grids\n            left_axis\n          }\n          panel_name\n          y_axis_left\n          y_axis_right\n          x_axis_down\n          unit\n        }\n        panel_group_name\n        panel_group_id\n      }\n      end_time\n      start_time\n      refresh_rate\n      project_id\n      cluster_id\n      created_at\n      updated_at\n    }\n  }\n`;\n\nexport const LIST_DASHBOARD_OVERVIEW = gql`\n  query listDashboard($projectID: String!) {\n    ListDashboard(project_id: $projectID) {\n      db_id\n      db_name\n      db_type_id\n      db_type_name\n      cluster_name\n      cluster_id\n      updated_at\n      db_information\n      chaos_event_query_template\n      chaos_verdict_query_template\n      application_metadata_map {\n        namespace\n        applications {\n          kind\n          names\n        }\n      }\n      panel_groups {\n        panels {\n          panel_id\n          created_at\n          prom_queries {\n            queryid\n            prom_query_name\n            legend\n            resolution\n            minstep\n            line\n            close_area\n          }\n          panel_options {\n            points\n            grids\n            left_axis\n          }\n          panel_name\n          y_axis_left\n          y_axis_right\n          x_axis_down\n          unit\n        }\n        panel_group_name\n        panel_group_id\n      }\n    }\n  }\n`;\n\nexport const PROM_QUERY = gql`\n  query PrometheusQuery($prometheusInput: promInput) {\n    GetPromQuery(query: $prometheusInput) {\n      metricsResponse {\n        queryid\n        legends\n        tsvs {\n          date\n          value\n        }\n      }\n      annotationsResponse {\n        queryid\n        legends\n        tsvs {\n          date\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport const PROM_LABEL_VALUES = gql`\n  query PrometheusLabelValues($prometheusInput: promSeriesInput) {\n    GetPromLabelNamesAndValues(series: $prometheusInput) {\n      series\n      labelValues {\n        label\n        values {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const PROM_SERIES_LIST = gql`\n  query PrometheusSeriesList($prometheusDSInput: dsDetails) {\n    GetPromSeriesList(ds_details: $prometheusDSInput) {\n      seriesList\n    }\n  }\n`;\n\nexport const GET_TEMPLATE_BY_ID = gql`\n  query GetManifestTemplate($data: String!) {\n    GetTemplateManifestByID(template_id: $data) {\n      template_id\n      template_name\n      template_description\n      manifest\n    }\n  }\n`;\n\nexport const GET_PREDEFINED_WORKFLOW_LIST = gql`\n  query GetPredefinedWorkflowList($hubname: String!, $projectid: String!) {\n    GetPredefinedWorkflowList(HubName: $hubname, projectID: $projectid)\n  }\n`;\n\nexport const GET_PREDEFINED_EXPERIMENT_YAML = gql`\n  query GetPredefinedExperimentYAML($experimentInput: ExperimentInput!) {\n    GetPredefinedExperimentYAML(experimentInput: $experimentInput)\n  }\n`;\n\nexport const LIST_IMAGE_REGISTRY = gql`\n  query ListImageRegistry($data: String!) {\n    ListImageRegistry(project_id: $data) {\n      image_registry_info {\n        enable_registry\n      }\n      image_registry_id\n    }\n  }\n`;\n\nexport const GET_IMAGE_REGISTRY = gql`\n  query GetImageRegistry($registryid: String!, $projectid: String!) {\n    GetImageRegistry(image_registry_id: $registryid, project_id: $projectid) {\n      image_registry_info {\n        enable_registry\n        secret_name\n        secret_namespace\n        image_registry_name\n        image_repo_name\n        image_registry_type\n      }\n      image_registry_id\n    }\n  }\n`;\n\nexport const GET_GLOBAL_STATS = gql`\n  query getGlobalStats($query: UsageQuery!) {\n    UsageQuery(query: $query) {\n      TotalCount {\n        Workflows {\n          Runs\n          ExpRuns\n          Schedules\n        }\n        Agents {\n          Ns\n          Cluster\n          Total\n        }\n        Projects\n        Users\n      }\n    }\n  }\n`;\n\nexport const GLOBAL_PROJECT_DATA = gql`\n  query getStats($query: UsageQuery!) {\n    UsageQuery(query: $query) {\n      TotalCount {\n        Projects\n      }\n      Projects {\n        Name\n        Workflows {\n          Schedules\n          ExpRuns\n          Runs\n        }\n        Agents {\n          Total\n          Ns\n          Cluster\n        }\n        Members {\n          Owner {\n            Name\n            Username\n          }\n          Total\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}