{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/InstallChaos/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonOutlined } from 'litmus-ui';\nimport useStyles from './styles';\n\nvar InstallChaos = function InstallChaos(_ref) {\n  var title = _ref.title,\n      description = _ref.description,\n      yamlLink = _ref.yamlLink,\n      isPredefined = _ref.isPredefined;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      copying = _useState2[0],\n      setCopying = _useState2[1];\n\n  var yaml = isPredefined ? yamlLink : \"kubectl apply -f \".concat(yamlLink);\n\n  function copyTextToClipboard(text) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n\n    setCopying(true);\n    navigator.clipboard.writeText(text).catch(function (err) {\n      return console.error('Async: Could not copy text: ', err);\n    });\n    setTimeout(function () {\n      return setCopying(false);\n    }, 3000);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, description), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.linkBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    className: classes.yamlLink,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, isPredefined ? yamlLink : \"kubectl apply -f \".concat(yamlLink)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      return copyTextToClipboard(yaml);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, !copying ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rowDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/copy.svg\",\n    className: classes.copyBtnImg,\n    alt: \"copy\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, t('myhub.installChaos.copy'))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rowDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Done, {\n    className: classes.done,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, t('myhub.installChaos.copied')))))));\n};\n\nexport default InstallChaos;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/InstallChaos/index.tsx"],"names":["Typography","Done","React","useState","useTranslation","ButtonOutlined","useStyles","InstallChaos","title","description","yamlLink","isPredefined","classes","t","copying","setCopying","yaml","copyTextToClipboard","text","navigator","clipboard","console","error","writeText","catch","err","setTimeout","root","linkBox","buttonBox","rowDiv","copyBtnImg","done"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonOutlined } from 'litmus-ui';\nimport useStyles from './styles';\n\ninterface InstallProps {\n  title: string;\n  description: string;\n  yamlLink: string;\n  isPredefined?: boolean;\n}\n\nconst InstallChaos: React.FC<InstallProps> = ({\n  title,\n  description,\n  yamlLink,\n  isPredefined,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [copying, setCopying] = useState(false);\n  const yaml = isPredefined ? yamlLink : `kubectl apply -f ${yamlLink}`;\n\n  function copyTextToClipboard(text: string) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n    setCopying(true);\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n\n    setTimeout(() => setCopying(false), 3000);\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.title}>{title}</div>\n      <div className={classes.description}>{description}</div>\n      <div className={classes.linkBox}>\n        <Typography variant=\"subtitle1\" className={classes.yamlLink}>\n          {isPredefined ? yamlLink : `kubectl apply -f ${yamlLink}`}\n        </Typography>\n\n        <div className={classes.buttonBox}>\n          <ButtonOutlined onClick={() => copyTextToClipboard(yaml)}>\n            {!copying ? (\n              <div className={classes.rowDiv}>\n                <img\n                  src=\"/icons/copy.svg\"\n                  className={classes.copyBtnImg}\n                  alt=\"copy\"\n                />\n                <Typography>{t('myhub.installChaos.copy')}</Typography>\n              </div>\n            ) : (\n              <div className={classes.rowDiv}>\n                <Done className={classes.done} />\n                <Typography>{t('myhub.installChaos.copied')}</Typography>\n              </div>\n            )}\n          </ButtonOutlined>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default InstallChaos;\n"]},"metadata":{},"sourceType":"module"}