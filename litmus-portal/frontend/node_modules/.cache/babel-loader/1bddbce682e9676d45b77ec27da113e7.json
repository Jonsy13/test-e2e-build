{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/ExperimentStatus/index.tsx\";\n\nimport { Avatar } from '@material-ui/core';\nimport CancelSharpIcon from '@material-ui/icons/CancelSharp';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport { LightPills } from 'litmus-ui';\nimport React from 'react';\nimport useStyles from './styles';\n\nvar ExperimentStatus = function ExperimentStatus(_ref) {\n  var status = _ref.status;\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(LightPills, {\n    variant: status === 'Passed' ? 'success' : status === 'Failed' ? 'danger' : 'warning',\n    label: status,\n    avatar: status === 'Passed' ? /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.miniIcons,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CheckCircleSharpIcon, {\n      className: \"\".concat(classes.checkIcon, \" \").concat(classes.stateIcon),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    })) : status === 'Failed' ? /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.miniIcons,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CancelSharpIcon, {\n      className: \"\".concat(classes.cancelIcon, \" \").concat(classes.stateIcon),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ExperimentStatus;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/ExperimentStatus/index.tsx"],"names":["Avatar","CancelSharpIcon","CheckCircleSharpIcon","LightPills","React","useStyles","ExperimentStatus","status","classes","miniIcons","checkIcon","stateIcon","cancelIcon"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAMA,IAAMC,gBAAuC,GAAG,SAA1CA,gBAA0C,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC9D,MAAMC,OAAO,GAAGH,SAAS,EAAzB;AAEA,sBACE,oBAAC,UAAD;AACE,IAAA,OAAO,EACLE,MAAM,KAAK,QAAX,GACI,SADJ,GAEIA,MAAM,KAAK,QAAX,GACA,QADA,GAEA,SANR;AAQE,IAAA,KAAK,EAAEA,MART;AASE,IAAA,MAAM,EACJA,MAAM,KAAK,QAAX,gBACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEC,OAAO,CAACC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,oBAAD;AACE,MAAA,SAAS,YAAKD,OAAO,CAACE,SAAb,cAA0BF,OAAO,CAACG,SAAlC,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,GAMIJ,MAAM,KAAK,QAAX,gBACF,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEC,OAAO,CAACC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AACE,MAAA,SAAS,YAAKD,OAAO,CAACI,UAAb,cAA2BJ,OAAO,CAACG,SAAnC,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADE,gBAOF,yCAvBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA6BD,CAhCD;;AAiCA,eAAeL,gBAAf","sourcesContent":["import { Avatar } from '@material-ui/core';\nimport CancelSharpIcon from '@material-ui/icons/CancelSharp';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport { LightPills } from 'litmus-ui';\nimport React from 'react';\nimport useStyles from './styles';\n\ninterface StatusProps {\n  status: string;\n}\n\nconst ExperimentStatus: React.FC<StatusProps> = ({ status }) => {\n  const classes = useStyles();\n\n  return (\n    <LightPills\n      variant={\n        status === 'Passed'\n          ? 'success'\n          : status === 'Failed'\n          ? 'danger'\n          : 'warning'\n      }\n      label={status}\n      avatar={\n        status === 'Passed' ? (\n          <Avatar className={classes.miniIcons}>\n            <CheckCircleSharpIcon\n              className={`${classes.checkIcon} ${classes.stateIcon}`}\n            />\n          </Avatar>\n        ) : status === 'Failed' ? (\n          <Avatar className={classes.miniIcons}>\n            <CancelSharpIcon\n              className={`${classes.cancelIcon} ${classes.stateIcon}`}\n            />\n          </Avatar>\n        ) : (\n          <></>\n        )\n      }\n    />\n  );\n};\nexport default ExperimentStatus;\n"]},"metadata":{},"sourceType":"module"}