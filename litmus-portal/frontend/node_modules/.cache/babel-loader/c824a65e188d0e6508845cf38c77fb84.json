{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/LogsSwitcher/index.tsx\";\n\nimport { useQuery, useSubscription } from '@apollo/client';\nimport { Tabs, Typography, useTheme } from '@material-ui/core';\nimport { ButtonFilled } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport { StyledTab, TabPanel } from '../../../components/Tabs';\nimport { WORKFLOW_DETAILS_WITH_EXEC_DATA, WORKFLOW_LOGS } from '../../../graphql';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\n\nvar LogsSwitcher = function LogsSwitcher(_ref) {\n  var cluster_id = _ref.cluster_id,\n      workflow_run_id = _ref.workflow_run_id,\n      pod_namespace = _ref.pod_namespace,\n      pod_name = _ref.pod_name,\n      pod_type = _ref.pod_type;\n  var theme = useTheme();\n\n  var _useSelector = useSelector(function (state) {\n    return state.selectedNode;\n  }),\n      type = _useSelector.type;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var handleChange = function handleChange(event, newValue) {\n    setSelectedTab(newValue);\n  };\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n\n  var _useQuery = useQuery(WORKFLOW_DETAILS_WITH_EXEC_DATA, {\n    variables: {\n      workflowRunsInput: {\n        project_id: projectID,\n        workflow_run_ids: [workflow_run_id]\n      }\n    }\n  }),\n      workflow_data = _useQuery.data;\n\n  var workflow = workflow_data === null || workflow_data === void 0 ? void 0 : workflow_data.getWorkflowRuns.workflow_runs[0];\n\n  var _useState3 = useState({\n    exp_pod: '',\n    runner_pod: '',\n    chaos_namespace: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chaosData = _useState4[0],\n      setChaosData = _useState4[1];\n\n  useEffect(function () {\n    if (workflow !== undefined) {\n      var nodeData = JSON.parse(workflow.execution_data).nodes[pod_name];\n      if (nodeData && nodeData.chaosData) setChaosData({\n        exp_pod: nodeData.chaosData.experimentPod,\n        runner_pod: nodeData.chaosData.runnerPod,\n        chaos_namespace: nodeData.chaosData.namespace\n      });else setChaosData({\n        exp_pod: '',\n        runner_pod: '',\n        chaos_namespace: ''\n      });\n    }\n  }, [workflow_data]);\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      chaosResult = _useState6[0],\n      setChaosResult = _useState6[1];\n\n  useEffect(function () {\n    if (workflow !== undefined) {\n      var _nodeData$chaosData;\n\n      var nodeData = JSON.parse(workflow.execution_data).nodes[pod_name];\n\n      if (nodeData === null || nodeData === void 0 ? void 0 : (_nodeData$chaosData = nodeData.chaosData) === null || _nodeData$chaosData === void 0 ? void 0 : _nodeData$chaosData.chaosResult) {\n        var _nodeData$chaosData2;\n\n        setChaosResult(YAML.stringify((_nodeData$chaosData2 = nodeData.chaosData) === null || _nodeData$chaosData2 === void 0 ? void 0 : _nodeData$chaosData2.chaosResult));\n      } else {\n        setChaosResult('Chaos Result Not available');\n      }\n    }\n  }, [workflow_data, pod_name]);\n\n  var _useSubscription = useSubscription(WORKFLOW_LOGS, {\n    variables: {\n      podDetails: {\n        cluster_id: cluster_id,\n        workflow_run_id: workflow_run_id,\n        pod_name: pod_name,\n        pod_namespace: pod_namespace,\n        pod_type: pod_type,\n        exp_pod: chaosData.exp_pod,\n        runner_pod: chaosData.runner_pod,\n        chaos_namespace: chaosData.chaos_namespace\n      }\n    }\n  }),\n      data = _useSubscription.data;\n\n  var chaosLogs = function chaosLogs(chaoslog) {\n    var log_str = '';\n\n    if (Object.keys(chaoslog).length) {\n      for (var i = 0; i <= Object.keys(chaoslog).length; i++) {\n        var obj = Object.keys(chaoslog)[i];\n        if (obj !== undefined) log_str += chaoslog[obj];\n      }\n\n      return log_str;\n    }\n\n    if (workflow !== undefined && JSON.parse(workflow.execution_data).nodes[pod_name].type === 'ChaosEngine') {\n      return t('workflowDetailsView.nodeLogs.chaosLogs');\n    }\n\n    return '';\n  }; // Function to download the logs\n\n\n  var downloadLogs = function downloadLogs(logs, podName) {\n    var element = document.createElement('a');\n    var chaos_logs = '';\n\n    try {\n      chaos_logs = chaosLogs(logs.chaos_logs);\n    } catch (_unused) {\n      chaos_logs = 'Chaos Logs unavailable';\n    }\n\n    var file = new Blob([logs === null || logs === void 0 ? void 0 : logs.main_logs, chaos_logs], {\n      type: 'text/txt'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"\".concat(podName, \".txt\");\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  var parseLogs = function parseLogs(logs) {\n    try {\n      var podLogs = JSON.parse(logs);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }\n      }, workflow !== undefined && JSON.parse(workflow === null || workflow === void 0 ? void 0 : workflow.execution_data).nodes[pod_name].type === 'ChaosEngine' ? /*#__PURE__*/React.createElement(ButtonFilled, {\n        onClick: function onClick() {\n          downloadLogs(podLogs, pod_name);\n        },\n        className: classes.downloadLogsBtn,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"/icons/download-logs.svg\",\n        alt: \"download logs\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 19\n        }\n      }), ' ', t('workflowDetailsView.logs'))) : /*#__PURE__*/React.createElement(React.Fragment, null), (podLogs === null || podLogs === void 0 ? void 0 : podLogs.main_logs) !== null && (podLogs === null || podLogs === void 0 ? void 0 : podLogs.main_logs) !== '' ? /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        className: classes.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, podLogs === null || podLogs === void 0 ? void 0 : podLogs.main_logs)) : /*#__PURE__*/React.createElement(Typography, {\n        className: classes.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }\n      }, t('workflowDetailsView.nodeLogs.mainLogs'))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, (podLogs === null || podLogs === void 0 ? void 0 : podLogs.chaos_logs) && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        className: classes.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }\n      }, chaosLogs(podLogs.chaos_logs)))));\n    } catch (_unused2) {\n      return /*#__PURE__*/React.createElement(Typography, {\n        className: classes.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      }, t('workflowDetailsView.nodeLogs.couldNot'));\n    }\n  };\n\n  useEffect(function () {\n    if (type !== 'ChaoEngine') setSelectedTab(0);\n  }, [type]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tabBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: selectedTab,\n    onChange: handleChange,\n    TabIndicatorProps: {\n      style: {\n        backgroundColor: theme.palette.highlight\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Logs\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }), type === 'ChaosEngine' && /*#__PURE__*/React.createElement(StyledTab, {\n    label: \"Chaos Results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 38\n    }\n  }))), /*#__PURE__*/React.createElement(TabPanel, {\n    value: selectedTab,\n    index: 0,\n    style: {\n      height: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logs,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, data !== undefined ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, parseLogs(data.getPodLog.log)) : /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text,\n    variant: \"h5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.nodeLogs.fetching')))), type === 'ChaosEngine' && /*#__PURE__*/React.createElement(TabPanel, {\n    value: selectedTab,\n    index: 1,\n    style: {\n      height: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logs,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      whiteSpace: 'pre-wrap'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, chaosResult)))));\n};\n\nexport default LogsSwitcher;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/LogsSwitcher/index.tsx"],"names":["useQuery","useSubscription","Tabs","Typography","useTheme","ButtonFilled","React","useEffect","useState","useTranslation","useSelector","YAML","StyledTab","TabPanel","WORKFLOW_DETAILS_WITH_EXEC_DATA","WORKFLOW_LOGS","getProjectID","useStyles","LogsSwitcher","cluster_id","workflow_run_id","pod_namespace","pod_name","pod_type","theme","state","selectedNode","type","selectedTab","setSelectedTab","handleChange","event","newValue","classes","t","projectID","variables","workflowRunsInput","project_id","workflow_run_ids","workflow_data","data","workflow","getWorkflowRuns","workflow_runs","exp_pod","runner_pod","chaos_namespace","chaosData","setChaosData","undefined","nodeData","JSON","parse","execution_data","nodes","experimentPod","runnerPod","namespace","chaosResult","setChaosResult","stringify","podDetails","chaosLogs","chaoslog","log_str","Object","keys","length","i","obj","downloadLogs","logs","podName","element","document","createElement","chaos_logs","file","Blob","main_logs","href","URL","createObjectURL","download","body","appendChild","click","parseLogs","podLogs","downloadLogsBtn","whiteSpace","text","tabBar","style","backgroundColor","palette","highlight","height","getPodLog","log"],"mappings":"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","sourcesContent":["import { useQuery, useSubscription } from '@apollo/client';\nimport { Tabs, Typography, useTheme } from '@material-ui/core';\nimport { ButtonFilled } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport { StyledTab, TabPanel } from '../../../components/Tabs';\nimport {\n  WORKFLOW_DETAILS_WITH_EXEC_DATA,\n  WORKFLOW_LOGS,\n} from '../../../graphql';\nimport {\n  PodLog,\n  PodLogRequest,\n  PodLogVars,\n} from '../../../models/graphql/podLog';\nimport {\n  ExecutionData,\n  Workflow,\n  WorkflowDataVars,\n} from '../../../models/graphql/workflowData';\nimport { RootState } from '../../../redux/reducers';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\n\ninterface ChaosDataVar {\n  exp_pod: string;\n  runner_pod: string;\n  chaos_namespace: string;\n}\n\ninterface LogsSwitcherProps extends PodLogRequest {}\n\nconst LogsSwitcher: React.FC<LogsSwitcherProps> = ({\n  cluster_id,\n  workflow_run_id,\n  pod_namespace,\n  pod_name,\n  pod_type,\n}) => {\n  const theme = useTheme();\n  const { type } = useSelector((state: RootState) => state.selectedNode);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setSelectedTab(newValue);\n  };\n\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n\n  const { data: workflow_data } = useQuery<Workflow, WorkflowDataVars>(\n    WORKFLOW_DETAILS_WITH_EXEC_DATA,\n    {\n      variables: {\n        workflowRunsInput: {\n          project_id: projectID,\n          workflow_run_ids: [workflow_run_id],\n        },\n      },\n    }\n  );\n\n  const workflow = workflow_data?.getWorkflowRuns.workflow_runs[0];\n\n  const [chaosData, setChaosData] = useState<ChaosDataVar>({\n    exp_pod: '',\n    runner_pod: '',\n    chaos_namespace: '',\n  });\n\n  useEffect(() => {\n    if (workflow !== undefined) {\n      const nodeData = (JSON.parse(workflow.execution_data) as ExecutionData)\n        .nodes[pod_name];\n      if (nodeData && nodeData.chaosData)\n        setChaosData({\n          exp_pod: nodeData.chaosData.experimentPod,\n          runner_pod: nodeData.chaosData.runnerPod,\n          chaos_namespace: nodeData.chaosData.namespace,\n        });\n      else\n        setChaosData({\n          exp_pod: '',\n          runner_pod: '',\n          chaos_namespace: '',\n        });\n    }\n  }, [workflow_data]);\n\n  const [chaosResult, setChaosResult] = useState('');\n\n  useEffect(() => {\n    if (workflow !== undefined) {\n      const nodeData = (JSON.parse(workflow.execution_data) as ExecutionData)\n        .nodes[pod_name];\n      if (nodeData?.chaosData?.chaosResult) {\n        setChaosResult(YAML.stringify(nodeData.chaosData?.chaosResult));\n      } else {\n        setChaosResult('Chaos Result Not available');\n      }\n    }\n  }, [workflow_data, pod_name]);\n\n  const { data } = useSubscription<PodLog, PodLogVars>(WORKFLOW_LOGS, {\n    variables: {\n      podDetails: {\n        cluster_id,\n        workflow_run_id,\n        pod_name,\n        pod_namespace,\n        pod_type,\n        exp_pod: chaosData.exp_pod,\n        runner_pod: chaosData.runner_pod,\n        chaos_namespace: chaosData.chaos_namespace,\n      },\n    },\n  });\n\n  const chaosLogs = (chaoslog: any) => {\n    let log_str = '';\n    if (Object.keys(chaoslog).length) {\n      for (let i = 0; i <= Object.keys(chaoslog).length; i++) {\n        const obj = Object.keys(chaoslog)[i];\n        if (obj !== undefined) log_str += chaoslog[obj];\n      }\n      return log_str;\n    }\n    if (\n      workflow !== undefined &&\n      (JSON.parse(workflow.execution_data) as ExecutionData).nodes[pod_name]\n        .type === 'ChaosEngine'\n    ) {\n      return t('workflowDetailsView.nodeLogs.chaosLogs');\n    }\n    return '';\n  };\n\n  // Function to download the logs\n  const downloadLogs = (logs: any, podName: string) => {\n    const element = document.createElement('a');\n    let chaos_logs = '';\n    try {\n      chaos_logs = chaosLogs(logs.chaos_logs);\n    } catch {\n      chaos_logs = 'Chaos Logs unavailable';\n    }\n    const file = new Blob([logs?.main_logs, chaos_logs], {\n      type: 'text/txt',\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${podName}.txt`;\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  const parseLogs = (logs: string) => {\n    try {\n      const podLogs = JSON.parse(logs);\n      return (\n        <div>\n          <div>\n            {workflow !== undefined &&\n            JSON.parse(workflow?.execution_data).nodes[pod_name].type ===\n              'ChaosEngine' ? (\n              <ButtonFilled\n                onClick={() => {\n                  downloadLogs(podLogs, pod_name);\n                }}\n                className={classes.downloadLogsBtn}\n              >\n                <Typography>\n                  <img src=\"/icons/download-logs.svg\" alt=\"download logs\" />{' '}\n                  {t('workflowDetailsView.logs')}\n                </Typography>\n              </ButtonFilled>\n            ) : (\n              <></>\n            )}\n            {podLogs?.main_logs !== null && podLogs?.main_logs !== '' ? (\n              <div style={{ whiteSpace: 'pre-wrap' }}>\n                <Typography className={classes.text}>\n                  {podLogs?.main_logs}\n                </Typography>\n              </div>\n            ) : (\n              <Typography className={classes.text}>\n                {t('workflowDetailsView.nodeLogs.mainLogs')}\n              </Typography>\n            )}\n          </div>\n          <div>\n            {podLogs?.chaos_logs && (\n              <div style={{ whiteSpace: 'pre-wrap' }}>\n                <Typography className={classes.text}>\n                  {chaosLogs(podLogs.chaos_logs)}\n                </Typography>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    } catch {\n      return (\n        <Typography className={classes.text}>\n          {t('workflowDetailsView.nodeLogs.couldNot')}\n        </Typography>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (type !== 'ChaoEngine') setSelectedTab(0);\n  }, [type]);\n\n  return (\n    <>\n      <div className={classes.tabBar}>\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: theme.palette.highlight,\n            },\n          }}\n        >\n          <StyledTab label=\"Logs\" />\n          {type === 'ChaosEngine' && <StyledTab label=\"Chaos Results\" />}\n        </Tabs>\n      </div>\n      <TabPanel value={selectedTab} index={0} style={{ height: '100%' }}>\n        <div className={classes.logs}>\n          {data !== undefined ? (\n            <div>{parseLogs(data.getPodLog.log)}</div>\n          ) : (\n            <Typography className={classes.text} variant=\"h5\">\n              {t('workflowDetailsView.nodeLogs.fetching')}\n            </Typography>\n          )}\n        </div>\n      </TabPanel>\n      {type === 'ChaosEngine' && (\n        <TabPanel value={selectedTab} index={1} style={{ height: '100%' }}>\n          <div className={classes.logs}>\n            <div style={{ whiteSpace: 'pre-wrap' }}>\n              <Typography className={classes.text}>{chaosResult}</Typography>\n            </div>\n          </div>\n        </TabPanel>\n      )}\n    </>\n  );\n};\n\nexport default LogsSwitcher;\n"]},"metadata":{},"sourceType":"module"}