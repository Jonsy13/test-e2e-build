{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Settings/ImageRegistry/index.tsx\";\n\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport { FormControl, FormControlLabel, IconButton, InputLabel, MenuItem, Popover, Radio, RadioGroup, Select, Typography } from '@material-ui/core';\nimport { ButtonFilled, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Loader from '../../../components/Loader';\nimport { constants } from '../../../constants';\nimport { ADD_IMAGE_REGISTRY, GET_IMAGE_REGISTRY, LIST_IMAGE_REGISTRY, UPDATE_IMAGE_REGISTRY } from '../../../graphql';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\n\nvar ImageRegistry = function ImageRegistry() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var projectID = getProjectID();\n\n  var _useState = useState('enabled'),\n      _useState2 = _slicedToArray(_useState, 2),\n      registry = _useState2[0],\n      setRegistry = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      registryID = _useState4[0],\n      setRegistryID = _useState4[1];\n\n  var _useState5 = useState('Public'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      registryType = _useState6[0],\n      setRegistryType = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isCustomRegistryEnabled = _useState8[0],\n      setIsCustomRegistryEnabled = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isAvailable = _useState10[0],\n      setIsAvailable = _useState10[1];\n  /**\n   * GetRegistryData to fetch Registry Data by ID\n   */\n\n\n  var _useLazyQuery = useLazyQuery(GET_IMAGE_REGISTRY, {\n    fetchPolicy: 'network-only'\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getRegistryData = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading;\n\n  var _useState11 = useState({\n    registry_name: '',\n    repo_name: '',\n    registry_type: constants.public,\n    secret_name: '',\n    secret_namespace: '',\n    enable_registry: true\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      registryInfo = _useState12[0],\n      setRegistryInfo = _useState12[1];\n\n  var _useState13 = useState({\n    registry_name: '',\n    repo_name: '',\n    registry_type: ''\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      registryData = _useState14[0],\n      setRegistryData = _useState14[1];\n  /**\n   * State variables to manage popover actions\n   */\n\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      anchorEl = _React$useState2[0],\n      setAnchorEl = _React$useState2[1];\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n  /**\n   * ListImageRegistry is used to fetch the list of image registries\n   */\n\n  var _useQuery = useQuery(LIST_IMAGE_REGISTRY, {\n    variables: {\n      data: projectID\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: function onCompleted(data) {\n      if (data.ListImageRegistry !== null && data.ListImageRegistry.length > 0) {\n        setRegistryID(data.ListImageRegistry[0].image_registry_id);\n        getRegistryData({\n          variables: {\n            registryid: data.ListImageRegistry[0].image_registry_id,\n            projectid: projectID\n          }\n        });\n      } else {\n        setIsAvailable(false);\n        setRegistry('disabled');\n      }\n    }\n  }),\n      listLoading = _useQuery.loading;\n  /**\n   * UpdateImageRegistry is used to update the Image Registry\n   */\n\n\n  var _useMutation = useMutation(UPDATE_IMAGE_REGISTRY, {\n    onCompleted: function onCompleted(data) {\n      if (data.updateImageRegistry.image_registry_info.image_repo_name === 'litmuschaos') {\n        setIsCustomRegistryEnabled(false);\n        setRegistry('disabled');\n      } else {\n        setIsCustomRegistryEnabled(true);\n        setRegistry('enabled');\n      }\n\n      setRegistryData({\n        registry_name: data.updateImageRegistry.image_registry_info.image_registry_name,\n        repo_name: data.updateImageRegistry.image_registry_info.image_repo_name,\n        registry_type: data.updateImageRegistry.image_registry_info.image_registry_type\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateImageRegistry = _useMutation2[0],\n      updateLoader = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(ADD_IMAGE_REGISTRY, {\n    refetchQueries: [{\n      query: LIST_IMAGE_REGISTRY,\n      variables: {\n        data: projectID\n      }\n    }],\n    onCompleted: function onCompleted(data) {\n      if (data !== undefined) {\n        setIsAvailable(true);\n      }\n    },\n    onError: function onError() {\n      setIsAvailable(false);\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      createImageRegistry = _useMutation4[0];\n  /**\n   * UseEffect to set the initial data of image registry\n   */\n\n\n  useEffect(function () {\n    if (data !== undefined) {\n      if (data.GetImageRegistry.image_registry_info.image_repo_name === constants.litmus) {\n        setRegistry('disabled');\n        setIsCustomRegistryEnabled(false);\n        setRegistryData({\n          registry_name: constants.docker,\n          repo_name: constants.litmus,\n          registry_type: constants.public\n        });\n      } else {\n        setRegistry('enabled');\n        setIsCustomRegistryEnabled(true);\n        setRegistryData({\n          registry_name: data.GetImageRegistry.image_registry_info.image_registry_name,\n          repo_name: data.GetImageRegistry.image_registry_info.image_repo_name,\n          registry_type: data.GetImageRegistry.image_registry_info.image_registry_type\n        });\n      }\n    }\n  }, [data]);\n  /**\n   * HandleSubmit is used to update the image registry to custom registry\n   */\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    updateImageRegistry({\n      variables: {\n        imageRegistryID: registryID,\n        projectID: projectID,\n        imageRegistryInfo: {\n          image_registry_name: registryInfo.registry_name,\n          image_repo_name: registryInfo.repo_name,\n          image_registry_type: registryInfo.registry_type,\n          secret_name: registryInfo.secret_name,\n          secret_namespace: registryInfo.secret_namespace,\n          enable_registry: true\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, t('settings.imageRegistry.heading')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerDesc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, t('settings.imageRegistry.headingDesc')), listLoading && loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"form\", {\n    id: \"login-form\",\n    autoComplete: \"on\",\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    style: {\n      width: '70%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    name: \"image-registry\",\n    value: registry,\n    onChange: function onChange(event) {\n      setRegistry(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainRadioDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"disabled\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }),\n    \"data-cy\": \"localRadioButton\",\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.defaultText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }, t('settings.imageRegistry.defaultValues')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.defaultTextDesc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, t('settings.imageRegistry.defaultText')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.registryInfoDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, t('settings.imageRegistry.registry'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, \" \", t('settings.imageRegistry.dockerio'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 19\n    }\n  }, t('settings.imageRegistry.repo'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 21\n    }\n  }, \" \", t('settings.imageRegistry.litmus'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 19\n    }\n  }, t('settings.imageRegistry.repoType'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 21\n    }\n  }, \" \", t('settings.imageRegistry.public')))), !isAvailable ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 19\n    }\n  }, t('settings.imageRegistry.noRegistry')) : /*#__PURE__*/React.createElement(React.Fragment, null), registry === 'disabled' && isCustomRegistryEnabled === true || !isAvailable ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ButtonFilled, {\n    className: classes.defaultBtn,\n    \"data-cy\": \"disableGitopsButton\",\n    disabled: updateLoader,\n    onClick: function onClick() {\n      return !isAvailable ? createImageRegistry({\n        variables: {\n          projectID: projectID,\n          imageRegistryInfo: {\n            image_registry_name: constants.dockerio,\n            image_repo_name: constants.litmus,\n            image_registry_type: constants.public,\n            secret_name: '',\n            secret_namespace: '',\n            enable_registry: true\n          }\n        }\n      }) : updateImageRegistry({\n        variables: {\n          imageRegistryID: registryID,\n          projectID: projectID,\n          imageRegistryInfo: {\n            image_registry_name: constants.dockerio,\n            image_repo_name: constants.litmus,\n            image_registry_type: constants.public,\n            secret_name: '',\n            secret_namespace: '',\n            enable_registry: true\n          }\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 21\n    }\n  }, t('settings.imageRegistry.defaultReg'))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainRadioDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"enabled\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }),\n    \"data-cy\": \"localRadioButton\",\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.defaultText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }, t('settings.imageRegistry.customValues')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }\n  }), isCustomRegistryEnabled ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.registryInfoDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 21\n    }\n  }, t('settings.imageRegistry.registry'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 23\n    }\n  }, registryData.registry_name)), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 21\n    }\n  }, t('settings.imageRegistry.repo'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 23\n    }\n  }, registryData.repo_name)), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.registryInfoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }, t('settings.imageRegistry.repoType'), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 23\n    }\n  }, registryData.registry_type))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.customDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: \"Custom Image Registry\",\n    value: registryInfo.registry_name,\n    className: classes.inputDiv,\n    onChange: function onChange(event) {\n      setRegistryInfo(_objectSpread(_objectSpread({}, registryInfo), {}, {\n        registry_name: event.target.value\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(InputField, {\n    label: \"Custom Image Repository\",\n    value: registryInfo.repo_name,\n    onChange: function onChange(event) {\n      setRegistryInfo(_objectSpread(_objectSpread({}, registryInfo), {}, {\n        repo_name: event.target.value\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.labelText,\n    id: \"demo-simple-select-helper-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 23\n    }\n  }, t('settings.imageRegistry.registryLabel')), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"demo-simple-select-helper-label\",\n    id: \"demo-simple-select-helper\",\n    value: registryType,\n    onChange: function onChange(event) {\n      setRegistryType(event.target.value);\n      setRegistryInfo(_objectSpread(_objectSpread({}, registryInfo), {}, {\n        registry_type: event.target.value\n      }));\n    },\n    label: \"Registry Type\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Public\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 25\n    }\n  }, t('settings.imageRegistry.public')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Private\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 25\n    }\n  }, t('settings.imageRegistry.private')))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 21\n    }\n  }), registryType === 'Private' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.additionalDetails,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 27\n    }\n  }, t('settings.imageRegistry.additionalInfo')), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.iconBtn,\n    onClick: handleClick,\n    \"aria-label\": \"info\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 29\n    }\n  }, t('settings.imageRegistry.provideInfo'), ' ', /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://kubernetes.io/docs/concepts/configuration/secret/\",\n    target: \"_\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 31\n    }\n  }, t('settings.imageRegistry.visit')), \".\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.customDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: \"Custom Image Secret\",\n    value: registryInfo.secret_name,\n    className: classes.inputDiv,\n    onChange: function onChange(event) {\n      setRegistryInfo(_objectSpread(_objectSpread({}, registryInfo), {}, {\n        secret_name: event.target.value\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(InputField, {\n    label: \"Secret Namespace\",\n    value: registryInfo.secret_namespace,\n    onChange: function onChange(event) {\n      setRegistryInfo(_objectSpread(_objectSpread({}, registryInfo), {}, {\n        secret_namespace: event.target.value\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 27\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ButtonFilled, {\n    disabled: registry === 'disabled' || registryInfo.registry_name.trim().length === 0 || registryInfo.repo_name.trim().length === 0,\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 21\n    }\n  }, t('settings.imageRegistry.save'))))))));\n};\n\nexport default ImageRegistry;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Settings/ImageRegistry/index.tsx"],"names":["useLazyQuery","useMutation","useQuery","FormControl","FormControlLabel","IconButton","InputLabel","MenuItem","Popover","Radio","RadioGroup","Select","Typography","ButtonFilled","InputField","React","useEffect","useState","useTranslation","InfoIcon","Loader","constants","ADD_IMAGE_REGISTRY","GET_IMAGE_REGISTRY","LIST_IMAGE_REGISTRY","UPDATE_IMAGE_REGISTRY","getProjectID","useStyles","ImageRegistry","t","classes","projectID","registry","setRegistry","registryID","setRegistryID","registryType","setRegistryType","isCustomRegistryEnabled","setIsCustomRegistryEnabled","isAvailable","setIsAvailable","fetchPolicy","getRegistryData","data","loading","registry_name","repo_name","registry_type","public","secret_name","secret_namespace","enable_registry","registryInfo","setRegistryInfo","registryData","setRegistryData","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","open","Boolean","id","undefined","variables","onCompleted","ListImageRegistry","length","image_registry_id","registryid","projectid","listLoading","updateImageRegistry","image_registry_info","image_repo_name","image_registry_name","image_registry_type","updateLoader","refetchQueries","query","onError","createImageRegistry","GetImageRegistry","litmus","docker","handleSubmit","preventDefault","imageRegistryID","imageRegistryInfo","container","headerText","headerDesc","width","target","value","mainRadioDiv","root","radio","checked","defaultText","defaultTextDesc","registryInfoDiv","registryInfoText","defaultBtn","dockerio","customDiv","inputDiv","formControl","labelText","display","additionalDetails","iconBtn","vertical","horizontal","infoText","trim"],"mappings":"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","sourcesContent":["import { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport {\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Popover,\n  Radio,\n  RadioGroup,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport { ButtonFilled, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Loader from '../../../components/Loader';\nimport { constants } from '../../../constants';\nimport {\n  ADD_IMAGE_REGISTRY,\n  GET_IMAGE_REGISTRY,\n  LIST_IMAGE_REGISTRY,\n  UPDATE_IMAGE_REGISTRY,\n} from '../../../graphql';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\n\ninterface RegistryInfo {\n  registry_name: string;\n  repo_name: string;\n  registry_type: string;\n  secret_name: string;\n  secret_namespace: string;\n  enable_registry: boolean;\n}\n\ninterface RegistryData {\n  registry_name: string;\n  repo_name: string;\n  registry_type: string;\n}\n\nconst ImageRegistry = () => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const projectID = getProjectID();\n  const [registry, setRegistry] = useState('enabled');\n  const [registryID, setRegistryID] = useState('');\n  const [registryType, setRegistryType] = useState('Public');\n  const [isCustomRegistryEnabled, setIsCustomRegistryEnabled] = useState(false);\n  const [isAvailable, setIsAvailable] = useState(true);\n  /**\n   * GetRegistryData to fetch Registry Data by ID\n   */\n  const [getRegistryData, { data, loading }] = useLazyQuery(\n    GET_IMAGE_REGISTRY,\n    {\n      fetchPolicy: 'network-only',\n    }\n  );\n  const [registryInfo, setRegistryInfo] = useState<RegistryInfo>({\n    registry_name: '',\n    repo_name: '',\n    registry_type: constants.public,\n    secret_name: '',\n    secret_namespace: '',\n    enable_registry: true,\n  });\n  const [registryData, setRegistryData] = useState<RegistryData>({\n    registry_name: '',\n    repo_name: '',\n    registry_type: '',\n  });\n\n  /**\n   * State variables to manage popover actions\n   */\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  /**\n   * ListImageRegistry is used to fetch the list of image registries\n   */\n  const { loading: listLoading } = useQuery(LIST_IMAGE_REGISTRY, {\n    variables: {\n      data: projectID,\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: (data) => {\n      if (\n        data.ListImageRegistry !== null &&\n        data.ListImageRegistry.length > 0\n      ) {\n        setRegistryID(data.ListImageRegistry[0].image_registry_id);\n        getRegistryData({\n          variables: {\n            registryid: data.ListImageRegistry[0].image_registry_id,\n            projectid: projectID,\n          },\n        });\n      } else {\n        setIsAvailable(false);\n        setRegistry('disabled');\n      }\n    },\n  });\n\n  /**\n   * UpdateImageRegistry is used to update the Image Registry\n   */\n  const [updateImageRegistry, { loading: updateLoader }] = useMutation(\n    UPDATE_IMAGE_REGISTRY,\n    {\n      onCompleted: (data) => {\n        if (\n          data.updateImageRegistry.image_registry_info.image_repo_name ===\n          'litmuschaos'\n        ) {\n          setIsCustomRegistryEnabled(false);\n          setRegistry('disabled');\n        } else {\n          setIsCustomRegistryEnabled(true);\n          setRegistry('enabled');\n        }\n        setRegistryData({\n          registry_name:\n            data.updateImageRegistry.image_registry_info.image_registry_name,\n          repo_name:\n            data.updateImageRegistry.image_registry_info.image_repo_name,\n          registry_type:\n            data.updateImageRegistry.image_registry_info.image_registry_type,\n        });\n      },\n    }\n  );\n\n  const [createImageRegistry] = useMutation(ADD_IMAGE_REGISTRY, {\n    refetchQueries: [\n      {\n        query: LIST_IMAGE_REGISTRY,\n        variables: {\n          data: projectID,\n        },\n      },\n    ],\n    onCompleted: (data) => {\n      if (data !== undefined) {\n        setIsAvailable(true);\n      }\n    },\n    onError: () => {\n      setIsAvailable(false);\n    },\n  });\n\n  /**\n   * UseEffect to set the initial data of image registry\n   */\n  useEffect(() => {\n    if (data !== undefined) {\n      if (\n        data.GetImageRegistry.image_registry_info.image_repo_name ===\n        constants.litmus\n      ) {\n        setRegistry('disabled');\n        setIsCustomRegistryEnabled(false);\n        setRegistryData({\n          registry_name: constants.docker,\n          repo_name: constants.litmus,\n          registry_type: constants.public,\n        });\n      } else {\n        setRegistry('enabled');\n        setIsCustomRegistryEnabled(true);\n        setRegistryData({\n          registry_name:\n            data.GetImageRegistry.image_registry_info.image_registry_name,\n          repo_name: data.GetImageRegistry.image_registry_info.image_repo_name,\n          registry_type:\n            data.GetImageRegistry.image_registry_info.image_registry_type,\n        });\n      }\n    }\n  }, [data]);\n\n  /**\n   * HandleSubmit is used to update the image registry to custom registry\n   */\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    updateImageRegistry({\n      variables: {\n        imageRegistryID: registryID,\n        projectID,\n        imageRegistryInfo: {\n          image_registry_name: registryInfo.registry_name,\n          image_repo_name: registryInfo.repo_name,\n          image_registry_type: registryInfo.registry_type,\n          secret_name: registryInfo.secret_name,\n          secret_namespace: registryInfo.secret_namespace,\n          enable_registry: true,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography className={classes.headerText}>\n        {t('settings.imageRegistry.heading')}\n      </Typography>\n      <Typography className={classes.headerDesc}>\n        {t('settings.imageRegistry.headingDesc')}\n      </Typography>\n\n      {listLoading && loading ? (\n        <Loader />\n      ) : (\n        <form id=\"login-form\" autoComplete=\"on\" onSubmit={handleSubmit}>\n          <FormControl component=\"fieldset\" style={{ width: '70%' }}>\n            <RadioGroup\n              name=\"image-registry\"\n              value={registry}\n              onChange={(event) => {\n                setRegistry(event.target.value);\n              }}\n            >\n              <div className={classes.mainRadioDiv}>\n                <FormControlLabel\n                  value=\"disabled\"\n                  control={\n                    <Radio\n                      classes={{\n                        root: classes.radio,\n                        checked: classes.checked,\n                      }}\n                    />\n                  }\n                  data-cy=\"localRadioButton\"\n                  label={\n                    <Typography className={classes.defaultText}>\n                      {t('settings.imageRegistry.defaultValues')}\n                    </Typography>\n                  }\n                />\n                <Typography className={classes.defaultTextDesc}>\n                  {t('settings.imageRegistry.defaultText')}\n                </Typography>\n                <div className={classes.registryInfoDiv}>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.registry')}\n                    <strong> {t('settings.imageRegistry.dockerio')}</strong>\n                  </Typography>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.repo')}\n                    <strong> {t('settings.imageRegistry.litmus')}</strong>\n                  </Typography>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.repoType')}\n                    <strong> {t('settings.imageRegistry.public')}</strong>\n                  </Typography>\n                </div>\n                {!isAvailable ? (\n                  <Typography color=\"error\">\n                    {t('settings.imageRegistry.noRegistry')}\n                  </Typography>\n                ) : (\n                  <></>\n                )}\n                {(registry === 'disabled' &&\n                  isCustomRegistryEnabled === true) ||\n                !isAvailable ? (\n                  <div>\n                    <ButtonFilled\n                      className={classes.defaultBtn}\n                      data-cy=\"disableGitopsButton\"\n                      disabled={updateLoader}\n                      onClick={() =>\n                        !isAvailable\n                          ? createImageRegistry({\n                              variables: {\n                                projectID,\n                                imageRegistryInfo: {\n                                  image_registry_name: constants.dockerio,\n                                  image_repo_name: constants.litmus,\n                                  image_registry_type: constants.public,\n                                  secret_name: '',\n                                  secret_namespace: '',\n                                  enable_registry: true,\n                                },\n                              },\n                            })\n                          : updateImageRegistry({\n                              variables: {\n                                imageRegistryID: registryID,\n                                projectID,\n                                imageRegistryInfo: {\n                                  image_registry_name: constants.dockerio,\n                                  image_repo_name: constants.litmus,\n                                  image_registry_type: constants.public,\n                                  secret_name: '',\n                                  secret_namespace: '',\n                                  enable_registry: true,\n                                },\n                              },\n                            })\n                      }\n                    >\n                      {t('settings.imageRegistry.defaultReg')}\n                    </ButtonFilled>\n                  </div>\n                ) : null}\n              </div>\n              <div className={classes.mainRadioDiv}>\n                <FormControlLabel\n                  value=\"enabled\"\n                  control={\n                    <Radio\n                      classes={{\n                        root: classes.radio,\n                        checked: classes.checked,\n                      }}\n                    />\n                  }\n                  data-cy=\"localRadioButton\"\n                  label={\n                    <Typography className={classes.defaultText}>\n                      {t('settings.imageRegistry.customValues')}\n                    </Typography>\n                  }\n                />\n\n                {isCustomRegistryEnabled ? (\n                  <div className={classes.registryInfoDiv}>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.registry')}\n                      <strong>{registryData.registry_name}</strong>\n                    </Typography>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.repo')}\n                      <strong>{registryData.repo_name}</strong>\n                    </Typography>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.repoType')}\n                      <strong>{registryData.registry_type}</strong>\n                    </Typography>\n                  </div>\n                ) : (\n                  <>\n                    <div className={classes.customDiv}>\n                      <InputField\n                        label=\"Custom Image Registry\"\n                        value={registryInfo.registry_name}\n                        className={classes.inputDiv}\n                        onChange={(event) => {\n                          setRegistryInfo({\n                            ...registryInfo,\n                            registry_name: event.target.value,\n                          });\n                        }}\n                      />\n\n                      <InputField\n                        label=\"Custom Image Repository\"\n                        value={registryInfo.repo_name}\n                        onChange={(event) => {\n                          setRegistryInfo({\n                            ...registryInfo,\n                            repo_name: event.target.value,\n                          });\n                        }}\n                      />\n                    </div>\n                    <FormControl\n                      variant=\"outlined\"\n                      className={classes.formControl}\n                    >\n                      <InputLabel\n                        className={classes.labelText}\n                        id=\"demo-simple-select-helper-label\"\n                      >\n                        {t('settings.imageRegistry.registryLabel')}\n                      </InputLabel>\n                      <Select\n                        labelId=\"demo-simple-select-helper-label\"\n                        id=\"demo-simple-select-helper\"\n                        value={registryType}\n                        onChange={(event) => {\n                          setRegistryType(event.target.value as string);\n                          setRegistryInfo({\n                            ...registryInfo,\n                            registry_type: event.target.value as string,\n                          });\n                        }}\n                        label=\"Registry Type\"\n                      >\n                        <MenuItem value=\"Public\">\n                          {t('settings.imageRegistry.public')}\n                        </MenuItem>\n                        <MenuItem value=\"Private\">\n                          {t('settings.imageRegistry.private')}\n                        </MenuItem>\n                      </Select>\n                    </FormControl>\n                    <br />\n                    {registryType === 'Private' && (\n                      <>\n                        <hr />\n                        <div style={{ display: 'flex' }}>\n                          <Typography className={classes.additionalDetails}>\n                            {t('settings.imageRegistry.additionalInfo')}\n                          </Typography>\n                          <IconButton\n                            className={classes.iconBtn}\n                            onClick={handleClick}\n                            aria-label=\"info\"\n                          >\n                            <InfoIcon />\n                          </IconButton>\n                          <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                              vertical: 'bottom',\n                              horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                              vertical: 'top',\n                              horizontal: 'center',\n                            }}\n                          >\n                            <Typography className={classes.infoText}>\n                              {t('settings.imageRegistry.provideInfo')}{' '}\n                              <a\n                                href=\"https://kubernetes.io/docs/concepts/configuration/secret/\"\n                                target=\"_\"\n                              >\n                                {t('settings.imageRegistry.visit')}\n                              </a>\n                              .\n                            </Typography>\n                          </Popover>\n                        </div>\n                        <div className={classes.customDiv}>\n                          <InputField\n                            label=\"Custom Image Secret\"\n                            value={registryInfo.secret_name}\n                            className={classes.inputDiv}\n                            onChange={(event) => {\n                              setRegistryInfo({\n                                ...registryInfo,\n                                secret_name: event.target.value,\n                              });\n                            }}\n                          />\n                          <InputField\n                            label=\"Secret Namespace\"\n                            value={registryInfo.secret_namespace}\n                            onChange={(event) => {\n                              setRegistryInfo({\n                                ...registryInfo,\n                                secret_namespace: event.target.value,\n                              });\n                            }}\n                          />\n                        </div>\n                        <br />\n                      </>\n                    )}\n                    <ButtonFilled\n                      disabled={\n                        registry === 'disabled' ||\n                        registryInfo.registry_name.trim().length === 0 ||\n                        registryInfo.repo_name.trim().length === 0\n                      }\n                      type=\"submit\"\n                    >\n                      {t('settings.imageRegistry.save')}\n                    </ButtonFilled>\n                  </>\n                )}\n              </div>\n            </RadioGroup>\n          </FormControl>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ImageRegistry;\n"]},"metadata":{},"sourceType":"module"}