{"ast":null,"code":"import _defineProperty from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _createReducer;\n\nimport { AnalyticsActions } from '../../models/redux/analytics';\nimport createReducer from './createReducer';\nvar initialState = {\n  communityData: {\n    github: {\n      stars: '',\n      experimentsCount: ''\n    },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: []\n    }\n  },\n  loading: false,\n  error: false\n};\nexport var communityData = createReducer(initialState, (_createReducer = {}, _defineProperty(_createReducer, AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS, function (state, action) {\n  var data = action.payload;\n  var geoCity = [];\n  data.google.geoCity.forEach(function (c) {\n    geoCity.push({\n      name: c[0],\n      latitude: c[1],\n      longitude: c[2],\n      count: c[3]\n    });\n  });\n  var geoCountry = data.google.geoCountry;\n  var dailyExperimentData = [];\n  data.google.dailyExperimentData.forEach(function (c) {\n    dailyExperimentData.push({\n      date: c[0],\n      count: c[1]\n    });\n  });\n  var dailyOperatorData = [];\n  data.google.dailyOperatorData.forEach(function (c) {\n    dailyOperatorData.push({\n      date: c[0],\n      count: c[1]\n    });\n  });\n  var monthlyExperimentData = [];\n  data.google.monthlyExperimentData.forEach(function (c) {\n    monthlyExperimentData.push({\n      date: c[0],\n      count: c[1]\n    });\n  });\n  var monthlyOperatorData = [];\n  data.google.monthlyOperatorData.forEach(function (c) {\n    monthlyOperatorData.push({\n      date: c[0],\n      count: c[1]\n    });\n  });\n  return _objectSpread(_objectSpread({}, state), {}, {\n    communityData: {\n      github: data.github,\n      google: {\n        totalRuns: data.google.totalRuns,\n        operatorInstalls: data.google.operatorInstalls,\n        geoCountry: geoCountry,\n        geoCity: geoCity,\n        dailyExperimentData: dailyExperimentData,\n        dailyOperatorData: dailyOperatorData,\n        monthlyExperimentData: monthlyExperimentData,\n        monthlyOperatorData: monthlyOperatorData\n      }\n    },\n    loading: false,\n    error: false\n  });\n}), _defineProperty(_createReducer, AnalyticsActions.COMMUNITY_ANALYTICS_LOADING, function (state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loading: action.payload\n  });\n}), _defineProperty(_createReducer, AnalyticsActions.COMMUNITY_ANALYTICS_ERROR, function (state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loading: false,\n    error: action.payload\n  });\n}), _createReducer));\nexport default communityData;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/redux/reducers/analytics.ts"],"names":["AnalyticsActions","createReducer","initialState","communityData","github","stars","experimentsCount","google","totalRuns","operatorInstalls","geoCity","geoCountry","dailyExperimentData","dailyOperatorData","monthlyExperimentData","monthlyOperatorData","loading","error","COMMUNITY_ANALYTICS_SUCCESS","state","action","data","payload","forEach","c","push","name","latitude","longitude","count","date","COMMUNITY_ANALYTICS_LOADING","COMMUNITY_ANALYTICS_ERROR"],"mappings":";;;;;AAAA,SAEEA,gBAFF,QAOO,8BAPP;AAQA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,IAAMC,YAA2B,GAAG;AAClCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,gBAAgB,EAAE;AAA/B,KADK;AAEbC,IAAAA,MAAM,EAAE;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,gBAAgB,EAAE,EAFZ;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,UAAU,EAAE,EAJN;AAKNC,MAAAA,mBAAmB,EAAE,EALf;AAMNC,MAAAA,iBAAiB,EAAE,EANb;AAONC,MAAAA,qBAAqB,EAAE,EAPjB;AAQNC,MAAAA,mBAAmB,EAAE;AARf;AAFK,GADmB;AAclCC,EAAAA,OAAO,EAAE,KAdyB;AAelCC,EAAAA,KAAK,EAAE;AAf2B,CAApC;AAkBA,OAAO,IAAMd,aAAa,GAAGF,aAAa,CAAgBC,YAAhB,wDACvCF,gBAAgB,CAACkB,2BADsB,YAEtCC,KAFsC,EAGtCC,MAHsC,EAItC;AACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,MAAMZ,OAAkB,GAAG,EAA3B;AACAW,EAAAA,IAAI,CAACd,MAAL,CAAYG,OAAZ,CAAoBa,OAApB,CAA4B,UAACC,CAAD,EAAY;AACtCd,IAAAA,OAAO,CAACe,IAAR,CAAa;AACXC,MAAAA,IAAI,EAAEF,CAAC,CAAC,CAAD,CADI;AAEXG,MAAAA,QAAQ,EAAEH,CAAC,CAAC,CAAD,CAFA;AAGXI,MAAAA,SAAS,EAAEJ,CAAC,CAAC,CAAD,CAHD;AAIXK,MAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAJG,KAAb;AAMD,GAPD;AASA,MAAQb,UAAR,GAAuBU,IAAI,CAACd,MAA5B,CAAQI,UAAR;AAEA,MAAMC,mBAAiC,GAAG,EAA1C;AACAS,EAAAA,IAAI,CAACd,MAAL,CAAYK,mBAAZ,CAAgCW,OAAhC,CAAwC,UAACC,CAAD,EAAY;AAClDZ,IAAAA,mBAAmB,CAACa,IAApB,CAAyB;AACvBK,MAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADgB;AAEvBK,MAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFe,KAAzB;AAID,GALD;AAOA,MAAMX,iBAA+B,GAAG,EAAxC;AACAQ,EAAAA,IAAI,CAACd,MAAL,CAAYM,iBAAZ,CAA8BU,OAA9B,CAAsC,UAACC,CAAD,EAAY;AAChDX,IAAAA,iBAAiB,CAACY,IAAlB,CAAuB;AACrBK,MAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADc;AAErBK,MAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFa,KAAvB;AAID,GALD;AAOA,MAAMV,qBAAmC,GAAG,EAA5C;AACAO,EAAAA,IAAI,CAACd,MAAL,CAAYO,qBAAZ,CAAkCS,OAAlC,CAA0C,UAACC,CAAD,EAAY;AACpDV,IAAAA,qBAAqB,CAACW,IAAtB,CAA2B;AACzBK,MAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADkB;AAEzBK,MAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFiB,KAA3B;AAID,GALD;AAOA,MAAMT,mBAAiC,GAAG,EAA1C;AACAM,EAAAA,IAAI,CAACd,MAAL,CAAYQ,mBAAZ,CAAgCQ,OAAhC,CAAwC,UAACC,CAAD,EAAY;AAClDT,IAAAA,mBAAmB,CAACU,IAApB,CAAyB;AACvBK,MAAAA,IAAI,EAAEN,CAAC,CAAC,CAAD,CADgB;AAEvBK,MAAAA,KAAK,EAAEL,CAAC,CAAC,CAAD;AAFe,KAAzB;AAID,GALD;AAOA,yCACKL,KADL;AAEEhB,IAAAA,aAAa,EAAE;AACbC,MAAAA,MAAM,EAAEiB,IAAI,CAACjB,MADA;AAEbG,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAEa,IAAI,CAACd,MAAL,CAAYC,SADjB;AAENC,QAAAA,gBAAgB,EAAEY,IAAI,CAACd,MAAL,CAAYE,gBAFxB;AAGNE,QAAAA,UAAU,EAAVA,UAHM;AAIND,QAAAA,OAAO,EAAPA,OAJM;AAKNE,QAAAA,mBAAmB,EAAnBA,mBALM;AAMNC,QAAAA,iBAAiB,EAAjBA,iBANM;AAONC,QAAAA,qBAAqB,EAArBA,qBAPM;AAQNC,QAAAA,mBAAmB,EAAnBA;AARM;AAFK,KAFjB;AAeEC,IAAAA,OAAO,EAAE,KAfX;AAgBEC,IAAAA,KAAK,EAAE;AAhBT;AAkBD,CApEuC,mCAqEvCjB,gBAAgB,CAAC+B,2BArEsB,YAsEtCZ,KAtEsC,EAuEtCC,MAvEsC,EAwEtC;AACA,yCACKD,KADL;AAEEH,IAAAA,OAAO,EAAEI,MAAM,CAACE;AAFlB;AAID,CA7EuC,mCA8EvCtB,gBAAgB,CAACgC,yBA9EsB,YA+EtCb,KA/EsC,EAgFtCC,MAhFsC,EAiFtC;AACA,yCACKD,KADL;AAEEH,IAAAA,OAAO,EAAE,KAFX;AAGEC,IAAAA,KAAK,EAAEG,MAAM,CAACE;AAHhB;AAKD,CAvFuC,mBAAnC;AA0FP,eAAenB,aAAf","sourcesContent":["import {\n  AnalyticsAction,\n  AnalyticsActions,\n  AnalyticsData,\n  CommunityData,\n  GeoCity,\n  SeriesData,\n} from '../../models/redux/analytics';\nimport createReducer from './createReducer';\n\nconst initialState: AnalyticsData = {\n  communityData: {\n    github: { stars: '', experimentsCount: '' },\n    google: {\n      totalRuns: '',\n      operatorInstalls: '',\n      geoCity: [],\n      geoCountry: [],\n      dailyExperimentData: [],\n      dailyOperatorData: [],\n      monthlyExperimentData: [],\n      monthlyOperatorData: [],\n    },\n  },\n  loading: false,\n  error: false,\n};\n\nexport const communityData = createReducer<AnalyticsData>(initialState, {\n  [AnalyticsActions.COMMUNITY_ANALYTICS_SUCCESS](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    const data = action.payload as CommunityData;\n    const geoCity: GeoCity[] = [];\n    data.google.geoCity.forEach((c: any) => {\n      geoCity.push({\n        name: c[0],\n        latitude: c[1],\n        longitude: c[2],\n        count: c[3],\n      });\n    });\n\n    const { geoCountry } = data.google;\n\n    const dailyExperimentData: SeriesData[] = [];\n    data.google.dailyExperimentData.forEach((c: any) => {\n      dailyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const dailyOperatorData: SeriesData[] = [];\n    data.google.dailyOperatorData.forEach((c: any) => {\n      dailyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyExperimentData: SeriesData[] = [];\n    data.google.monthlyExperimentData.forEach((c: any) => {\n      monthlyExperimentData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    const monthlyOperatorData: SeriesData[] = [];\n    data.google.monthlyOperatorData.forEach((c: any) => {\n      monthlyOperatorData.push({\n        date: c[0],\n        count: c[1],\n      });\n    });\n\n    return {\n      ...state,\n      communityData: {\n        github: data.github,\n        google: {\n          totalRuns: data.google.totalRuns,\n          operatorInstalls: data.google.operatorInstalls,\n          geoCountry,\n          geoCity,\n          dailyExperimentData,\n          dailyOperatorData,\n          monthlyExperimentData,\n          monthlyOperatorData,\n        },\n      },\n      loading: false,\n      error: false,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_LOADING](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: action.payload as boolean,\n    };\n  },\n  [AnalyticsActions.COMMUNITY_ANALYTICS_ERROR](\n    state: AnalyticsData,\n    action: AnalyticsAction\n  ) {\n    return {\n      ...state,\n      loading: false,\n      error: action.payload as boolean,\n    };\n  },\n});\n\nexport default communityData;\n"]},"metadata":{},"sourceType":"module"}