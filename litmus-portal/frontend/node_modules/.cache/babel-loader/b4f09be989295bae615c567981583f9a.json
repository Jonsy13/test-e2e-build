{"ast":null,"code":"import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useSelector}from'react-redux';import DagreGraph from'../../../../components/DagreGraph';import{extractSteps}from'../ExtractSteps';import{createLabel}from'./createLabel';import useStyles from'./styles';var WorkflowPreview=function WorkflowPreview(_ref){var isCustomWorkflow=_ref.isCustomWorkflow,SequenceSteps=_ref.SequenceSteps;var steps=[];var updatedSteps=[];var manifest=useSelector(function(state){return state.workflowManifest.manifest;});// Graph orientation\nvar horizontal=false;var isSequence=SequenceSteps!==undefined;var classes=useStyles({horizontal:horizontal,isSequence:isSequence});var _useState=useState({nodes:[],links:[]}),_useState2=_slicedToArray(_useState,2),graphData=_useState2[0],setGraphData=_useState2[1];if(manifest!==''){steps=extractSteps(isCustomWorkflow,manifest);}if(SequenceSteps!==undefined){steps=Object.values(SequenceSteps);}useEffect(function(){var data={nodes:[],links:[]};if(steps){/** Adding a Step Group after each node/index on the array\n          \n        Incoming Array : [\n          0: [Node 1]\n          1: [Node 2]      \n        ]\n        Outgoing Array: [\n          0: [Node 1]\n          1: [StepGroup]\n          2: [Node 2]\n          3: [StepGroup]\n        ]\n      */for(var i=0;i<steps.length;i++){if(steps[i].length!==0){updatedSteps.push(steps[i]);if(i!==steps.length-1){updatedSteps.push([{name:'StepGroup',template:'StepGroup'}]);}}}var k=0;// temporary variable to store absolute index\nfor(var _i=0;_i<updatedSteps.length;_i++){/**\n         * Traversing the updated array with StepGroups and adding the\n         * respective ids with the absolute index\n         * From 1 to n\n         */if(updatedSteps[_i].length>1){for(var j=0;j<updatedSteps[_i].length;j++){data.nodes.push({id:k.toString(),class:'succeeded'.concat(\" \",'steps'),label:createLabel({label:updatedSteps[_i][j].name,tooltip:updatedSteps[_i][j].name,phase:'succeeded',horizontal:horizontal}),labelType:updatedSteps[_i][j].name!=='StepGroup'?'svg':'string',config:{fullName:updatedSteps[_i][j].name}});k++;}}else{data.nodes.push({id:k.toString(),class:'succeeded'.concat(\" \",'steps'),label:createLabel({label:updatedSteps[_i][0].name,tooltip:updatedSteps[_i][0].name,phase:'succeeded',horizontal:horizontal}),labelType:updatedSteps[_i][0].name!=='StepGroup'?'svg':'string',config:{fullName:updatedSteps[_i][0].name}});k++;}}var nodeID=0;// temporary variable to keep track of the node id\nfor(var _i2=0;_i2<updatedSteps.length-1;_i2++){/**\n         * If the node at position i has a length equal to 1 and i+1 has\n         * more children -> for cases where\n         * the parent is a single node and the has two or more children\n         *\n         *      []  <- i (source)\n         *       |\n         *    []  []  <- i+1 (target)\n         */if(updatedSteps[_i2].length===1&&updatedSteps[_i2+1].length>1){for(var _j=0;_j<updatedSteps[_i2+1].length;_j++){data.links.push({source:nodeID.toString(),target:(nodeID+_j+1).toString(),class:'succeeded',config:{arrowhead:updatedSteps[_i2][0].name!=='StepGroup'?'undirected':'vee'}});}}else if(updatedSteps[_i2].length>1){/**\n           * If the current node's index is the child's then connect all the children\n           * to the next StepGroup.\n           *\n           *     []  []  []  <- i (source)\n           *       |   |\n           *         []      <- i+1 (target, StepGroup)\n           */for(var _j2=0;_j2<updatedSteps[_i2].length;_j2++){data.links.push({source:(nodeID+_j2+1).toString(),target:(nodeID+updatedSteps[_i2].length+1).toString(),class:'succeeded',config:{arrowhead:updatedSteps[_i2][0].name!=='StepGroup'?'undirected':'vee'}});}nodeID=nodeID+updatedSteps[_i2].length+1;}else{/**\n           * Else connect the parent node to the child node in a one-to-one mapping.\n           *\n           *       []   <- i (source)\n           *       |\n           *       []   <- i+i (target)\n           */data.links.push({source:nodeID.toString(),target:(nodeID+1).toString(),class:'succeeded',config:{arrowhead:updatedSteps[_i2][0].name!=='StepGroup'?'undirected':'vee'}});nodeID++;}}}setGraphData({nodes:_toConsumableArray(data.nodes),links:_toConsumableArray(data.links)});},[manifest,SequenceSteps]);return graphData.nodes.length?/*#__PURE__*/React.createElement(DagreGraph,{className:classes.dagreGraph,nodes:graphData.nodes,links:graphData.links,config:{rankdir:horizontal?'LR':'TB',// align: 'UR',\nranker:'tight-tree'},animate:1000,shape:\"rect\",fitBoundaries:true,zoomable:true}):/*#__PURE__*/React.createElement(\"div\",{className:classes.load},\"Visualizing your Workflow\");};export default WorkflowPreview;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/WorkflowPreview/index.tsx"],"names":["React","useEffect","useState","useSelector","DagreGraph","extractSteps","createLabel","useStyles","WorkflowPreview","isCustomWorkflow","SequenceSteps","steps","updatedSteps","manifest","state","workflowManifest","horizontal","isSequence","undefined","classes","nodes","links","graphData","setGraphData","Object","values","data","i","length","push","name","template","k","j","id","toString","class","label","tooltip","phase","labelType","config","fullName","nodeID","source","target","arrowhead","dagreGraph","rankdir","ranker","load"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DagreGraph, { d3Link, d3Node } from '../../../../components/DagreGraph';\nimport { Steps } from '../../../../models/redux/customyaml';\nimport { RootState } from '../../../../redux/reducers';\nimport { extractSteps } from '../ExtractSteps';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\ninterface GraphData {\n  nodes: d3Node[];\n  links: d3Link[];\n}\n\ninterface ManifestSteps {\n  name: string;\n  template: string;\n}\n\ninterface StepType {\n  [key: string]: ManifestSteps[];\n}\n\ninterface WorkflowPreviewProps {\n  isCustomWorkflow: boolean;\n  SequenceSteps?: StepType;\n}\n\nconst WorkflowPreview: React.FC<WorkflowPreviewProps> = ({\n  isCustomWorkflow,\n  SequenceSteps,\n}) => {\n  let steps: Steps[][] = [];\n  const updatedSteps: Steps[][] = [];\n\n  const manifest = useSelector(\n    (state: RootState) => state.workflowManifest.manifest\n  );\n\n  // Graph orientation\n  const horizontal = false;\n  const isSequence = SequenceSteps !== undefined;\n  const classes = useStyles({ horizontal, isSequence });\n\n  const [graphData, setGraphData] = useState<GraphData>({\n    nodes: [],\n    links: [],\n  });\n\n  if (manifest !== '') {\n    steps = extractSteps(isCustomWorkflow, manifest);\n  }\n  if (SequenceSteps !== undefined) {\n    steps = Object.values(SequenceSteps);\n  }\n\n  useEffect(() => {\n    const data: GraphData = {\n      nodes: [],\n      links: [],\n    };\n\n    if (steps) {\n      /** Adding a Step Group after each node/index on the array\n          \n        Incoming Array : [\n          0: [Node 1]\n          1: [Node 2]      \n        ]\n        Outgoing Array: [\n          0: [Node 1]\n          1: [StepGroup]\n          2: [Node 2]\n          3: [StepGroup]\n        ]\n      */\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].length !== 0) {\n          updatedSteps.push(steps[i]);\n          if (i !== steps.length - 1) {\n            updatedSteps.push([\n              {\n                name: 'StepGroup',\n                template: 'StepGroup',\n              },\n            ]);\n          }\n        }\n      }\n\n      let k = 0; // temporary variable to store absolute index\n      for (let i = 0; i < updatedSteps.length; i++) {\n        /**\n         * Traversing the updated array with StepGroups and adding the\n         * respective ids with the absolute index\n         * From 1 to n\n         */\n\n        if (updatedSteps[i].length > 1) {\n          for (let j = 0; j < updatedSteps[i].length; j++) {\n            data.nodes.push({\n              id: k.toString(),\n              class: `${'succeeded'} ${'steps'}`,\n              label: createLabel({\n                label: updatedSteps[i][j].name,\n                tooltip: updatedSteps[i][j].name,\n                phase: 'succeeded',\n                horizontal,\n              }),\n              labelType:\n                updatedSteps[i][j].name !== 'StepGroup' ? 'svg' : 'string',\n              config: { fullName: updatedSteps[i][j].name },\n            });\n            k++;\n          }\n        } else {\n          data.nodes.push({\n            id: k.toString(),\n            class: `${'succeeded'} ${'steps'}`,\n            label: createLabel({\n              label: updatedSteps[i][0].name,\n              tooltip: updatedSteps[i][0].name,\n              phase: 'succeeded',\n              horizontal,\n            }),\n            labelType:\n              updatedSteps[i][0].name !== 'StepGroup' ? 'svg' : 'string',\n            config: { fullName: updatedSteps[i][0].name },\n          });\n          k++;\n        }\n      }\n\n      let nodeID = 0; // temporary variable to keep track of the node id\n      for (let i = 0; i < updatedSteps.length - 1; i++) {\n        /**\n         * If the node at position i has a length equal to 1 and i+1 has\n         * more children -> for cases where\n         * the parent is a single node and the has two or more children\n         *\n         *      []  <- i (source)\n         *       |\n         *    []  []  <- i+1 (target)\n         */\n\n        if (updatedSteps[i].length === 1 && updatedSteps[i + 1].length > 1) {\n          for (let j = 0; j < updatedSteps[i + 1].length; j++) {\n            data.links.push({\n              source: nodeID.toString(),\n              target: (nodeID + j + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead:\n                  updatedSteps[i][0].name !== 'StepGroup'\n                    ? 'undirected'\n                    : 'vee',\n              },\n            });\n          }\n        } else if (updatedSteps[i].length > 1) {\n          /**\n           * If the current node's index is the child's then connect all the children\n           * to the next StepGroup.\n           *\n           *     []  []  []  <- i (source)\n           *       |   |\n           *         []      <- i+1 (target, StepGroup)\n           */\n          for (let j = 0; j < updatedSteps[i].length; j++) {\n            data.links.push({\n              source: (nodeID + j + 1).toString(),\n              target: (nodeID + updatedSteps[i].length + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead:\n                  updatedSteps[i][0].name !== 'StepGroup'\n                    ? 'undirected'\n                    : 'vee',\n              },\n            });\n          }\n          nodeID = nodeID + updatedSteps[i].length + 1;\n        } else {\n          /**\n           * Else connect the parent node to the child node in a one-to-one mapping.\n           *\n           *       []   <- i (source)\n           *       |\n           *       []   <- i+i (target)\n           */\n          data.links.push({\n            source: nodeID.toString(),\n            target: (nodeID + 1).toString(),\n            class: 'succeeded',\n            config: {\n              arrowhead:\n                updatedSteps[i][0].name !== 'StepGroup' ? 'undirected' : 'vee',\n            },\n          });\n          nodeID++;\n        }\n      }\n    }\n\n    setGraphData({\n      nodes: [...data.nodes],\n      links: [...data.links],\n    });\n  }, [manifest, SequenceSteps]);\n\n  return graphData.nodes.length ? (\n    <DagreGraph\n      className={classes.dagreGraph}\n      nodes={graphData.nodes}\n      links={graphData.links}\n      config={{\n        rankdir: horizontal ? 'LR' : 'TB',\n        // align: 'UR',\n        ranker: 'tight-tree',\n      }}\n      animate={1000}\n      shape=\"rect\"\n      fitBoundaries\n      zoomable\n    />\n  ) : (\n    <div className={classes.load}>Visualizing your Workflow</div>\n  );\n};\n\nexport default WorkflowPreview;\n"]},"metadata":{},"sourceType":"module"}