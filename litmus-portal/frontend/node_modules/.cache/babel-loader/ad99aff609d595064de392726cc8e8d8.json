{"ast":null,"code":"import _regeneratorRuntime from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{FormControl,IconButton,MenuItem,OutlinedInput,Select,Typography}from'@material-ui/core';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import WatchLaterRoundedIcon from'@material-ui/icons/WatchLaterRounded';import{ButtonOutlined}from'litmus-ui';import moment from'moment';import React from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import DateRangeSelector from'../../../../components/DateRangeSelector';import{DEFAULT_REFRESH_RATE,DEFAULT_TOLERANCE_LIMIT,MAX_REFRESH_RATE,MINIMUM_TOLERANCE_LIMIT}from'../../../../pages/ApplicationDashboard/constants';import refreshData from'../../../../pages/ApplicationDashboard/refreshData';import useActions from'../../../../redux/actions';import*as DashboardActions from'../../../../redux/actions/dashboards';import useStyles,{useOutlinedInputStyles}from'./styles';var ToolBar=function ToolBar(){var classes=useStyles();var outlinedInputClasses=useOutlinedInputStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var dashboard=useActions(DashboardActions);var selectedDashboard=useSelector(function(state){return state.selectDashboard;});var dateRangeSelectorRef=React.useRef(null);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isDateRangeSelectorPopoverOpen=_React$useState2[0],setDateRangeSelectorPopoverOpen=_React$useState2[1];var _React$useState3=React.useState(selectedDashboard.refreshRate?selectedDashboard.refreshRate:0),_React$useState4=_slicedToArray(_React$useState3,2),refreshRate=_React$useState4[0],setRefreshRate=_React$useState4[1];var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),openRefresh=_React$useState6[0],setOpenRefresh=_React$useState6[1];var handleCloseRefresh=function handleCloseRefresh(){setOpenRefresh(false);};var handleOpenRefresh=function handleOpenRefresh(){setOpenRefresh(true);};var clearTimeOuts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var id;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:id=window.setTimeout(function(){},0);while(id--){window.clearTimeout(id);}return _context.abrupt(\"return\",Promise.resolve(id===0));case 3:case\"end\":return _context.stop();}}},_callee);}));return function clearTimeOuts(){return _ref.apply(this,arguments);};}();var CallbackFromRangeSelector=function CallbackFromRangeSelector(selectedStartDate,selectedEndDate){var _selectedDashboard$re,_selectedDashboard$re2;var startDateFormatted=moment(selectedStartDate).format();var endDateFormatted=moment(selectedEndDate).add(23,'hours').add(59,'minutes').add(59,'seconds').format();dashboard.selectDashboard({range:{startDate:startDateFormatted,endDate:endDateFormatted}});var endDate=new Date(moment(endDateFormatted).format()).getTime()/1000;var now=Math.round(new Date().getTime()/1000);var diff=Math.abs(now-endDate);var maxLim=((_selectedDashboard$re=selectedDashboard.refreshRate)!==null&&_selectedDashboard$re!==void 0?_selectedDashboard$re:DEFAULT_REFRESH_RATE)/1000!==0?((_selectedDashboard$re2=selectedDashboard.refreshRate)!==null&&_selectedDashboard$re2!==void 0?_selectedDashboard$re2:DEFAULT_REFRESH_RATE)/1000+MINIMUM_TOLERANCE_LIMIT:DEFAULT_TOLERANCE_LIMIT;if(!(diff>=0&&diff<=maxLim)&&selectedDashboard.refreshRate!==MAX_REFRESH_RATE){clearTimeOuts().then(function(){setRefreshRate(MAX_REFRESH_RATE);});}};var getRefreshRateStatus=function getRefreshRateStatus(){if(selectedDashboard.range){var _selectedDashboard$re3,_selectedDashboard$re4;var endDate=new Date(moment(selectedDashboard.range.endDate).format()).getTime()/1000;var now=Math.round(new Date().getTime()/1000);var diff=Math.abs(now-endDate);var maxLim=((_selectedDashboard$re3=selectedDashboard.refreshRate)!==null&&_selectedDashboard$re3!==void 0?_selectedDashboard$re3:DEFAULT_REFRESH_RATE)/1000!==0?((_selectedDashboard$re4=selectedDashboard.refreshRate)!==null&&_selectedDashboard$re4!==void 0?_selectedDashboard$re4:DEFAULT_REFRESH_RATE)/1000+MINIMUM_TOLERANCE_LIMIT:DEFAULT_TOLERANCE_LIMIT;if(!(diff>=0&&diff<=maxLim)){// A non relative time range has been selected.\n// Refresh rate switch is not acknowledged and it's state is locked (Off).\n// Select a relative time range or select a different refresh rate to unlock again.\nreturn true;}}// For relative time ranges.\nreturn false;};return/*#__PURE__*/React.createElement(\"div\",{className:classes.headerDiv},/*#__PURE__*/React.createElement(Typography,{className:classes.headerInfoText},t('analyticsDashboard.monitoringDashboardPage.headerInfoText')),/*#__PURE__*/React.createElement(\"div\",{className:classes.controls},/*#__PURE__*/React.createElement(\"div\",{ref:dateRangeSelectorRef},/*#__PURE__*/React.createElement(ButtonOutlined,{className:classes.selectDate,onClick:function onClick(){return setDateRangeSelectorPopoverOpen(true);},\"aria-label\":\"time range\",\"aria-haspopup\":\"true\"},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorClockIcon},/*#__PURE__*/React.createElement(WatchLaterRoundedIcon,null)),!selectedDashboard.range||selectedDashboard.range.startDate===' '?\"\".concat(t('analyticsDashboard.monitoringDashboardPage.rangeSelector.selectPeriod')):\"\".concat(selectedDashboard.range.startDate.split('-')[0],\"-\").concat(selectedDashboard.range.startDate.split('-')[1],\"-\").concat(selectedDashboard.range.startDate.substring(selectedDashboard.range.startDate.lastIndexOf('-')+1,selectedDashboard.range.startDate.lastIndexOf('T')),\" \\n                    \\n                  \").concat(selectedDashboard.range.startDate.substring(selectedDashboard.range.startDate.lastIndexOf('T')+1,selectedDashboard.range.startDate.lastIndexOf('+')),\" \\n                    \").concat(t('analyticsDashboard.monitoringDashboardPage.rangeSelector.to'),\"\\n                   \").concat(selectedDashboard.range.endDate.split('-')[0],\"-\").concat(selectedDashboard.range.endDate.split('-')[1],\"-\").concat(selectedDashboard.range.endDate.substring(selectedDashboard.range.endDate.lastIndexOf('-')+1,selectedDashboard.range.endDate.lastIndexOf('T')),\" \\n                    \\n                  \").concat(selectedDashboard.range.endDate.substring(selectedDashboard.range.endDate.lastIndexOf('T')+1,selectedDashboard.range.endDate.lastIndexOf('+'))),/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorIcon},/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null))))),/*#__PURE__*/React.createElement(DateRangeSelector,{anchorEl:dateRangeSelectorRef.current,isOpen:isDateRangeSelectorPopoverOpen,onClose:function onClose(){setDateRangeSelectorPopoverOpen(false);},callbackToSetRange:CallbackFromRangeSelector,className:classes.rangeSelectorPopover}),/*#__PURE__*/React.createElement(\"div\",{className:classes.refreshDiv},/*#__PURE__*/React.createElement(ButtonOutlined,{onClick:function onClick(){clearTimeOuts().then(function(){dashboard.selectDashboard({forceUpdate:true});});},className:classes.refreshButton},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/refresh-dashboard.svg\",alt:\"refresh icon\",className:classes.refreshIcon})),/*#__PURE__*/React.createElement(FormControl,{className:classes.formControl,variant:\"outlined\"},/*#__PURE__*/React.createElement(Select,{labelId:\"refresh-controlled-open-select-label\",id:\"refresh-controlled-open-select\",open:openRefresh,disabled:getRefreshRateStatus(),onClose:handleCloseRefresh,onOpen:handleOpenRefresh,native:false,displayEmpty:true,value:refreshRate!==0?refreshRate:null,onChange:function onChange(event){// When viewing data for non-relative time range, refresh should be Off ideally.\n// UI can auto detect if it is not Off and switches it to Off.\n// Now the user can try to view the non-relative time range data again.\nif(selectedDashboard.refreshRate!==MAX_REFRESH_RATE){dashboard.selectDashboard({refreshRate:event.target.value});setRefreshRate(event.target.value);}else{dashboard.selectDashboard({refreshRate:event.target.value});setRefreshRate(event.target.value);dashboard.selectDashboard({forceUpdate:true});}},input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses}),renderValue:function renderValue(){return/*#__PURE__*/React.createElement(\"div\",null,t('analyticsDashboard.monitoringDashboardPage.refresh.heading'));},IconComponent:KeyboardArrowDownIcon,MenuProps:{anchorOrigin:{vertical:'bottom',horizontal:'right'},transformOrigin:{vertical:'top',horizontal:'right'},getContentAnchorEl:null}},/*#__PURE__*/React.createElement(MenuItem,{key:\"Off-refresh-option\",value:MAX_REFRESH_RATE,className:classes.menuListItem},/*#__PURE__*/React.createElement(Typography,{className:classes.menuListItemText,style:{fontWeight:refreshRate===MAX_REFRESH_RATE?500:400}},t('analyticsDashboard.monitoringDashboardPage.refresh.off')),refreshRate===MAX_REFRESH_RATE?/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/check.svg\",alt:\"check mark\",className:classes.checkIcon}):/*#__PURE__*/React.createElement(React.Fragment,null)),refreshData.map(function(data){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(data.label,\"-refresh-option\"),value:data.value,className:classes.menuListItem},/*#__PURE__*/React.createElement(Typography,{className:classes.menuListItemText,style:{fontWeight:refreshRate===data.value?500:400}},t(data.label)),refreshRate===data.value?/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/check.svg\",alt:\"check mark\",className:classes.checkIcon}):/*#__PURE__*/React.createElement(React.Fragment,null));}))))));};export default ToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/ToolBar/index.tsx"],"names":["FormControl","IconButton","MenuItem","OutlinedInput","Select","Typography","KeyboardArrowDownIcon","WatchLaterRoundedIcon","ButtonOutlined","moment","React","useTranslation","useSelector","DateRangeSelector","DEFAULT_REFRESH_RATE","DEFAULT_TOLERANCE_LIMIT","MAX_REFRESH_RATE","MINIMUM_TOLERANCE_LIMIT","refreshData","useActions","DashboardActions","useStyles","useOutlinedInputStyles","ToolBar","classes","outlinedInputClasses","t","dashboard","selectedDashboard","state","selectDashboard","dateRangeSelectorRef","useRef","useState","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","refreshRate","setRefreshRate","openRefresh","setOpenRefresh","handleCloseRefresh","handleOpenRefresh","clearTimeOuts","id","window","setTimeout","clearTimeout","Promise","resolve","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","startDateFormatted","format","endDateFormatted","add","range","startDate","endDate","Date","getTime","now","Math","round","diff","abs","maxLim","then","getRefreshRateStatus","headerDiv","headerInfoText","controls","selectDate","displayDate","rangeSelectorClockIcon","split","substring","lastIndexOf","rangeSelectorIcon","current","rangeSelectorPopover","refreshDiv","forceUpdate","refreshButton","refreshIcon","formControl","event","target","value","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","menuListItem","menuListItemText","fontWeight","checkIcon","map","data","label"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  IconButton,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport WatchLaterRoundedIcon from '@material-ui/icons/WatchLaterRounded';\nimport { ButtonOutlined } from 'litmus-ui';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport {\n  DEFAULT_REFRESH_RATE,\n  DEFAULT_TOLERANCE_LIMIT,\n  MAX_REFRESH_RATE,\n  MINIMUM_TOLERANCE_LIMIT,\n} from '../../../../pages/ApplicationDashboard/constants';\nimport refreshData from '../../../../pages/ApplicationDashboard/refreshData';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { RootState } from '../../../../redux/reducers';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface RefreshObjectType {\n  label: string;\n  value: number;\n}\n\nconst ToolBar: React.FC = () => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { t } = useTranslation();\n  const dashboard = useActions(DashboardActions);\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n\n  const dateRangeSelectorRef = React.useRef<HTMLDivElement>(null);\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    React.useState(false);\n  const [refreshRate, setRefreshRate] = React.useState<number>(\n    selectedDashboard.refreshRate ? selectedDashboard.refreshRate : 0\n  );\n  const [openRefresh, setOpenRefresh] = React.useState(false);\n  const handleCloseRefresh = () => {\n    setOpenRefresh(false);\n  };\n\n  const handleOpenRefresh = () => {\n    setOpenRefresh(true);\n  };\n\n  const clearTimeOuts = async () => {\n    let id = window.setTimeout(() => {}, 0);\n    while (id--) {\n      window.clearTimeout(id);\n    }\n\n    return Promise.resolve(id === 0);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    const startDateFormatted: string = moment(selectedStartDate).format();\n    const endDateFormatted: string = moment(selectedEndDate)\n      .add(23, 'hours')\n      .add(59, 'minutes')\n      .add(59, 'seconds')\n      .format();\n    dashboard.selectDashboard({\n      range: { startDate: startDateFormatted, endDate: endDateFormatted },\n    });\n    const endDate: number =\n      new Date(moment(endDateFormatted).format()).getTime() / 1000;\n    const now: number = Math.round(new Date().getTime() / 1000);\n    const diff: number = Math.abs(now - endDate);\n    const maxLim: number =\n      (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n        ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n          MINIMUM_TOLERANCE_LIMIT\n        : DEFAULT_TOLERANCE_LIMIT;\n    if (\n      !(diff >= 0 && diff <= maxLim) &&\n      selectedDashboard.refreshRate !== MAX_REFRESH_RATE\n    ) {\n      clearTimeOuts().then(() => {\n        setRefreshRate(MAX_REFRESH_RATE);\n      });\n    }\n  };\n\n  const getRefreshRateStatus = () => {\n    if (selectedDashboard.range) {\n      const endDate: number =\n        new Date(moment(selectedDashboard.range.endDate).format()).getTime() /\n        1000;\n      const now: number = Math.round(new Date().getTime() / 1000);\n      const diff: number = Math.abs(now - endDate);\n      const maxLim: number =\n        (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n          ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n            MINIMUM_TOLERANCE_LIMIT\n          : DEFAULT_TOLERANCE_LIMIT;\n      if (!(diff >= 0 && diff <= maxLim)) {\n        // A non relative time range has been selected.\n        // Refresh rate switch is not acknowledged and it's state is locked (Off).\n        // Select a relative time range or select a different refresh rate to unlock again.\n        return true;\n      }\n    }\n    // For relative time ranges.\n    return false;\n  };\n\n  return (\n    <div className={classes.headerDiv}>\n      <Typography className={classes.headerInfoText}>\n        {t('analyticsDashboard.monitoringDashboardPage.headerInfoText')}\n      </Typography>\n      <div className={classes.controls}>\n        <div ref={dateRangeSelectorRef}>\n          <ButtonOutlined\n            className={classes.selectDate}\n            onClick={() => setDateRangeSelectorPopoverOpen(true)}\n            aria-label=\"time range\"\n            aria-haspopup=\"true\"\n          >\n            <Typography className={classes.displayDate}>\n              <IconButton className={classes.rangeSelectorClockIcon}>\n                <WatchLaterRoundedIcon />\n              </IconButton>\n              {!selectedDashboard.range ||\n              selectedDashboard.range.startDate === ' '\n                ? `${t(\n                    'analyticsDashboard.monitoringDashboardPage.rangeSelector.selectPeriod'\n                  )}`\n                : `${selectedDashboard.range.startDate.split('-')[0]}-${\n                    selectedDashboard.range.startDate.split('-')[1]\n                  }-${selectedDashboard.range.startDate.substring(\n                    selectedDashboard.range.startDate.lastIndexOf('-') + 1,\n                    selectedDashboard.range.startDate.lastIndexOf('T')\n                  )} \n                    \n                  ${selectedDashboard.range.startDate.substring(\n                    selectedDashboard.range.startDate.lastIndexOf('T') + 1,\n                    selectedDashboard.range.startDate.lastIndexOf('+')\n                  )} \n                    ${t(\n                      'analyticsDashboard.monitoringDashboardPage.rangeSelector.to'\n                    )}\n                   ${selectedDashboard.range.endDate.split('-')[0]}-${\n                    selectedDashboard.range.endDate.split('-')[1]\n                  }-${selectedDashboard.range.endDate.substring(\n                    selectedDashboard.range.endDate.lastIndexOf('-') + 1,\n                    selectedDashboard.range.endDate.lastIndexOf('T')\n                  )} \n                    \n                  ${selectedDashboard.range.endDate.substring(\n                    selectedDashboard.range.endDate.lastIndexOf('T') + 1,\n                    selectedDashboard.range.endDate.lastIndexOf('+')\n                  )}`}\n\n              <IconButton className={classes.rangeSelectorIcon}>\n                <KeyboardArrowDownIcon />\n              </IconButton>\n            </Typography>\n          </ButtonOutlined>\n        </div>\n        <DateRangeSelector\n          anchorEl={dateRangeSelectorRef.current}\n          isOpen={isDateRangeSelectorPopoverOpen}\n          onClose={() => {\n            setDateRangeSelectorPopoverOpen(false);\n          }}\n          callbackToSetRange={CallbackFromRangeSelector}\n          className={classes.rangeSelectorPopover}\n        />\n\n        <div className={classes.refreshDiv}>\n          <ButtonOutlined\n            onClick={() => {\n              clearTimeOuts().then(() => {\n                dashboard.selectDashboard({\n                  forceUpdate: true,\n                });\n              });\n            }}\n            className={classes.refreshButton}\n          >\n            <img\n              src=\"/icons/refresh-dashboard.svg\"\n              alt=\"refresh icon\"\n              className={classes.refreshIcon}\n            />\n          </ButtonOutlined>\n          <FormControl className={classes.formControl} variant=\"outlined\">\n            <Select\n              labelId=\"refresh-controlled-open-select-label\"\n              id=\"refresh-controlled-open-select\"\n              open={openRefresh}\n              disabled={getRefreshRateStatus()}\n              onClose={handleCloseRefresh}\n              onOpen={handleOpenRefresh}\n              native={false}\n              displayEmpty\n              value={refreshRate !== 0 ? refreshRate : null}\n              onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                // When viewing data for non-relative time range, refresh should be Off ideally.\n                // UI can auto detect if it is not Off and switches it to Off.\n                // Now the user can try to view the non-relative time range data again.\n                if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n                  dashboard.selectDashboard({\n                    refreshRate: event.target.value as number,\n                  });\n                  setRefreshRate(event.target.value as number);\n                } else {\n                  dashboard.selectDashboard({\n                    refreshRate: event.target.value as number,\n                  });\n                  setRefreshRate(event.target.value as number);\n                  dashboard.selectDashboard({\n                    forceUpdate: true,\n                  });\n                }\n              }}\n              input={<OutlinedInput classes={outlinedInputClasses} />}\n              renderValue={() => (\n                <div>\n                  {t(\n                    'analyticsDashboard.monitoringDashboardPage.refresh.heading'\n                  )}\n                </div>\n              )}\n              IconComponent={KeyboardArrowDownIcon}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              <MenuItem\n                key=\"Off-refresh-option\"\n                value={MAX_REFRESH_RATE}\n                className={classes.menuListItem}\n              >\n                <Typography\n                  className={classes.menuListItemText}\n                  style={{\n                    fontWeight: refreshRate === MAX_REFRESH_RATE ? 500 : 400,\n                  }}\n                >\n                  {t('analyticsDashboard.monitoringDashboardPage.refresh.off')}\n                </Typography>\n                {refreshRate === MAX_REFRESH_RATE ? (\n                  <img\n                    src=\"/icons/check.svg\"\n                    alt=\"check mark\"\n                    className={classes.checkIcon}\n                  />\n                ) : (\n                  <></>\n                )}\n              </MenuItem>\n              {refreshData.map((data: RefreshObjectType) => (\n                <MenuItem\n                  key={`${data.label}-refresh-option`}\n                  value={data.value}\n                  className={classes.menuListItem}\n                >\n                  <Typography\n                    className={classes.menuListItemText}\n                    style={{\n                      fontWeight: refreshRate === data.value ? 500 : 400,\n                    }}\n                  >\n                    {t(data.label)}\n                  </Typography>\n                  {refreshRate === data.value ? (\n                    <img\n                      src=\"/icons/check.svg\"\n                      alt=\"check mark\"\n                      className={classes.checkIcon}\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ToolBar;\n"]},"metadata":{},"sourceType":"module"}