{"ast":null,"code":"import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable max-len */import{FormControl,InputLabel,MenuItem,OutlinedInput,Select}from'@material-ui/core';import{useTheme}from'@material-ui/core/styles';import moment from'moment';import Plotly from'plotly.js';import React,{useEffect}from'react';import createPlotlyComponent from'react-plotly.js/factory';import{selectorOptions}from'../../../../utils/selectorOptions';import Score from'./Score';import useStyles,{useOutlinedInputStyles}from'./style';var Plot=createPlotlyComponent(Plotly);var ResilienceScoreComparisonPlot=function ResilienceScoreComparisonPlot(_ref){var xData=_ref.xData,yData=_ref.yData,labels=_ref.labels,colors=_ref.colors;var classes=useStyles();var _useTheme=useTheme(),palette=_useTheme.palette;var outlinedInputClasses=useOutlinedInputStyles();var _React$useState=React.useState({name:'Daily'}),_React$useState2=_slicedToArray(_React$useState,2),currentGranularity=_React$useState2[0],setCurrentGranularity=_React$useState2[1];var handleChangeInGranularity=function handleChangeInGranularity(event){var name=event.target.name;if(name!==currentGranularity.name){setCurrentGranularity(_objectSpread(_objectSpread({},currentGranularity),{},_defineProperty({},name,event.target.value)));}};var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),plotData=_React$useState4[0],setPlotData=_React$useState4[1];var _React$useState5=React.useState({highScore:0,lowScore:0,highColor:'',lowColor:'',highName:'',lowName:''}),_React$useState6=_slicedToArray(_React$useState5,2),edgeData=_React$useState6[0],setEdgeData=_React$useState6[1];var _React$useState7=React.useState({}),_React$useState8=_slicedToArray(_React$useState7,2),plotLayout=_React$useState8[0],setPlotLayout=_React$useState8[1];// Function to convert UNIX time in format of DD MMM YYY\nvar formatDate=function formatDate(date,dateFormat){var updated=new Date(parseInt(date,10)*1000).toString();var resDate=moment(updated).format(dateFormat);return resDate;};// Function to calculate average of resilience scores based on all dates with range as edge dates\nvar avgWorkflowsAll=function avgWorkflowsAll(){var averageDateWiseResilienceScores={Hourly:{dates:[],avgResilienceScores:[]},Daily:{dates:[],avgResilienceScores:[]},Monthly:{dates:[],avgResilienceScores:[]}};for(var i=0;i<xData.Hourly.length;i+=1){for(var j=0;j<xData.Hourly[i].length;j+=1){var date=xData.Hourly[i][j];var sum=0;var count=0;for(var k=0;k<xData.Hourly.length;k+=1){if(xData.Hourly[k].includes(date)&&!averageDateWiseResilienceScores.Hourly.dates.includes(date)){sum+=yData.Hourly[k][xData.Hourly[k].indexOf(date)];count+=1;}}if(count!==0){averageDateWiseResilienceScores.Hourly.dates.push(date);averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(parseFloat((sum/count).toFixed(2)));}}}for(var _i=0;_i<xData.Daily.length;_i+=1){for(var _j=0;_j<xData.Daily[_i].length;_j+=1){var _date=xData.Daily[_i][_j];var _sum=0;var _count=0;for(var _k=0;_k<xData.Daily.length;_k+=1){if(xData.Daily[_k].includes(_date)&&!averageDateWiseResilienceScores.Daily.dates.includes(_date)){_sum+=yData.Daily[_k][xData.Daily[_k].indexOf(_date)];_count+=1;}}if(_count!==0){averageDateWiseResilienceScores.Daily.dates.push(_date);averageDateWiseResilienceScores.Daily.avgResilienceScores.push(parseFloat((_sum/_count).toFixed(2)));}}}for(var _i2=0;_i2<xData.Monthly.length;_i2+=1){for(var _j2=0;_j2<xData.Monthly[_i2].length;_j2+=1){var _date2=xData.Monthly[_i2][_j2];var _sum2=0;var _count2=0;for(var _k2=0;_k2<xData.Monthly.length;_k2+=1){if(xData.Monthly[_k2].includes(_date2)&&!averageDateWiseResilienceScores.Monthly.dates.includes(_date2)){_sum2+=yData.Monthly[_k2][xData.Monthly[_k2].indexOf(_date2)];_count2+=1;}}if(_count2!==0){averageDateWiseResilienceScores.Monthly.dates.push(_date2);averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(parseFloat((_sum2/_count2).toFixed(2)));}}}return averageDateWiseResilienceScores;};var argSort=function argSort(arr1,arr2){return arr1.map(function(item,index){return[arr2[index],item];})// add the args to sort by\n.sort(function(_ref2,_ref3){var _ref4=_slicedToArray(_ref2,1),arg1=_ref4[0];var _ref5=_slicedToArray(_ref3,1),arg2=_ref5[0];return arg2-arg1;})// sort by the args\n.map(function(_ref6){var _ref7=_slicedToArray(_ref6,2),item=_ref7[1];return item;});};// extract the sorted items\nvar processData=function processData(){var calculatedAverageAll=avgWorkflowsAll();var dataX=[['']];var dataY=[[0]];var xAvg=[];var yAvg=[];var avgDateFormat='';if(currentGranularity.name==='Hourly'){dataX=xData.Hourly;dataY=yData.Hourly;xAvg=calculatedAverageAll.Hourly.dates;yAvg=calculatedAverageAll.Hourly.avgResilienceScores;avgDateFormat='YYYY-MM-DD HH:mm:ss';}if(currentGranularity.name==='Daily'){dataX=xData.Daily;dataY=yData.Daily;xAvg=calculatedAverageAll.Daily.dates;yAvg=calculatedAverageAll.Daily.avgResilienceScores;avgDateFormat='YYYY-MM-DD';}if(currentGranularity.name==='Monthly'){dataX=xData.Monthly;dataY=yData.Monthly;xAvg=calculatedAverageAll.Monthly.dates;yAvg=calculatedAverageAll.Monthly.avgResilienceScores;avgDateFormat='YYYY-MM';}var lineSize=Array(labels===null||labels===void 0?void 0:labels.length).fill(3);var data=[];var series=Array(labels===null||labels===void 0?void 0:labels.length).fill(0);var lengths=Array(labels===null||labels===void 0?void 0:labels.length).fill(0);for(var i=0;i<dataX.length;i+=1){var result={x:dataX[i],y:dataY[i],type:'scatter',mode:'lines + text',line:{shape:'spline',color:colors[i],width:lineSize[i]},name:labels?labels[i]:''};data.push(result);for(var j=0;j<dataY[i].length;j+=1){series[i]+=dataY[i][j];}lengths[i]=dataY[i].length;}var unixTimeArray=[];xAvg.forEach(function(x){unixTimeArray.push(parseInt(moment(x).format('X'),10));});var argSortResultY=argSort(yAvg,unixTimeArray).reverse();var sortedResultX=unixTimeArray.sort(function difference(a,b){return a-b;});var datesX=[];sortedResultX.forEach(function(date){datesX.push(formatDate(date.toString(),avgDateFormat));});var avgResult={x:datesX,y:argSortResultY,type:'scatter',mode:'lines',line:{shape:'spline',dash:'dash',color:palette.primary.main,width:3},name:'Average Workflows'};data.push(avgResult);var normalized=Array(labels===null||labels===void 0?void 0:labels.length).fill(0);for(var k=0;k<lengths.length;k+=1){normalized[k]=series[k]/lengths[k];}var max=Math.max.apply(Math,_toConsumableArray(normalized));var maxID=normalized.indexOf(max);var min=Math.min.apply(Math,_toConsumableArray(normalized));var minID=normalized.indexOf(min);setEdgeData({highScore:parseFloat(max.toFixed(2)),lowScore:parseFloat(min.toFixed(2)),highColor:colors[maxID],lowColor:colors[minID],highName:labels?labels[maxID]:'',lowName:labels?labels[minID]:''});setPlotData(data);};var processLayout=function processLayout(){var layout={xaxis:{showgrid:true,gridcolor:palette.border.main,showline:false,showticklabels:true,linecolor:palette.border.main,linewidth:0.5,ticks:'outside',tickcolor:palette.border.main,tickwidth:2,ticklen:5,tickfont:{family:'Ubuntu',color:palette.text.hint},mirror:true,rangeselector:selectorOptions,rangeslider:{visible:true}},yaxis:{showgrid:true,gridcolor:palette.border.main,zeroline:false,showline:false,showticklabels:true,linecolor:palette.border.main,linewidth:0.5,ticks:'outside',tickcolor:palette.border.main,tickwidth:2,ticklen:5,tickfont:{family:'Ubuntu',color:palette.text.hint},mirror:true,tickmode:'array',tickvals:[0,20,40,60,80,100],ticktext:['0','20','40','60','80','100'],range:[-10,110]},cliponaxis:true,layer:'below_traces',autosize:true,margin:{autoexpand:false,l:60,r:50,t:30,b:130},font:{family:'Ubuntu, monospace',color:palette.text.hint},showlegend:true,legend:{orientation:'h',y:-0.5},modebar:{bgcolor:palette.background.paper},paper_bgcolor:palette.background.paper,plot_bgcolor:palette.background.paper};setPlotLayout(layout);};useEffect(function(){processData();processLayout();},[currentGranularity]);return/*#__PURE__*/React.createElement(\"div\",{style:{alignContent:'center',width:'100%'}},/*#__PURE__*/React.createElement(\"div\",{className:classes.flexDisplay},/*#__PURE__*/React.createElement(\"div\",{className:classes.adjust},/*#__PURE__*/React.createElement(Score,{score:edgeData.highScore,high:true,color:edgeData.highColor,name:edgeData.highName})),/*#__PURE__*/React.createElement(Score,{score:edgeData.lowScore,high:false,color:edgeData.lowColor,name:edgeData.lowName}),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl,color:\"primary\",focused:true},/*#__PURE__*/React.createElement(InputLabel,{htmlFor:\"outlined-selection-granularity\",className:classes.selectText},\"Granularity\"),/*#__PURE__*/React.createElement(Select,{value:currentGranularity.name,onChange:handleChangeInGranularity,label:\"Granularity\",inputProps:{name:'name',id:'outlined-selection-granularity'},className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"Hourly\"},\"Hourly\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Daily\"},\"Daily\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Monthly\"},\"Monthly\")))),/*#__PURE__*/React.createElement(\"div\",{className:classes.plot},/*#__PURE__*/React.createElement(Plot,{data:plotData,layout:plotLayout,useResizeHandler:true,style:{width:'166.55%',height:720,margin:'auto'},config:{displaylogo:false,autosizable:true,responsive:true,frameMargins:0.2,showAxisDragHandles:true,showAxisRangeEntryBoxes:true,showTips:true,displayModeBar:true,toImageButtonOptions:{format:'png',filename:'ResilienceScores_Comparison',width:1920,height:1080,scale:2}},onInitialized:function onInitialized(){try{var nodeStyle=document.getElementsByClassName('modebar')[0].style;nodeStyle.left='39%';}catch(err){console.error(err);}}})));};export default ResilienceScoreComparisonPlot;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonPlot/index.tsx"],"names":["FormControl","InputLabel","MenuItem","OutlinedInput","Select","useTheme","moment","Plotly","React","useEffect","createPlotlyComponent","selectorOptions","Score","useStyles","useOutlinedInputStyles","Plot","ResilienceScoreComparisonPlot","xData","yData","labels","colors","classes","palette","outlinedInputClasses","useState","name","currentGranularity","setCurrentGranularity","handleChangeInGranularity","event","target","value","plotData","setPlotData","highScore","lowScore","highColor","lowColor","highName","lowName","edgeData","setEdgeData","plotLayout","setPlotLayout","formatDate","date","dateFormat","updated","Date","parseInt","toString","resDate","format","avgWorkflowsAll","averageDateWiseResilienceScores","Hourly","dates","avgResilienceScores","Daily","Monthly","i","length","j","sum","count","k","includes","indexOf","push","parseFloat","toFixed","argSort","arr1","arr2","map","item","index","sort","arg1","arg2","processData","calculatedAverageAll","dataX","dataY","xAvg","yAvg","avgDateFormat","lineSize","Array","fill","data","series","lengths","result","x","y","type","mode","line","shape","color","width","unixTimeArray","forEach","argSortResultY","reverse","sortedResultX","difference","a","b","datesX","avgResult","dash","primary","main","normalized","max","Math","maxID","min","minID","processLayout","layout","xaxis","showgrid","gridcolor","border","showline","showticklabels","linecolor","linewidth","ticks","tickcolor","tickwidth","ticklen","tickfont","family","text","hint","mirror","rangeselector","rangeslider","visible","yaxis","zeroline","tickmode","tickvals","ticktext","range","cliponaxis","layer","autosize","margin","autoexpand","l","r","t","font","showlegend","legend","orientation","modebar","bgcolor","background","paper","paper_bgcolor","plot_bgcolor","alignContent","flexDisplay","adjust","formControl","selectText","id","plot","height","displaylogo","autosizable","responsive","frameMargins","showAxisDragHandles","showAxisRangeEntryBoxes","showTips","displayModeBar","toImageButtonOptions","filename","scale","nodeStyle","document","getElementsByClassName","style","left","err","console","error"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n} from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport Plotly from 'plotly.js';\nimport React, { useEffect } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { selectorOptions } from '../../../../utils/selectorOptions';\nimport Score from './Score';\nimport useStyles, { useOutlinedInputStyles } from './style';\n\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface ResilienceScoreComparisonPlotProps {\n  xData: { Hourly: string[][]; Daily: string[][]; Monthly: string[][] };\n  yData: { Hourly: number[][]; Daily: number[][]; Monthly: number[][] };\n  labels: string[];\n  colors: string[];\n}\n\ninterface AverageDateWiseResilienceScores {\n  Hourly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Daily: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Monthly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n}\n\nconst ResilienceScoreComparisonPlot: React.FC<ResilienceScoreComparisonPlotProps> =\n  ({ xData, yData, labels, colors }) => {\n    const classes = useStyles();\n    const { palette } = useTheme();\n    const outlinedInputClasses = useOutlinedInputStyles();\n    const [currentGranularity, setCurrentGranularity] = React.useState<{\n      name: string;\n    }>({\n      name: 'Daily',\n    });\n\n    const handleChangeInGranularity = (\n      event: React.ChangeEvent<{ name?: string; value: unknown }>\n    ) => {\n      const name = event.target.name as keyof typeof currentGranularity;\n      if (name !== currentGranularity.name) {\n        setCurrentGranularity({\n          ...currentGranularity,\n          [name]: event.target.value as string,\n        });\n      }\n    };\n\n    const [plotData, setPlotData] = React.useState<any[]>([]);\n\n    const [edgeData, setEdgeData] = React.useState({\n      highScore: 0,\n      lowScore: 0,\n      highColor: '',\n      lowColor: '',\n      highName: '',\n      lowName: '',\n    });\n\n    const [plotLayout, setPlotLayout] = React.useState<any>({});\n\n    // Function to convert UNIX time in format of DD MMM YYY\n    const formatDate = (date: string, dateFormat: string) => {\n      const updated = new Date(parseInt(date, 10) * 1000).toString();\n      const resDate = moment(updated).format(dateFormat);\n      return resDate;\n    };\n\n    // Function to calculate average of resilience scores based on all dates with range as edge dates\n    const avgWorkflowsAll = () => {\n      const averageDateWiseResilienceScores: AverageDateWiseResilienceScores = {\n        Hourly: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n        Daily: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n        Monthly: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n      };\n\n      for (let i = 0; i < xData.Hourly.length; i += 1) {\n        for (let j = 0; j < xData.Hourly[i].length; j += 1) {\n          const date: string = xData.Hourly[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Hourly.length; k += 1) {\n            if (\n              xData.Hourly[k].includes(date) &&\n              !averageDateWiseResilienceScores.Hourly.dates.includes(date)\n            ) {\n              sum += yData.Hourly[k][xData.Hourly[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Hourly.dates.push(date);\n            averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n\n      for (let i = 0; i < xData.Daily.length; i += 1) {\n        for (let j = 0; j < xData.Daily[i].length; j += 1) {\n          const date: string = xData.Daily[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Daily.length; k += 1) {\n            if (\n              xData.Daily[k].includes(date) &&\n              !averageDateWiseResilienceScores.Daily.dates.includes(date)\n            ) {\n              sum += yData.Daily[k][xData.Daily[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Daily.dates.push(date);\n            averageDateWiseResilienceScores.Daily.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n\n      for (let i = 0; i < xData.Monthly.length; i += 1) {\n        for (let j = 0; j < xData.Monthly[i].length; j += 1) {\n          const date: string = xData.Monthly[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Monthly.length; k += 1) {\n            if (\n              xData.Monthly[k].includes(date) &&\n              !averageDateWiseResilienceScores.Monthly.dates.includes(date)\n            ) {\n              sum += yData.Monthly[k][xData.Monthly[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Monthly.dates.push(date);\n            averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n      return averageDateWiseResilienceScores;\n    };\n\n    const argSort = (arr1: number[], arr2: number[]) =>\n      arr1\n        .map((item: any, index: number) => [arr2[index], item]) // add the args to sort by\n        .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\n        .map(([, item]) => item); // extract the sorted items\n\n    const processData = () => {\n      const calculatedAverageAll: AverageDateWiseResilienceScores =\n        avgWorkflowsAll();\n      let dataX = [['']];\n      let dataY = [[0]];\n      let xAvg: string[] = [];\n      let yAvg: number[] = [];\n      let avgDateFormat: string = '';\n      if (currentGranularity.name === 'Hourly') {\n        dataX = xData.Hourly;\n        dataY = yData.Hourly;\n        xAvg = calculatedAverageAll.Hourly.dates;\n        yAvg = calculatedAverageAll.Hourly.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM-DD HH:mm:ss';\n      }\n      if (currentGranularity.name === 'Daily') {\n        dataX = xData.Daily;\n        dataY = yData.Daily;\n        xAvg = calculatedAverageAll.Daily.dates;\n        yAvg = calculatedAverageAll.Daily.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM-DD';\n      }\n      if (currentGranularity.name === 'Monthly') {\n        dataX = xData.Monthly;\n        dataY = yData.Monthly;\n        xAvg = calculatedAverageAll.Monthly.dates;\n        yAvg = calculatedAverageAll.Monthly.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM';\n      }\n      const lineSize: number[] = Array(labels?.length).fill(3);\n      const data = [];\n      const series: number[] = Array(labels?.length).fill(0);\n      const lengths: number[] = Array(labels?.length).fill(0);\n\n      for (let i = 0; i < dataX.length; i += 1) {\n        const result = {\n          x: dataX[i],\n          y: dataY[i],\n          type: 'scatter',\n          mode: 'lines + text',\n          line: {\n            shape: 'spline',\n            color: colors[i],\n            width: lineSize[i],\n          },\n          name: labels ? labels[i] : '',\n        };\n        data.push(result);\n        for (let j = 0; j < dataY[i].length; j += 1) {\n          series[i] += dataY[i][j];\n        }\n        lengths[i] = dataY[i].length;\n      }\n\n      const unixTimeArray: number[] = [];\n      xAvg.forEach((x) => {\n        unixTimeArray.push(parseInt(moment(x).format('X'), 10));\n      });\n      const argSortResultY = argSort(yAvg, unixTimeArray).reverse();\n      const sortedResultX = unixTimeArray.sort(function difference(a, b) {\n        return a - b;\n      });\n      const datesX: string[] = [];\n      sortedResultX.forEach((date) => {\n        datesX.push(formatDate(date.toString(), avgDateFormat));\n      });\n\n      const avgResult = {\n        x: datesX,\n        y: argSortResultY,\n        type: 'scatter',\n        mode: 'lines',\n        line: {\n          shape: 'spline',\n          dash: 'dash',\n          color: palette.primary.main,\n          width: 3,\n        },\n        name: 'Average Workflows',\n      };\n      data.push(avgResult);\n      const normalized = Array(labels?.length).fill(0);\n      for (let k = 0; k < lengths.length; k += 1) {\n        normalized[k] = series[k] / lengths[k];\n      }\n      const max = Math.max(...normalized);\n      const maxID = normalized.indexOf(max);\n      const min = Math.min(...normalized);\n      const minID = normalized.indexOf(min);\n      setEdgeData({\n        highScore: parseFloat(max.toFixed(2)),\n        lowScore: parseFloat(min.toFixed(2)),\n        highColor: colors[maxID],\n        lowColor: colors[minID],\n        highName: labels ? labels[maxID] : '',\n        lowName: labels ? labels[minID] : '',\n      });\n      setPlotData(data);\n    };\n\n    const processLayout = () => {\n      const layout = {\n        xaxis: {\n          showgrid: true,\n          gridcolor: palette.border.main,\n          showline: false,\n          showticklabels: true,\n          linecolor: palette.border.main,\n          linewidth: 0.5,\n          ticks: 'outside',\n          tickcolor: palette.border.main,\n          tickwidth: 2,\n          ticklen: 5,\n          tickfont: {\n            family: 'Ubuntu',\n            color: palette.text.hint,\n          },\n          mirror: true,\n          rangeselector: selectorOptions as any,\n          rangeslider: { visible: true },\n        },\n        yaxis: {\n          showgrid: true,\n          gridcolor: palette.border.main,\n          zeroline: false,\n          showline: false,\n          showticklabels: true,\n          linecolor: palette.border.main,\n          linewidth: 0.5,\n          ticks: 'outside',\n          tickcolor: palette.border.main,\n          tickwidth: 2,\n          ticklen: 5,\n          tickfont: {\n            family: 'Ubuntu',\n            color: palette.text.hint,\n          },\n          mirror: true,\n          tickmode: 'array',\n          tickvals: [0, 20, 40, 60, 80, 100],\n          ticktext: ['0', '20', '40', '60', '80', '100'],\n          range: [-10, 110],\n        },\n        cliponaxis: true,\n        layer: 'below_traces',\n        autosize: true,\n        margin: {\n          autoexpand: false,\n          l: 60,\n          r: 50,\n          t: 30,\n          b: 130,\n        },\n        font: {\n          family: 'Ubuntu, monospace',\n          color: palette.text.hint,\n        },\n        showlegend: true,\n        legend: { orientation: 'h', y: -0.5 },\n        modebar: {\n          bgcolor: palette.background.paper,\n        },\n        paper_bgcolor: palette.background.paper,\n        plot_bgcolor: palette.background.paper,\n      };\n      setPlotLayout(layout);\n    };\n\n    useEffect(() => {\n      processData();\n      processLayout();\n    }, [currentGranularity]);\n\n    return (\n      <div style={{ alignContent: 'center', width: '100%' }}>\n        <div className={classes.flexDisplay}>\n          <div className={classes.adjust}>\n            <Score\n              score={edgeData.highScore}\n              high\n              color={edgeData.highColor}\n              name={edgeData.highName}\n            />\n          </div>\n          <Score\n            score={edgeData.lowScore}\n            high={false}\n            color={edgeData.lowColor}\n            name={edgeData.lowName}\n          />\n          <FormControl\n            variant=\"outlined\"\n            className={classes.formControl}\n            color=\"primary\"\n            focused\n          >\n            <InputLabel\n              htmlFor=\"outlined-selection-granularity\"\n              className={classes.selectText}\n            >\n              Granularity\n            </InputLabel>\n            <Select\n              value={currentGranularity.name}\n              onChange={handleChangeInGranularity}\n              label=\"Granularity\"\n              inputProps={{\n                name: 'name',\n                id: 'outlined-selection-granularity',\n              }}\n              className={classes.selectText}\n              input={<OutlinedInput classes={outlinedInputClasses} />}\n            >\n              <MenuItem value=\"Hourly\">Hourly</MenuItem>\n              <MenuItem value=\"Daily\">Daily</MenuItem>\n              <MenuItem value=\"Monthly\">Monthly</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        <div className={classes.plot}>\n          <Plot\n            data={plotData}\n            layout={plotLayout}\n            useResizeHandler\n            style={{\n              width: '166.55%',\n              height: 720,\n              margin: 'auto',\n            }}\n            config={{\n              displaylogo: false,\n              autosizable: true,\n              responsive: true,\n              frameMargins: 0.2,\n              showAxisDragHandles: true,\n              showAxisRangeEntryBoxes: true,\n              showTips: true,\n              displayModeBar: true,\n              toImageButtonOptions: {\n                format: 'png',\n                filename: 'ResilienceScores_Comparison',\n                width: 1920,\n                height: 1080,\n                scale: 2,\n              },\n            }}\n            onInitialized={() => {\n              try {\n                const nodeStyle = (\n                  document.getElementsByClassName('modebar')[0] as HTMLElement\n                ).style;\n                nodeStyle.left = '39%';\n              } catch (err) {\n                console.error(err);\n              }\n            }}\n          />\n        </div>\n      </div>\n    );\n  };\n\nexport default ResilienceScoreComparisonPlot;\n"]},"metadata":{},"sourceType":"module"}