{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowTable/index.tsx\";\n\nimport { Paper, Table, TableBody, TableContainer, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport useStyles, { StyledTableCell } from './styles';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport TableData from './TableData';\nimport { stepEmbeddedYAMLExtractor } from '../../../utils/yamlUtils';\n\nvar NodeTable = function NodeTable(_ref) {\n  var data = _ref.data,\n      _handleClose = _ref.handleClose,\n      manifest = _ref.manifest;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState({\n    pageNo: 0,\n    rowsPerPage: 5\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      paginationData = _useState2[0],\n      setPaginationData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nodesArray = _useState4[0],\n      setNodesArray = _useState4[1];\n\n  var nodeSelection = useActions(NodeSelectionActions);\n\n  var changeNodeLogs = function changeNodeLogs(selectedKey) {\n    nodeSelection.selectNode(_objectSpread(_objectSpread({}, data.nodes[selectedKey]), {}, {\n      pod_name: selectedKey\n    }));\n  };\n\n  useEffect(function () {\n    var filteredNodes = [];\n    Object.keys(data.nodes).forEach(function (key) {\n      if (data.nodes[key].type !== 'StepGroup' && data.nodes[key].type !== 'Steps') {\n        filteredNodes.push(_objectSpread(_objectSpread({}, data.nodes[key]), {}, {\n          id: key\n        }));\n      }\n    });\n    setNodesArray([].concat(filteredNodes));\n  }, [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    \"data-cy\": \"browseScheduleTable\",\n    className: classes.tableMain,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"simple table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    className: classes.tableHead,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.tableHeader.stepName'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.tableHeader.status'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.tableHeader.duration'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.tableHeader.startTime'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.tableHeader.applicationDetails'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, nodesArray.slice(paginationData.pageNo * paginationData.rowsPerPage, paginationData.pageNo * paginationData.rowsPerPage + paginationData.rowsPerPage).map(function (node) {\n    var stepYAML = stepEmbeddedYAMLExtractor(manifest, node.name);\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: node.id,\n      className: classes.tableRows,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableData, {\n      onViewLogsClick: function onViewLogsClick() {\n        return changeNodeLogs(node.id);\n      },\n      embeddedYAML: stepYAML,\n      data: node,\n      handleClose: function handleClose() {\n        return _handleClose();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 23\n      }\n    }));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    component: \"div\",\n    count: nodesArray.length,\n    rowsPerPage: paginationData.rowsPerPage,\n    page: paginationData.pageNo,\n    onChangePage: function onChangePage(_, page) {\n      return setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n        pageNo: page\n      }));\n    },\n    onChangeRowsPerPage: function onChangeRowsPerPage(event) {\n      setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n        pageNo: 0,\n        rowsPerPage: parseInt(event.target.value, 10)\n      }));\n    },\n    className: classes.pagination,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default NodeTable;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowTable/index.tsx"],"names":["Paper","Table","TableBody","TableContainer","TableHead","TablePagination","TableRow","Typography","useTranslation","React","useEffect","useState","useStyles","StyledTableCell","useActions","NodeSelectionActions","TableData","stepEmbeddedYAMLExtractor","NodeTable","data","handleClose","manifest","classes","t","pageNo","rowsPerPage","paginationData","setPaginationData","nodesArray","setNodesArray","nodeSelection","changeNodeLogs","selectedKey","selectNode","nodes","pod_name","filteredNodes","Object","keys","forEach","key","type","push","id","root","tableMain","tableHead","tableCellWidth","slice","map","node","stepYAML","name","tableRows","length","_","page","event","parseInt","target","value","pagination"],"mappings":";;;;;;AAAA,SACEA,KADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,SALF,EAMEC,eANF,EAOEC,QAPF,EAQEC,UARF,QASO,mBATP;AAUA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,UAA3C;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,KAAKC,oBAAZ,MAAsC,sCAAtC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,yBAAT,QAA0C,0BAA1C;;AAiBA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,OAItC;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,YAEI,QAFJA,WAEI;AAAA,MADJC,QACI,QADJA,QACI;AACJ,MAAMC,OAAO,GAAGV,SAAS,EAAzB;;AACA,wBAAcJ,cAAc,EAA5B;AAAA,MAAQe,CAAR,mBAAQA,CAAR;;AAEA,kBAA4CZ,QAAQ,CAAiB;AACnEa,IAAAA,MAAM,EAAE,CAD2D;AAEnEC,IAAAA,WAAW,EAAE;AAFsD,GAAjB,CAApD;AAAA;AAAA,MAAOC,cAAP;AAAA,MAAuBC,iBAAvB;;AAKA,mBAAoChB,QAAQ,CAAqB,EAArB,CAA5C;AAAA;AAAA,MAAOiB,UAAP;AAAA,MAAmBC,aAAnB;;AACA,MAAMC,aAAa,GAAGhB,UAAU,CAACC,oBAAD,CAAhC;;AAEA,MAAMgB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAyB;AAC9CF,IAAAA,aAAa,CAACG,UAAd,iCACKd,IAAI,CAACe,KAAL,CAAWF,WAAX,CADL;AAEEG,MAAAA,QAAQ,EAAEH;AAFZ;AAID,GALD;;AAOAtB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM0B,aAAiC,GAAG,EAA1C;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYnB,IAAI,CAACe,KAAjB,EAAwBK,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvC,UACErB,IAAI,CAACe,KAAL,CAAWM,GAAX,EAAgBC,IAAhB,KAAyB,WAAzB,IACAtB,IAAI,CAACe,KAAL,CAAWM,GAAX,EAAgBC,IAAhB,KAAyB,OAF3B,EAGE;AACAL,QAAAA,aAAa,CAACM,IAAd,iCAAwBvB,IAAI,CAACe,KAAL,CAAWM,GAAX,CAAxB;AAAyCG,UAAAA,EAAE,EAAEH;AAA7C;AACD;AACF,KAPD;AAQAX,IAAAA,aAAa,WAAKO,aAAL,EAAb;AACD,GAXQ,EAWN,CAACjB,IAAD,CAXM,CAAT;AAaA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEG,OAAO,CAACsB,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,cAAD;AACE,eAAQ,qBADV;AAEE,IAAA,SAAS,EAAEtB,OAAO,CAACuB,SAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,KAAD;AAAO,IAAA,YAAY,MAAnB;AAAoB,kBAAW,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEvB,OAAO,CAACwB,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAExB,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,CAAC,CAAC,oDAAD,CADJ,CADF,CAFF,eASE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,CAAC,CAAC,kDAAD,CADJ,CADF,CATF,eAgBE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,CAAC,CAAC,oDAAD,CADJ,CADF,CAhBF,eAuBE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,CAAC,CAAC,qDAAD,CADJ,CADF,CAvBF,eA8BE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,CAAC,CACA,8DADA,CADJ,CADF,CA9BF,eAsCE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACyB,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAtCF,CADF,eA6CE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACInB,UAAD,CACEoB,KADF,CAEGtB,cAAc,CAACF,MAAf,GAAwBE,cAAc,CAACD,WAF1C,EAGGC,cAAc,CAACF,MAAf,GAAwBE,cAAc,CAACD,WAAvC,GACEC,cAAc,CAACD,WAJpB,EAMEwB,GANF,CAMM,UAACC,IAAD,EAA4B;AAC/B,QAAMC,QAAQ,GAAGlC,yBAAyB,CACxCI,QADwC,EAExC6B,IAAI,CAACE,IAFmC,CAA1C;AAIA,wBACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEF,IAAI,CAACP,EAApB;AAAwB,MAAA,SAAS,EAAErB,OAAO,CAAC+B,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,eAAe,EAAE;AAAA,eAAMtB,cAAc,CAACmB,IAAI,CAACP,EAAN,CAApB;AAAA,OADnB;AAEE,MAAA,YAAY,EAAEQ,QAFhB;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,WAAW,EAAE;AAAA,eAAM9B,YAAW,EAAjB;AAAA,OAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUD,GArBF,CADH,CA7CF,CAJF,CAFF,eA8EE,oBAAC,eAAD;AACE,IAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CADtB;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,KAAK,EAAEQ,UAAU,CAAC0B,MAHpB;AAIE,IAAA,WAAW,EAAE5B,cAAc,CAACD,WAJ9B;AAKE,IAAA,IAAI,EAAEC,cAAc,CAACF,MALvB;AAME,IAAA,YAAY,EAAE,sBAAC+B,CAAD,EAAIC,IAAJ;AAAA,aACZ7B,iBAAiB,iCAAMD,cAAN;AAAsBF,QAAAA,MAAM,EAAEgC;AAA9B,SADL;AAAA,KANhB;AASE,IAAA,mBAAmB,EAAE,6BAACC,KAAD,EAAW;AAC9B9B,MAAAA,iBAAiB,iCACZD,cADY;AAEfF,QAAAA,MAAM,EAAE,CAFO;AAGfC,QAAAA,WAAW,EAAEiC,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,EAAqB,EAArB;AAHN,SAAjB;AAKD,KAfH;AAgBE,IAAA,SAAS,EAAEtC,OAAO,CAACuC,UAhBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9EF,CADF,CADF;AAqGD,CAzID;;AA0IA,eAAe3C,SAAf","sourcesContent":["import {\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport useStyles, { StyledTableCell } from './styles';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport TableData from './TableData';\nimport { ExecutionData, Node } from '../../../models/graphql/workflowData';\nimport { stepEmbeddedYAMLExtractor } from '../../../utils/yamlUtils';\n\ninterface NodeTableProps {\n  manifest: string;\n  data: ExecutionData;\n  handleClose: () => void;\n}\n\ninterface SelectedNodeType extends Node {\n  id: string;\n}\n\ninterface PaginationData {\n  pageNo: number;\n  rowsPerPage: number;\n}\n\nconst NodeTable: React.FC<NodeTableProps> = ({\n  data,\n  handleClose,\n  manifest,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const [paginationData, setPaginationData] = useState<PaginationData>({\n    pageNo: 0,\n    rowsPerPage: 5,\n  });\n\n  const [nodesArray, setNodesArray] = useState<SelectedNodeType[]>([]);\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  const changeNodeLogs = (selectedKey: string) => {\n    nodeSelection.selectNode({\n      ...data.nodes[selectedKey],\n      pod_name: selectedKey,\n    });\n  };\n\n  useEffect(() => {\n    const filteredNodes: SelectedNodeType[] = [];\n    Object.keys(data.nodes).forEach((key) => {\n      if (\n        data.nodes[key].type !== 'StepGroup' &&\n        data.nodes[key].type !== 'Steps'\n      ) {\n        filteredNodes.push({ ...data.nodes[key], id: key });\n      }\n    });\n    setNodesArray([...filteredNodes]);\n  }, [data]);\n\n  return (\n    <>\n      <Paper className={classes.root}>\n        {/* Table Header Section */}\n        <TableContainer\n          data-cy=\"browseScheduleTable\"\n          className={classes.tableMain}\n        >\n          <Table stickyHeader aria-label=\"simple table\">\n            <TableHead className={classes.tableHead}>\n              {/* Step Name */}\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography>\n                  {t('workflowDetailsView.tableView.tableHeader.stepName')}\n                </Typography>\n              </StyledTableCell>\n\n              {/* Status */}\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography>\n                  {t('workflowDetailsView.tableView.tableHeader.status')}\n                </Typography>\n              </StyledTableCell>\n\n              {/* Duration of Node execution */}\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography>\n                  {t('workflowDetailsView.tableView.tableHeader.duration')}\n                </Typography>\n              </StyledTableCell>\n\n              {/* Start Time */}\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography>\n                  {t('workflowDetailsView.tableView.tableHeader.startTime')}\n                </Typography>\n              </StyledTableCell>\n\n              {/* Application Details */}\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography>\n                  {t(\n                    'workflowDetailsView.tableView.tableHeader.applicationDetails'\n                  )}\n                </Typography>\n              </StyledTableCell>\n\n              <StyledTableCell className={classes.tableCellWidth}>\n                <Typography />\n              </StyledTableCell>\n            </TableHead>\n\n            {/* Table Body Section */}\n            <TableBody>\n              {(nodesArray as SelectedNodeType[])\n                .slice(\n                  paginationData.pageNo * paginationData.rowsPerPage,\n                  paginationData.pageNo * paginationData.rowsPerPage +\n                    paginationData.rowsPerPage\n                )\n                .map((node: SelectedNodeType) => {\n                  const stepYAML = stepEmbeddedYAMLExtractor(\n                    manifest,\n                    node.name\n                  );\n                  return (\n                    <TableRow key={node.id} className={classes.tableRows}>\n                      <TableData\n                        onViewLogsClick={() => changeNodeLogs(node.id)}\n                        embeddedYAML={stepYAML}\n                        data={node}\n                        handleClose={() => handleClose()}\n                      />\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        {/* Pagination Section */}\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={nodesArray.length}\n          rowsPerPage={paginationData.rowsPerPage}\n          page={paginationData.pageNo}\n          onChangePage={(_, page) =>\n            setPaginationData({ ...paginationData, pageNo: page })\n          }\n          onChangeRowsPerPage={(event) => {\n            setPaginationData({\n              ...paginationData,\n              pageNo: 0,\n              rowsPerPage: parseInt(event.target.value, 10),\n            });\n          }}\n          className={classes.pagination}\n        />\n      </Paper>\n    </>\n  );\n};\nexport default NodeTable;\n"]},"metadata":{},"sourceType":"module"}