{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseAWorkflowAgent/index.tsx\";\n\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { RadioGroup, Typography, useTheme } from '@material-ui/core';\nimport { ButtonOutlined, LitmusCard, Modal, RadioButton, Search } from 'litmus-ui';\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { AgentDeployModal } from '../../../components/AgentDeployModal';\nimport { constants } from '../../../constants';\nimport { GET_CLUSTER, GET_IMAGE_REGISTRY, LIST_IMAGE_REGISTRY } from '../../../graphql';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as ImageRegistryActions from '../../../redux/actions/image_registry';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { getProjectID, getProjectRole } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\nimport Loader from '../../../components/Loader';\nvar ChooseWorkflowAgent = forwardRef(function (_, ref) {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var workflow = useActions(WorkflowActions);\n  var alert = useActions(AlertActions);\n  var imageRegistry = useActions(ImageRegistryActions);\n  var clusterid = useSelector(function (state) {\n    return state.workflowData.clusterid;\n  });\n  var selectedProjectID = getProjectID();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clusterData = _useState2[0],\n      setClusterData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentlySelectedAgent = _useState6[0],\n      setCurrentlySelectedAgent = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalOpen = _useState8[0],\n      setModalOpen = _useState8[1];\n\n  var toggleModel = function toggleModel() {\n    setModalOpen(!modalOpen);\n  };\n\n  var _useLazyQuery = useLazyQuery(GET_IMAGE_REGISTRY, {\n    fetchPolicy: 'network-only',\n    onCompleted: function onCompleted(data) {\n      if (data !== undefined) {\n        var regData = data.GetImageRegistry.image_registry_info;\n        imageRegistry.selectImageRegistry({\n          image_registry_name: regData.image_registry_name,\n          image_repo_name: regData.image_repo_name,\n          image_registry_type: regData.image_registry_type,\n          secret_name: regData.secret_name,\n          secret_namespace: regData.secret_namespace,\n          enable_registry: regData.enable_registry\n        });\n      }\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getRegistryData = _useLazyQuery2[0];\n\n  useQuery(LIST_IMAGE_REGISTRY, {\n    variables: {\n      data: selectedProjectID\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: function onCompleted(data) {\n      if (data.ListImageRegistry !== null && data.ListImageRegistry.length > 0) {\n        getRegistryData({\n          variables: {\n            registryid: data.ListImageRegistry[0].image_registry_id,\n            projectid: selectedProjectID\n          }\n        });\n      } else {\n        imageRegistry.selectImageRegistry({\n          image_registry_name: constants.dockerio,\n          image_repo_name: constants.litmus,\n          image_registry_type: constants.public,\n          secret_name: '',\n          secret_namespace: '',\n          enable_registry: true\n        });\n      }\n    }\n  });\n\n  var _useLazyQuery3 = useLazyQuery(GET_CLUSTER, {\n    onCompleted: function onCompleted(data) {\n      var clusters = [];\n\n      if (data && data.getCluster.length !== 0) {\n        data.getCluster.forEach(function (e) {\n          if (e.is_active === true) {\n            // Populating all the cluster data in the clusters[] array\n            clusters.push({\n              cluster_name: e.cluster_name,\n              is_active: e.is_active,\n              cluster_id: e.cluster_id,\n              agent_namespace: e.agent_namespace\n            }); // Setting the initial workflow yaml to be of type Workflow\n\n            // Setting the initial workflow yaml to be of type Workflow\n            workflow.setWorkflowDetails({\n              clusterid: '',\n              cronSyntax: '',\n              scheduleType: {\n                scheduleOnce: 'now',\n                recurringSchedule: ''\n              },\n              scheduleInput: {\n                hour_interval: 0,\n                day: 1,\n                weekday: 'Monday',\n                time: new Date(),\n                date: new Date()\n              },\n              workflowIcon: ''\n            });\n          }\n        });\n        setClusterData(clusters);\n      }\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      _useLazyQuery4 = _slicedToArray(_useLazyQuery3, 2),\n      getCluster = _useLazyQuery4[0],\n      loading = _useLazyQuery4[1].loading;\n\n  function onNext() {\n    if (getProjectRole() === 'Viewer') {\n      alert.changeAlertState(true);\n      return false;\n    }\n\n    if (clusterid === '' || clusterData.length === 0) {\n      alert.changeAlertState(true); // No Cluster has been selected and user clicked on Next\n\n      return false;\n    }\n\n    return true;\n  } // Rendering once to get the cluster data\n\n\n  useEffect(function () {\n    getCluster({\n      variables: {\n        project_id: selectedProjectID\n      }\n    });\n  }, []);\n\n  var handleChange = function handleChange(event) {\n    setCurrentlySelectedAgent(event.target.value);\n  }; // Filter the clusters based on search results\n\n\n  var filteredCluster = clusterData.filter(function (cluster) {\n    if (search === null) return cluster;\n    if (cluster.cluster_name.toLowerCase().includes(search.toLowerCase())) return cluster;\n    return null;\n  }); // Rendering atleast a few times till it updates the currentlySelectedAgent value\n\n  useEffect(function () {\n    if (currentlySelectedAgent !== '') {\n      clusterData.forEach(function (cluster) {\n        if (currentlySelectedAgent === cluster.cluster_id) {\n          workflow.setWorkflowDetails({\n            clusterid: cluster.cluster_id,\n            project_id: selectedProjectID,\n            clustername: cluster.cluster_name,\n            namespace: cluster.agent_namespace\n          });\n        }\n      });\n    }\n  }, [currentlySelectedAgent]);\n  useImperativeHandle(ref, function () {\n    return {\n      onNext: onNext\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-label\": \"header\",\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-label\": \"headerLeft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }, \" \", t('workflowAgent.header.chooseAgent'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.subtitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }, t('workflowAgent.header.creatingNew'), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 55\n    }\n  }), t('workflowAgent.header.selectAgent'))), /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-label\": \"headerRight\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/dart.svg\",\n    className: classes.check,\n    alt: \"Check\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    \"data-cy\": \"agentSearch\",\n    id: \"input-with-icon-textfield\",\n    placeholder: t('workflowAgent.search.placeholder'),\n    value: search,\n    onChange: function onChange(event) {\n      return setSearch(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }) : clusterData.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noAgents,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.noAgentsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }, t('workflowAgent.noAgents'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.connectAgent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, t('workflowAgent.connectAgent')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.connectBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: toggleModel,\n    className: classes.infoContainerButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowUpwardIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 19\n    }\n  }), t('homeViews.agentConfiguredHome.agentInfoContainer.deploy'))), /*#__PURE__*/React.createElement(Modal, {\n    height: \"50%\",\n    width: \"50%\",\n    open: modalOpen,\n    onClose: toggleModel,\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: toggleModel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 19\n      }\n    }, \"\\u2715\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AgentDeployModal, {\n    handleClose: toggleModel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  })))) : /*#__PURE__*/React.createElement(RadioGroup, {\n    name: \"Agent Selection\",\n    value: currentlySelectedAgent,\n    onChange: function onChange(e) {\n      return handleChange(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.agentWrapperDiv,\n    \"data-cy\": \"AgentsRadioGroup\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, (filteredCluster === null || filteredCluster === void 0 ? void 0 : filteredCluster.length) > 0 ? filteredCluster.map(function (cluster) {\n    return /*#__PURE__*/React.createElement(LitmusCard, {\n      key: cluster.cluster_id,\n      glow: currentlySelectedAgent === cluster.cluster_id,\n      width: \"40%\",\n      height: \"4rem\",\n      className: classes.litmusCard,\n      borderColor: currentlySelectedAgent === cluster.cluster_id ? palette.primary.main : palette.border.main,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(RadioButton, {\n      value: cluster.cluster_id,\n      className: classes.agentRadioButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 25\n      }\n    }, cluster.cluster_name), /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 25\n      }\n    }, cluster.cluster_id))));\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noAgentsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 21\n    }\n  }, t('workflowAgent.noAgentSearch'))))))));\n});\nexport default ChooseWorkflowAgent;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseAWorkflowAgent/index.tsx"],"names":["useLazyQuery","useQuery","RadioGroup","Typography","useTheme","ButtonOutlined","LitmusCard","Modal","RadioButton","Search","React","forwardRef","useEffect","useImperativeHandle","useState","useTranslation","useSelector","ArrowUpwardIcon","AgentDeployModal","constants","GET_CLUSTER","GET_IMAGE_REGISTRY","LIST_IMAGE_REGISTRY","useActions","AlertActions","ImageRegistryActions","WorkflowActions","getProjectID","getProjectRole","useStyles","Loader","ChooseWorkflowAgent","_","ref","classes","t","palette","workflow","alert","imageRegistry","clusterid","state","workflowData","selectedProjectID","clusterData","setClusterData","search","setSearch","currentlySelectedAgent","setCurrentlySelectedAgent","modalOpen","setModalOpen","toggleModel","fetchPolicy","onCompleted","data","undefined","regData","GetImageRegistry","image_registry_info","selectImageRegistry","image_registry_name","image_repo_name","image_registry_type","secret_name","secret_namespace","enable_registry","getRegistryData","variables","ListImageRegistry","length","registryid","image_registry_id","projectid","dockerio","litmus","public","clusters","getCluster","forEach","e","is_active","push","cluster_name","cluster_id","agent_namespace","setWorkflowDetails","cronSyntax","scheduleType","scheduleOnce","recurringSchedule","scheduleInput","hour_interval","day","weekday","time","Date","date","workflowIcon","loading","onNext","changeAlertState","project_id","handleChange","event","target","value","filteredCluster","filter","cluster","toLowerCase","includes","clustername","namespace","root","innerContainer","header","title","subtitle","check","noAgents","noAgentsText","connectAgent","connectBtn","infoContainerButton","agentWrapperDiv","map","litmusCard","primary","main","border","agentRadioButton"],"mappings":";;;;;AAAA,SAASA,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,mBAAjD;AACA,SACEC,cADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,WAJF,EAKEC,MALF,QAMO,WANP;AAOA,OAAOC,KAAP,IACEC,UADF,EAEEC,SAFF,EAGEC,mBAHF,EAIEC,QAJF,QAKO,OALP;AAMA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SACEC,WADF,EAEEC,kBAFF,EAGEC,mBAHF,QAIO,kBAJP;AAMA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,8BAA9B;AACA,OAAO,KAAKC,oBAAZ,MAAsC,uCAAtC;AACA,OAAO,KAAKC,eAAZ,MAAiC,iCAAjC;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gCAA7C;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AASA,IAAMC,mBAAmB,GAAGpB,UAAU,CAAC,UAACqB,CAAD,EAAIC,GAAJ,EAAY;AACjD,MAAMC,OAAO,GAAGL,SAAS,EAAzB;;AACA,wBAAcd,cAAc,EAA5B;AAAA,MAAQoB,CAAR,mBAAQA,CAAR;;AACA,kBAAoB/B,QAAQ,EAA5B;AAAA,MAAQgC,OAAR,aAAQA,OAAR;;AAEA,MAAMC,QAAQ,GAAGd,UAAU,CAACG,eAAD,CAA3B;AACA,MAAMY,KAAK,GAAGf,UAAU,CAACC,YAAD,CAAxB;AACA,MAAMe,aAAa,GAAGhB,UAAU,CAACE,oBAAD,CAAhC;AACA,MAAMe,SAAiB,GAAGxB,WAAW,CACnC,UAACyB,KAAD;AAAA,WAAsBA,KAAK,CAACC,YAAN,CAAmBF,SAAzC;AAAA,GADmC,CAArC;AAGA,MAAMG,iBAAiB,GAAGhB,YAAY,EAAtC;;AAEA,kBAAsCb,QAAQ,CAAY,EAAZ,CAA9C;AAAA;AAAA,MAAO8B,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAA4B/B,QAAQ,CAAgB,IAAhB,CAApC;AAAA;AAAA,MAAOgC,MAAP;AAAA,MAAeC,SAAf;;AACA,mBACEjC,QAAQ,CAAS,EAAT,CADV;AAAA;AAAA,MAAOkC,sBAAP;AAAA,MAA+BC,yBAA/B;;AAGA,mBAAkCnC,QAAQ,CAAU,KAAV,CAA1C;AAAA;AAAA,MAAOoC,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBD,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAIA,sBAA0BlD,YAAY,CAACqB,kBAAD,EAAqB;AACzDgC,IAAAA,WAAW,EAAE,cAD4C;AAEzDC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAU;AACrB,UAAIA,IAAI,KAAKC,SAAb,EAAwB;AACtB,YAAMC,OAAO,GAAGF,IAAI,CAACG,gBAAL,CACbC,mBADH;AAEApB,QAAAA,aAAa,CAACqB,mBAAd,CAAkC;AAChCC,UAAAA,mBAAmB,EAAEJ,OAAO,CAACI,mBADG;AAEhCC,UAAAA,eAAe,EAAEL,OAAO,CAACK,eAFO;AAGhCC,UAAAA,mBAAmB,EAAEN,OAAO,CAACM,mBAHG;AAIhCC,UAAAA,WAAW,EAAEP,OAAO,CAACO,WAJW;AAKhCC,UAAAA,gBAAgB,EAAER,OAAO,CAACQ,gBALM;AAMhCC,UAAAA,eAAe,EAAET,OAAO,CAACS;AANO,SAAlC;AAQD;AACF;AAfwD,GAArB,CAAtC;AAAA;AAAA,MAAOC,eAAP;;AAkBAlE,EAAAA,QAAQ,CAACqB,mBAAD,EAAsB;AAC5B8C,IAAAA,SAAS,EAAE;AACTb,MAAAA,IAAI,EAAEZ;AADG,KADiB;AAI5BU,IAAAA,WAAW,EAAE,cAJe;AAK5BC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAU;AACrB,UACEA,IAAI,CAACc,iBAAL,KAA2B,IAA3B,IACAd,IAAI,CAACc,iBAAL,CAAuBC,MAAvB,GAAgC,CAFlC,EAGE;AACAH,QAAAA,eAAe,CAAC;AACdC,UAAAA,SAAS,EAAE;AACTG,YAAAA,UAAU,EAAEhB,IAAI,CAACc,iBAAL,CAAuB,CAAvB,EAA0BG,iBAD7B;AAETC,YAAAA,SAAS,EAAE9B;AAFF;AADG,SAAD,CAAf;AAMD,OAVD,MAUO;AACLJ,QAAAA,aAAa,CAACqB,mBAAd,CAAkC;AAChCC,UAAAA,mBAAmB,EAAE1C,SAAS,CAACuD,QADC;AAEhCZ,UAAAA,eAAe,EAAE3C,SAAS,CAACwD,MAFK;AAGhCZ,UAAAA,mBAAmB,EAAE5C,SAAS,CAACyD,MAHC;AAIhCZ,UAAAA,WAAW,EAAE,EAJmB;AAKhCC,UAAAA,gBAAgB,EAAE,EALc;AAMhCC,UAAAA,eAAe,EAAE;AANe,SAAlC;AAQD;AACF;AA1B2B,GAAtB,CAAR;;AA6BA,uBAAkClE,YAAY,CAACoB,WAAD,EAAc;AAC1DkC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAU;AACrB,UAAMsB,QAAmB,GAAG,EAA5B;;AACA,UAAItB,IAAI,IAAIA,IAAI,CAACuB,UAAL,CAAgBR,MAAhB,KAA2B,CAAvC,EAA0C;AACxCf,QAAAA,IAAI,CAACuB,UAAL,CAAgBC,OAAhB,CAAwB,UAACC,CAAD,EAAgB;AACtC,cAAIA,CAAC,CAACC,SAAF,KAAgB,IAApB,EAA0B;AACxB;AACAJ,YAAAA,QAAQ,CAACK,IAAT,CAAc;AACZC,cAAAA,YAAY,EAAEH,CAAC,CAACG,YADJ;AAEZF,cAAAA,SAAS,EAAED,CAAC,CAACC,SAFD;AAGZG,cAAAA,UAAU,EAAEJ,CAAC,CAACI,UAHF;AAIZC,cAAAA,eAAe,EAAEL,CAAC,CAACK;AAJP,aAAd,EAFwB,CAQxB;;AAAA;AACAhD,YAAAA,QAAQ,CAACiD,kBAAT,CAA4B;AAC1B9C,cAAAA,SAAS,EAAE,EADe;AAE1B+C,cAAAA,UAAU,EAAE,EAFc;AAG1BC,cAAAA,YAAY,EAAE;AACZC,gBAAAA,YAAY,EAAE,KADF;AAEZC,gBAAAA,iBAAiB,EAAE;AAFP,eAHY;AAO1BC,cAAAA,aAAa,EAAE;AACbC,gBAAAA,aAAa,EAAE,CADF;AAEbC,gBAAAA,GAAG,EAAE,CAFQ;AAGbC,gBAAAA,OAAO,EAAE,QAHI;AAIbC,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,EAJO;AAKbC,gBAAAA,IAAI,EAAE,IAAID,IAAJ;AALO,eAPW;AAc1BE,cAAAA,YAAY,EAAE;AAdY,aAA5B;AAgBD;AACF,SA3BD;AA4BArD,QAAAA,cAAc,CAACgC,QAAD,CAAd;AACD;AACF,KAlCyD;AAmC1DxB,IAAAA,WAAW,EAAE;AAnC6C,GAAd,CAA9C;AAAA;AAAA,MAAOyB,UAAP;AAAA,MAAqBqB,OAArB,qBAAqBA,OAArB;;AAsCA,WAASC,MAAT,GAAkB;AAChB,QAAIxE,cAAc,OAAO,QAAzB,EAAmC;AACjCU,MAAAA,KAAK,CAAC+D,gBAAN,CAAuB,IAAvB;AACA,aAAO,KAAP;AACD;;AACD,QAAI7D,SAAS,KAAK,EAAd,IAAoBI,WAAW,CAAC0B,MAAZ,KAAuB,CAA/C,EAAkD;AAChDhC,MAAAA,KAAK,CAAC+D,gBAAN,CAAuB,IAAvB,EADgD,CAClB;;AAC9B,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GAvHgD,CAyHjD;;;AACAzF,EAAAA,SAAS,CAAC,YAAM;AACdkE,IAAAA,UAAU,CAAC;AAAEV,MAAAA,SAAS,EAAE;AAAEkC,QAAAA,UAAU,EAAE3D;AAAd;AAAb,KAAD,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAM4D,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAgD;AACnEvD,IAAAA,yBAAyB,CAACuD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAzB;AACD,GAFD,CA9HiD,CAkIjD;;;AACA,MAAMC,eAAe,GAAG/D,WAAW,CAACgE,MAAZ,CAAmB,UAACC,OAAD,EAAsB;AAC/D,QAAI/D,MAAM,KAAK,IAAf,EAAqB,OAAO+D,OAAP;AACrB,QAAIA,OAAO,CAAC1B,YAAR,CAAqB2B,WAArB,GAAmCC,QAAnC,CAA4CjE,MAAM,CAACgE,WAAP,EAA5C,CAAJ,EACE,OAAOD,OAAP;AACF,WAAO,IAAP;AACD,GALuB,CAAxB,CAnIiD,CA0IjD;;AACAjG,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIoC,sBAAsB,KAAK,EAA/B,EAAmC;AACjCJ,MAAAA,WAAW,CAACmC,OAAZ,CAAoB,UAAC8B,OAAD,EAAa;AAC/B,YAAI7D,sBAAsB,KAAK6D,OAAO,CAACzB,UAAvC,EAAmD;AACjD/C,UAAAA,QAAQ,CAACiD,kBAAT,CAA4B;AAC1B9C,YAAAA,SAAS,EAAEqE,OAAO,CAACzB,UADO;AAE1BkB,YAAAA,UAAU,EAAE3D,iBAFc;AAG1BqE,YAAAA,WAAW,EAAEH,OAAO,CAAC1B,YAHK;AAI1B8B,YAAAA,SAAS,EAAEJ,OAAO,CAACxB;AAJO,WAA5B;AAMD;AACF,OATD;AAUD;AACF,GAbQ,EAaN,CAACrC,sBAAD,CAbM,CAAT;AAeAnC,EAAAA,mBAAmB,CAACoB,GAAD,EAAM;AAAA,WAAO;AAC9BmE,MAAAA,MAAM,EAANA;AAD8B,KAAP;AAAA,GAAN,CAAnB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAElE,OAAO,CAACgF,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEhF,OAAO,CAACiF,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,kBAAW,QAAhB;AAAyB,IAAA,SAAS,EAAEjF,OAAO,CAACkF,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,kBAAW,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAElF,OAAO,CAACmF,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAUlF,CAAC,CAAC,kCAAD,CAAX,CADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAED,OAAO,CAACoF,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnF,CAAC,CAAC,kCAAD,CADJ,oBAC0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1C,EAEGA,CAAC,CAAC,kCAAD,CAFJ,CAJF,CADF,eAWE;AAAK,kBAAW,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,kBAAT;AAA4B,IAAA,SAAS,EAAED,OAAO,CAACqF,KAA/C;AAAsD,IAAA,GAAG,EAAC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,CAFF,eAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,eAoBE,oBAAC,MAAD;AACE,eAAQ,aADV;AAEE,IAAA,EAAE,EAAC,2BAFL;AAGE,IAAA,WAAW,EAAEpF,CAAC,CAAC,kCAAD,CAHhB;AAIE,IAAA,KAAK,EAAEW,MAJT;AAKE,IAAA,QAAQ,EAAE,kBAAC0D,KAAD;AAAA,aAAWzD,SAAS,CAACyD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAApB;AAAA,KALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,EA6BGP,OAAO,gBACN,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAEJvD,WAAW,CAAC0B,MAAZ,KAAuB,CAAvB,gBACF;AAAK,IAAA,SAAS,EAAEpC,OAAO,CAACsF,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtF,OAAO,CAACuF,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAStF,CAAC,CAAC,wBAAD,CAAV,CADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAED,OAAO,CAACwF,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvF,CAAC,CAAC,4BAAD,CADJ,CAJF,eAOE;AAAK,IAAA,SAAS,EAAED,OAAO,CAACyF,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEvE,WADX;AAEE,IAAA,SAAS,EAAElB,OAAO,CAAC0F,mBAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGzF,CAAC,CAAC,yDAAD,CAFJ,CAJF,CADF,eAWE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAC,KADT;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,IAAI,EAAEe,SAHR;AAIE,IAAA,OAAO,EAAEE,WAJX;AAKE,IAAA,YAAY,eACV,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEA,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE,oBAAC,gBAAD;AAAkB,IAAA,WAAW,EAAEA,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAXF,CAPF,CADE,gBAmCF,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,KAAK,EAAEJ,sBAFT;AAGE,IAAA,QAAQ,EAAE,kBAACgC,CAAD;AAAA,aAAOuB,YAAY,CAACvB,CAAD,CAAnB;AAAA,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,IAAA,SAAS,EAAE9C,OAAO,CAAC2F,eAAxB;AAAyC,eAAQ,kBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAlB,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAErC,MAAjB,IAA0B,CAA1B,GACCqC,eAAe,CAACmB,GAAhB,CAAoB,UAACjB,OAAD;AAAA,wBAClB,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEA,OAAO,CAACzB,UADf;AAEE,MAAA,IAAI,EAAEpC,sBAAsB,KAAK6D,OAAO,CAACzB,UAF3C;AAGE,MAAA,KAAK,EAAC,KAHR;AAIE,MAAA,MAAM,EAAC,MAJT;AAKE,MAAA,SAAS,EAAElD,OAAO,CAAC6F,UALrB;AAME,MAAA,WAAW,EACT/E,sBAAsB,KAAK6D,OAAO,CAACzB,UAAnC,GACIhD,OAAO,CAAC4F,OAAR,CAAgBC,IADpB,GAEI7F,OAAO,CAAC8F,MAAR,CAAeD,IATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYE,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEpB,OAAO,CAACzB,UADjB;AAEE,MAAA,SAAS,EAAElD,OAAO,CAACiG,gBAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAatB,OAAO,CAAC1B,YAArB,CADF,eAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAa0B,OAAO,CAACzB,UAArB,CAFF,CAJF,CAZF,CADkB;AAAA,GAApB,CADD,gBA0BC;AAAK,IAAA,SAAS,EAAElD,OAAO,CAACuF,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAStF,CAAC,CAAC,6BAAD,CAAV,CADF,CADF,CA3BJ,CALF,CAlEJ,CADF,CADF;AAgHD,CA9QqC,CAAtC;AAgRA,eAAeJ,mBAAf","sourcesContent":["import { useLazyQuery, useQuery } from '@apollo/client';\nimport { RadioGroup, Typography, useTheme } from '@material-ui/core';\nimport {\n  ButtonOutlined,\n  LitmusCard,\n  Modal,\n  RadioButton,\n  Search,\n} from 'litmus-ui';\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { AgentDeployModal } from '../../../components/AgentDeployModal';\nimport { constants } from '../../../constants';\nimport {\n  GET_CLUSTER,\n  GET_IMAGE_REGISTRY,\n  LIST_IMAGE_REGISTRY,\n} from '../../../graphql';\nimport { ImageRegistryInfo } from '../../../models/redux/image_registry';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as ImageRegistryActions from '../../../redux/actions/image_registry';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { getProjectID, getProjectRole } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\nimport Loader from '../../../components/Loader';\n\ninterface Cluster {\n  cluster_name: string;\n  is_active: boolean;\n  cluster_id: string;\n  agent_namespace: string;\n}\n\nconst ChooseWorkflowAgent = forwardRef((_, ref) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { palette } = useTheme();\n\n  const workflow = useActions(WorkflowActions);\n  const alert = useActions(AlertActions);\n  const imageRegistry = useActions(ImageRegistryActions);\n  const clusterid: string = useSelector(\n    (state: RootState) => state.workflowData.clusterid\n  );\n  const selectedProjectID = getProjectID();\n\n  const [clusterData, setClusterData] = useState<Cluster[]>([]);\n  const [search, setSearch] = useState<string | null>(null);\n  const [currentlySelectedAgent, setCurrentlySelectedAgent] =\n    useState<string>('');\n\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  const toggleModel = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  const [getRegistryData] = useLazyQuery(GET_IMAGE_REGISTRY, {\n    fetchPolicy: 'network-only',\n    onCompleted: (data) => {\n      if (data !== undefined) {\n        const regData = data.GetImageRegistry\n          .image_registry_info as ImageRegistryInfo;\n        imageRegistry.selectImageRegistry({\n          image_registry_name: regData.image_registry_name,\n          image_repo_name: regData.image_repo_name,\n          image_registry_type: regData.image_registry_type,\n          secret_name: regData.secret_name,\n          secret_namespace: regData.secret_namespace,\n          enable_registry: regData.enable_registry,\n        });\n      }\n    },\n  });\n\n  useQuery(LIST_IMAGE_REGISTRY, {\n    variables: {\n      data: selectedProjectID,\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: (data) => {\n      if (\n        data.ListImageRegistry !== null &&\n        data.ListImageRegistry.length > 0\n      ) {\n        getRegistryData({\n          variables: {\n            registryid: data.ListImageRegistry[0].image_registry_id,\n            projectid: selectedProjectID,\n          },\n        });\n      } else {\n        imageRegistry.selectImageRegistry({\n          image_registry_name: constants.dockerio,\n          image_repo_name: constants.litmus,\n          image_registry_type: constants.public,\n          secret_name: '',\n          secret_namespace: '',\n          enable_registry: true,\n        });\n      }\n    },\n  });\n\n  const [getCluster, { loading }] = useLazyQuery(GET_CLUSTER, {\n    onCompleted: (data) => {\n      const clusters: Cluster[] = [];\n      if (data && data.getCluster.length !== 0) {\n        data.getCluster.forEach((e: Cluster) => {\n          if (e.is_active === true) {\n            // Populating all the cluster data in the clusters[] array\n            clusters.push({\n              cluster_name: e.cluster_name,\n              is_active: e.is_active,\n              cluster_id: e.cluster_id,\n              agent_namespace: e.agent_namespace,\n            });\n            // Setting the initial workflow yaml to be of type Workflow\n            workflow.setWorkflowDetails({\n              clusterid: '',\n              cronSyntax: '',\n              scheduleType: {\n                scheduleOnce: 'now',\n                recurringSchedule: '',\n              },\n              scheduleInput: {\n                hour_interval: 0,\n                day: 1,\n                weekday: 'Monday',\n                time: new Date(),\n                date: new Date(),\n              },\n              workflowIcon: '',\n            });\n          }\n        });\n        setClusterData(clusters);\n      }\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  function onNext() {\n    if (getProjectRole() === 'Viewer') {\n      alert.changeAlertState(true);\n      return false;\n    }\n    if (clusterid === '' || clusterData.length === 0) {\n      alert.changeAlertState(true); // No Cluster has been selected and user clicked on Next\n      return false;\n    }\n    return true;\n  }\n\n  // Rendering once to get the cluster data\n  useEffect(() => {\n    getCluster({ variables: { project_id: selectedProjectID } });\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentlySelectedAgent(event.target.value);\n  };\n\n  // Filter the clusters based on search results\n  const filteredCluster = clusterData.filter((cluster: Cluster) => {\n    if (search === null) return cluster;\n    if (cluster.cluster_name.toLowerCase().includes(search.toLowerCase()))\n      return cluster;\n    return null;\n  });\n\n  // Rendering atleast a few times till it updates the currentlySelectedAgent value\n  useEffect(() => {\n    if (currentlySelectedAgent !== '') {\n      clusterData.forEach((cluster) => {\n        if (currentlySelectedAgent === cluster.cluster_id) {\n          workflow.setWorkflowDetails({\n            clusterid: cluster.cluster_id,\n            project_id: selectedProjectID,\n            clustername: cluster.cluster_name,\n            namespace: cluster.agent_namespace,\n          });\n        }\n      });\n    }\n  }, [currentlySelectedAgent]);\n\n  useImperativeHandle(ref, () => ({\n    onNext,\n  }));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.innerContainer}>\n        {/* Header */}\n        <div aria-label=\"header\" className={classes.header}>\n          <div aria-label=\"headerLeft\">\n            <Typography className={classes.title}>\n              <strong> {t('workflowAgent.header.chooseAgent')}</strong>\n            </Typography>\n            <Typography className={classes.subtitle}>\n              {t('workflowAgent.header.creatingNew')} <br />\n              {t('workflowAgent.header.selectAgent')}\n            </Typography>\n          </div>\n          {/* Dart Icon */}\n          <div aria-label=\"headerRight\">\n            <img src=\"./icons/dart.svg\" className={classes.check} alt=\"Check\" />\n          </div>\n        </div>\n\n        <br />\n        {/* Search Bar */}\n        <Search\n          data-cy=\"agentSearch\"\n          id=\"input-with-icon-textfield\"\n          placeholder={t('workflowAgent.search.placeholder')}\n          value={search}\n          onChange={(event) => setSearch(event.target.value)}\n        />\n\n        {/* Cluster Data */}\n        {loading ? (\n          <Loader />\n        ) : clusterData.length === 0 ? (\n          <div className={classes.noAgents}>\n            <Typography className={classes.noAgentsText}>\n              <strong>{t('workflowAgent.noAgents')}</strong>\n            </Typography>\n            <Typography className={classes.connectAgent}>\n              {t('workflowAgent.connectAgent')}\n            </Typography>\n            <div className={classes.connectBtn}>\n              <ButtonOutlined\n                onClick={toggleModel}\n                className={classes.infoContainerButton}\n              >\n                <Typography>\n                  <ArrowUpwardIcon />\n                  {t('homeViews.agentConfiguredHome.agentInfoContainer.deploy')}\n                </Typography>\n              </ButtonOutlined>\n\n              <Modal\n                height=\"50%\"\n                width=\"50%\"\n                open={modalOpen}\n                onClose={toggleModel}\n                modalActions={\n                  <ButtonOutlined onClick={toggleModel}>\n                    &#x2715;\n                  </ButtonOutlined>\n                }\n              >\n                <AgentDeployModal handleClose={toggleModel} />\n              </Modal>\n            </div>\n          </div>\n        ) : (\n          <RadioGroup\n            name=\"Agent Selection\"\n            value={currentlySelectedAgent}\n            onChange={(e) => handleChange(e)}\n          >\n            <div className={classes.agentWrapperDiv} data-cy=\"AgentsRadioGroup\">\n              {filteredCluster?.length > 0 ? (\n                filteredCluster.map((cluster) => (\n                  <LitmusCard\n                    key={cluster.cluster_id}\n                    glow={currentlySelectedAgent === cluster.cluster_id}\n                    width=\"40%\"\n                    height=\"4rem\"\n                    className={classes.litmusCard}\n                    borderColor={\n                      currentlySelectedAgent === cluster.cluster_id\n                        ? palette.primary.main\n                        : palette.border.main\n                    }\n                  >\n                    <RadioButton\n                      value={cluster.cluster_id}\n                      className={classes.agentRadioButton}\n                    >\n                      <div>\n                        <Typography>{cluster.cluster_name}</Typography>\n                        <Typography>{cluster.cluster_id}</Typography>\n                      </div>\n                    </RadioButton>\n                  </LitmusCard>\n                ))\n              ) : (\n                <div className={classes.noAgentsText}>\n                  <Typography>\n                    <strong>{t('workflowAgent.noAgentSearch')}</strong>\n                  </Typography>\n                </div>\n              )}\n            </div>\n          </RadioGroup>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default ChooseWorkflowAgent;\n"]},"metadata":{},"sourceType":"module"}