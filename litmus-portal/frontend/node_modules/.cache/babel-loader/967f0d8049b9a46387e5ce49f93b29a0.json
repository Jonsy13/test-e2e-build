{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/Cards/UploadDashboard/index.tsx\";\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useActions from '../../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../../redux/actions/dashboards';\nimport useStyles from './styles';\n\nvar UploadJSON = function UploadJSON(_ref) {\n  var successHandler = _ref.successHandler,\n      errorHandler = _ref.errorHandler;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      uploadedJSON = _useState2[0],\n      setUploadedJSON = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fileName = _useState6[0],\n      setFileName = _useState6[1];\n\n  var dashboard = useActions(DashboardActions); // Function to handle when a File is dragged on the upload field\n\n  var handleDrag = function handleDrag(e) {\n    Array.from(e.dataTransfer.files).filter(function (file) {\n      return file.name.split('.')[1] === 'json';\n    }).forEach( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var readFile, parsedDashboard;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return file.text();\n\n              case 2:\n                readFile = _context.sent;\n                setUploadedJSON(readFile);\n                setFileName(file.name);\n                _context.prev = 5;\n                parsedDashboard = JSON.parse(readFile);\n                dashboard.selectDashboard({\n                  selectedDashboardID: 'upload',\n                  dashboardJSON: parsedDashboard\n                });\n\n                if (!parsedDashboard.panelGroups[0].panels[0].prom_queries[0].prom_query_name) {\n                  _context.next = 12;\n                  break;\n                }\n\n                successHandler();\n                _context.next = 13;\n                break;\n\n              case 12:\n                throw new Error('Invalid dashboard.');\n\n              case 13:\n                _context.next = 19;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](5);\n                setError(_context.t0.toString());\n                errorHandler();\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[5, 15]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }; // Function to handle File upload on button click\n\n\n  var handleFileUpload = function handleFileUpload(e) {\n    var readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    var extension = readFile === null || readFile === void 0 ? void 0 : readFile.name.substring(readFile.name.lastIndexOf('.') + 1);\n\n    if (extension === 'json' && readFile) {\n      readFile.text().then(function (response) {\n        setUploadedJSON(response);\n\n        try {\n          var parsedDashboard = JSON.parse(response);\n          dashboard.selectDashboard({\n            selectedDashboardID: 'upload',\n            dashboardJSON: parsedDashboard\n          });\n\n          if (parsedDashboard.panelGroups[0].panels[0].prom_queries[0].prom_query_name) {\n            successHandler();\n          } else {\n            throw new Error('Invalid dashboard.');\n          }\n        } catch (err) {\n          setError(err.toString());\n          errorHandler();\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    component: \"div\",\n    onDragOver: function onDragOver(e) {\n      e.preventDefault();\n    },\n    onDrop: function onDrop(e) {\n      e.preventDefault();\n      handleDrag(e);\n    },\n    className: classes.uploadJSONDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, uploadedJSON === '' || error !== '' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadJSONText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/upload-dashboard.svg\",\n    alt: \"upload json\",\n    className: classes.uploadImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.option1')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.orText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.or')), /*#__PURE__*/React.createElement(\"input\", {\n    accept: \".json\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      handleFileUpload(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.uploadBtn,\n    component: \"span\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.option2'))))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadSuccessDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/upload-success.svg\",\n    alt: \"checkmark\",\n    className: classes.uploadSuccessImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.uploadSuccessText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.successMessage'), ' ', fileName)));\n};\n\nexport default UploadJSON;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/Cards/UploadDashboard/index.tsx"],"names":["Button","Paper","Typography","React","useState","useTranslation","useActions","DashboardActions","useStyles","UploadJSON","successHandler","errorHandler","classes","t","uploadedJSON","setUploadedJSON","error","setError","fileName","setFileName","dashboard","handleDrag","e","Array","from","dataTransfer","files","filter","file","name","split","forEach","text","readFile","parsedDashboard","JSON","parse","selectDashboard","selectedDashboardID","dashboardJSON","panelGroups","panels","prom_queries","prom_query_name","Error","toString","handleFileUpload","target","extension","substring","lastIndexOf","then","response","err","preventDefault","uploadJSONDiv","uploadJSONText","uploadImage","orText","display","uploadBtn","uploadSuccessDiv","uploadSuccessImg","uploadSuccessText"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ApplicationDashboard } from '../../../../../../../models/redux/dashboards';\nimport useActions from '../../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../../redux/actions/dashboards';\nimport useStyles from './styles';\n\ninterface UploadJSONProps {\n  successHandler: () => void;\n  errorHandler: () => void;\n}\nconst UploadJSON: React.FC<UploadJSONProps> = ({\n  successHandler,\n  errorHandler,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [uploadedJSON, setUploadedJSON] = useState('');\n  const [error, setError] = useState('');\n  const [fileName, setFileName] = useState<string | null>('');\n  const dashboard = useActions(DashboardActions);\n\n  // Function to handle when a File is dragged on the upload field\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    Array.from(e.dataTransfer.files)\n      .filter((file) => file.name.split('.')[1] === 'json')\n      .forEach(async (file) => {\n        const readFile = await file.text();\n        setUploadedJSON(readFile);\n        setFileName(file.name);\n        try {\n          const parsedDashboard: ApplicationDashboard = JSON.parse(readFile);\n          dashboard.selectDashboard({\n            selectedDashboardID: 'upload',\n            dashboardJSON: parsedDashboard,\n          });\n          if (\n            parsedDashboard.panelGroups[0].panels[0].prom_queries[0]\n              .prom_query_name\n          ) {\n            successHandler();\n          } else {\n            throw new Error('Invalid dashboard.');\n          }\n        } catch (err) {\n          setError((err as any).toString());\n          errorHandler();\n        }\n      });\n  };\n\n  // Function to handle File upload on button click\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    const extension = readFile?.name.substring(\n      readFile.name.lastIndexOf('.') + 1\n    );\n    if (extension === 'json' && readFile) {\n      readFile.text().then((response) => {\n        setUploadedJSON(response);\n        try {\n          const parsedDashboard: ApplicationDashboard = JSON.parse(response);\n          dashboard.selectDashboard({\n            selectedDashboardID: 'upload',\n            dashboardJSON: parsedDashboard,\n          });\n          if (\n            parsedDashboard.panelGroups[0].panels[0].prom_queries[0]\n              .prom_query_name\n          ) {\n            successHandler();\n          } else {\n            throw new Error('Invalid dashboard.');\n          }\n        } catch (err) {\n          setError((err as any).toString());\n          errorHandler();\n        }\n      });\n    }\n  };\n\n  return (\n    <Paper\n      elevation={3}\n      component=\"div\"\n      onDragOver={(e) => {\n        e.preventDefault();\n      }}\n      onDrop={(e) => {\n        e.preventDefault();\n        handleDrag(e);\n      }}\n      className={classes.uploadJSONDiv}\n    >\n      {uploadedJSON === '' || error !== '' ? (\n        <div className={classes.uploadJSONText}>\n          <img\n            src=\"/icons/upload-dashboard.svg\"\n            alt=\"upload json\"\n            className={classes.uploadImage}\n          />\n          <Typography variant=\"h6\">\n            {t(\n              'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.option1'\n            )}\n          </Typography>\n          <Typography className={classes.orText}>\n            {t(\n              'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.or'\n            )}\n          </Typography>\n          <input\n            accept=\".json\"\n            style={{ display: 'none' }}\n            id=\"contained-button-file\"\n            type=\"file\"\n            onChange={(e) => {\n              handleFileUpload(e);\n            }}\n          />\n          <label htmlFor=\"contained-button-file\">\n            <label htmlFor=\"contained-button-file\">\n              <Button\n                variant=\"outlined\"\n                className={classes.uploadBtn}\n                component=\"span\"\n              >\n                {t(\n                  'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.option2'\n                )}\n              </Button>\n            </label>\n          </label>\n        </div>\n      ) : (\n        <div className={classes.uploadSuccessDiv}>\n          <img\n            src=\"/icons/upload-success.svg\"\n            alt=\"checkmark\"\n            className={classes.uploadSuccessImg}\n          />\n          <Typography className={classes.uploadSuccessText}>\n            {t(\n              'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.successMessage'\n            )}{' '}\n            {fileName}\n          </Typography>\n        </div>\n      )}\n    </Paper>\n  );\n};\nexport default UploadJSON;\n"]},"metadata":{},"sourceType":"module"}