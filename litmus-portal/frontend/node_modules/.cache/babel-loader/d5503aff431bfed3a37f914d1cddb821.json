{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/DataSourceInactiveModal/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport useStyles from './styles';\n\nvar DataSourceInactiveModal = function DataSourceInactiveModal(_ref) {\n  var dataSourceStatus = _ref.dataSourceStatus,\n      dashboardID = _ref.dashboardID;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // get ProjectID\n\n\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var dashboard = useActions(DashboardActions);\n  return /*#__PURE__*/React.createElement(Modal, {\n    open: true,\n    onClose: function onClose() {\n      return history.goBack();\n    },\n    width: \"60%\",\n    height: \"fit-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.modalHeading,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, \"\".concat(t('analyticsDashboard.monitoringDashboardPage.dataSourceIs'), \" \").concat(dataSourceStatus)), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    className: classes.modalBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.dataSourceError')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      dashboard.selectDashboard({\n        selectedDashboardID: dashboardID,\n        activePanelID: ''\n      });\n      history.push({\n        pathname: '/analytics/dashboard/configure',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/disconnected.svg\",\n    alt: \"disconnected\",\n    className: classes.buttonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.reConfigureDashboard'))), /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    className: classes.modalBodyText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.or')), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/analytics/datasource/configure',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/disconnected.svg\",\n    alt: \"disconnected\",\n    className: classes.buttonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.updateDataSource'))))));\n};\n\nexport default DataSourceInactiveModal;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/DataSourceInactiveModal/index.tsx"],"names":["Typography","ButtonOutlined","Modal","React","useTranslation","useActions","DashboardActions","history","getProjectID","getProjectRole","useStyles","DataSourceInactiveModal","dataSourceStatus","dashboardID","classes","t","projectID","projectRole","dashboard","goBack","modal","modalHeading","modalBody","flexButtons","selectDashboard","selectedDashboardID","activePanelID","push","pathname","search","buttonIcon","buttonText","modalBodyText"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport useStyles from './styles';\n\ninterface DataSourceInactiveModalProps {\n  dataSourceStatus: string;\n  dashboardID: string;\n}\n\nconst DataSourceInactiveModal: React.FC<DataSourceInactiveModalProps> = ({\n  dataSourceStatus,\n  dashboardID,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  // get ProjectID\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const dashboard = useActions(DashboardActions);\n\n  return (\n    <Modal\n      open\n      onClose={() => history.goBack()}\n      width=\"60%\"\n      height=\"fit-content\"\n    >\n      <div className={classes.modal}>\n        <Typography className={classes.modalHeading} align=\"left\">\n          {`${t(\n            'analyticsDashboard.monitoringDashboardPage.dataSourceIs'\n          )} ${dataSourceStatus}`}\n        </Typography>\n        <Typography align=\"left\" className={classes.modalBody}>\n          {t('analyticsDashboard.monitoringDashboardPage.dataSourceError')}\n        </Typography>\n        <div className={classes.flexButtons}>\n          <ButtonOutlined\n            onClick={() => {\n              dashboard.selectDashboard({\n                selectedDashboardID: dashboardID,\n                activePanelID: '',\n              });\n              history.push({\n                pathname: '/analytics/dashboard/configure',\n                search: `?projectID=${projectID}&projectRole=${projectRole}`,\n              });\n            }}\n          >\n            <img\n              src=\"/icons/disconnected.svg\"\n              alt=\"disconnected\"\n              className={classes.buttonIcon}\n            />\n            <Typography className={classes.buttonText}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.reConfigureDashboard'\n              )}\n            </Typography>\n          </ButtonOutlined>\n          <Typography align=\"left\" className={classes.modalBodyText}>\n            {t('analyticsDashboard.monitoringDashboardPage.or')}\n          </Typography>\n          <ButtonOutlined\n            onClick={() =>\n              history.push({\n                pathname: '/analytics/datasource/configure',\n                search: `?projectID=${projectID}&projectRole=${projectRole}`,\n              })\n            }\n          >\n            <img\n              src=\"/icons/disconnected.svg\"\n              alt=\"disconnected\"\n              className={classes.buttonIcon}\n            />\n            <Typography className={classes.buttonText}>\n              {t('analyticsDashboard.monitoringDashboardPage.updateDataSource')}\n            </Typography>\n          </ButtonOutlined>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default DataSourceInactiveModal;\n"]},"metadata":{},"sourceType":"module"}