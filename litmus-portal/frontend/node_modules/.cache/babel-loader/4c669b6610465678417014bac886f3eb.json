{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Targets/BrowseCluster/index.tsx\";\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../components/Loader';\nimport { DELETE_CLUSTER, GET_CLUSTER } from '../../../graphql';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport { sortAlphaAsc, sortAlphaDesc, sortNumAsc, sortNumDesc } from '../../../utils/sort';\nimport HeaderSection from './HeaderSection';\nimport useStyles from './styles';\nimport TableData from './TableData';\n\nvar BrowseCluster = function BrowseCluster() {\n  var _filteredData$length;\n\n  var classes = useStyles();\n  var projectID = getProjectID();\n\n  var _useState = useState({\n    search: '',\n    status: 'All',\n    cluster: 'All'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var _useQuery = useQuery(GET_CLUSTER, {\n    variables: {\n      project_id: projectID\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 3000\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error; // Apollo mutation to delete the selected Target Cluster\n\n\n  var _useMutation = useMutation(DELETE_CLUSTER),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteCluster = _useMutation2[0];\n\n  var _React$useState = React.useState({\n    dateValue: 'Select a period',\n    fromDate: new Date(0).toString(),\n    toDate: new Date(new Date().setHours(23, 59, 59)).toString()\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dateRange = _React$useState2[0],\n      setDateRange = _React$useState2[1];\n\n  var _useState3 = useState({\n    name: {\n      sort: false,\n      ascending: true\n    },\n    lastRun: {\n      sort: true,\n      ascending: true\n    }\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sortData = _useState4[0],\n      setSortData = _useState4[1];\n\n  var filteredData = data === null || data === void 0 ? void 0 : data.getCluster.filter(function (dataRow) {\n    return dataRow.cluster_name.toLowerCase().includes(filters.search.toLowerCase());\n  }).filter(function (dataRow) {\n    if (filters.status === 'All') {\n      return true;\n    }\n\n    if (!dataRow.is_cluster_confirmed) {\n      var p = 'pending';\n      return p.includes(filters.status.toLowerCase());\n    }\n\n    return dataRow.is_active.toString().toLowerCase().includes(filters.status.toLowerCase());\n  }).filter(function (dataRow) {\n    return filters.cluster === 'All' ? true : dataRow.cluster_type.toLowerCase().includes(filters.cluster.toLowerCase());\n  }).filter(function (dataRow) {\n    return dateRange.fromDate && dateRange.toDate === undefined ? true : parseInt(dataRow.updated_at, 10) * 1000 >= new Date(moment(dateRange.fromDate).format()).getTime() && parseInt(dataRow.updated_at, 10) * 1000 <= new Date(moment(dateRange.toDate).format()).getTime();\n  }).sort(function (a, b) {\n    // Sorting based on unique fields\n    if (sortData.name.sort) {\n      var x = a.cluster_name;\n      var y = b.cluster_name;\n      return sortData.name.ascending ? sortAlphaAsc(x, y) : sortAlphaDesc(x, y);\n    }\n\n    if (sortData.lastRun.sort) {\n      var _x = parseInt(a.created_at, 10);\n\n      var _y = parseInt(b.created_at, 10);\n\n      return sortData.lastRun.ascending ? sortNumAsc(_y, _x) : sortNumDesc(_y, _x);\n    }\n\n    return 0;\n  });\n\n  var _useState5 = useState({\n    pageNo: 0,\n    rowsPerPage: 5\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      paginationData = _useState6[0],\n      setPaginationData = _useState6[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      popAnchorEl = _React$useState4[0],\n      setPopAnchorEl = _React$useState4[1];\n\n  var isOpen = Boolean(popAnchorEl);\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      open = _React$useState6[0],\n      setOpen = _React$useState6[1];\n\n  var handlePopOverClose = function handlePopOverClose() {\n    setPopAnchorEl(null);\n    setOpen(false);\n  };\n\n  var handlePopOverClick = function handlePopOverClick(event) {\n    setPopAnchorEl(event.currentTarget);\n    setOpen(true);\n  }; // Functions passed as props in the headerSeaction\n\n\n  var changeSearch = function changeSearch(event) {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      search: event.target.value\n    }));\n  };\n\n  var changeStatus = function changeStatus(event) {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      status: event.target.value\n    }));\n  };\n\n  var changeCluster = function changeCluster(event) {\n    setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      cluster: event.target.value\n    }));\n  };\n\n  var dateChange = function dateChange(selectFromDate, selectToDate) {\n    setDateRange({\n      dateValue: \"\".concat(moment(selectFromDate).format('DD.MM.YYYY').toString(), \"-\").concat(moment(selectToDate).format('DD.MM.YYYY').toString()),\n      fromDate: new Date(new Date(selectFromDate).setHours(0, 0, 0)).toString(),\n      toDate: new Date(new Date(selectToDate).setHours(23, 59, 59)).toString()\n    });\n  };\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var deleteRow = function deleteRow(clid) {\n    deleteCluster({\n      variables: {\n        cluster_id: clid\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"Heading section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HeaderSection, {\n    searchValue: filters.search,\n    changeSearch: changeSearch,\n    statusValue: filters.status,\n    changeStatus: changeStatus,\n    clusterValue: filters.cluster,\n    changeCluster: changeCluster,\n    popOverClick: handlePopOverClick,\n    popOverClose: handlePopOverClose,\n    isOpen: isOpen,\n    popAnchorEl: popAnchorEl,\n    isDateOpen: open,\n    displayDate: dateRange.dateValue,\n    selectDate: dateChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.tableMain,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"simple table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableRows,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.headerStatus,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.tableStatus')), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"sort in descending order\",\n    size: \"small\",\n    onClick: function onClick() {\n      return setSortData(_objectSpread(_objectSpread({}, sortData), {}, {\n        lastRun: {\n          sort: true,\n          ascending: false\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.targetsIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/arrow_downward.svg\",\n    alt: \"ConnectTarget icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  }))))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.workflowName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.tableCluster')), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"sort in descending\",\n    size: \"small\",\n    onClick: function onClick() {\n      return setSortData(_objectSpread(_objectSpread({}, sortData), {}, {\n        name: {\n          sort: true,\n          ascending: false\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.targetsIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/arrow_downward.svg\",\n    alt: \"ConnectTarget icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 25\n    }\n  }))))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.targetCluster,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 19\n    }\n  }, t('workflowCluster.header.formControl.connectionDate'))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.headData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 19\n    }\n  }, t('workflowCluster.header.formControl.noWorkflows'))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.headData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.noSchedules')))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.headData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.run')))), /*#__PURE__*/React.createElement(TableCell, {\n    className: classes.headData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tableCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.disconnect')))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 7,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 21\n    }\n  }))) : error ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    \"data-cy\": \"browseClusterError\",\n    colSpan: 7,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.fetchingError')))) : filteredData ? filteredData.slice(paginationData.pageNo * paginationData.rowsPerPage, paginationData.pageNo * paginationData.rowsPerPage + paginationData.rowsPerPage).map(function (data) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      \"data-cy\": \"browseClusterData\",\n      key: data.cluster_id,\n      className: classes.dataRow,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableData, {\n      data: data,\n      deleteRow: deleteRow,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 23\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    \"data-cy\": \"browseClusterNoData\",\n    colSpan: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 21\n    }\n  }, t('workflowCluster.header.formControl.recordAvailable'))))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    component: \"div\",\n    count: (_filteredData$length = filteredData === null || filteredData === void 0 ? void 0 : filteredData.length) !== null && _filteredData$length !== void 0 ? _filteredData$length : 0,\n    rowsPerPage: paginationData.rowsPerPage,\n    page: paginationData.pageNo,\n    onChangePage: function onChangePage(_, page) {\n      return setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n        pageNo: page\n      }));\n    },\n    onChangeRowsPerPage: function onChangeRowsPerPage(event) {\n      setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n        pageNo: 0,\n        rowsPerPage: parseInt(event.target.value, 10)\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default BrowseCluster;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Targets/BrowseCluster/index.tsx"],"names":["useMutation","useQuery","IconButton","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Typography","moment","React","useState","useTranslation","Loader","DELETE_CLUSTER","GET_CLUSTER","getProjectID","sortAlphaAsc","sortAlphaDesc","sortNumAsc","sortNumDesc","HeaderSection","useStyles","TableData","BrowseCluster","classes","projectID","search","status","cluster","filters","setFilters","variables","project_id","fetchPolicy","pollInterval","data","loading","error","deleteCluster","dateValue","fromDate","Date","toString","toDate","setHours","dateRange","setDateRange","name","sort","ascending","lastRun","sortData","setSortData","filteredData","getCluster","filter","dataRow","cluster_name","toLowerCase","includes","is_cluster_confirmed","p","is_active","cluster_type","undefined","parseInt","updated_at","format","getTime","a","b","x","y","created_at","pageNo","rowsPerPage","paginationData","setPaginationData","popAnchorEl","setPopAnchorEl","isOpen","Boolean","open","setOpen","handlePopOverClose","handlePopOverClick","event","currentTarget","changeSearch","target","value","changeStatus","changeCluster","dateChange","selectFromDate","selectToDate","t","deleteRow","clid","cluster_id","root","tableMain","tableRows","headerStatus","tableCell","targetsIcon","workflowName","targetCluster","headData","slice","map","length","_","page"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport {\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../components/Loader';\nimport { DELETE_CLUSTER, GET_CLUSTER } from '../../../graphql';\nimport {\n  Cluster,\n  Clusters,\n  ClusterVars,\n  DeleteCluster,\n} from '../../../models/graphql/clusterData';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport {\n  sortAlphaAsc,\n  sortAlphaDesc,\n  sortNumAsc,\n  sortNumDesc,\n} from '../../../utils/sort';\nimport HeaderSection from './HeaderSection';\nimport useStyles from './styles';\nimport TableData from './TableData';\n\ninterface FilterOptions {\n  search: string;\n  status: string;\n  cluster: string;\n}\n\ninterface SortData {\n  name: { sort: boolean; ascending: boolean };\n  lastRun: { sort: boolean; ascending: boolean };\n}\n\ninterface DateData {\n  dateValue: string;\n  fromDate: string;\n  toDate: string;\n}\n\ninterface PaginationData {\n  pageNo: number;\n  rowsPerPage: number;\n}\n\nconst BrowseCluster: React.FC = () => {\n  const classes = useStyles();\n  const projectID = getProjectID();\n\n  const [filters, setFilters] = useState<FilterOptions>({\n    search: '',\n    status: 'All',\n    cluster: 'All',\n  });\n\n  const { data, loading, error } = useQuery<Clusters, ClusterVars>(\n    GET_CLUSTER,\n    {\n      variables: {\n        project_id: projectID,\n      },\n      fetchPolicy: 'cache-and-network',\n      pollInterval: 3000,\n    }\n  );\n\n  // Apollo mutation to delete the selected Target Cluster\n  const [deleteCluster] = useMutation<DeleteCluster>(DELETE_CLUSTER);\n\n  const [dateRange, setDateRange] = React.useState<DateData>({\n    dateValue: 'Select a period',\n    fromDate: new Date(0).toString(),\n    toDate: new Date(new Date().setHours(23, 59, 59)).toString(),\n  });\n\n  const [sortData, setSortData] = useState<SortData>({\n    name: { sort: false, ascending: true },\n    lastRun: { sort: true, ascending: true },\n  });\n\n  const filteredData = data?.getCluster\n    .filter((dataRow) =>\n      dataRow.cluster_name.toLowerCase().includes(filters.search.toLowerCase())\n    )\n    .filter((dataRow) => {\n      if (filters.status === 'All') {\n        return true;\n      }\n      if (!dataRow.is_cluster_confirmed) {\n        const p = 'pending';\n        return p.includes(filters.status.toLowerCase());\n      }\n      return dataRow.is_active\n        .toString()\n        .toLowerCase()\n        .includes(filters.status.toLowerCase());\n    })\n    .filter((dataRow) =>\n      filters.cluster === 'All'\n        ? true\n        : dataRow.cluster_type\n            .toLowerCase()\n            .includes(filters.cluster.toLowerCase())\n    )\n    .filter((dataRow) => {\n      return dateRange.fromDate && dateRange.toDate === undefined\n        ? true\n        : parseInt(dataRow.updated_at, 10) * 1000 >=\n            new Date(moment(dateRange.fromDate).format()).getTime() &&\n            parseInt(dataRow.updated_at, 10) * 1000 <=\n              new Date(moment(dateRange.toDate).format()).getTime();\n    })\n    .sort((a: Cluster, b: Cluster) => {\n      // Sorting based on unique fields\n      if (sortData.name.sort) {\n        const x = a.cluster_name;\n        const y = b.cluster_name;\n\n        return sortData.name.ascending\n          ? sortAlphaAsc(x, y)\n          : sortAlphaDesc(x, y);\n      }\n\n      if (sortData.lastRun.sort) {\n        const x = parseInt(a.created_at, 10);\n        const y = parseInt(b.created_at, 10);\n\n        return sortData.lastRun.ascending\n          ? sortNumAsc(y, x)\n          : sortNumDesc(y, x);\n      }\n\n      return 0;\n    });\n\n  const [paginationData, setPaginationData] = useState<PaginationData>({\n    pageNo: 0,\n    rowsPerPage: 5,\n  });\n\n  const [popAnchorEl, setPopAnchorEl] = React.useState<null | HTMLElement>(\n    null\n  );\n  const isOpen = Boolean(popAnchorEl);\n\n  const [open, setOpen] = React.useState<boolean>(false);\n\n  const handlePopOverClose = () => {\n    setPopAnchorEl(null);\n    setOpen(false);\n  };\n  const handlePopOverClick = (event: React.MouseEvent<HTMLElement>) => {\n    setPopAnchorEl(event.currentTarget);\n    setOpen(true);\n  };\n\n  // Functions passed as props in the headerSeaction\n  const changeSearch = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setFilters({ ...filters, search: event.target.value as string });\n  };\n\n  const changeStatus = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setFilters({ ...filters, status: event.target.value as string });\n  };\n\n  const changeCluster = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setFilters({ ...filters, cluster: event.target.value as string });\n  };\n\n  const dateChange = (selectFromDate: string, selectToDate: string) => {\n    setDateRange({\n      dateValue: `${moment(selectFromDate)\n        .format('DD.MM.YYYY')\n        .toString()}-${moment(selectToDate).format('DD.MM.YYYY').toString()}`,\n      fromDate: new Date(new Date(selectFromDate).setHours(0, 0, 0)).toString(),\n      toDate: new Date(new Date(selectToDate).setHours(23, 59, 59)).toString(),\n    });\n  };\n  const { t } = useTranslation();\n\n  const deleteRow = (clid: string) => {\n    deleteCluster({\n      variables: { cluster_id: clid },\n    });\n  };\n\n  return (\n    <div>\n      <section className=\"Heading section\">\n        {/* Header Section */}\n        <HeaderSection\n          searchValue={filters.search}\n          changeSearch={changeSearch}\n          statusValue={filters.status}\n          changeStatus={changeStatus}\n          clusterValue={filters.cluster}\n          changeCluster={changeCluster}\n          popOverClick={handlePopOverClick}\n          popOverClose={handlePopOverClose}\n          isOpen={isOpen}\n          popAnchorEl={popAnchorEl}\n          isDateOpen={open}\n          displayDate={dateRange.dateValue}\n          selectDate={dateChange}\n        />\n      </section>\n      <Paper className={classes.root}>\n        <TableContainer className={classes.tableMain}>\n          <Table stickyHeader aria-label=\"simple table\">\n            <TableHead>\n              <TableRow className={classes.tableRows}>\n                {/* Status */}\n                <TableCell className={classes.headerStatus}>\n                  <div className={classes.tableCell}>\n                    <Typography>\n                      {t('workflowCluster.header.formControl.tableStatus')}\n                    </Typography>\n                    <IconButton\n                      aria-label=\"sort in descending order\"\n                      size=\"small\"\n                      onClick={() =>\n                        setSortData({\n                          ...sortData,\n                          lastRun: { sort: true, ascending: false },\n                        })\n                      }\n                    >\n                      <div className={classes.targetsIcon}>\n                        <img\n                          src=\"/icons/arrow_downward.svg\"\n                          alt=\"ConnectTarget icon\"\n                        />\n                      </div>\n                    </IconButton>\n                  </div>\n                </TableCell>\n                {/* Workflow Name */}\n                <TableCell className={classes.workflowName}>\n                  <div className={classes.tableCell}>\n                    <Typography>\n                      {t('workflowCluster.header.formControl.tableCluster')}\n                    </Typography>\n                    <IconButton\n                      aria-label=\"sort in descending\"\n                      size=\"small\"\n                      onClick={() =>\n                        setSortData({\n                          ...sortData,\n                          name: { sort: true, ascending: false },\n                        })\n                      }\n                    >\n                      <div className={classes.targetsIcon}>\n                        <img\n                          src=\"/icons/arrow_downward.svg\"\n                          alt=\"ConnectTarget icon\"\n                        />\n                      </div>\n                    </IconButton>\n                  </div>\n                </TableCell>\n                {/* Target Cluster */}\n                <TableCell>\n                  <Typography className={classes.targetCluster}>\n                    {t('workflowCluster.header.formControl.connectionDate')}\n                  </Typography>\n                </TableCell>\n\n                {/* No of Workflows */}\n                <TableCell className={classes.headData}>\n                  <Typography>\n                    {t('workflowCluster.header.formControl.noWorkflows')}\n                  </Typography>\n                </TableCell>\n\n                {/* No of Schedules */}\n                <TableCell className={classes.headData}>\n                  <div className={classes.tableCell}>\n                    <Typography>\n                      {t('workflowCluster.header.formControl.noSchedules')}\n                    </Typography>\n                  </div>\n                </TableCell>\n\n                {/* Last Run */}\n                <TableCell className={classes.headData}>\n                  <div className={classes.tableCell}>\n                    <Typography>\n                      {t('workflowCluster.header.formControl.run')}\n                    </Typography>\n                  </div>\n                </TableCell>\n\n                {/* Delete Cluster */}\n                <TableCell className={classes.headData}>\n                  <div className={classes.tableCell}>\n                    <Typography>\n                      {t('workflowCluster.header.formControl.disconnect')}\n                    </Typography>\n                  </div>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n\n            {/* Body */}\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={7}>\n                    <Loader />\n                  </TableCell>\n                </TableRow>\n              ) : error ? (\n                <TableRow>\n                  <TableCell data-cy=\"browseClusterError\" colSpan={7}>\n                    <Typography align=\"center\">\n                      {t('workflowCluster.header.formControl.fetchingError')}\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              ) : filteredData ? (\n                filteredData\n                  .slice(\n                    paginationData.pageNo * paginationData.rowsPerPage,\n                    paginationData.pageNo * paginationData.rowsPerPage +\n                      paginationData.rowsPerPage\n                  )\n                  .map((data: Cluster) => (\n                    <TableRow\n                      data-cy=\"browseClusterData\"\n                      key={data.cluster_id}\n                      className={classes.dataRow}\n                    >\n                      <TableData data={data} deleteRow={deleteRow} />\n                    </TableRow>\n                  ))\n              ) : (\n                <TableRow>\n                  <TableCell data-cy=\"browseClusterNoData\" colSpan={0}>\n                    <Typography align=\"center\">\n                      {t('workflowCluster.header.formControl.recordAvailable')}\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Pagination Section */}\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={filteredData?.length ?? 0}\n          rowsPerPage={paginationData.rowsPerPage}\n          page={paginationData.pageNo}\n          onChangePage={(_, page) =>\n            setPaginationData({ ...paginationData, pageNo: page })\n          }\n          onChangeRowsPerPage={(event) => {\n            setPaginationData({\n              ...paginationData,\n              pageNo: 0,\n              rowsPerPage: parseInt(event.target.value, 10),\n            });\n          }}\n        />\n      </Paper>\n    </div>\n  );\n};\n\nexport default BrowseCluster;\n"]},"metadata":{},"sourceType":"module"}