{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ApplicationDashboard/index.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useQuery } from '@apollo/client';\nimport { IconButton, Menu, MenuItem, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport useActions from '../../redux/actions';\nimport * as DashboardActions from '../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../redux/actions/dataSource';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport ChaosAccordion from '../../views/Analytics/ApplicationDashboard/ChaosAccordion';\nimport DataSourceInactiveModal from '../../views/Analytics/ApplicationDashboard/DataSourceInactiveModal';\nimport InfoDropdown from '../../views/Analytics/ApplicationDashboard/InfoDropdown';\nimport DashboardPanelGroup from '../../views/Analytics/ApplicationDashboard/Panel/DashboardPanelGroup';\nimport ToolBar from '../../views/Analytics/ApplicationDashboard/ToolBar';\nimport TopNavButtons from '../../views/Analytics/ApplicationDashboard/TopNavButtons';\nimport { ACTIVE } from './constants';\nimport useStyles from './styles';\n\nvar DashboardPage = function DashboardPage() {\n  var _selectedDashboard$se;\n\n  var classes = useStyles();\n  var dataSource = useActions(DataSourceActions);\n  var dashboard = useActions(DashboardActions); // get ProjectID\n\n  var projectID = getProjectID();\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n  var selectedDataSource = useSelector(function (state) {\n    return state.selectDataSource;\n  });\n\n  var _React$useState = React.useState({\n    id: (_selectedDashboard$se = selectedDashboard.selectedDashboardID) !== null && _selectedDashboard$se !== void 0 ? _selectedDashboard$se : '',\n    name: '',\n    typeName: '',\n    typeID: '',\n    agentID: '',\n    agentName: '',\n    urlToIcon: '',\n    information: '',\n    chaosEventQueryTemplate: '',\n    chaosVerdictQueryTemplate: '',\n    applicationMetadataMap: [],\n    dashboardListForAgent: [],\n    metaData: [],\n    dashboardKey: 'Default',\n    panelNameAndIDList: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedDashboardInformation = _React$useState2[0],\n      setSelectedDashboardInformation = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      anchorEl = _React$useState4[0],\n      setAnchorEl = _React$useState4[1];\n\n  var _React$useState5 = React.useState('ACTIVE'),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dataSourceStatus = _React$useState6[0],\n      setDataSourceStatus = _React$useState6[1];\n\n  var open = Boolean(anchorEl);\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      isInfoOpen = _React$useState8[0],\n      setIsInfoOpen = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      selectedPanels = _React$useState10[0],\n      setSelectedPanels = _React$useState10[1];\n\n  var _React$useState11 = React.useState([]),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      selectedApplications = _React$useState12[0],\n      setSelectedApplications = _React$useState12[1]; // Apollo query to get the dashboards data\n\n\n  var _useQuery = useQuery(LIST_DASHBOARD, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'no-cache'\n  }),\n      dashboards = _useQuery.data; // Apollo query to get the datasources data\n\n\n  var _useQuery2 = useQuery(LIST_DATASOURCE, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'no-cache'\n  }),\n      dataSources = _useQuery2.data;\n\n  var postEventSelectionRoutine = function postEventSelectionRoutine(selectedEvents) {};\n\n  useEffect(function () {\n    if (dashboards && dashboards.ListDashboard.length) {\n      if (selectedDashboardInformation.id !== selectedDashboardInformation.dashboardKey) {\n        var _selectedDashboard = dashboards.ListDashboard.filter(function (data) {\n          return data.db_id === selectedDashboardInformation.id;\n        })[0];\n        var selectedPanelNameAndIDList = [];\n\n        if (_selectedDashboard) {\n          var _selectedDashboard$pa;\n\n          ((_selectedDashboard$pa = _selectedDashboard.panel_groups) !== null && _selectedDashboard$pa !== void 0 ? _selectedDashboard$pa : []).forEach(function (panelGroup) {\n            var _panelGroup$panels;\n\n            ((_panelGroup$panels = panelGroup.panels) !== null && _panelGroup$panels !== void 0 ? _panelGroup$panels : []).forEach(function (panel) {\n              selectedPanelNameAndIDList.push({\n                name: panel.panel_name,\n                id: panel.panel_id\n              });\n            });\n          });\n        }\n\n        var availableDashboards = _selectedDashboard ? dashboards.ListDashboard.filter(function (data) {\n          return data.cluster_id === _selectedDashboard.cluster_id;\n        }) : [];\n\n        if (_selectedDashboard) {\n          setSelectedDashboardInformation(_objectSpread(_objectSpread({}, selectedDashboardInformation), {}, {\n            dashboardListForAgent: availableDashboards,\n            metaData: [_selectedDashboard],\n            dashboardKey: selectedDashboardInformation.id,\n            panelNameAndIDList: selectedPanelNameAndIDList,\n            name: _selectedDashboard.db_name,\n            typeName: _selectedDashboard.db_type_name,\n            typeID: _selectedDashboard.db_type_id,\n            agentID: _selectedDashboard.cluster_id,\n            agentName: _selectedDashboard.cluster_name,\n            urlToIcon: \"/icons/\".concat(_selectedDashboard.db_type_id, \"_dashboard.svg\"),\n            information: _selectedDashboard.db_information,\n            chaosEventQueryTemplate: _selectedDashboard.chaos_event_query_template,\n            chaosVerdictQueryTemplate: _selectedDashboard.chaos_verdict_query_template,\n            applicationMetadataMap: _selectedDashboard.application_metadata_map\n          }));\n          setSelectedPanels(selectedPanelNameAndIDList.map(function (panel) {\n            return panel.id;\n          }));\n        }\n      }\n    }\n  }, [dashboards, selectedDashboardInformation.id]);\n  useEffect(function () {\n    if (dataSources && dataSources.ListDataSource.length) {\n      dashboard.selectDashboard({\n        refreshRate: 0\n      });\n\n      if (selectedDataSource.selectedDataSourceID === '') {\n        if (selectedDashboardInformation.metaData && selectedDashboardInformation.metaData[0] && dataSources.ListDataSource) {\n          var _selectedDataSource = dataSources.ListDataSource.filter(function (data) {\n            return data.ds_id === selectedDashboardInformation.metaData[0].ds_id;\n          })[0];\n\n          if (_selectedDataSource) {\n            dataSource.selectDataSource({\n              selectedDataSourceURL: _selectedDataSource.ds_url,\n              selectedDataSourceID: _selectedDataSource.ds_id,\n              selectedDataSourceName: _selectedDataSource.ds_name\n            });\n          }\n\n          if (_selectedDataSource && _selectedDataSource.health_status !== ACTIVE) {\n            setDataSourceStatus(_selectedDataSource.health_status);\n          }\n        }\n      }\n    }\n  }, [selectedDashboardInformation.dashboardKey, dataSources]);\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.controlsDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    className: classes.weightedFont,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, selectedDashboardInformation.agentName, \" /\", ' ', /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    display: \"inline\",\n    className: classes.italic,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, selectedDashboardInformation.name), /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"more\",\n    \"aria-controls\": \"long-menu\",\n    \"aria-haspopup\": \"true\",\n    onClick: handleClick,\n    \"data-cy\": \"browseDashboardListOptions\",\n    className: classes.iconButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    className: classes.dashboardSwitchIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Menu, {\n    id: \"long-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: open,\n    onClose: handleClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, selectedDashboardInformation.dashboardListForAgent.map(function (data) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(data.db_id, \"-monitoringDashboard\"),\n      value: data.db_id,\n      onClick: function onClick() {\n        setSelectedDashboardInformation(_objectSpread(_objectSpread({}, selectedDashboardInformation), {}, {\n          id: data.db_id,\n          name: data.db_name,\n          typeName: data.db_type_name,\n          typeID: data.db_type_id,\n          urlToIcon: \"/icons/\".concat(data.db_type_id, \"_dashboard.svg\"),\n          information: data.db_information,\n          chaosEventQueryTemplate: data.chaos_event_query_template,\n          chaosVerdictQueryTemplate: data.chaos_verdict_query_template,\n          applicationMetadataMap: data.application_metadata_map\n        }));\n        dataSource.selectDataSource({\n          selectedDataSourceURL: '',\n          selectedDataSourceID: '',\n          selectedDataSourceName: ''\n        });\n        setAnchorEl(null);\n      },\n      className: data.db_id === selectedDashboardInformation.id ? classes.menuItemSelected : classes.menuItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.expDiv,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      \"data-cy\": \"switchDashboard\",\n      className: \"\".concat(classes.btnText, \" \").concat(classes.italic),\n      variant: \"h5\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 27\n      }\n    }, data.db_name)));\n  }))), /*#__PURE__*/React.createElement(TopNavButtons, {\n    isInfoToggledState: isInfoOpen,\n    switchIsInfoToggled: function switchIsInfoToggled(toggleState) {\n      setIsInfoOpen(toggleState);\n    },\n    dashboardData: selectedDashboardInformation,\n    dashboardTypeID: selectedDashboardInformation.typeID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  })), isInfoOpen && /*#__PURE__*/React.createElement(InfoDropdown, {\n    dashboardConfigurationDetails: {\n      name: selectedDashboardInformation.name,\n      typeID: selectedDashboardInformation.typeID,\n      typeName: selectedDashboardInformation.typeName,\n      dataSourceName: selectedDataSource.selectedDataSourceName,\n      dataSourceURL: selectedDataSource.selectedDataSourceURL,\n      agentName: selectedDashboardInformation.agentName\n    },\n    metricsToBeShown: selectedDashboardInformation.panelNameAndIDList,\n    applicationsToBeShown: selectedDashboardInformation.applicationMetadataMap,\n    postPanelSelectionRoutine: function postPanelSelectionRoutine(selectedPanelList) {\n      return setSelectedPanels(selectedPanelList);\n    },\n    postApplicationSelectionRoutine: function postApplicationSelectionRoutine(selectedApplicationList) {\n      return setSelectedApplications(selectedApplicationList);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ToolBar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.analyticsDiv,\n    key: selectedDashboardInformation.dashboardKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chaosTableSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChaosAccordion, {\n    dashboardKey: selectedDashboardInformation.dashboardKey,\n    chaosEventsToBeShown: [],\n    postEventSelectionRoutine: postEventSelectionRoutine,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  })), selectedDashboardInformation.metaData[0] && selectedDashboardInformation.metaData[0].panel_groups.length > 0 && selectedDashboardInformation.metaData[0].panel_groups.map(function (panelGroup) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"\".concat(panelGroup.panel_group_id, \"-dashboardPage-div\"),\n      \"data-cy\": \"dashboardPanelGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(DashboardPanelGroup, {\n      key: \"\".concat(panelGroup.panel_group_id, \"-dashboardPage-component\"),\n      panel_group_id: panelGroup.panel_group_id,\n      panel_group_name: panelGroup.panel_group_name,\n      panels: panelGroup.panels,\n      selectedPanels: selectedPanels,\n      selectedApplications: selectedApplications,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }\n    }));\n  })))), dataSourceStatus !== 'ACTIVE' ? /*#__PURE__*/React.createElement(DataSourceInactiveModal, {\n    dataSourceStatus: dataSourceStatus,\n    dashboardID: selectedDashboardInformation.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default DashboardPage;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ApplicationDashboard/index.tsx"],"names":["useQuery","IconButton","Menu","MenuItem","Typography","KeyboardArrowDownIcon","React","useEffect","useSelector","BackButton","Scaffold","LIST_DASHBOARD","LIST_DATASOURCE","useActions","DashboardActions","DataSourceActions","getProjectID","ChaosAccordion","DataSourceInactiveModal","InfoDropdown","DashboardPanelGroup","ToolBar","TopNavButtons","ACTIVE","useStyles","DashboardPage","classes","dataSource","dashboard","projectID","selectedDashboard","state","selectDashboard","selectedDataSource","selectDataSource","useState","id","selectedDashboardID","name","typeName","typeID","agentID","agentName","urlToIcon","information","chaosEventQueryTemplate","chaosVerdictQueryTemplate","applicationMetadataMap","dashboardListForAgent","metaData","dashboardKey","panelNameAndIDList","selectedDashboardInformation","setSelectedDashboardInformation","anchorEl","setAnchorEl","dataSourceStatus","setDataSourceStatus","open","Boolean","handleClick","event","currentTarget","handleClose","isInfoOpen","setIsInfoOpen","selectedPanels","setSelectedPanels","selectedApplications","setSelectedApplications","variables","fetchPolicy","dashboards","data","dataSources","postEventSelectionRoutine","selectedEvents","ListDashboard","length","filter","db_id","selectedPanelNameAndIDList","panel_groups","forEach","panelGroup","panels","panel","push","panel_name","panel_id","availableDashboards","cluster_id","db_name","db_type_name","db_type_id","cluster_name","db_information","chaos_event_query_template","chaos_verdict_query_template","application_metadata_map","map","ListDataSource","refreshRate","selectedDataSourceID","ds_id","selectedDataSourceURL","ds_url","selectedDataSourceName","ds_name","health_status","rootContainer","root","button","controlsDiv","weightedFont","italic","iconButton","dashboardSwitchIcon","menuItemSelected","menuItem","expDiv","btnText","toggleState","dataSourceName","dataSourceURL","selectedPanelList","selectedApplicationList","analyticsDiv","chaosTableSection","panel_group_id","panel_group_name"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useQuery } from '@apollo/client';\nimport { IconButton, Menu, MenuItem, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport {\n  PanelNameAndID,\n  SelectedDashboardInformation,\n} from '../../models/dashboardsData';\nimport {\n  DashboardList,\n  ListDashboardResponse,\n  ListDashboardVars,\n  PanelGroupResponse,\n  PanelResponse,\n} from '../../models/graphql/dashboardsDetails';\nimport {\n  DataSourceList,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../models/graphql/dataSourceDetails';\nimport useActions from '../../redux/actions';\nimport * as DashboardActions from '../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../redux/actions/dataSource';\nimport { RootState } from '../../redux/reducers';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport ChaosAccordion from '../../views/Analytics/ApplicationDashboard/ChaosAccordion';\nimport DataSourceInactiveModal from '../../views/Analytics/ApplicationDashboard/DataSourceInactiveModal';\nimport InfoDropdown from '../../views/Analytics/ApplicationDashboard/InfoDropdown';\nimport DashboardPanelGroup from '../../views/Analytics/ApplicationDashboard/Panel/DashboardPanelGroup';\nimport ToolBar from '../../views/Analytics/ApplicationDashboard/ToolBar';\nimport TopNavButtons from '../../views/Analytics/ApplicationDashboard/TopNavButtons';\nimport { ACTIVE } from './constants';\nimport useStyles from './styles';\n\nconst DashboardPage: React.FC = () => {\n  const classes = useStyles();\n  const dataSource = useActions(DataSourceActions);\n  const dashboard = useActions(DashboardActions);\n  // get ProjectID\n  const projectID = getProjectID();\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n  const selectedDataSource = useSelector(\n    (state: RootState) => state.selectDataSource\n  );\n\n  const [selectedDashboardInformation, setSelectedDashboardInformation] =\n    React.useState<SelectedDashboardInformation>({\n      id: selectedDashboard.selectedDashboardID ?? '',\n      name: '',\n      typeName: '',\n      typeID: '',\n      agentID: '',\n      agentName: '',\n      urlToIcon: '',\n      information: '',\n      chaosEventQueryTemplate: '',\n      chaosVerdictQueryTemplate: '',\n      applicationMetadataMap: [],\n      dashboardListForAgent: [],\n      metaData: [],\n      dashboardKey: 'Default',\n      panelNameAndIDList: [],\n    });\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dataSourceStatus, setDataSourceStatus] =\n    React.useState<string>('ACTIVE');\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isInfoOpen, setIsInfoOpen] = React.useState<Boolean>(false);\n  const [selectedPanels, setSelectedPanels] = React.useState<string[]>([]);\n  const [selectedApplications, setSelectedApplications] = React.useState<\n    string[]\n  >([]);\n\n  // Apollo query to get the dashboards data\n  const { data: dashboards } = useQuery<DashboardList, ListDashboardVars>(\n    LIST_DASHBOARD,\n    {\n      variables: { projectID },\n      fetchPolicy: 'no-cache',\n    }\n  );\n\n  // Apollo query to get the datasources data\n  const { data: dataSources } = useQuery<DataSourceList, ListDataSourceVars>(\n    LIST_DATASOURCE,\n    {\n      variables: { projectID },\n      fetchPolicy: 'no-cache',\n    }\n  );\n\n  const postEventSelectionRoutine = (selectedEvents: string[]) => {};\n\n  useEffect(() => {\n    if (dashboards && dashboards.ListDashboard.length) {\n      if (\n        selectedDashboardInformation.id !==\n        selectedDashboardInformation.dashboardKey\n      ) {\n        const selectedDashboard: ListDashboardResponse =\n          dashboards.ListDashboard.filter((data) => {\n            return data.db_id === selectedDashboardInformation.id;\n          })[0];\n        const selectedPanelNameAndIDList: PanelNameAndID[] = [];\n        if (selectedDashboard) {\n          (selectedDashboard.panel_groups ?? []).forEach(\n            (panelGroup: PanelGroupResponse) => {\n              (panelGroup.panels ?? []).forEach((panel: PanelResponse) => {\n                selectedPanelNameAndIDList.push({\n                  name: panel.panel_name,\n                  id: panel.panel_id,\n                });\n              });\n            }\n          );\n        }\n        const availableDashboards: ListDashboardResponse[] = selectedDashboard\n          ? dashboards.ListDashboard.filter((data) => {\n              return data.cluster_id === selectedDashboard.cluster_id;\n            })\n          : [];\n        if (selectedDashboard) {\n          setSelectedDashboardInformation({\n            ...selectedDashboardInformation,\n            dashboardListForAgent: availableDashboards,\n            metaData: [selectedDashboard],\n            dashboardKey: selectedDashboardInformation.id,\n            panelNameAndIDList: selectedPanelNameAndIDList,\n            name: selectedDashboard.db_name,\n            typeName: selectedDashboard.db_type_name,\n            typeID: selectedDashboard.db_type_id,\n            agentID: selectedDashboard.cluster_id,\n            agentName: selectedDashboard.cluster_name,\n            urlToIcon: `/icons/${selectedDashboard.db_type_id}_dashboard.svg`,\n            information: selectedDashboard.db_information,\n            chaosEventQueryTemplate:\n              selectedDashboard.chaos_event_query_template,\n            chaosVerdictQueryTemplate:\n              selectedDashboard.chaos_verdict_query_template,\n            applicationMetadataMap: selectedDashboard.application_metadata_map,\n          });\n          setSelectedPanels(\n            selectedPanelNameAndIDList.map((panel: PanelNameAndID) => panel.id)\n          );\n        }\n      }\n    }\n  }, [dashboards, selectedDashboardInformation.id]);\n\n  useEffect(() => {\n    if (dataSources && dataSources.ListDataSource.length) {\n      dashboard.selectDashboard({\n        refreshRate: 0,\n      });\n      if (selectedDataSource.selectedDataSourceID === '') {\n        if (\n          selectedDashboardInformation.metaData &&\n          selectedDashboardInformation.metaData[0] &&\n          dataSources.ListDataSource\n        ) {\n          const selectedDataSource: ListDataSourceResponse =\n            dataSources.ListDataSource.filter((data) => {\n              return (\n                data.ds_id === selectedDashboardInformation.metaData[0].ds_id\n              );\n            })[0];\n          if (selectedDataSource) {\n            dataSource.selectDataSource({\n              selectedDataSourceURL: selectedDataSource.ds_url,\n              selectedDataSourceID: selectedDataSource.ds_id,\n              selectedDataSourceName: selectedDataSource.ds_name,\n            });\n          }\n          if (\n            selectedDataSource &&\n            selectedDataSource.health_status !== ACTIVE\n          ) {\n            setDataSourceStatus(selectedDataSource.health_status);\n          }\n        }\n      }\n    }\n  }, [selectedDashboardInformation.dashboardKey, dataSources]);\n\n  return (\n    <Scaffold>\n      <div className={classes.rootContainer}>\n        <div className={classes.root}>\n          <div className={classes.button}>\n            <BackButton />\n          </div>\n\n          <div className={classes.controlsDiv}>\n            <Typography variant=\"h4\" className={classes.weightedFont}>\n              {selectedDashboardInformation.agentName} /{' '}\n              <Typography\n                variant=\"h4\"\n                display=\"inline\"\n                className={classes.italic}\n              >\n                {selectedDashboardInformation.name}\n              </Typography>\n              <IconButton\n                aria-label=\"more\"\n                aria-controls=\"long-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                data-cy=\"browseDashboardListOptions\"\n                className={classes.iconButton}\n              >\n                <KeyboardArrowDownIcon\n                  className={classes.dashboardSwitchIcon}\n                />\n              </IconButton>\n              <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={handleClose}\n              >\n                {selectedDashboardInformation.dashboardListForAgent.map(\n                  (data: ListDashboardResponse) => {\n                    return (\n                      <MenuItem\n                        key={`${data.db_id}-monitoringDashboard`}\n                        value={data.db_id}\n                        onClick={() => {\n                          setSelectedDashboardInformation({\n                            ...selectedDashboardInformation,\n                            id: data.db_id,\n                            name: data.db_name,\n                            typeName: data.db_type_name,\n                            typeID: data.db_type_id,\n                            urlToIcon: `/icons/${data.db_type_id}_dashboard.svg`,\n                            information: data.db_information,\n                            chaosEventQueryTemplate:\n                              data.chaos_event_query_template,\n                            chaosVerdictQueryTemplate:\n                              data.chaos_verdict_query_template,\n                            applicationMetadataMap:\n                              data.application_metadata_map,\n                          });\n                          dataSource.selectDataSource({\n                            selectedDataSourceURL: '',\n                            selectedDataSourceID: '',\n                            selectedDataSourceName: '',\n                          });\n                          setAnchorEl(null);\n                        }}\n                        className={\n                          data.db_id === selectedDashboardInformation.id\n                            ? classes.menuItemSelected\n                            : classes.menuItem\n                        }\n                      >\n                        <div className={classes.expDiv}>\n                          <Typography\n                            data-cy=\"switchDashboard\"\n                            className={`${classes.btnText} ${classes.italic}`}\n                            variant=\"h5\"\n                          >\n                            {data.db_name}\n                          </Typography>\n                        </div>\n                      </MenuItem>\n                    );\n                  }\n                )}\n              </Menu>\n            </Typography>\n\n            <TopNavButtons\n              isInfoToggledState={isInfoOpen}\n              switchIsInfoToggled={(toggleState: Boolean) => {\n                setIsInfoOpen(toggleState);\n              }}\n              dashboardData={selectedDashboardInformation}\n              dashboardTypeID={selectedDashboardInformation.typeID}\n            />\n          </div>\n          {isInfoOpen && (\n            <InfoDropdown\n              dashboardConfigurationDetails={{\n                name: selectedDashboardInformation.name,\n                typeID: selectedDashboardInformation.typeID,\n                typeName: selectedDashboardInformation.typeName,\n                dataSourceName: selectedDataSource.selectedDataSourceName,\n                dataSourceURL: selectedDataSource.selectedDataSourceURL,\n                agentName: selectedDashboardInformation.agentName,\n              }}\n              metricsToBeShown={selectedDashboardInformation.panelNameAndIDList}\n              applicationsToBeShown={\n                selectedDashboardInformation.applicationMetadataMap\n              }\n              postPanelSelectionRoutine={(selectedPanelList: string[]) =>\n                setSelectedPanels(selectedPanelList)\n              }\n              postApplicationSelectionRoutine={(\n                selectedApplicationList: string[]\n              ) => setSelectedApplications(selectedApplicationList)}\n            />\n          )}\n          <ToolBar />\n          <div\n            className={classes.analyticsDiv}\n            key={selectedDashboardInformation.dashboardKey}\n          >\n            <div className={classes.chaosTableSection}>\n              <ChaosAccordion\n                dashboardKey={selectedDashboardInformation.dashboardKey}\n                chaosEventsToBeShown={[]}\n                postEventSelectionRoutine={postEventSelectionRoutine}\n              />\n            </div>\n            {selectedDashboardInformation.metaData[0] &&\n              selectedDashboardInformation.metaData[0].panel_groups.length >\n                0 &&\n              selectedDashboardInformation.metaData[0].panel_groups.map(\n                (panelGroup: PanelGroupResponse) => (\n                  <div\n                    key={`${panelGroup.panel_group_id}-dashboardPage-div`}\n                    data-cy=\"dashboardPanelGroup\"\n                  >\n                    <DashboardPanelGroup\n                      key={`${panelGroup.panel_group_id}-dashboardPage-component`}\n                      panel_group_id={panelGroup.panel_group_id}\n                      panel_group_name={panelGroup.panel_group_name}\n                      panels={panelGroup.panels}\n                      selectedPanels={selectedPanels}\n                      selectedApplications={selectedApplications}\n                    />\n                  </div>\n                )\n              )}\n          </div>\n        </div>\n      </div>\n      {dataSourceStatus !== 'ACTIVE' ? (\n        <DataSourceInactiveModal\n          dataSourceStatus={dataSourceStatus}\n          dashboardID={selectedDashboardInformation.id}\n        />\n      ) : (\n        <div />\n      )}\n    </Scaffold>\n  );\n};\n\nexport default DashboardPage;\n"]},"metadata":{},"sourceType":"module"}