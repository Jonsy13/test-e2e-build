{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,FormControl,IconButton,InputAdornment,InputBase,InputLabel,MenuItem,Popover,Select,Typography}from'@material-ui/core';import{useTheme}from'@material-ui/core/styles';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import SearchIcon from'@material-ui/icons/Search';import React,{useState}from'react';import{DateRangePicker}from'react-date-range';import'react-date-range/dist/styles.css';// main css file\nimport'react-date-range/dist/theme/default.css';// theme css file\nimport useStyles from'./styles';var HeaderSection=function HeaderSection(_ref){var _clusterList$getClust;var searchValue=_ref.searchValue,statusValue=_ref.statusValue,clusterValue=_ref.clusterValue,isOpen=_ref.isOpen,popAnchorEl=_ref.popAnchorEl,displayDate=_ref.displayDate,clusterList=_ref.clusterList,changeSearch=_ref.changeSearch,changeStatus=_ref.changeStatus,changeCluster=_ref.changeCluster,popOverClick=_ref.popOverClick,popOverClose=_ref.popOverClose,selectDate=_ref.selectDate;var classes=useStyles();var _useTheme=useTheme(),palette=_useTheme.palette;var _useState=useState([{startDate:new Date(),endDate:new Date(),key:'selection'}]),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.headerSection},/*#__PURE__*/React.createElement(InputBase,{id:\"input-with-icon-adornment\",placeholder:\"Search\",className:classes.search,value:searchValue,onChange:changeSearch,startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))}),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl,focused:true},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\"Workflow Status\"),/*#__PURE__*/React.createElement(Select,{value:statusValue,onChange:changeStatus,label:\"Workflow Status\",className:classes.selectText},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Failed\"},\"Failed\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Running\"},\"Running\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Succeeded\"},\"Completed\"))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl,focused:true},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\"Target Cluster\"),/*#__PURE__*/React.createElement(Select,{value:clusterValue,onChange:changeCluster,label:\"Target Cluster\",className:classes.selectText},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),clusterList===null||clusterList===void 0?void 0:(_clusterList$getClust=clusterList.getCluster)===null||_clusterList$getClust===void 0?void 0:_clusterList$getClust.map(function(cluster){return/*#__PURE__*/React.createElement(MenuItem,{key:cluster.cluster_name,value:cluster.cluster_name},cluster.cluster_name);}))),/*#__PURE__*/React.createElement(Button,{className:classes.selectDate,onClick:popOverClick},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},displayDate,/*#__PURE__*/React.createElement(IconButton,{style:{width:10,height:10}},isOpen?/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null):/*#__PURE__*/React.createElement(ChevronRightIcon,null)))),/*#__PURE__*/React.createElement(Popover,{open:isOpen,anchorEl:popAnchorEl,onClose:popOverClose,anchorOrigin:{vertical:'bottom',horizontal:'center'},transformOrigin:{vertical:'top',horizontal:'center'},style:{marginTop:10}},/*#__PURE__*/React.createElement(DateRangePicker,{onChange:function onChange(item){setState([item.selection]);selectDate(\"\".concat(item.selection.startDate),\"\".concat(item.selection.endDate));},showSelectionPreview:true,moveRangeOnFirstSelection:false,months:1,ranges:state,direction:\"vertical\",editableDateInputs:true,rangeColors:[palette.primary.dark],showMonthAndYearPickers:true}))));};export default HeaderSection;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/ChaosWorkflows/BrowseWorkflow/HeaderSection.tsx"],"names":["Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","Popover","Select","Typography","useTheme","ChevronRightIcon","KeyboardArrowDownIcon","SearchIcon","React","useState","DateRangePicker","useStyles","HeaderSection","searchValue","statusValue","clusterValue","isOpen","popAnchorEl","displayDate","clusterList","changeSearch","changeStatus","changeCluster","popOverClick","popOverClose","selectDate","classes","palette","startDate","Date","endDate","key","state","setState","headerSection","search","formControl","selectText","getCluster","map","cluster","cluster_name","width","height","vertical","horizontal","marginTop","item","selection","primary","dark"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  Popover,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { useState } from 'react';\nimport { DateRangePicker } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main css file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\nimport { Clusters } from '../../../models/graphql/clusterData';\nimport { WorkflowStatus } from '../../../models/graphql/workflowData';\nimport useStyles from './styles';\n\ninterface HeaderSectionProps {\n  searchValue?: string;\n  statusValue?: WorkflowStatus;\n  clusterValue?: string;\n  isOpen: boolean;\n  clusterList?: Partial<Clusters>;\n  isDateOpen: boolean;\n  popAnchorEl: HTMLElement | null;\n  displayDate: string;\n  changeSearch: (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => void;\n  changeStatus: (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>,\n    child: React.ReactNode\n  ) => void;\n  changeCluster: (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>,\n    child: React.ReactNode\n  ) => void;\n  popOverClick: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => void;\n  popOverClose: (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => void;\n  selectDate: (selectFromDate: string, selectToDate: string) => void;\n}\n\nconst HeaderSection: React.FC<HeaderSectionProps> = ({\n  searchValue,\n  statusValue,\n  clusterValue,\n  isOpen,\n  popAnchorEl,\n  displayDate,\n  clusterList,\n  changeSearch,\n  changeStatus,\n  changeCluster,\n  popOverClick,\n  popOverClose,\n  selectDate,\n}) => {\n  const classes = useStyles();\n  const { palette } = useTheme();\n  const [state, setState] = useState([\n    {\n      startDate: new Date(),\n      endDate: new Date(),\n      key: 'selection',\n    },\n  ]);\n\n  return (\n    <div>\n      <div className={classes.headerSection}>\n        {/* Search Field */}\n        <InputBase\n          id=\"input-with-icon-adornment\"\n          placeholder=\"Search\"\n          className={classes.search}\n          value={searchValue}\n          onChange={changeSearch}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          }\n        />\n\n        {/* Select Workflow */}\n        <FormControl variant=\"outlined\" className={classes.formControl} focused>\n          <InputLabel className={classes.selectText}>\n            Workflow Status\n          </InputLabel>\n          <Select\n            value={statusValue}\n            onChange={changeStatus}\n            label=\"Workflow Status\"\n            className={classes.selectText}\n          >\n            <MenuItem value=\"All\">All</MenuItem>\n            <MenuItem value=\"Failed\">Failed</MenuItem>\n            <MenuItem value=\"Running\">Running</MenuItem>\n            <MenuItem value=\"Succeeded\">Completed</MenuItem>\n          </Select>\n        </FormControl>\n\n        {/* Select Cluster */}\n        <FormControl variant=\"outlined\" className={classes.formControl} focused>\n          <InputLabel className={classes.selectText}>Target Cluster</InputLabel>\n          <Select\n            value={clusterValue}\n            onChange={changeCluster}\n            label=\"Target Cluster\"\n            className={classes.selectText}\n          >\n            <MenuItem value=\"All\">All</MenuItem>\n            {clusterList?.getCluster?.map((cluster) => (\n              <MenuItem key={cluster.cluster_name} value={cluster.cluster_name}>\n                {cluster.cluster_name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <Button className={classes.selectDate} onClick={popOverClick}>\n          <Typography className={classes.displayDate}>\n            {displayDate}\n            <IconButton style={{ width: 10, height: 10 }}>\n              {isOpen ? <KeyboardArrowDownIcon /> : <ChevronRightIcon />}\n            </IconButton>\n          </Typography>\n        </Button>\n        <Popover\n          open={isOpen}\n          anchorEl={popAnchorEl}\n          onClose={popOverClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n          style={{\n            marginTop: 10,\n          }}\n        >\n          <DateRangePicker\n            onChange={(item) => {\n              setState([(item as any).selection]);\n              selectDate(\n                `${(item as any).selection.startDate}`,\n                `${(item as any).selection.endDate}`\n              );\n            }}\n            showSelectionPreview\n            moveRangeOnFirstSelection={false}\n            months={1}\n            ranges={state}\n            direction=\"vertical\"\n            editableDateInputs\n            rangeColors={[palette.primary.dark]}\n            showMonthAndYearPickers\n          />\n        </Popover>\n      </div>\n    </div>\n  );\n};\nexport default HeaderSection;\n"]},"metadata":{},"sourceType":"module"}