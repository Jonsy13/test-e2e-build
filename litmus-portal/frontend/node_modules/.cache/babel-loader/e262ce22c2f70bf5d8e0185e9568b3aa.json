{"ast":null,"code":"import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-unsafe-finally */ /* eslint-disable no-loop-func */ /* eslint-disable no-param-reassign */import YAML from'yaml';import{v4 as uuidv4}from'uuid';import{constants}from'../constants';var validateNamespace=function validateNamespace(chaosEngine){// Condition to check the namespace\nif(typeof chaosEngine.metadata.namespace==='object'){// Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\nvar namespace=Object.keys(chaosEngine.metadata.namespace)[0].replace(/\\s/g,'');chaosEngine.metadata.namespace=\"{\".concat(namespace,\"}\");}};var nameextractor=function nameextractor(val){var embeddedworkflowyamlstring=val;var parsedEmbeddedYaml=YAML.parse(embeddedworkflowyamlstring);var experimentNames=[''];var experimentList=parsedEmbeddedYaml.spec.experiments;experimentList.forEach(function(element){experimentNames.push(element.name);});if(experimentNames.length>=2){experimentNames.shift();}return experimentNames;};export var updateEngineName=function updateEngineName(parsedYaml){var engineInstance='';try{if(parsedYaml.spec!==undefined){var yamlData=parsedYaml.spec;yamlData.templates.forEach(function(template){if(template.inputs&&template.inputs.artifacts){template.inputs.artifacts.forEach(function(artifact){var chaosEngine=YAML.parse(artifact.raw.data);validateNamespace(chaosEngine);// Condition to check for the kind as ChaosEngine\nif(chaosEngine.kind==='ChaosEngine'){if(chaosEngine.metadata.generateName===undefined){chaosEngine.metadata['generateName']=chaosEngine.metadata.name;delete chaosEngine.metadata.name;}chaosEngine.metadata['labels']={instance_id:uuidv4()};validateNamespace(chaosEngine);// Edge Case: Condition to check the appns\n// Required because while parsing the chaos engine\n// '{{workflow.parameters.adminModeNamespace}}' changes to a JSON object\nif(chaosEngine.spec.appinfo&&chaosEngine.spec.appinfo.appns)if(typeof chaosEngine.spec.appinfo.appns==='object'){// Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\nvar appns=Object.keys(chaosEngine.spec.appinfo.appns)[0].replace(/\\s/g,'');chaosEngine.spec.appinfo.appns=\"{\".concat(appns,\"}\");}engineInstance+=\"\".concat(chaosEngine.metadata.labels['instance_id'],\", \");}// Update the artifact in template\nvar artifactData=artifact;artifactData.raw.data=YAML.stringify(chaosEngine);});}if(template.name.includes('revert-')){// Update the args in revert chaos template\nvar revertTemplate=template;revertTemplate.container.args[0]=\"kubectl delete chaosengine -l 'instance_id in (\".concat(engineInstance,\")' -n {{workflow.parameters.adminModeNamespace}} \");}});}return YAML.stringify(parsedYaml);}catch(err){console.error(err);return YAML.stringify(parsedYaml);}};export var updateWorkflowNameLabel=function updateWorkflowNameLabel(parsedYaml,workflowName){try{if(parsedYaml.spec!==undefined){var yamlData=parsedYaml.kind===constants.workflow?parsedYaml.spec:parsedYaml.spec.workflowSpec;yamlData.templates.forEach(function(template){if(template.inputs&&template.inputs.artifacts){template.inputs.artifacts.forEach(function(artifact){var chaosEngine=YAML.parse(artifact.raw.data);validateNamespace(chaosEngine);// Condition to check for the kind as ChaosEngine\nif(chaosEngine.kind==='ChaosEngine'){if(chaosEngine.metadata.labels!==undefined){chaosEngine.metadata.labels['workflow_name']=workflowName;}else{chaosEngine.metadata['labels']={workflow_name:workflowName};}validateNamespace(chaosEngine);// Edge Case: Condition to check the appns\n// Required because while parsing the chaos engine\n// '{{workflow.parameters.adminModeNamespace}}' changes to a JSON object\nif(chaosEngine.spec.appinfo&&chaosEngine.spec.appinfo.appns)if(typeof chaosEngine.spec.appinfo.appns==='object'){// Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\nvar appns=Object.keys(chaosEngine.spec.appinfo.appns)[0].replace(/\\s/g,'');chaosEngine.spec.appinfo.appns=\"{\".concat(appns,\"}\");}}// Update the artifact in template\nvar artifactData=artifact;artifactData.raw.data=YAML.stringify(chaosEngine);});}});}return parsedYaml;}catch(err){console.error(err);return parsedYaml;}};var parsed=function parsed(yaml){var file=yaml;if(file==='error'){var _testNames=['none'];return _testNames;}var testNames=[];try{var parsedYaml=YAML.parse(file);try{if(parsedYaml.kind==='CronWorkflow'){var totalSteps=parsedYaml.spec.workflowSpec.templates.length-1;// Total Steps in CronWorkflow\nfor(var i=0;i<totalSteps;i++){var TemplateElement=YAML.stringify(parsedYaml.spec.workflowSpec.templates[1+i]);// Accessing Current Step\nif(TemplateElement.match(/kind: ChaosEngine/g)){var _testNames2;// Checking if current step contains \"kind: ChaosEngine\"\nvar embeddedYaml=parsedYaml.spec.workflowSpec.templates[1+i].inputs.artifacts[0].raw.data;var testName=nameextractor(embeddedYaml);(_testNames2=testNames).push.apply(_testNames2,_toConsumableArray(testName));}}}else{var _totalSteps=parsedYaml.spec.templates.length-1;// Total Steps in Workflow\nfor(var _i=0;_i<_totalSteps;_i++){var _TemplateElement=YAML.stringify(parsedYaml.spec.templates[1+_i]);// Accessing Current Step\nif(_TemplateElement.match(/kind: ChaosEngine/g)){var _testNames3;// Checking if current step contains \"kind: ChaosEngine\"\nvar _embeddedYaml=parsedYaml.spec.templates[1+_i].inputs.artifacts[0].raw.data;var _testName=nameextractor(_embeddedYaml);(_testNames3=testNames).push.apply(_testNames3,_toConsumableArray(_testName));}}}}catch(err){testNames=[];}finally{return testNames;}}catch(err){testNames=[];return testNames;}};export var fetchWorkflowNameFromManifest=function fetchWorkflowNameFromManifest(manifest){return YAML.parse(manifest).metadata.name;};export var getWorkflowParameter=function getWorkflowParameter(parameterString){return parameterString.substring(1,parameterString.length-1).replace(/^\\s+|\\s+$/gm,'').split('.')[2];};export var generateChaosQuery=function generateChaosQuery(chaosQueryStringTemplate,engineName,namespace){var queryStringWithEngineName=chaosQueryStringTemplate.replaceAll('#{}',engineName);return queryStringWithEngineName.replaceAll('*{}',namespace);};export var updateNamespace=function updateNamespace(manifest,namespace){var updatedManifest=YAML.parse(manifest);updatedManifest.metadata.namespace=namespace;if(updatedManifest.kind.toLowerCase()==='workflow')updatedManifest.spec.arguments.parameters.forEach(function(parameter,index){if(parameter.name===constants.adminMode){updatedManifest.spec.arguments.parameters[index].value=namespace;}});if(updatedManifest.kind.toLowerCase()==='cronworkflow')updatedManifest.spec.workflowSpec.arguments.parameters.forEach(function(parameter,index){if(parameter.name===constants.adminMode){updatedManifest.spec.workflowSpec.arguments.parameters[index].value=namespace;}});return updatedManifest;};// This is a utility function for extracting embedded\n// yaml as a string for chaosengine with provided name\nexport var stepEmbeddedYAMLExtractor=function stepEmbeddedYAMLExtractor(manifest,stepName){var file=manifest;var embeddedYaml='';try{var parsedYaml=YAML.parse(file);try{if(parsedYaml.kind==='CronWorkflow'){var totalSteps=parsedYaml.spec.workflowSpec.templates.length-1;// Total Steps in CronWorkflow\nfor(var i=0;i<totalSteps;i++){if(parsedYaml.spec.workflowSpec.templates[1+i].name===stepName){embeddedYaml=parsedYaml.spec.workflowSpec.templates[1+i].inputs.artifacts[0].raw.data;break;}}}else{var _totalSteps2=parsedYaml.spec.templates.length-1;// Total Steps in Workflow\nfor(var _i2=0;_i2<_totalSteps2;_i2++){if(parsedYaml.spec.templates[1+_i2].name===stepName){embeddedYaml=parsedYaml.spec.templates[1+_i2].inputs.artifacts[0].raw.data;break;}}}}catch(err){embeddedYaml='';}finally{return embeddedYaml;}}catch(err){embeddedYaml='';return embeddedYaml;}};export default parsed;/**\n * updateManifestImage updates the image registry of the workflow manifest\n */export var updateManifestImage=function updateManifestImage(parsedYaml,registryData){if(parsedYaml.spec!==undefined){if(parsedYaml.kind.toLowerCase()==='workflow'){if(registryData.image_registry_type.toLocaleLowerCase()==='private'){parsedYaml.spec['imagePullSecrets']=[{name:registryData.secret_name}];}parsedYaml.spec.templates.forEach(function(template){if(template.container){if(registryData.image_repo_name!==constants.litmus){var imageData=template.container.image.split('/');var imageName=imageData[imageData.length-1];template.container.image=\"\".concat(registryData.image_registry_name,\"/\").concat(registryData.image_repo_name,\"/\").concat(imageName);}else{var _imageData=template.container.image.split('/');var _imageName=_imageData[_imageData.length-1];template.container.image=\"\".concat(constants.litmus,\"/\").concat(_imageName);}}});}if(parsedYaml.kind.toLowerCase()==='cronworkflow'){if(registryData.image_registry_type.toLocaleLowerCase()==='private'){parsedYaml.spec.workflowSpec['imagePullSecrets']=[{name:registryData.secret_name}];}parsedYaml.spec.workflowSpec.templates.forEach(function(template){if(template.container){if(registryData.image_repo_name!==constants.litmus){var imageData=template.container.image.split('/');var imageName=imageData[imageData.length-1];template.container.image=\"\".concat(registryData.image_registry_name,\"/\").concat(registryData.image_repo_name,\"/\").concat(imageName);}else{var _imageData2=template.container.image.split('/');var _imageName2=_imageData2[_imageData2.length-1];template.container.image=\"\".concat(constants.litmus,\"/\").concat(_imageName2);}}});}}return YAML.stringify(parsedYaml);};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/yamlUtils.ts"],"names":["YAML","v4","uuidv4","constants","validateNamespace","chaosEngine","metadata","namespace","Object","keys","replace","nameextractor","val","embeddedworkflowyamlstring","parsedEmbeddedYaml","parse","experimentNames","experimentList","spec","experiments","forEach","element","push","name","length","shift","updateEngineName","parsedYaml","engineInstance","undefined","yamlData","templates","template","inputs","artifacts","artifact","raw","data","kind","generateName","instance_id","appinfo","appns","labels","artifactData","stringify","includes","revertTemplate","container","args","err","console","error","updateWorkflowNameLabel","workflowName","workflow","workflowSpec","workflow_name","parsed","yaml","file","testNames","totalSteps","i","TemplateElement","match","embeddedYaml","testName","fetchWorkflowNameFromManifest","manifest","getWorkflowParameter","parameterString","substring","split","generateChaosQuery","chaosQueryStringTemplate","engineName","queryStringWithEngineName","replaceAll","updateNamespace","updatedManifest","toLowerCase","arguments","parameters","parameter","index","adminMode","value","stepEmbeddedYAMLExtractor","stepName","updateManifestImage","registryData","image_registry_type","toLocaleLowerCase","secret_name","image_repo_name","litmus","imageData","image","imageName","image_registry_name"],"mappings":"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","sourcesContent":["/* eslint-disable no-unsafe-finally */\n/* eslint-disable no-loop-func */\n/* eslint-disable no-param-reassign */\nimport YAML from 'yaml';\nimport { v4 as uuidv4 } from 'uuid';\nimport { constants } from '../constants';\nimport { ImageRegistryInfo } from '../models/redux/image_registry';\n\nconst validateNamespace = (chaosEngine: any) => {\n  // Condition to check the namespace\n  if (typeof chaosEngine.metadata.namespace === 'object') {\n    // Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\n    const namespace = Object.keys(chaosEngine.metadata.namespace)[0].replace(\n      /\\s/g,\n      ''\n    );\n    chaosEngine.metadata.namespace = `{${namespace}}`;\n  }\n};\nconst nameextractor = (val: any) => {\n  const embeddedworkflowyamlstring = val;\n  const parsedEmbeddedYaml = YAML.parse(embeddedworkflowyamlstring as string);\n  const experimentNames = [''];\n  const experimentList = parsedEmbeddedYaml.spec.experiments;\n\n  (experimentList as any).forEach((element: any) => {\n    experimentNames.push(element.name);\n  });\n\n  if (experimentNames.length >= 2) {\n    experimentNames.shift();\n  }\n\n  return experimentNames;\n};\n\nexport const updateEngineName = (parsedYaml: any) => {\n  let engineInstance: string = '';\n  try {\n    if (parsedYaml.spec !== undefined) {\n      const yamlData = parsedYaml.spec;\n      yamlData.templates.forEach((template: any) => {\n        if (template.inputs && template.inputs.artifacts) {\n          template.inputs.artifacts.forEach((artifact: any) => {\n            const chaosEngine = YAML.parse(artifact.raw.data);\n            validateNamespace(chaosEngine);\n            // Condition to check for the kind as ChaosEngine\n            if (chaosEngine.kind === 'ChaosEngine') {\n              if (chaosEngine.metadata.generateName === undefined) {\n                chaosEngine.metadata['generateName'] =\n                  chaosEngine.metadata.name;\n                delete chaosEngine.metadata.name;\n              }\n              chaosEngine.metadata['labels'] = {\n                instance_id: uuidv4(),\n              };\n              validateNamespace(chaosEngine);\n\n              // Edge Case: Condition to check the appns\n              // Required because while parsing the chaos engine\n              // '{{workflow.parameters.adminModeNamespace}}' changes to a JSON object\n              if (chaosEngine.spec.appinfo && chaosEngine.spec.appinfo.appns)\n                if (typeof chaosEngine.spec.appinfo.appns === 'object') {\n                  // Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\n                  const appns = Object.keys(\n                    chaosEngine.spec.appinfo.appns\n                  )[0].replace(/\\s/g, '');\n                  chaosEngine.spec.appinfo.appns = `{${appns}}`;\n                }\n              engineInstance += `${chaosEngine.metadata.labels['instance_id']}, `;\n            }\n            // Update the artifact in template\n            const artifactData = artifact;\n            artifactData.raw.data = YAML.stringify(chaosEngine);\n          });\n        }\n        if (template.name.includes('revert-')) {\n          // Update the args in revert chaos template\n          const revertTemplate = template;\n          revertTemplate.container.args[0] = `kubectl delete chaosengine -l 'instance_id in (${engineInstance})' -n {{workflow.parameters.adminModeNamespace}} `;\n        }\n      });\n    }\n    return YAML.stringify(parsedYaml);\n  } catch (err) {\n    console.error(err);\n    return YAML.stringify(parsedYaml);\n  }\n};\n\nexport const updateWorkflowNameLabel = (\n  parsedYaml: any,\n  workflowName: string\n) => {\n  try {\n    if (parsedYaml.spec !== undefined) {\n      const yamlData =\n        parsedYaml.kind === constants.workflow\n          ? parsedYaml.spec\n          : parsedYaml.spec.workflowSpec;\n      yamlData.templates.forEach((template: any) => {\n        if (template.inputs && template.inputs.artifacts) {\n          template.inputs.artifacts.forEach((artifact: any) => {\n            const chaosEngine = YAML.parse(artifact.raw.data);\n            validateNamespace(chaosEngine);\n            // Condition to check for the kind as ChaosEngine\n            if (chaosEngine.kind === 'ChaosEngine') {\n              if (chaosEngine.metadata.labels !== undefined) {\n                chaosEngine.metadata.labels['workflow_name'] = workflowName;\n              } else {\n                chaosEngine.metadata['labels'] = {\n                  workflow_name: workflowName,\n                };\n              }\n\n              validateNamespace(chaosEngine);\n\n              // Edge Case: Condition to check the appns\n              // Required because while parsing the chaos engine\n              // '{{workflow.parameters.adminModeNamespace}}' changes to a JSON object\n              if (chaosEngine.spec.appinfo && chaosEngine.spec.appinfo.appns)\n                if (typeof chaosEngine.spec.appinfo.appns === 'object') {\n                  // Removes any whitespace in '{{workflow.parameters.adminModeNamespace}}'\n                  const appns = Object.keys(\n                    chaosEngine.spec.appinfo.appns\n                  )[0].replace(/\\s/g, '');\n                  chaosEngine.spec.appinfo.appns = `{${appns}}`;\n                }\n            }\n            // Update the artifact in template\n            const artifactData = artifact;\n            artifactData.raw.data = YAML.stringify(chaosEngine);\n          });\n        }\n      });\n    }\n    return parsedYaml;\n  } catch (err) {\n    console.error(err);\n    return parsedYaml;\n  }\n};\n\nconst parsed = (yaml: string) => {\n  const file = yaml;\n  if (file === 'error') {\n    const testNames = ['none'];\n    return testNames;\n  }\n  let testNames: string[] = [];\n  try {\n    const parsedYaml = YAML.parse(file as string);\n    try {\n      if (parsedYaml.kind === 'CronWorkflow') {\n        const totalSteps = parsedYaml.spec.workflowSpec.templates.length - 1; // Total Steps in CronWorkflow\n        for (let i = 0; i < totalSteps; i++) {\n          const TemplateElement = YAML.stringify(\n            parsedYaml.spec.workflowSpec.templates[1 + i]\n          ); // Accessing Current Step\n          if (TemplateElement.match(/kind: ChaosEngine/g)) {\n            // Checking if current step contains \"kind: ChaosEngine\"\n            const embeddedYaml =\n              parsedYaml.spec.workflowSpec.templates[1 + i].inputs.artifacts[0]\n                .raw.data;\n            const testName = nameextractor(embeddedYaml);\n            testNames.push(...testName);\n          }\n        }\n      } else {\n        const totalSteps = parsedYaml.spec.templates.length - 1; // Total Steps in Workflow\n        for (let i = 0; i < totalSteps; i++) {\n          const TemplateElement = YAML.stringify(\n            parsedYaml.spec.templates[1 + i]\n          ); // Accessing Current Step\n          if (TemplateElement.match(/kind: ChaosEngine/g)) {\n            // Checking if current step contains \"kind: ChaosEngine\"\n            const embeddedYaml =\n              parsedYaml.spec.templates[1 + i].inputs.artifacts[0].raw.data;\n            const testName = nameextractor(embeddedYaml);\n            testNames.push(...testName);\n          }\n        }\n      }\n    } catch (err) {\n      testNames = [];\n    } finally {\n      return testNames;\n    }\n  } catch (err) {\n    testNames = [];\n    return testNames;\n  }\n};\n\nexport const fetchWorkflowNameFromManifest = (manifest: string) => {\n  return YAML.parse(manifest).metadata.name;\n};\n\nexport const getWorkflowParameter = (parameterString: string) => {\n  return parameterString\n    .substring(1, parameterString.length - 1)\n    .replace(/^\\s+|\\s+$/gm, '')\n    .split('.')[2];\n};\n\nexport const generateChaosQuery = (\n  chaosQueryStringTemplate: string,\n  engineName: string,\n  namespace: string\n) => {\n  const queryStringWithEngineName: string = chaosQueryStringTemplate.replaceAll(\n    '#{}',\n    engineName\n  );\n  return queryStringWithEngineName.replaceAll('*{}', namespace);\n};\n\nexport const updateNamespace = (manifest: string, namespace: string) => {\n  const updatedManifest = YAML.parse(manifest);\n  updatedManifest.metadata.namespace = namespace;\n  if (updatedManifest.kind.toLowerCase() === 'workflow')\n    updatedManifest.spec.arguments.parameters.forEach(\n      (parameter: any, index: number) => {\n        if (parameter.name === constants.adminMode) {\n          updatedManifest.spec.arguments.parameters[index].value = namespace;\n        }\n      }\n    );\n  if (updatedManifest.kind.toLowerCase() === 'cronworkflow')\n    updatedManifest.spec.workflowSpec.arguments.parameters.forEach(\n      (parameter: any, index: number) => {\n        if (parameter.name === constants.adminMode) {\n          updatedManifest.spec.workflowSpec.arguments.parameters[index].value =\n            namespace;\n        }\n      }\n    );\n  return updatedManifest;\n};\n\n// This is a utility function for extracting embedded\n// yaml as a string for chaosengine with provided name\nexport const stepEmbeddedYAMLExtractor = (\n  manifest: string,\n  stepName: string\n) => {\n  const file = manifest;\n  let embeddedYaml = '';\n  try {\n    const parsedYaml = YAML.parse(file as string);\n    try {\n      if (parsedYaml.kind === 'CronWorkflow') {\n        const totalSteps = parsedYaml.spec.workflowSpec.templates.length - 1; // Total Steps in CronWorkflow\n        for (let i = 0; i < totalSteps; i++) {\n          if (parsedYaml.spec.workflowSpec.templates[1 + i].name === stepName) {\n            embeddedYaml =\n              parsedYaml.spec.workflowSpec.templates[1 + i].inputs.artifacts[0]\n                .raw.data;\n            break;\n          }\n        }\n      } else {\n        const totalSteps = parsedYaml.spec.templates.length - 1; // Total Steps in Workflow\n        for (let i = 0; i < totalSteps; i++) {\n          if (parsedYaml.spec.templates[1 + i].name === stepName) {\n            embeddedYaml =\n              parsedYaml.spec.templates[1 + i].inputs.artifacts[0].raw.data;\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      embeddedYaml = '';\n    } finally {\n      return embeddedYaml;\n    }\n  } catch (err) {\n    embeddedYaml = '';\n    return embeddedYaml;\n  }\n};\n\nexport default parsed;\n\n/**\n * updateManifestImage updates the image registry of the workflow manifest\n */\nexport const updateManifestImage = (\n  parsedYaml: any,\n  registryData: ImageRegistryInfo\n) => {\n  if (parsedYaml.spec !== undefined) {\n    if (parsedYaml.kind.toLowerCase() === 'workflow') {\n      if (registryData.image_registry_type.toLocaleLowerCase() === 'private') {\n        parsedYaml.spec['imagePullSecrets'] = [\n          {\n            name: registryData.secret_name,\n          },\n        ];\n      }\n      parsedYaml.spec.templates.forEach((template: any) => {\n        if (template.container) {\n          if (registryData.image_repo_name !== constants.litmus) {\n            const imageData = template.container.image.split('/');\n            const imageName = imageData[imageData.length - 1];\n            template.container.image = `${registryData.image_registry_name}/${registryData.image_repo_name}/${imageName}`;\n          } else {\n            const imageData = template.container.image.split('/');\n            const imageName = imageData[imageData.length - 1];\n            template.container.image = `${constants.litmus}/${imageName}`;\n          }\n        }\n      });\n    }\n    if (parsedYaml.kind.toLowerCase() === 'cronworkflow') {\n      if (registryData.image_registry_type.toLocaleLowerCase() === 'private') {\n        parsedYaml.spec.workflowSpec['imagePullSecrets'] = [\n          {\n            name: registryData.secret_name,\n          },\n        ];\n      }\n      parsedYaml.spec.workflowSpec.templates.forEach((template: any) => {\n        if (template.container) {\n          if (registryData.image_repo_name !== constants.litmus) {\n            const imageData = template.container.image.split('/');\n            const imageName = imageData[imageData.length - 1];\n            template.container.image = `${registryData.image_registry_name}/${registryData.image_repo_name}/${imageName}`;\n          } else {\n            const imageData = template.container.image.split('/');\n            const imageName = imageData[imageData.length - 1];\n            template.container.image = `${constants.litmus}/${imageName}`;\n          }\n        }\n      });\n    }\n  }\n  return YAML.stringify(parsedYaml);\n};\n"]},"metadata":{},"sourceType":"module"}