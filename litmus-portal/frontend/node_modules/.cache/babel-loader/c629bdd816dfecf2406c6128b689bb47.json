{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChaosHub/MyHubConnectDrawer/index.tsx\";\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Drawer, FormControl, FormControlLabel, Radio, RadioGroup, Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport { ButtonFilled, ButtonOutlined, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BackButton from '../../../components/Button/BackButton';\nimport GithubInputFields from '../../../components/GitHubComponents/GithubInputFields/GithubInputFields';\nimport GitHubToggleButton from '../../../components/GitHubComponents/GitHubToggleButtons/GitHubToggleButton';\nimport Loader from '../../../components/Loader';\nimport { constants } from '../../../constants';\nimport { ADD_MY_HUB, GENERATE_SSH, SAVE_MY_HUB, UPDATE_MY_HUB } from '../../../graphql/mutations';\nimport { GET_HUB_STATUS } from '../../../graphql/queries';\nimport { MyHubType } from '../../../models/graphql/user';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport { isValidWebUrl, validateStartEmptySpacing } from '../../../utils/validate';\nimport useStyles from './styles';\n\nvar MyHubConnectDrawer = function MyHubConnectDrawer(_ref) {\n  var hubName = _ref.hubName,\n      drawerState = _ref.drawerState,\n      handleDrawerClose = _ref.handleDrawerClose,\n      refetchQuery = _ref.refetchQuery,\n      setAlertState = _ref.setAlertState,\n      setAlertResult = _ref.setAlertResult;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n\n  var _useState = useState({\n    HubName: '',\n    GitURL: '',\n    GitBranch: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      gitHub = _useState2[0],\n      setGitHub = _useState2[1];\n\n  var _React$useState = React.useState({\n    isPublicToggled: true,\n    isPrivateToggled: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isToggled = _React$useState2[0],\n      setIsToggled = _React$useState2[1];\n\n  var _useState3 = useState('token'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      privateHub = _useState4[0],\n      setPrivateHub = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      accessToken = _useState6[0],\n      setAccessToken = _useState6[1];\n\n  var _useState7 = useState({\n    privateKey: '',\n    publicKey: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sshKey = _useState8[0],\n      setSshKey = _useState8[1];\n\n  var _useQuery = useQuery(GET_HUB_STATUS, {\n    variables: {\n      data: projectID\n    },\n    fetchPolicy: 'network-only'\n  }),\n      data = _useQuery.data;\n\n  var hubData = data === null || data === void 0 ? void 0 : data.getHubStatus.filter(function (hubs) {\n    return hubs.HubName === hubName;\n  })[0];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      saveChanges = _useState10[0],\n      setSaveChanges = _useState10[1];\n  /**\n   * Add MyHub mutation to create a new hub\n   */\n\n\n  var _useMutation = useMutation(ADD_MY_HUB, {\n    onCompleted: function onCompleted() {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.success,\n        message: 'My Hub was successfully created'\n      });\n      refetchQuery();\n    },\n    onError: function onError(error) {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.error,\n        message: \"Error: \".concat(error.message, \". \\n                    You can still save the Hub configuration.\")\n      });\n      setSaveChanges(true);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addMyHub = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n  /**\n   * Save My Hub mutation to save a hub details for later\n   */\n\n\n  var _useMutation3 = useMutation(SAVE_MY_HUB, {\n    onCompleted: function onCompleted() {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.success,\n        message: 'My Hub was successfully saved'\n      });\n      setSaveChanges(false);\n      refetchQuery();\n    },\n    onError: function onError() {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.error,\n        message: 'Error while adding My Hub'\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      saveMyHub = _useMutation4[0];\n  /**\n   * Update MyHub mutation to edit the myhub configuration\n   */\n\n\n  var _useMutation5 = useMutation(UPDATE_MY_HUB, {\n    onCompleted: function onCompleted() {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.success,\n        message: 'My Hub configurations successfully updated'\n      });\n      refetchQuery();\n    },\n    onError: function onError(error) {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.error,\n        message: \"Error:\".concat(error.message)\n      });\n    }\n  }),\n      _useMutation6 = _slicedToArray(_useMutation5, 2),\n      updateMyHub = _useMutation6[0],\n      updateHubLoader = _useMutation6[1].loading;\n  /**\n   * Mutation to generate SSH key\n   */\n\n\n  var _useMutation7 = useMutation(GENERATE_SSH, {\n    onCompleted: function onCompleted(data) {\n      setSshKey({\n        privateKey: data.generaterSSHKey.privateKey,\n        publicKey: data.generaterSSHKey.publicKey\n      });\n    }\n  }),\n      _useMutation8 = _slicedToArray(_useMutation7, 2),\n      generateSSHKey = _useMutation8[0],\n      sshLoading = _useMutation8[1].loading;\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    /**\n     * If hubName is present, edit myhub mutation will be called\n     */\n\n    if (hubName === null || hubName === void 0 ? void 0 : hubName.length) {\n      updateMyHub({\n        variables: {\n          MyHubDetails: {\n            id: hubData === null || hubData === void 0 ? void 0 : hubData.id,\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled ? false : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled ? MyHubType.basic : privateHub === 'token' ? MyHubType.token : privateHub === 'ssh' ? MyHubType.ssh : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey\n          },\n          projectID: projectID\n        }\n      });\n    } else if (saveChanges) {\n      /**\n       * Save changes is enabled if add myhub mutation fails.\n       * This will call the save myhub mutation\n       */\n      saveMyHub({\n        variables: {\n          MyHubDetails: {\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled ? false : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled ? MyHubType.basic : privateHub === 'token' ? MyHubType.token : privateHub === 'ssh' ? MyHubType.ssh : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey\n          },\n          projectID: projectID\n        }\n      });\n    } else\n      /**\n       * This will call the add myhub mutation\n       */\n      addMyHub({\n        variables: {\n          MyHubDetails: {\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled ? false : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled ? MyHubType.basic : privateHub === 'token' ? MyHubType.token : privateHub === 'ssh' ? MyHubType.ssh : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey\n          },\n          projectID: projectID\n        }\n      });\n  };\n\n  var handleGitURL = function handleGitURL(event) {\n    setGitHub({\n      HubName: gitHub.HubName,\n      GitURL: event.target.value,\n      GitBranch: gitHub.GitBranch\n    });\n  };\n\n  var handleGitBranch = function handleGitBranch(event) {\n    setGitHub({\n      HubName: gitHub.HubName,\n      GitURL: gitHub.GitURL,\n      GitBranch: event.target.value\n    });\n  };\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      copying = _useState12[0],\n      setCopying = _useState12[1]; // Function to copy the SSH key\n\n\n  var copyTextToClipboard = function copyTextToClipboard(text) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n\n    setCopying(true);\n    navigator.clipboard.writeText(text).catch(function (err) {\n      return console.error('Async: Could not copy text: ', err);\n    });\n    setTimeout(function () {\n      return setCopying(false);\n    }, 3000);\n  };\n\n  useEffect(function () {\n    /**\n     * If hubName is present, this fetches the myhub configuration\n     * and sets in the inputfields (for edit Myhub)\n     */\n    if (hubName === null || hubName === void 0 ? void 0 : hubName.length) {\n      if (hubData !== undefined) {\n        setGitHub({\n          HubName: hubData.HubName,\n          GitURL: hubData.RepoURL,\n          GitBranch: hubData.RepoBranch\n        });\n\n        if (hubData.IsPrivate) {\n          setIsToggled({\n            isPublicToggled: false,\n            isPrivateToggled: true\n          });\n        } else {\n          setIsToggled({\n            isPublicToggled: true,\n            isPrivateToggled: false\n          });\n        }\n\n        if (hubData.AuthType === MyHubType.token) {\n          setPrivateHub('token');\n          setAccessToken(hubData.Token);\n        } else if (hubData.AuthType === MyHubType.ssh) {\n          setPrivateHub('ssh');\n          setSshKey({\n            privateKey: hubData.SSHPrivateKey,\n            publicKey: hubData.SSHPublicKey\n          });\n        } else {\n          setPrivateHub('token');\n        }\n      }\n    } else {\n      /**\n       * Whenever the drawer is opened, if it is not for edit MyHub,\n       * the default values in the input field will be empty string\n       */\n      setGitHub({\n        HubName: '',\n        GitURL: '',\n        GitBranch: ''\n      });\n      setSaveChanges(false);\n      setSshKey({\n        publicKey: '',\n        privateKey: ''\n      });\n      setPrivateHub('token');\n    }\n  }, [drawerState, hubName]);\n  return /*#__PURE__*/React.createElement(Drawer, {\n    className: classes.drawer,\n    anchor: \"right\",\n    open: drawerState,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ModalProps: {\n      keepMounted: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.backBtnDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    onClick: function onClick() {\n      return handleDrawerClose();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 11\n    }\n  }, (hubName === null || hubName === void 0 ? void 0 : hubName.length) ? t('myhub.connectHubPage.editHub') : t('myhub.connectHubPage.connectHub'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.detailsDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"login-form\",\n    autoComplete: \"on\",\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.hubNameInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    \"data-cy\": \"hubName\",\n    label: \"Hub Name\",\n    value: gitHub.HubName,\n    helperText: validateStartEmptySpacing(gitHub.HubName) ? t('myhub.validationEmptySpace') : '',\n    variant: validateStartEmptySpacing(gitHub.HubName) ? 'error' : 'primary',\n    required: true,\n    onChange: function onChange(e) {\n      return setGitHub({\n        HubName: e.target.value,\n        GitURL: gitHub.GitURL,\n        GitBranch: gitHub.GitBranch\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainPrivateRepo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.privateRepoDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(GitHubToggleButton, {\n    isToggled: isToggled,\n    setIsToggled: setIsToggled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 21\n    }\n  })), isToggled.isPublicToggled ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputFieldDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(GithubInputFields, {\n    gitURL: gitHub.GitURL,\n    gitBranch: gitHub.GitBranch,\n    setGitURL: handleGitURL,\n    setGitBranch: handleGitBranch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 23\n    }\n  })) : null, isToggled.isPrivateToggled ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.privateToggleDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.privateRepoDetails,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(GithubInputFields, {\n    gitURL: gitHub.GitURL,\n    gitBranch: gitHub.GitBranch,\n    setGitURL: handleGitURL,\n    setGitBranch: handleGitBranch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    \"aria-label\": \"privateHub\",\n    name: \"privateHub\",\n    value: privateHub,\n    onChange: function onChange(e) {\n      if (e.target.value === 'ssh') {\n        generateSSHKey();\n      }\n\n      if (e.target.value === 'token') {\n        setSshKey({\n          privateKey: '',\n          publicKey: ''\n        });\n      }\n\n      setPrivateHub(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"token\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 31\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 31\n      }\n    }, t('myhub.connectHubPage.accessToken')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 27\n    }\n  }), privateHub === 'token' ? /*#__PURE__*/React.createElement(InputField, {\n    \"data-cy\": \"token\",\n    label: \"Access Token\",\n    value: accessToken,\n    helperText: validateStartEmptySpacing(accessToken) ? t('myhub.validationEmptySpace') : '',\n    variant: validateStartEmptySpacing(accessToken) ? 'error' : 'primary',\n    required: true,\n    onChange: function onChange(e) {\n      return setAccessToken(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 29\n    }\n  }) : null, /*#__PURE__*/React.createElement(FormControlLabel, {\n    className: classes.sshRadioBtn,\n    value: \"ssh\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 31\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 31\n      }\n    }, t('myhub.connectHubPage.ssh')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 27\n    }\n  }), privateHub === 'ssh' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sshDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.sshAlert,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 31\n    }\n  }, t('myhub.connectHubPage.sshAlert')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.alertText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 31\n    }\n  }, t('myhub.connectHubPage.sshText')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sshDataDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 31\n    }\n  }, sshLoading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.sshText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 37\n    }\n  }, sshKey.publicKey), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.copyBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      return copyTextToClipboard(sshKey.publicKey);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 39\n    }\n  }, !copying ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rowDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 43\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/copy.svg\",\n    className: classes.copyBtnImg,\n    alt: \"copy\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 45\n    }\n  }, t('myhub.installChaos.copy'))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rowDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 43\n    }\n  }, /*#__PURE__*/React.createElement(Done, {\n    className: classes.done,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 45\n    }\n  }, t('myhub.installChaos.copied')))))))) : null))) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.btnDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    \"data-cy\": \"cancel\",\n    onClick: function onClick() {\n      return handleDrawerClose();\n    },\n    className: classes.cancelBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 17\n    }\n  }, t('myhub.connectHubPage.cancel')), /*#__PURE__*/React.createElement(ButtonFilled, {\n    style: {\n      width: 140\n    },\n    variant: \"success\",\n    \"data-cy\": \"MyHubSubmit\",\n    type: \"submit\",\n    disabled: !isValidWebUrl(gitHub.GitURL) || validateStartEmptySpacing(gitHub.GitBranch) || loading || updateHubLoader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 17\n    }\n  }, loading || updateHubLoader ? /*#__PURE__*/React.createElement(Loader, {\n    size: 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 21\n    }\n  }) : saveChanges ? 'Save Changes' : t('myhub.connectHubPage.submitBtn'))))))));\n};\n\nexport default MyHubConnectDrawer;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChaosHub/MyHubConnectDrawer/index.tsx"],"names":["useMutation","useQuery","Drawer","FormControl","FormControlLabel","Radio","RadioGroup","Typography","Done","ButtonFilled","ButtonOutlined","InputField","React","useEffect","useState","useTranslation","BackButton","GithubInputFields","GitHubToggleButton","Loader","constants","ADD_MY_HUB","GENERATE_SSH","SAVE_MY_HUB","UPDATE_MY_HUB","GET_HUB_STATUS","MyHubType","getProjectID","isValidWebUrl","validateStartEmptySpacing","useStyles","MyHubConnectDrawer","hubName","drawerState","handleDrawerClose","refetchQuery","setAlertState","setAlertResult","classes","t","projectID","HubName","GitURL","GitBranch","gitHub","setGitHub","isPublicToggled","isPrivateToggled","isToggled","setIsToggled","privateHub","setPrivateHub","accessToken","setAccessToken","privateKey","publicKey","sshKey","setSshKey","variables","data","fetchPolicy","hubData","getHubStatus","filter","hubs","saveChanges","setSaveChanges","onCompleted","type","success","message","onError","error","addMyHub","loading","saveMyHub","updateMyHub","updateHubLoader","generaterSSHKey","generateSSHKey","sshLoading","handleSubmit","event","preventDefault","length","MyHubDetails","id","trim","RepoURL","RepoBranch","IsPrivate","AuthType","basic","token","ssh","Token","UserName","Password","SSHPrivateKey","SSHPublicKey","handleGitURL","target","value","handleGitBranch","copying","setCopying","copyTextToClipboard","text","navigator","clipboard","console","writeText","catch","err","setTimeout","undefined","drawer","paper","drawerPaper","keepMounted","header","backBtnDiv","detailsDiv","inputDiv","hubNameInput","e","mainPrivateRepo","privateRepoDiv","inputFieldDiv","privateToggleDiv","privateRepoDetails","formControl","root","radio","checked","sshRadioBtn","sshDiv","sshAlert","alertText","sshDataDiv","sshText","copyBtn","rowDiv","copyBtnImg","done","btnDiv","cancelBtn","width"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport {\n  Drawer,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport { ButtonFilled, ButtonOutlined, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BackButton from '../../../components/Button/BackButton';\nimport GithubInputFields from '../../../components/GitHubComponents/GithubInputFields/GithubInputFields';\nimport GitHubToggleButton from '../../../components/GitHubComponents/GitHubToggleButtons/GitHubToggleButton';\nimport Loader from '../../../components/Loader';\nimport { constants } from '../../../constants';\nimport {\n  ADD_MY_HUB,\n  GENERATE_SSH,\n  SAVE_MY_HUB,\n  UPDATE_MY_HUB,\n} from '../../../graphql/mutations';\nimport { GET_HUB_STATUS } from '../../../graphql/queries';\nimport {\n  CreateMyHub,\n  MyHubData,\n  MyHubType,\n  SSHKey,\n  SSHKeys,\n} from '../../../models/graphql/user';\nimport { HubStatus } from '../../../models/redux/myhub';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport {\n  isValidWebUrl,\n  validateStartEmptySpacing,\n} from '../../../utils/validate';\nimport useStyles from './styles';\n\ninterface GitHub {\n  HubName: string;\n  GitURL: string;\n  GitBranch: string;\n}\n\ninterface MyHubToggleProps {\n  isPublicToggled: boolean;\n  isPrivateToggled: boolean;\n}\n\ninterface CloneResult {\n  type: string;\n  message: string;\n}\n\ninterface MyHubConnectDrawerProps {\n  hubName?: string;\n  drawerState: boolean;\n  handleDrawerClose: () => void;\n  refetchQuery: () => void;\n  setAlertState: (alertState: boolean) => void;\n  setAlertResult: (alertResult: CloneResult) => void;\n}\n\nconst MyHubConnectDrawer: React.FC<MyHubConnectDrawerProps> = ({\n  hubName,\n  drawerState,\n  handleDrawerClose,\n  refetchQuery,\n  setAlertState,\n  setAlertResult,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const [gitHub, setGitHub] = useState<GitHub>({\n    HubName: '',\n    GitURL: '',\n    GitBranch: '',\n  });\n  const [isToggled, setIsToggled] = React.useState<MyHubToggleProps>({\n    isPublicToggled: true,\n    isPrivateToggled: false,\n  });\n  const [privateHub, setPrivateHub] = useState('token');\n  const [accessToken, setAccessToken] = useState('');\n  const [sshKey, setSshKey] = useState<SSHKey>({\n    privateKey: '',\n    publicKey: '',\n  });\n\n  const { data } = useQuery<HubStatus>(GET_HUB_STATUS, {\n    variables: { data: projectID },\n    fetchPolicy: 'network-only',\n  });\n  const hubData = data?.getHubStatus.filter(\n    (hubs) => hubs.HubName === hubName\n  )[0];\n\n  const [saveChanges, setSaveChanges] = useState(false);\n\n  /**\n   * Add MyHub mutation to create a new hub\n   */\n  const [addMyHub, { loading }] = useMutation<MyHubData, CreateMyHub>(\n    ADD_MY_HUB,\n    {\n      onCompleted: () => {\n        setAlertState(true);\n        setAlertResult({\n          type: constants.success,\n          message: 'My Hub was successfully created',\n        });\n        refetchQuery();\n      },\n      onError: (error) => {\n        setAlertState(true);\n        setAlertResult({\n          type: constants.error,\n          message: `Error: ${error.message}. \n                    You can still save the Hub configuration.`,\n        });\n        setSaveChanges(true);\n      },\n    }\n  );\n\n  /**\n   * Save My Hub mutation to save a hub details for later\n   */\n  const [saveMyHub] = useMutation<MyHubData, CreateMyHub>(SAVE_MY_HUB, {\n    onCompleted: () => {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.success,\n        message: 'My Hub was successfully saved',\n      });\n      setSaveChanges(false);\n      refetchQuery();\n    },\n    onError: () => {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.error,\n        message: 'Error while adding My Hub',\n      });\n    },\n  });\n\n  /**\n   * Update MyHub mutation to edit the myhub configuration\n   */\n  const [updateMyHub, { loading: updateHubLoader }] = useMutation<\n    MyHubData,\n    CreateMyHub\n  >(UPDATE_MY_HUB, {\n    onCompleted: () => {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.success,\n        message: 'My Hub configurations successfully updated',\n      });\n      refetchQuery();\n    },\n    onError: (error) => {\n      setAlertState(true);\n      setAlertResult({\n        type: constants.error,\n        message: `Error:${error.message}`,\n      });\n    },\n  });\n\n  /**\n   * Mutation to generate SSH key\n   */\n  const [generateSSHKey, { loading: sshLoading }] = useMutation<SSHKeys>(\n    GENERATE_SSH,\n    {\n      onCompleted: (data) => {\n        setSshKey({\n          privateKey: data.generaterSSHKey.privateKey,\n          publicKey: data.generaterSSHKey.publicKey,\n        });\n      },\n    }\n  );\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    /**\n     * If hubName is present, edit myhub mutation will be called\n     */\n    if (hubName?.length) {\n      updateMyHub({\n        variables: {\n          MyHubDetails: {\n            id: hubData?.id,\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled\n              ? false\n              : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled\n              ? MyHubType.basic\n              : privateHub === 'token'\n              ? MyHubType.token\n              : privateHub === 'ssh'\n              ? MyHubType.ssh\n              : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey,\n          },\n          projectID,\n        },\n      });\n    } else if (saveChanges) {\n      /**\n       * Save changes is enabled if add myhub mutation fails.\n       * This will call the save myhub mutation\n       */\n      saveMyHub({\n        variables: {\n          MyHubDetails: {\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled\n              ? false\n              : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled\n              ? MyHubType.basic\n              : privateHub === 'token'\n              ? MyHubType.token\n              : privateHub === 'ssh'\n              ? MyHubType.ssh\n              : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey,\n          },\n          projectID,\n        },\n      });\n    } else\n    /**\n     * This will call the add myhub mutation\n     */\n      addMyHub({\n        variables: {\n          MyHubDetails: {\n            HubName: gitHub.HubName.trim(),\n            RepoURL: gitHub.GitURL,\n            RepoBranch: gitHub.GitBranch,\n            IsPrivate: isToggled.isPublicToggled\n              ? false\n              : !!isToggled.isPrivateToggled,\n            AuthType: isToggled.isPublicToggled\n              ? MyHubType.basic\n              : privateHub === 'token'\n              ? MyHubType.token\n              : privateHub === 'ssh'\n              ? MyHubType.ssh\n              : MyHubType.basic,\n            Token: accessToken,\n            UserName: 'user',\n            Password: 'user',\n            SSHPrivateKey: sshKey.privateKey,\n            SSHPublicKey: sshKey.publicKey,\n          },\n          projectID,\n        },\n      });\n  };\n\n  const handleGitURL = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setGitHub({\n      HubName: gitHub.HubName,\n      GitURL: event.target.value,\n      GitBranch: gitHub.GitBranch,\n    });\n  };\n\n  const handleGitBranch = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setGitHub({\n      HubName: gitHub.HubName,\n      GitURL: gitHub.GitURL,\n      GitBranch: event.target.value,\n    });\n  };\n\n  const [copying, setCopying] = useState(false);\n\n  // Function to copy the SSH key\n  const copyTextToClipboard = (text: string) => {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n    setCopying(true);\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n    setTimeout(() => setCopying(false), 3000);\n  };\n\n  useEffect(() => {\n    /**\n     * If hubName is present, this fetches the myhub configuration\n     * and sets in the inputfields (for edit Myhub)\n     */\n    if (hubName?.length) {\n      if (hubData !== undefined) {\n        setGitHub({\n          HubName: hubData.HubName,\n          GitURL: hubData.RepoURL,\n          GitBranch: hubData.RepoBranch,\n        });\n        if (hubData.IsPrivate) {\n          setIsToggled({\n            isPublicToggled: false,\n            isPrivateToggled: true,\n          });\n        } else {\n          setIsToggled({\n            isPublicToggled: true,\n            isPrivateToggled: false,\n          });\n        }\n        if (hubData.AuthType === MyHubType.token) {\n          setPrivateHub('token');\n          setAccessToken(hubData.Token);\n        } else if (hubData.AuthType === MyHubType.ssh) {\n          setPrivateHub('ssh');\n          setSshKey({\n            privateKey: hubData.SSHPrivateKey,\n            publicKey: hubData.SSHPublicKey,\n          });\n        } else {\n          setPrivateHub('token');\n        }\n      }\n    } else {\n      /**\n       * Whenever the drawer is opened, if it is not for edit MyHub,\n       * the default values in the input field will be empty string\n       */\n      setGitHub({\n        HubName: '',\n        GitURL: '',\n        GitBranch: '',\n      });\n      setSaveChanges(false);\n      setSshKey({\n        publicKey: '',\n        privateKey: '',\n      });\n      setPrivateHub('token');\n    }\n  }, [drawerState, hubName]);\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      anchor=\"right\"\n      open={drawerState}\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      ModalProps={{\n        keepMounted: true,\n      }}\n    >\n      <>\n        <div className={classes.header}>\n          <div className={classes.backBtnDiv}>\n            <BackButton onClick={() => handleDrawerClose()} />\n          </div>\n          <Typography variant=\"h4\" gutterBottom>\n            {hubName?.length\n              ? t('myhub.connectHubPage.editHub')\n              : t('myhub.connectHubPage.connectHub')}\n          </Typography>\n        </div>\n        <div className={classes.detailsDiv}>\n          <form id=\"login-form\" autoComplete=\"on\" onSubmit={handleSubmit}>\n            <div className={classes.inputDiv}>\n              <div className={classes.hubNameInput}>\n                <InputField\n                  data-cy=\"hubName\"\n                  label=\"Hub Name\"\n                  value={gitHub.HubName}\n                  helperText={\n                    validateStartEmptySpacing(gitHub.HubName)\n                      ? t('myhub.validationEmptySpace')\n                      : ''\n                  }\n                  variant={\n                    validateStartEmptySpacing(gitHub.HubName)\n                      ? 'error'\n                      : 'primary'\n                  }\n                  required\n                  onChange={(e) =>\n                    setGitHub({\n                      HubName: e.target.value,\n                      GitURL: gitHub.GitURL,\n                      GitBranch: gitHub.GitBranch,\n                    })\n                  }\n                />\n              </div>\n              <div>\n                <div className={classes.mainPrivateRepo}>\n                  <div className={classes.privateRepoDiv}>\n                    <GitHubToggleButton\n                      isToggled={isToggled}\n                      setIsToggled={setIsToggled}\n                    />\n                  </div>\n                  {/* If Public Repo is clicked */}\n                  {isToggled.isPublicToggled ? (\n                    <div className={classes.inputFieldDiv}>\n                      <GithubInputFields\n                        gitURL={gitHub.GitURL}\n                        gitBranch={gitHub.GitBranch}\n                        setGitURL={handleGitURL}\n                        setGitBranch={handleGitBranch}\n                      />\n                    </div>\n                  ) : null}\n                  {/* If Private Repo is Clicked */}\n                  {isToggled.isPrivateToggled ? (\n                    <div className={classes.privateToggleDiv}>\n                      <div className={classes.privateRepoDetails}>\n                        <GithubInputFields\n                          gitURL={gitHub.GitURL}\n                          gitBranch={gitHub.GitBranch}\n                          setGitURL={handleGitURL}\n                          setGitBranch={handleGitBranch}\n                        />\n                      </div>\n                      <FormControl\n                        component=\"fieldset\"\n                        className={classes.formControl}\n                      >\n                        <RadioGroup\n                          aria-label=\"privateHub\"\n                          name=\"privateHub\"\n                          value={privateHub}\n                          onChange={(e) => {\n                            if (e.target.value === 'ssh') {\n                              generateSSHKey();\n                            }\n                            if (e.target.value === 'token') {\n                              setSshKey({\n                                privateKey: '',\n                                publicKey: '',\n                              });\n                            }\n                            setPrivateHub(e.target.value);\n                          }}\n                        >\n                          <FormControlLabel\n                            value=\"token\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                              />\n                            }\n                            label={\n                              <Typography>\n                                {t('myhub.connectHubPage.accessToken')}\n                              </Typography>\n                            }\n                          />\n                          {privateHub === 'token' ? (\n                            <InputField\n                              data-cy=\"token\"\n                              label=\"Access Token\"\n                              value={accessToken}\n                              helperText={\n                                validateStartEmptySpacing(accessToken)\n                                  ? t('myhub.validationEmptySpace')\n                                  : ''\n                              }\n                              variant={\n                                validateStartEmptySpacing(accessToken)\n                                  ? 'error'\n                                  : 'primary'\n                              }\n                              required\n                              onChange={(e) => setAccessToken(e.target.value)}\n                            />\n                          ) : null}\n                          <FormControlLabel\n                            className={classes.sshRadioBtn}\n                            value=\"ssh\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                              />\n                            }\n                            label={\n                              <Typography>\n                                {t('myhub.connectHubPage.ssh')}\n                              </Typography>\n                            }\n                          />\n                          {privateHub === 'ssh' ? (\n                            <div className={classes.sshDiv}>\n                              <Typography className={classes.sshAlert}>\n                                {t('myhub.connectHubPage.sshAlert')}\n                              </Typography>\n                              <Typography className={classes.alertText}>\n                                {t('myhub.connectHubPage.sshText')}\n                              </Typography>\n                              <div className={classes.sshDataDiv}>\n                                {sshLoading ? (\n                                  <Loader />\n                                ) : (\n                                  <>\n                                    <Typography className={classes.sshText}>\n                                      {sshKey.publicKey}\n                                    </Typography>\n                                    <div className={classes.copyBtn}>\n                                      <ButtonOutlined\n                                        onClick={() =>\n                                          copyTextToClipboard(sshKey.publicKey)\n                                        }\n                                      >\n                                        {!copying ? (\n                                          <div className={classes.rowDiv}>\n                                            <img\n                                              src=\"/icons/copy.svg\"\n                                              className={classes.copyBtnImg}\n                                              alt=\"copy\"\n                                            />\n                                            <Typography>\n                                              {t('myhub.installChaos.copy')}\n                                            </Typography>\n                                          </div>\n                                        ) : (\n                                          <div className={classes.rowDiv}>\n                                            <Done className={classes.done} />\n                                            <Typography>\n                                              {t('myhub.installChaos.copied')}\n                                            </Typography>\n                                          </div>\n                                        )}\n                                      </ButtonOutlined>\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                            </div>\n                          ) : null}\n                        </RadioGroup>\n                      </FormControl>\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n              <div className={classes.btnDiv}>\n                <ButtonOutlined\n                  data-cy=\"cancel\"\n                  onClick={() => handleDrawerClose()}\n                  className={classes.cancelBtn}\n                >\n                  {t('myhub.connectHubPage.cancel')}\n                </ButtonOutlined>\n                <ButtonFilled\n                  style={{ width: 140 }}\n                  variant=\"success\"\n                  data-cy=\"MyHubSubmit\"\n                  type=\"submit\"\n                  disabled={\n                    !isValidWebUrl(gitHub.GitURL) ||\n                    validateStartEmptySpacing(gitHub.GitBranch) ||\n                    loading ||\n                    updateHubLoader\n                  }\n                >\n                  {loading || updateHubLoader ? (\n                    <Loader size={20} />\n                  ) : saveChanges ? (\n                    'Save Changes'\n                  ) : (\n                    t('myhub.connectHubPage.submitBtn')\n                  )}\n                </ButtonFilled>\n              </div>\n            </div>\n          </form>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n\nexport default MyHubConnectDrawer;\n"]},"metadata":{},"sourceType":"module"}