{"ast":null,"code":"import jwtDecode from'jsonwebtoken';var SECOND=1000;var MINUTE=SECOND*60;var HOUR=MINUTE*60;// Sets cookie in browser\nexport var setCookie=function setCookie(_ref){var name=_ref.name,value=_ref.value,exhours=_ref.exhours,path=_ref.path;var now=new Date();now.setTime(now.getTime()+exhours*HOUR);var expires=\"expires=\".concat(now.toUTCString());document.cookie=\"\".concat(name,\"=\").concat(value,\";\").concat(expires,\";path=\").concat(path!==null&&path!==void 0?path:'/');};// Gets cookie in browser\nexport function getCookie(cname){var name=\"\".concat(cname,\"=\");var decodedCookie=decodeURIComponent(document.cookie);var ca=decodedCookie.split(';');for(var i=0;i<ca.length;i++){var c=ca[i];while(c.charAt(0)===' '){c=c.substring(1);}if(c.indexOf(name)===0){return c.substring(name.length,c.length);}}return'';}// Sets the JWT token to cookie\nexport var setJWTToken=function setJWTToken(_ref2){var token=_ref2.token,cookieName=_ref2.cookieName,path=_ref2.path,errorMessage=_ref2.errorMessage;try{if(token===undefined||token===null){throw new Error('Token is undefined or null!');}var data=jwtDecode.decode(token);var expirationTime=(data.exp-data.iat)/3600;setCookie({name:cookieName,value:token,exhours:expirationTime,path:path});}catch(err){console.error(errorMessage!==null&&errorMessage!==void 0?errorMessage:'ERROR IN SETTING COOKIE: ',err);}};// Gets the JWT token from cookie\nexport function getJWTToken(cookieName){var jwtToken=getCookie(cookieName);if(jwtToken)return jwtToken;return'';}","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/cookies.ts"],"names":["jwtDecode","SECOND","MINUTE","HOUR","setCookie","name","value","exhours","path","now","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","cname","decodedCookie","decodeURIComponent","ca","split","i","length","c","charAt","substring","indexOf","setJWTToken","token","cookieName","errorMessage","undefined","Error","data","decode","expirationTime","exp","iat","err","console","error","getJWTToken","jwtToken"],"mappings":"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","sourcesContent":["import jwtDecode from 'jsonwebtoken';\n\nconst SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\n\ninterface SetCookieProps {\n  name: string;\n  value: string;\n  exhours: number;\n  path?: string;\n}\ninterface SetCookie {\n  (props: SetCookieProps): void;\n}\n\n// Sets cookie in browser\nexport const setCookie: SetCookie = ({ name, value, exhours, path }) => {\n  const now = new Date();\n  now.setTime(now.getTime() + exhours * HOUR);\n\n  const expires = `expires=${now.toUTCString()}`;\n\n  document.cookie = `${name}=${value};${expires};path=${path ?? '/'}`;\n};\n\n// Gets cookie in browser\nexport function getCookie(cname: string): string {\n  const name = `${cname}=`;\n  const decodedCookie = decodeURIComponent(document.cookie);\n  const ca = decodedCookie.split(';');\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return '';\n}\n\ninterface SetJWTTokenProps {\n  token: string;\n  cookieName: string;\n  path?: string;\n  errorMessage?: string;\n}\ninterface SetJWTToken {\n  (props: SetJWTTokenProps): void;\n}\n\n// Sets the JWT token to cookie\nexport const setJWTToken: SetJWTToken = ({\n  token,\n  cookieName,\n  path,\n  errorMessage,\n}) => {\n  try {\n    if (token === undefined || token === null) {\n      throw new Error('Token is undefined or null!');\n    }\n    const data: any = jwtDecode.decode(token);\n    const expirationTime = (data.exp - data.iat) / 3600;\n    setCookie({\n      name: cookieName,\n      value: token,\n      exhours: expirationTime,\n      path,\n    });\n  } catch (err) {\n    console.error(errorMessage ?? 'ERROR IN SETTING COOKIE: ', err);\n  }\n};\n\n// Gets the JWT token from cookie\nexport function getJWTToken(cookieName: string): string {\n  const jwtToken = getCookie(cookieName);\n\n  if (jwtToken) return jwtToken;\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}