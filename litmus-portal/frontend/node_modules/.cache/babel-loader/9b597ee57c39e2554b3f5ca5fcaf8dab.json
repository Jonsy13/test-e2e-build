{"ast":null,"code":"import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useQuery}from'@apollo/client';import{FormControl,InputLabel,MenuItem,Select}from'@material-ui/core';import localforage from'localforage';import React,{useEffect,useState}from'react';import{useTranslation}from'react-i18next';import{GET_HUB_STATUS}from'../../../graphql/queries';import{getProjectID}from'../../../utils/getSearchParams';import useStyles,{MenuProps}from'./styles';var SelectMyHub=function SelectMyHub(){var _useTranslation=useTranslation(),t=_useTranslation.t;var selectedProjectID=getProjectID();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),selectedHub=_useState2[0],setSelectedHub=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),availableHubs=_useState4[0],setAvailableHubs=_useState4[1];// Get all MyHubs with status\nvar _useQuery=useQuery(GET_HUB_STATUS,{variables:{data:selectedProjectID},fetchPolicy:'cache-and-network'}),data=_useQuery.data,loading=_useQuery.loading;var handleMyHubChange=function handleMyHubChange(event){setSelectedHub(event.target.value);var selection={selected:'C'};localforage.setItem('selectedScheduleOption',selection);localforage.setItem('selectedHub',event.target.value);localforage.setItem('hasSetWorkflowData',false);};useEffect(function(){if(data===null||data===void 0?void 0:data.getHubStatus.length){setAvailableHubs(_toConsumableArray(data.getHubStatus));data.getHubStatus.forEach(function(hubData){if(hubData.HubName.toLowerCase()==='chaos hub'){setSelectedHub('Chaos Hub');localforage.setItem('selectedHub','Chaos Hub');localforage.setItem('hasSetWorkflowData',false);}});}},[loading]);var classes=useStyles();return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.inputDiv},/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl},/*#__PURE__*/React.createElement(InputLabel,{className:classes.label},t('createWorkflow.chooseWorkflow.selectMyHub')),/*#__PURE__*/React.createElement(Select,{\"data-cy\":\"myHubDropDown\",value:selectedHub,onChange:function onChange(e){handleMyHubChange(e);},label:\"Cluster Status\",MenuProps:MenuProps},availableHubs.map(function(hubs){return/*#__PURE__*/React.createElement(MenuItem,{key:hubs.HubName,\"data-cy\":\"hubOption\",value:hubs.HubName},hubs.HubName);})))));};export default SelectMyHub;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/SelectMyHub.tsx"],"names":["useQuery","FormControl","InputLabel","MenuItem","Select","localforage","React","useEffect","useState","useTranslation","GET_HUB_STATUS","getProjectID","useStyles","MenuProps","SelectMyHub","t","selectedProjectID","selectedHub","setSelectedHub","availableHubs","setAvailableHubs","variables","data","fetchPolicy","loading","handleMyHubChange","event","target","value","selection","selected","setItem","getHubStatus","length","forEach","hubData","HubName","toLowerCase","classes","inputDiv","formControl","label","e","map","hubs"],"mappings":"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","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport localforage from 'localforage';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { GET_HUB_STATUS } from '../../../graphql/queries';\nimport { MyHubDetail } from '../../../models/graphql/user';\nimport { ChooseWorkflowRadio } from '../../../models/localforage/radioButton';\nimport { HubStatus } from '../../../models/redux/myhub';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles, { MenuProps } from './styles';\n\nconst SelectMyHub = () => {\n  const { t } = useTranslation();\n  const selectedProjectID = getProjectID();\n  const [selectedHub, setSelectedHub] = useState('');\n  const [availableHubs, setAvailableHubs] = useState<MyHubDetail[]>([]);\n\n  // Get all MyHubs with status\n  const { data, loading } = useQuery<HubStatus>(GET_HUB_STATUS, {\n    variables: { data: selectedProjectID },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const handleMyHubChange = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setSelectedHub(event.target.value as string);\n    const selection: ChooseWorkflowRadio = {\n      selected: 'C',\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('selectedHub', event.target.value as string);\n    localforage.setItem('hasSetWorkflowData', false);\n  };\n\n  useEffect(() => {\n    if (data?.getHubStatus.length) {\n      setAvailableHubs([...data.getHubStatus]);\n      data.getHubStatus.forEach((hubData) => {\n        if (hubData.HubName.toLowerCase() === 'chaos hub') {\n          setSelectedHub('Chaos Hub');\n          localforage.setItem('selectedHub', 'Chaos Hub');\n          localforage.setItem('hasSetWorkflowData', false);\n        }\n      });\n    }\n  }, [loading]);\n\n  const classes = useStyles();\n  return (\n    <div>\n      <div className={classes.inputDiv}>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel className={classes.label}>\n            {t('createWorkflow.chooseWorkflow.selectMyHub')}\n          </InputLabel>\n          <Select\n            data-cy=\"myHubDropDown\"\n            value={selectedHub}\n            onChange={(e) => {\n              handleMyHubChange(e);\n            }}\n            label=\"Cluster Status\"\n            MenuProps={MenuProps}\n          >\n            {availableHubs.map((hubs) => (\n              <MenuItem\n                key={hubs.HubName}\n                data-cy=\"hubOption\"\n                value={hubs.HubName}\n              >\n                {hubs.HubName}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </div>\n  );\n};\n\nexport default SelectMyHub;\n"]},"metadata":{},"sourceType":"module"}