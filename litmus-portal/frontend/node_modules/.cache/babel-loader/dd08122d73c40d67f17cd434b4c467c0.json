{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { getToken } from './auth';\n\nfunction createApolloClient(httpLinkUri, wsLinkUri) {\n  var httpLink = new HttpLink({\n    uri: httpLinkUri\n  });\n  var authLink = setContext(function (_, _ref) {\n    var headers = _ref.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token\n      })\n    };\n  });\n  var wsLink = new WebSocketLink({\n    uri: wsLinkUri,\n    options: {\n      reconnect: true,\n      lazy: true\n    }\n  });\n  var link = split(function (_ref2) {\n    var query = _ref2.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, authLink.concat(wsLink), authLink.concat(httpLink));\n  var client = new ApolloClient({\n    link: link,\n    cache: new InMemoryCache()\n  });\n  return client;\n}\n\nexport default createApolloClient;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/createApolloClient.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","split","setContext","WebSocketLink","getMainDefinition","getToken","createApolloClient","httpLinkUri","wsLinkUri","httpLink","uri","authLink","_","headers","token","authorization","wsLink","options","reconnect","lazy","link","query","definition","kind","operation","concat","client","cache"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAiDC,SAAjD,EAAoE;AAClE,MAAMC,QAAQ,GAAG,IAAIV,QAAJ,CAAa;AAC5BW,IAAAA,GAAG,EAAEH;AADuB,GAAb,CAAjB;AAGA,MAAMI,QAAQ,GAAGT,UAAU,CAAC,UAACU,CAAD,QAAoB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAC9C,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,WAAO;AACLQ,MAAAA,OAAO,kCACFA,OADE;AAELE,QAAAA,aAAa,EAAED;AAFV;AADF,KAAP;AAMD,GAR0B,CAA3B;AAUA,MAAME,MAAM,GAAG,IAAIb,aAAJ,CAAkB;AAC/BO,IAAAA,GAAG,EAAEF,SAD0B;AAE/BS,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,IAAI,EAAE;AAFC;AAFsB,GAAlB,CAAf;AAQA,MAAMC,IAAI,GAAGnB,KAAK,CAChB,iBAAe;AAAA,QAAZoB,KAAY,SAAZA,KAAY;AACb,QAAMC,UAAU,GAAGlB,iBAAiB,CAACiB,KAAD,CAApC;AACA,WACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,GAPe,EAQhBb,QAAQ,CAACc,MAAT,CAAgBT,MAAhB,CARgB,EAShBL,QAAQ,CAACc,MAAT,CAAgBhB,QAAhB,CATgB,CAAlB;AAYA,MAAMiB,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC9BsB,IAAAA,IAAI,EAAJA,IAD8B;AAE9BO,IAAAA,KAAK,EAAE,IAAI3B,aAAJ;AAFuB,GAAjB,CAAf;AAKA,SAAO0B,MAAP;AACD;;AAED,eAAepB,kBAAf","sourcesContent":["import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { getToken } from './auth';\n\nfunction createApolloClient(httpLinkUri: string, wsLinkUri: string) {\n  const httpLink = new HttpLink({\n    uri: httpLinkUri,\n  });\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token,\n      },\n    };\n  });\n\n  const wsLink = new WebSocketLink({\n    uri: wsLinkUri,\n    options: {\n      reconnect: true,\n      lazy: true,\n    },\n  });\n\n  const link = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    authLink.concat(wsLink),\n    authLink.concat(httpLink)\n  );\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache(),\n  });\n\n  return client;\n}\n\nexport default createApolloClient;\n"]},"metadata":{},"sourceType":"module"}