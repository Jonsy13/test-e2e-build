{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/DataSources/Table/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Drawer, Paper, Snackbar, Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, ButtonOutlined, TextButton } from 'litmus-ui';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../../components/Loader';\nimport { DELETE_DATASOURCE } from '../../../../graphql';\nimport { LIST_DATASOURCE } from '../../../../graphql/queries';\nimport { getProjectID } from '../../../../utils/getSearchParams';\nimport { sortAlphaAsc, sortAlphaDesc, sortNumAsc, sortNumDesc } from '../../../../utils/sort';\nimport useStyles from './styles';\nimport TableData from './TableData';\nimport TableHeader from './TableHeader';\nimport TableToolBar from './TableToolbar';\n\nvar DataSourceTable = function DataSourceTable() {\n  var _data$ListDataSource, _data$ListDataSource2;\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState({\n    range: {\n      startDate: 'all',\n      endDate: 'all'\n    },\n    selectedDataSourceType: 'All',\n    sortData: {\n      name: {\n        sort: false,\n        ascending: true\n      },\n      lastConfigured: {\n        sort: true,\n        ascending: false\n      }\n    },\n    selectedStatus: 'All',\n    searchTokens: ['']\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      filter = _React$useState2[0],\n      setFilter = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(5),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      rowsPerPage = _React$useState6[0],\n      setRowsPerPage = _React$useState6[1];\n\n  var projectID = getProjectID();\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      success = _React$useState8[0],\n      setSuccess = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      isAlertOpen = _React$useState10[0],\n      setIsAlertOpen = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      drawerState = _React$useState12[0],\n      setDrawerState = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      showAllDashboards = _React$useState14[0],\n      setShowAllDashboards = _React$useState14[1];\n\n  var _React$useState15 = React.useState({\n    connectedDashboards: [],\n    dsID: '',\n    dsName: ''\n  }),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      forceDeleteVars = _React$useState16[0],\n      setForceDeleteVars = _React$useState16[1];\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }; // Apollo query to get the data source data\n\n\n  var _useQuery = useQuery(LIST_DATASOURCE, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 10000\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  var alertStateHandler = function alertStateHandler(successState) {\n    setSuccess(successState);\n    setIsAlertOpen(true);\n\n    if (successState) {\n      refetch();\n    }\n  };\n\n  var _useMutation = useMutation(DELETE_DATASOURCE, {\n    onCompleted: function onCompleted() {\n      return alertStateHandler(true);\n    },\n    onError: function onError() {\n      return alertStateHandler(false);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteDataSource = _useMutation2[0];\n\n  var cleanDrawerState = function cleanDrawerState() {\n    setForceDeleteVars({\n      connectedDashboards: [],\n      dsID: '',\n      dsName: ''\n    });\n    setShowAllDashboards(false);\n    setDrawerState(false);\n  };\n\n  var getDataSourceType = function getDataSourceType(searchingData) {\n    var uniqueList = [];\n    searchingData.forEach(function (data) {\n      if (!uniqueList.includes(data.ds_type)) {\n        uniqueList.push(data.ds_type);\n      }\n    });\n    return uniqueList;\n  };\n\n  var getStatus = function getStatus(searchingData) {\n    var uniqueList = [];\n    searchingData.forEach(function (data) {\n      if (!uniqueList.includes(data.health_status)) {\n        uniqueList.push(data.health_status);\n      }\n    });\n    return uniqueList;\n  };\n\n  var payload = data ? !data.ListDataSource ? [] : data.ListDataSource.filter(function (ds) {\n    return filter.searchTokens.every(function (s) {\n      return ds.ds_name.toLowerCase().includes(s);\n    });\n  }).filter(function (data) {\n    return filter.selectedDataSourceType === 'All' ? true : data.ds_type === filter.selectedDataSourceType;\n  }).filter(function (data) {\n    return filter.selectedStatus === 'All' ? true : data.health_status === filter.selectedStatus;\n  }).filter(function (data) {\n    return filter.range.startDate === 'all' || filter.range.startDate && filter.range.endDate === undefined ? true : parseInt(data.updated_at, 10) * 1000 >= new Date(moment(filter.range.startDate).format()).getTime() && parseInt(data.updated_at, 10) * 1000 <= new Date(new Date(moment(filter.range.endDate).format()).setHours(23, 59, 59)).getTime();\n  }).sort(function (a, b) {\n    // Sorting based on unique fields\n    if (filter.sortData.name.sort) {\n      var x = a.ds_name;\n      var y = b.ds_name;\n      return filter.sortData.name.ascending ? sortAlphaAsc(x, y) : sortAlphaDesc(x, y);\n    }\n\n    if (filter.sortData.lastConfigured.sort) {\n      var _x = parseInt(a.updated_at, 10);\n\n      var _y = parseInt(b.updated_at, 10);\n\n      return filter.sortData.lastConfigured.ascending ? sortNumAsc(_y, _x) : sortNumDesc(_y, _x);\n    }\n\n    return 0;\n  }) : [];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"Heading section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableToolBar, {\n    searchToken: filter.searchTokens[0],\n    handleSearch: function handleSearch(event, token) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        searchTokens: (event !== undefined ? event.target.value : token || '').toLowerCase().split(' ').filter(function (s) {\n          return s !== '';\n        })\n      }));\n    },\n    dataSourceTypes: getDataSourceType((_data$ListDataSource = data === null || data === void 0 ? void 0 : data.ListDataSource) !== null && _data$ListDataSource !== void 0 ? _data$ListDataSource : []),\n    statuses: getStatus((_data$ListDataSource2 = data === null || data === void 0 ? void 0 : data.ListDataSource) !== null && _data$ListDataSource2 !== void 0 ? _data$ListDataSource2 : []),\n    callbackToSetDataSourceType: function callbackToSetDataSourceType(dataSourceType) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        selectedDataSourceType: dataSourceType\n      }));\n    },\n    callbackToSetStatus: function callbackToSetStatus(status) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        selectedStatus: status\n      }));\n    },\n    callbackToSetRange: function callbackToSetRange(selectedStartDate, selectedEndDate) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        range: {\n          startDate: selectedStartDate,\n          endDate: selectedEndDate\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Paper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"table section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"\".concat(classes.tableMain, \" \").concat(!payload.length || loading ? classes.minHeight : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    callBackToSort: function callBackToSort(sortConfigurations) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        sortData: sortConfigurations\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, error ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 23\n    }\n  }, t('analyticsDashboard.dataSourceTable.fetchError')))) : loading ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.noRecords, \" \").concat(classes.loading),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }\n  }, t('analyticsDashboard.dataSourceTable.loading'))))) : !payload.length ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noRecords,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/dataSourceUnavailable.svg\",\n    className: classes.unavailableIcon,\n    alt: \"Data Source\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.noRecordsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, t('analyticsDashboard.dataSourceTable.noRecords'))))) : payload.length > 0 ? payload.slice(0).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (data) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      tabIndex: -1,\n      key: data.ds_id,\n      className: classes.tableRow,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableData, {\n      data: data,\n      drawerStateHandler: function drawerStateHandler(ds_id, ds_name, dashboards) {\n        setForceDeleteVars({\n          connectedDashboards: dashboards,\n          dsID: ds_id,\n          dsName: ds_name\n        });\n        setDrawerState(true);\n      },\n      alertStateHandler: alertStateHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 27\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 23\n    }\n  }, t('analyticsDashboard.dataSourceTable.noRecords'))))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25, 50],\n    component: \"div\",\n    count: payload.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    className: classes.tablePagination,\n    SelectProps: {\n      MenuProps: {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        getContentAnchorEl: null,\n        classes: {\n          paper: classes.menuList\n        }\n      }\n    },\n    classes: {\n      menuItem: classes.menuListItem\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 11\n    }\n  }))), isAlertOpen && /*#__PURE__*/React.createElement(Snackbar, {\n    open: isAlertOpen,\n    autoHideDuration: 3000,\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    severity: success ? 'success' : 'error',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 11\n    }\n  }, success ? t('analyticsDashboard.dataSourceTable.deletionSuccess') : t('analyticsDashboard.dataSourceTable.deletionError'))), /*#__PURE__*/React.createElement(Drawer, {\n    className: classes.drawer,\n    variant: \"persistent\",\n    anchor: \"right\",\n    open: drawerState,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ModalProps: {\n      keepMounted: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.drawerContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.drawerHeading,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.dataSourceTable.delete'), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }, \" \".concat(forceDeleteVars.dsName, \" \")))), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    className: classes.closeButton,\n    onClick: function onClick() {\n      return cleanDrawerState();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, \"\\u2715\")), /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: classes.warningBlock,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.warningText,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.dataSourceTable.warning.text'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.drawerBodyText,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.dataSourceTable.warning.info')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.drawerBodyText,\n    style: {\n      fontWeight: 500\n    },\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.dataSourceTable.warning.connectedDashboards')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dashboardsList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 11\n    }\n  }, (showAllDashboards ? forceDeleteVars.connectedDashboards : forceDeleteVars.connectedDashboards.slice(0, 3)).map(function (name, index) {\n    return /*#__PURE__*/React.createElement(Typography, {\n      className: \"\".concat(classes.drawerBodyText, \" \").concat(classes.drawerListItem),\n      align: \"left\",\n      key: \"\".concat(name, \"-dashboard\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 15\n      }\n    }, \"\".concat(index + 1, \". \").concat(name));\n  })), forceDeleteVars.connectedDashboards.length - 3 >= 1 && /*#__PURE__*/React.createElement(TextButton, {\n    onClick: function onClick() {\n      return setShowAllDashboards(!showAllDashboards);\n    },\n    className: classes.cancelButton,\n    variant: \"highlight\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 15\n    }\n  }, showAllDashboards ? t('analyticsDashboard.dataSourceTable.warning.showLess') : \"+\".concat(forceDeleteVars.connectedDashboards.length - 3, \" \").concat(t('analyticsDashboard.dataSourceTable.warning.dashboards')))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: function onClick() {\n      return cleanDrawerState();\n    },\n    className: classes.cancelButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.dataSourceTable.modal.cancel'))), /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      deleteDataSource({\n        variables: {\n          deleteDSInput: {\n            ds_id: forceDeleteVars.dsID,\n            force_delete: true\n          }\n        }\n      });\n      cleanDrawerState();\n    },\n    variant: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.buttonText, \" \").concat(classes.confirmButtonText),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.dataSourceTable.modal.forceDelete')))))));\n};\n\nexport default DataSourceTable;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/DataSources/Table/index.tsx"],"names":["useMutation","useQuery","Drawer","Paper","Snackbar","Table","TableBody","TableCell","TableContainer","TablePagination","TableRow","Typography","Alert","ButtonFilled","ButtonOutlined","TextButton","moment","React","useTranslation","Loader","DELETE_DATASOURCE","LIST_DATASOURCE","getProjectID","sortAlphaAsc","sortAlphaDesc","sortNumAsc","sortNumDesc","useStyles","TableData","TableHeader","TableToolBar","DataSourceTable","classes","t","useState","range","startDate","endDate","selectedDataSourceType","sortData","name","sort","ascending","lastConfigured","selectedStatus","searchTokens","filter","setFilter","page","setPage","rowsPerPage","setRowsPerPage","projectID","success","setSuccess","isAlertOpen","setIsAlertOpen","drawerState","setDrawerState","showAllDashboards","setShowAllDashboards","connectedDashboards","dsID","dsName","forceDeleteVars","setForceDeleteVars","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","variables","fetchPolicy","pollInterval","data","loading","error","refetch","alertStateHandler","successState","onCompleted","onError","deleteDataSource","cleanDrawerState","getDataSourceType","searchingData","uniqueList","forEach","includes","ds_type","push","getStatus","health_status","payload","ListDataSource","ds","every","s","ds_name","toLowerCase","undefined","updated_at","Date","format","getTime","setHours","a","b","x","y","root","token","split","dataSourceType","status","selectedStartDate","selectedEndDate","tableMain","length","minHeight","sortConfigurations","noRecords","unavailableIcon","noRecordsText","slice","map","ds_id","tableRow","dashboards","tablePagination","MenuProps","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","paper","menuList","menuItem","menuListItem","drawer","drawerPaper","keepMounted","drawerContent","flexContainer","drawerHeading","closeButton","warningBlock","warningText","drawerBodyText","fontWeight","dashboardsList","index","drawerListItem","cancelButton","buttonText","flexButtons","deleteDSInput","force_delete","confirmButtonText"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useMutation, useQuery } from '@apollo/client';\nimport {\n  Drawer,\n  Paper,\n  Snackbar,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, ButtonOutlined, TextButton } from 'litmus-ui';\nimport moment from 'moment';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../../components/Loader';\nimport { DELETE_DATASOURCE } from '../../../../graphql';\nimport { LIST_DATASOURCE } from '../../../../graphql/queries';\nimport {\n  DataSourceList,\n  DeleteDataSourceInput,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../../../models/graphql/dataSourceDetails';\nimport { getProjectID } from '../../../../utils/getSearchParams';\nimport {\n  sortAlphaAsc,\n  sortAlphaDesc,\n  sortNumAsc,\n  sortNumDesc,\n} from '../../../../utils/sort';\nimport useStyles from './styles';\nimport TableData from './TableData';\nimport TableHeader from './TableHeader';\nimport TableToolBar from './TableToolbar';\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\ninterface SortData {\n  lastConfigured: { sort: boolean; ascending: boolean };\n  name: { sort: boolean; ascending: boolean };\n}\n\ninterface Filter {\n  range: RangeType;\n  selectedDataSourceType: string;\n  sortData: SortData;\n  selectedStatus: string;\n  searchTokens: string[];\n}\n\ninterface ForceDeleteVars {\n  connectedDashboards: string[];\n  dsID: string;\n  dsName: string;\n}\n\nconst DataSourceTable: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [filter, setFilter] = React.useState<Filter>({\n    range: { startDate: 'all', endDate: 'all' },\n    selectedDataSourceType: 'All',\n    sortData: {\n      name: { sort: false, ascending: true },\n      lastConfigured: { sort: true, ascending: false },\n    },\n    selectedStatus: 'All',\n    searchTokens: [''],\n  });\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const projectID = getProjectID();\n  const [success, setSuccess] = React.useState(false);\n  const [isAlertOpen, setIsAlertOpen] = React.useState(false);\n  const [drawerState, setDrawerState] = React.useState(false);\n  const [showAllDashboards, setShowAllDashboards] = React.useState(false);\n  const [forceDeleteVars, setForceDeleteVars] = React.useState<ForceDeleteVars>(\n    {\n      connectedDashboards: [],\n      dsID: '',\n      dsName: '',\n    }\n  );\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Apollo query to get the data source data\n  const { data, loading, error, refetch } = useQuery<\n    DataSourceList,\n    ListDataSourceVars\n  >(LIST_DATASOURCE, {\n    variables: { projectID },\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 10000,\n  });\n\n  const alertStateHandler = (successState: boolean) => {\n    setSuccess(successState);\n    setIsAlertOpen(true);\n    if (successState) {\n      refetch();\n    }\n  };\n\n  const [deleteDataSource] = useMutation<boolean, DeleteDataSourceInput>(\n    DELETE_DATASOURCE,\n    {\n      onCompleted: () => alertStateHandler(true),\n      onError: () => alertStateHandler(false),\n    }\n  );\n\n  const cleanDrawerState = () => {\n    setForceDeleteVars({\n      connectedDashboards: [],\n      dsID: '',\n      dsName: '',\n    });\n    setShowAllDashboards(false);\n    setDrawerState(false);\n  };\n\n  const getDataSourceType = (searchingData: ListDataSourceResponse[]) => {\n    const uniqueList: string[] = [];\n    searchingData.forEach((data) => {\n      if (!uniqueList.includes(data.ds_type)) {\n        uniqueList.push(data.ds_type);\n      }\n    });\n    return uniqueList;\n  };\n\n  const getStatus = (searchingData: ListDataSourceResponse[]) => {\n    const uniqueList: string[] = [];\n    searchingData.forEach((data) => {\n      if (!uniqueList.includes(data.health_status)) {\n        uniqueList.push(data.health_status);\n      }\n    });\n    return uniqueList;\n  };\n\n  const payload: ListDataSourceResponse[] = data\n    ? !data.ListDataSource\n      ? []\n      : data.ListDataSource.filter((ds: ListDataSourceResponse) => {\n          return filter.searchTokens.every((s: string) =>\n            ds.ds_name.toLowerCase().includes(s)\n          );\n        })\n          .filter((data) => {\n            return filter.selectedDataSourceType === 'All'\n              ? true\n              : data.ds_type === filter.selectedDataSourceType;\n          })\n          .filter((data) => {\n            return filter.selectedStatus === 'All'\n              ? true\n              : data.health_status === filter.selectedStatus;\n          })\n          .filter((data) => {\n            return filter.range.startDate === 'all' ||\n              (filter.range.startDate && filter.range.endDate === undefined)\n              ? true\n              : parseInt(data.updated_at, 10) * 1000 >=\n                  new Date(moment(filter.range.startDate).format()).getTime() &&\n                  parseInt(data.updated_at, 10) * 1000 <=\n                    new Date(\n                      new Date(moment(filter.range.endDate).format()).setHours(\n                        23,\n                        59,\n                        59\n                      )\n                    ).getTime();\n          })\n          .sort((a: ListDataSourceResponse, b: ListDataSourceResponse) => {\n            // Sorting based on unique fields\n            if (filter.sortData.name.sort) {\n              const x = a.ds_name;\n              const y = b.ds_name;\n\n              return filter.sortData.name.ascending\n                ? sortAlphaAsc(x, y)\n                : sortAlphaDesc(x, y);\n            }\n            if (filter.sortData.lastConfigured.sort) {\n              const x = parseInt(a.updated_at, 10);\n              const y = parseInt(b.updated_at, 10);\n              return filter.sortData.lastConfigured.ascending\n                ? sortNumAsc(y, x)\n                : sortNumDesc(y, x);\n            }\n            return 0;\n          })\n    : [];\n\n  return (\n    <div className={classes.root}>\n      <Paper>\n        <section className=\"Heading section\">\n          <TableToolBar\n            searchToken={filter.searchTokens[0]}\n            handleSearch={(\n              event: React.ChangeEvent<{ value: unknown }> | undefined,\n              token: string | undefined\n            ) =>\n              setFilter({\n                ...filter,\n                searchTokens: (event !== undefined\n                  ? ((event.target as HTMLInputElement).value as string)\n                  : token || ''\n                )\n                  .toLowerCase()\n                  .split(' ')\n                  .filter((s) => s !== ''),\n              })\n            }\n            dataSourceTypes={getDataSourceType(data?.ListDataSource ?? [])}\n            statuses={getStatus(data?.ListDataSource ?? [])}\n            callbackToSetDataSourceType={(dataSourceType: string) =>\n              setFilter({\n                ...filter,\n                selectedDataSourceType: dataSourceType,\n              })\n            }\n            callbackToSetStatus={(status: string) =>\n              setFilter({\n                ...filter,\n                selectedStatus: status,\n              })\n            }\n            callbackToSetRange={(\n              selectedStartDate: string,\n              selectedEndDate: string\n            ) =>\n              setFilter({\n                ...filter,\n                range: {\n                  startDate: selectedStartDate,\n                  endDate: selectedEndDate,\n                },\n              })\n            }\n          />\n        </section>\n      </Paper>\n      <Paper>\n        <section className=\"table section\">\n          <TableContainer\n            className={`${classes.tableMain} ${\n              !payload.length || loading ? classes.minHeight : ''\n            }`}\n          >\n            <Table aria-label=\"simple table\">\n              <TableHeader\n                callBackToSort={(sortConfigurations: SortData) =>\n                  setFilter({\n                    ...filter,\n                    sortData: sortConfigurations,\n                  })\n                }\n              />\n              <TableBody>\n                {error ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <Typography align=\"center\">\n                        {t('analyticsDashboard.dataSourceTable.fetchError')}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                ) : loading ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <div\n                        className={`${classes.noRecords} ${classes.loading}`}\n                      >\n                        <Loader />\n                        <Typography align=\"center\">\n                          {t('analyticsDashboard.dataSourceTable.loading')}\n                        </Typography>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : !payload.length ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <div className={classes.noRecords}>\n                        <img\n                          src=\"/icons/dataSourceUnavailable.svg\"\n                          className={classes.unavailableIcon}\n                          alt=\"Data Source\"\n                        />\n                        <Typography className={classes.noRecordsText}>\n                          {t('analyticsDashboard.dataSourceTable.noRecords')}\n                        </Typography>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : payload.length > 0 ? (\n                  payload\n                    .slice(0)\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((data: ListDataSourceResponse) => {\n                      return (\n                        <TableRow\n                          hover\n                          tabIndex={-1}\n                          key={data.ds_id}\n                          className={classes.tableRow}\n                        >\n                          <TableData\n                            data={data}\n                            drawerStateHandler={(\n                              ds_id,\n                              ds_name,\n                              dashboards\n                            ) => {\n                              setForceDeleteVars({\n                                connectedDashboards: dashboards,\n                                dsID: ds_id,\n                                dsName: ds_name,\n                              });\n                              setDrawerState(true);\n                            }}\n                            alertStateHandler={alertStateHandler}\n                          />\n                        </TableRow>\n                      );\n                    })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <Typography align=\"center\">\n                        {t('analyticsDashboard.dataSourceTable.noRecords')}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 50]}\n            component=\"div\"\n            count={payload.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            className={classes.tablePagination}\n            SelectProps={{\n              MenuProps: {\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n                },\n                getContentAnchorEl: null,\n                classes: { paper: classes.menuList },\n              },\n            }}\n            classes={{ menuItem: classes.menuListItem }}\n          />\n        </section>\n      </Paper>\n      {isAlertOpen && (\n        <Snackbar\n          open={isAlertOpen}\n          autoHideDuration={3000}\n          onClose={() => setIsAlertOpen(false)}\n        >\n          <Alert\n            onClose={() => setIsAlertOpen(false)}\n            severity={success ? 'success' : 'error'}\n          >\n            {success\n              ? t('analyticsDashboard.dataSourceTable.deletionSuccess')\n              : t('analyticsDashboard.dataSourceTable.deletionError')}\n          </Alert>\n        </Snackbar>\n      )}\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={drawerState}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        ModalProps={{\n          keepMounted: true,\n        }}\n      >\n        <div className={classes.drawerContent}>\n          <div className={classes.flexContainer}>\n            <Typography className={classes.drawerHeading} align=\"left\">\n              {t('analyticsDashboard.dataSourceTable.delete')}\n              <b>\n                <i>{` ${forceDeleteVars.dsName} `}</i>\n              </b>\n            </Typography>\n            <ButtonOutlined\n              className={classes.closeButton}\n              onClick={() => cleanDrawerState()}\n            >\n              &#x2715;\n            </ButtonOutlined>\n          </div>\n          <blockquote className={classes.warningBlock}>\n            <Typography className={classes.warningText} align=\"left\">\n              {t('analyticsDashboard.dataSourceTable.warning.text')}\n            </Typography>\n          </blockquote>\n          <Typography className={classes.drawerBodyText} align=\"left\">\n            {t('analyticsDashboard.dataSourceTable.warning.info')}\n          </Typography>\n          <Typography\n            className={classes.drawerBodyText}\n            style={{ fontWeight: 500 }}\n            align=\"left\"\n          >\n            {t(\n              'analyticsDashboard.dataSourceTable.warning.connectedDashboards'\n            )}\n          </Typography>\n          <div className={classes.dashboardsList}>\n            {(showAllDashboards\n              ? forceDeleteVars.connectedDashboards\n              : forceDeleteVars.connectedDashboards.slice(0, 3)\n            ).map((name: string, index: number) => (\n              <Typography\n                className={`${classes.drawerBodyText} ${classes.drawerListItem}`}\n                align=\"left\"\n                key={`${name}-dashboard`}\n              >\n                {`${index + 1}. ${name}`}\n              </Typography>\n            ))}\n          </div>\n          {forceDeleteVars.connectedDashboards.length - 3 >= 1 && (\n            <TextButton\n              onClick={() => setShowAllDashboards(!showAllDashboards)}\n              className={classes.cancelButton}\n              variant=\"highlight\"\n            >\n              <Typography className={classes.buttonText}>\n                {showAllDashboards\n                  ? t('analyticsDashboard.dataSourceTable.warning.showLess')\n                  : `+${forceDeleteVars.connectedDashboards.length - 3} ${t(\n                      'analyticsDashboard.dataSourceTable.warning.dashboards'\n                    )}`}\n              </Typography>\n            </TextButton>\n          )}\n          <div className={classes.flexButtons}>\n            <TextButton\n              onClick={() => cleanDrawerState()}\n              className={classes.cancelButton}\n            >\n              <Typography className={classes.buttonText}>\n                {t('analyticsDashboard.dataSourceTable.modal.cancel')}\n              </Typography>\n            </TextButton>\n            <ButtonFilled\n              onClick={() => {\n                deleteDataSource({\n                  variables: {\n                    deleteDSInput: {\n                      ds_id: forceDeleteVars.dsID,\n                      force_delete: true,\n                    },\n                  },\n                });\n                cleanDrawerState();\n              }}\n              variant=\"error\"\n            >\n              <Typography\n                className={`${classes.buttonText} ${classes.confirmButtonText}`}\n              >\n                {t('analyticsDashboard.dataSourceTable.modal.forceDelete')}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default DataSourceTable;\n"]},"metadata":{},"sourceType":"module"}