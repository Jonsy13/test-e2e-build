{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,FormControl,IconButton,InputAdornment,InputBase,InputLabel,MenuItem,OutlinedInput,Select,Typography}from'@material-ui/core';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import SearchIcon from'@material-ui/icons/Search';import{ButtonFilled}from'litmus-ui';import React,{useRef,useState}from'react';import{useTranslation}from'react-i18next';import DateRangeSelector from'../../../../components/DateRangeSelector';import{history}from'../../../../redux/configureStore';import{getProjectID,getProjectRole}from'../../../../utils/getSearchParams';import useStyles,{useOutlinedInputStyles}from'./styles';var TableToolBar=function TableToolBar(_ref){var handleSearch=_ref.handleSearch,searchToken=_ref.searchToken,dataSourceTypes=_ref.dataSourceTypes,statuses=_ref.statuses,callbackToSetDataSourceType=_ref.callbackToSetDataSourceType,callbackToSetRange=_ref.callbackToSetRange,callbackToSetStatus=_ref.callbackToSetStatus;var classes=useStyles();var projectID=getProjectID();var projectRole=getProjectRole();var outlinedInputClasses=useOutlinedInputStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var _React$useState=React.useState('All'),_React$useState2=_slicedToArray(_React$useState,2),dataSourceType=_React$useState2[0],setDataSourceType=_React$useState2[1];var _React$useState3=React.useState('All'),_React$useState4=_slicedToArray(_React$useState3,2),status=_React$useState4[0],setStatus=_React$useState4[1];var dateRangeSelectorRef=useRef(null);var _React$useState5=React.useState({startDate:' ',endDate:' '}),_React$useState6=_slicedToArray(_React$useState5,2),range=_React$useState6[0],setRange=_React$useState6[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDateRangeSelectorPopoverOpen=_useState2[0],setDateRangeSelectorPopoverOpen=_useState2[1];var handleDataSourceTypeChange=function handleDataSourceTypeChange(event){setDataSourceType(event.target.value);callbackToSetDataSourceType(event.target.value);};var handleStatusChange=function handleStatusChange(event){setStatus(event.target.value);callbackToSetStatus(event.target.value);};var CallbackFromRangeSelector=function CallbackFromRangeSelector(selectedStartDate,selectedEndDate){setRange({startDate:selectedStartDate,endDate:selectedEndDate});callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2],\" \").concat(selectedStartDate.split(' ')[1],\" \").concat(selectedStartDate.split(' ')[3])),\"\".concat(\"\".concat(selectedEndDate.split(' ')[2],\" \").concat(selectedEndDate.split(' ')[1],\" \").concat(selectedEndDate.split(' ')[3])));};return/*#__PURE__*/React.createElement(\"div\",{className:classes.headerSection},/*#__PURE__*/React.createElement(InputBase,{id:\"input-with-icon-adornment\",placeholder:\"Search\",className:classes.search,value:searchToken,onChange:handleSearch,classes:{input:classes.input},startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))}),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.dataSourceStatusForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\" Status \"),/*#__PURE__*/React.createElement(Select,{label:\"Status\",value:status,onChange:handleStatusChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),statuses.map(function(status){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(status,\"-analyticsDashboard-dataSource-toolbar\"),value:status},status);}))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.dataSourceNameForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},' ',\"Data Source Type\",' '),/*#__PURE__*/React.createElement(Select,{label:\"Data Source Type\",value:dataSourceType,onChange:handleDataSourceTypeChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),dataSourceTypes.map(function(dataSourceType){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(dataSourceType,\"-analyticsDashboard-dataSource-tableToolbar\"),value:dataSourceType},dataSourceType);}))),/*#__PURE__*/React.createElement(Button,{className:classes.selectDate,onClick:function onClick(){return setDateRangeSelectorPopoverOpen(true);},ref:dateRangeSelectorRef,\"aria-label\":\"time range\",\"aria-haspopup\":\"true\"},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},range.startDate===' '?'Select Period':\"\".concat(range.startDate.split(' ')[2],\" \").concat(range.startDate.split(' ')[1],\" \").concat(range.startDate.split(' ')[3],\" - \").concat(range.endDate.split(' ')[2],\" \").concat(range.endDate.split(' ')[1],\" \").concat(range.endDate.split(' ')[3]),/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorIcon},isDateRangeSelectorPopoverOpen?/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null):/*#__PURE__*/React.createElement(ChevronRightIcon,null)))),/*#__PURE__*/React.createElement(\"div\",{className:classes.addButton},/*#__PURE__*/React.createElement(ButtonFilled,{onClick:function onClick(){history.push({pathname:'/analytics/datasource/create',search:\"?projectID=\".concat(projectID,\"&projectRole=\").concat(projectRole)});}},/*#__PURE__*/React.createElement(Typography,{className:classes.dateRangeDefault},t('analyticsDashboard.dataSourceTable.addDataSource')))),/*#__PURE__*/React.createElement(DateRangeSelector,{anchorEl:dateRangeSelectorRef.current,isOpen:isDateRangeSelectorPopoverOpen,onClose:function onClose(){setDateRangeSelectorPopoverOpen(false);},callbackToSetRange:CallbackFromRangeSelector}));};export default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/DataSources/Table/TableToolbar.tsx"],"names":["Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","OutlinedInput","Select","Typography","ChevronRightIcon","KeyboardArrowDownIcon","SearchIcon","ButtonFilled","React","useRef","useState","useTranslation","DateRangeSelector","history","getProjectID","getProjectRole","useStyles","useOutlinedInputStyles","TableToolBar","handleSearch","searchToken","dataSourceTypes","statuses","callbackToSetDataSourceType","callbackToSetRange","callbackToSetStatus","classes","projectID","projectRole","outlinedInputClasses","t","dataSourceType","setDataSourceType","status","setStatus","dateRangeSelectorRef","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","handleDataSourceTypeChange","event","target","value","handleStatusChange","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","headerSection","search","input","formControl","dataSourceStatusForm","selectText","map","dataSourceNameForm","selectDate","displayDate","rangeSelectorIcon","addButton","push","pathname","dateRangeDefault","current"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { ButtonFilled } from 'litmus-ui';\nimport React, { ChangeEvent, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface DataSourceTypeCallBackType {\n  (dataSourceType: string): void;\n}\n\ninterface StatusCallBackType {\n  (status: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface TableToolBarProps {\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  dataSourceTypes: string[];\n  statuses: string[];\n  callbackToSetDataSourceType: DataSourceTypeCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToSetStatus: StatusCallBackType;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  handleSearch,\n  searchToken,\n  dataSourceTypes,\n  statuses,\n  callbackToSetDataSourceType,\n  callbackToSetRange,\n  callbackToSetStatus,\n}) => {\n  const classes = useStyles();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { t } = useTranslation();\n  const [dataSourceType, setDataSourceType] = React.useState<String>('All');\n  const [status, setStatus] = React.useState<String>('All');\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n\n  const handleDataSourceTypeChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setDataSourceType(event.target.value as String);\n    callbackToSetDataSourceType(event.target.value as string);\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setStatus(event.target.value as String);\n    callbackToSetStatus(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  return (\n    <div className={classes.headerSection}>\n      <InputBase\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Search\"\n        className={classes.search}\n        value={searchToken}\n        onChange={handleSearch}\n        classes={{\n          input: classes.input,\n        }}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n      />\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.dataSourceStatusForm}`}\n      >\n        <InputLabel className={classes.selectText}> Status </InputLabel>\n        <Select\n          label=\"Status\"\n          value={status}\n          onChange={handleStatusChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {statuses.map((status: string) => (\n            <MenuItem\n              key={`${status}-analyticsDashboard-dataSource-toolbar`}\n              value={status}\n            >\n              {status}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.dataSourceNameForm}`}\n      >\n        <InputLabel className={classes.selectText}>\n          {' '}\n          Data Source Type{' '}\n        </InputLabel>\n        <Select\n          label=\"Data Source Type\"\n          value={dataSourceType}\n          onChange={handleDataSourceTypeChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {dataSourceTypes.map((dataSourceType: string) => (\n            <MenuItem\n              key={`${dataSourceType}-analyticsDashboard-dataSource-tableToolbar`}\n              value={dataSourceType}\n            >\n              {dataSourceType}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <Button\n        className={classes.selectDate}\n        onClick={() => setDateRangeSelectorPopoverOpen(true)}\n        ref={dateRangeSelectorRef}\n        aria-label=\"time range\"\n        aria-haspopup=\"true\"\n      >\n        <Typography className={classes.displayDate}>\n          {range.startDate === ' '\n            ? 'Select Period'\n            : `${range.startDate.split(' ')[2]} ${\n                range.startDate.split(' ')[1]\n              } ${range.startDate.split(' ')[3]} - ${\n                range.endDate.split(' ')[2]\n              } ${range.endDate.split(' ')[1]} ${range.endDate.split(' ')[3]}`}\n\n          <IconButton className={classes.rangeSelectorIcon}>\n            {isDateRangeSelectorPopoverOpen ? (\n              <KeyboardArrowDownIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </Typography>\n      </Button>\n\n      <div className={classes.addButton}>\n        <ButtonFilled\n          onClick={() => {\n            history.push({\n              pathname: '/analytics/datasource/create',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          }}\n        >\n          <Typography className={classes.dateRangeDefault}>\n            {t('analyticsDashboard.dataSourceTable.addDataSource')}\n          </Typography>\n        </ButtonFilled>\n      </div>\n      <DateRangeSelector\n        anchorEl={dateRangeSelectorRef.current as HTMLElement}\n        isOpen={isDateRangeSelectorPopoverOpen}\n        onClose={() => {\n          setDateRangeSelectorPopoverOpen(false);\n        }}\n        callbackToSetRange={CallbackFromRangeSelector}\n      />\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}