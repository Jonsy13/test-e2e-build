{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/Overview/WorkflowDashboardCard/index.tsx\";\n\nimport { IconButton, Typography } from '@material-ui/core';\nimport React from 'react';\nimport useActions from '../../../../redux/actions';\nimport * as NodeSelectionActions from '../../../../redux/actions/nodeSelection';\nimport { history } from '../../../../redux/configureStore';\nimport { ReactComponent as AnalyticsIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/analytics.svg\";\nimport { ReactComponent as WorkflowRunIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/workflowRun.svg\";\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport { FAILED, NOTAVAILABLE, PENDING, RUNNING, SUCCEEDED } from '../../../WorkflowDetails/workflowConstants';\nimport useStyles from './styles';\n\nvar WorkflowDashboardCard = function WorkflowDashboardCard(_ref) {\n  var data = _ref.data;\n  var classes = useStyles();\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var nodeSelection = useActions(NodeSelectionActions);\n\n  function getStatusVariant(phase) {\n    switch (phase) {\n      case RUNNING:\n        return 'status-running.svg';\n\n      case SUCCEEDED:\n        return 'status-success.svg';\n\n      case FAILED:\n        return 'status-failed.svg';\n\n      case PENDING:\n        return 'status-pending.svg';\n\n      case NOTAVAILABLE:\n        return 'status-NotAvailable.svg';\n\n      default:\n        return '';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.animatedContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowDataContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.statusDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/\".concat(getStatusVariant(data.phase)),\n    alt: \"k8s\",\n    title: data.phase,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.testName, \" \").concat(classes.noWrapProvider),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, data.workflow_name), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Agent: \", data.cluster_name)))), /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.noWrapProvider, \" \").concat(classes.hint),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, timeDifferenceForDate(data.last_updated)), /*#__PURE__*/React.createElement(\"section\", {\n    className: classes.cardActionsSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      var _data$phase;\n\n      nodeSelection.selectNode({\n        pod_name: ''\n      });\n      if (((_data$phase = data.phase) === null || _data$phase === void 0 ? void 0 : _data$phase.toLowerCase()) !== 'notavailable') history.push({\n        pathname: \"/workflows/\".concat(data.workflow_run_id),\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowRunIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, \"See workflow run\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      history.push({\n        pathname: \"/workflows/analytics/\".concat(data.workflow_id),\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AnalyticsIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"See analytics\"))))));\n};\n\nexport { WorkflowDashboardCard };","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/Overview/WorkflowDashboardCard/index.tsx"],"names":["IconButton","Typography","React","useActions","NodeSelectionActions","history","timeDifferenceForDate","getProjectID","getProjectRole","FAILED","NOTAVAILABLE","PENDING","RUNNING","SUCCEEDED","useStyles","WorkflowDashboardCard","data","classes","projectID","projectRole","nodeSelection","getStatusVariant","phase","animatedContainer","workflowDataContainer","statusDiv","testName","noWrapProvider","workflow_name","hint","cluster_name","last_updated","cardActionsSection","cardActions","selectNode","pod_name","toLowerCase","push","pathname","workflow_run_id","search","workflow_id"],"mappings":"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","sourcesContent":["import { IconButton, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { WorkflowRun } from '../../../../models/graphql/workflowData';\nimport useActions from '../../../../redux/actions';\nimport * as NodeSelectionActions from '../../../../redux/actions/nodeSelection';\nimport { history } from '../../../../redux/configureStore';\nimport { ReactComponent as AnalyticsIcon } from '../../../../svg/analytics.svg';\nimport { ReactComponent as WorkflowRunIcon } from '../../../../svg/workflowRun.svg';\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport {\n  FAILED,\n  NOTAVAILABLE,\n  PENDING,\n  RUNNING,\n  SUCCEEDED,\n} from '../../../WorkflowDetails/workflowConstants';\nimport useStyles from './styles';\n\ninterface WorkflowDashboardCardProps {\n  data: WorkflowRun;\n}\n\nconst WorkflowDashboardCard: React.FC<WorkflowDashboardCardProps> = ({\n  data,\n}) => {\n  const classes = useStyles();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  function getStatusVariant(phase: string) {\n    switch (phase) {\n      case RUNNING:\n        return 'status-running.svg';\n      case SUCCEEDED:\n        return 'status-success.svg';\n      case FAILED:\n        return 'status-failed.svg';\n      case PENDING:\n        return 'status-pending.svg';\n      case NOTAVAILABLE:\n        return 'status-NotAvailable.svg';\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <>\n      <div className={classes.animatedContainer}>\n        <div className={classes.workflowDataContainer}>\n          <div>\n            <div className={classes.statusDiv}>\n              <img\n                src={`./icons/${getStatusVariant(data.phase)}`}\n                alt=\"k8s\"\n                title={data.phase}\n              />\n              <div>\n                <Typography\n                  className={`${classes.testName} ${classes.noWrapProvider}`}\n                >\n                  {data.workflow_name}\n                </Typography>\n                <Typography className={classes.hint}>\n                  Agent: {data.cluster_name}\n                </Typography>\n              </div>\n            </div>\n          </div>\n          <Typography className={`${classes.noWrapProvider} ${classes.hint}`}>\n            {timeDifferenceForDate(data.last_updated)}\n          </Typography>\n          <section className={classes.cardActionsSection}>\n            <div className={classes.cardActions}>\n              <IconButton\n                onClick={() => {\n                  nodeSelection.selectNode({\n                    pod_name: '',\n                  });\n                  if (data.phase?.toLowerCase() !== 'notavailable')\n                    history.push({\n                      pathname: `/workflows/${data.workflow_run_id}`,\n                      search: `?projectID=${projectID}&projectRole=${projectRole}`,\n                    });\n                }}\n              >\n                <WorkflowRunIcon />\n              </IconButton>\n              <Typography align=\"center\">See workflow run</Typography>\n            </div>\n            <div className={classes.cardActions}>\n              <IconButton\n                onClick={() => {\n                  history.push({\n                    pathname: `/workflows/analytics/${data.workflow_id}`,\n                    search: `?projectID=${projectID}&projectRole=${projectRole}`,\n                  });\n                }}\n              >\n                <AnalyticsIcon />\n              </IconButton>\n              <Typography align=\"center\">See analytics</Typography>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport { WorkflowDashboardCard };\n"]},"metadata":{},"sourceType":"module"}