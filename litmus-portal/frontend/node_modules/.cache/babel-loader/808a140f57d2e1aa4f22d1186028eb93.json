{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/SelectTheMetrics/Form/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { FormControlLabel, FormGroup, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { CheckBox } from '../../../../../../components/CheckBox';\nimport useStyles from './styles';\n\nvar SelectTheMetricsForm = function SelectTheMetricsForm(_ref) {\n  var dashboardVars = _ref.dashboardVars,\n      CallbackToSetVars = _ref.CallbackToSetVars,\n      setDisabledNext = _ref.setDisabledNext,\n      generateAlert = _ref.generateAlert;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n\n  var _useState = useState({\n    selectedPanelGroupMap: dashboardVars.selectedPanelGroupMap && dashboardVars.selectedPanelGroupMap.length ? dashboardVars.selectedPanelGroupMap : selectedDashboard.dashboardJSON && selectedDashboard.dashboardJSON.panelGroupMap ? selectedDashboard.dashboardJSON.panelGroupMap.map(function (panelGroup) {\n      return {\n        groupName: panelGroup.groupName,\n        panels: []\n      };\n    }) : []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dashboardDetails = _useState2[0],\n      setDashboardDetails = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      update = _useState4[0],\n      setUpdate = _useState4[1];\n\n  var handleMetricSelect = function handleMetricSelect(panel, index) {\n    var _dashboardDetails$sel;\n\n    var selectedPanelGroupMapArray = (_dashboardDetails$sel = dashboardDetails.selectedPanelGroupMap) !== null && _dashboardDetails$sel !== void 0 ? _dashboardDetails$sel : [];\n\n    if (selectedPanelGroupMapArray[index].panels.includes(panel)) {\n      selectedPanelGroupMapArray[index].panels = selectedPanelGroupMapArray[index].panels.filter(function (selectedPanel) {\n        return selectedPanel !== panel;\n      });\n    } else {\n      selectedPanelGroupMapArray[index].panels.push(panel);\n    }\n\n    setDashboardDetails({\n      selectedPanelGroupMap: selectedPanelGroupMapArray\n    });\n    setUpdate(true);\n  };\n\n  useEffect(function () {\n    var _dashboardDetails$sel2, _dashboardDetails$sel3;\n\n    var selectedNumberOfMetrics = 0;\n    (_dashboardDetails$sel2 = dashboardDetails.selectedPanelGroupMap) === null || _dashboardDetails$sel2 === void 0 ? void 0 : _dashboardDetails$sel2.forEach(function (panelGroup) {\n      selectedNumberOfMetrics += panelGroup.panels.length;\n    });\n\n    if (!((_dashboardDetails$sel3 = dashboardDetails.selectedPanelGroupMap) === null || _dashboardDetails$sel3 === void 0 ? void 0 : _dashboardDetails$sel3.length) || !selectedNumberOfMetrics) {\n      setDisabledNext(true);\n    } else {\n      setDisabledNext(false);\n    }\n\n    if (update === true) {\n      CallbackToSetVars(dashboardDetails);\n      setUpdate(false);\n    }\n  }, [update]);\n  useEffect(function () {\n    var _dashboardDetails$sel4;\n\n    if (((_dashboardDetails$sel4 = dashboardDetails.selectedPanelGroupMap) === null || _dashboardDetails$sel4 === void 0 ? void 0 : _dashboardDetails$sel4.length) === 0) {\n      generateAlert();\n    }\n  }, [dashboardDetails.selectedPanelGroupMap]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, selectedDashboard.dashboardJSON && selectedDashboard.dashboardJSON.panelGroupMap ? selectedDashboard.dashboardJSON.panelGroupMap.map(function (panelGroup, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"\".concat(panelGroup.groupName, \"-applicationDashboard-form\"),\n      className: classes.panelGroupMap,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      align: \"left\",\n      display: \"inline\",\n      className: classes.panelGroupName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, panelGroup.groupName), /*#__PURE__*/React.createElement(FormGroup, {\n      key: \"metrics-group-\".concat(panelGroup.groupName),\n      className: classes.formGroup,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, panelGroup.panels.map(function (panel) {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        control: /*#__PURE__*/React.createElement(CheckBox, {\n          checked: dashboardDetails.selectedPanelGroupMap ? dashboardDetails.selectedPanelGroupMap[index].panels.includes(panel) : false,\n          onChange: function onChange() {\n            return handleMetricSelect(panel, index);\n          },\n          name: panel,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 23\n          }\n        }),\n        label: /*#__PURE__*/React.createElement(Typography, {\n          className: classes.formControlLabel,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 23\n          }\n        }, panel),\n        key: \"metric-\".concat(panel, \"-label\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }\n      });\n    })));\n  }) : /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    display: \"inline\",\n    className: classes.panelGroupName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.applicationDashboards.selectTheMetrics.errorMessage')));\n};\n\nexport default SelectTheMetricsForm;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/SelectTheMetrics/Form/index.tsx"],"names":["FormControlLabel","FormGroup","Typography","React","useEffect","useState","useTranslation","useSelector","CheckBox","useStyles","SelectTheMetricsForm","dashboardVars","CallbackToSetVars","setDisabledNext","generateAlert","classes","t","selectedDashboard","state","selectDashboard","selectedPanelGroupMap","length","dashboardJSON","panelGroupMap","map","panelGroup","groupName","panels","dashboardDetails","setDashboardDetails","update","setUpdate","handleMetricSelect","panel","index","selectedPanelGroupMapArray","includes","filter","selectedPanel","push","selectedNumberOfMetrics","forEach","root","panelGroupName","formGroup","formControlLabel"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { FormControlLabel, FormGroup, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { CheckBox } from '../../../../../../components/CheckBox';\nimport {\n  DashboardDetails,\n  PanelGroupMap,\n} from '../../../../../../models/dashboardsData';\nimport { RootState } from '../../../../../../redux/reducers';\nimport useStyles from './styles';\n\ninterface SelectTheMetricsFormProps {\n  dashboardVars: DashboardDetails;\n  CallbackToSetVars: (vars: DashboardDetails) => void;\n  setDisabledNext: (next: boolean) => void;\n  generateAlert: () => void;\n}\n\nconst SelectTheMetricsForm: React.FC<SelectTheMetricsFormProps> = ({\n  dashboardVars,\n  CallbackToSetVars,\n  setDisabledNext,\n  generateAlert,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n\n  const [dashboardDetails, setDashboardDetails] = useState<DashboardDetails>({\n    selectedPanelGroupMap:\n      dashboardVars.selectedPanelGroupMap &&\n      dashboardVars.selectedPanelGroupMap.length\n        ? dashboardVars.selectedPanelGroupMap\n        : selectedDashboard.dashboardJSON &&\n          selectedDashboard.dashboardJSON.panelGroupMap\n        ? selectedDashboard.dashboardJSON.panelGroupMap.map(\n            (panelGroup: PanelGroupMap) => ({\n              groupName: panelGroup.groupName,\n              panels: [],\n            })\n          )\n        : [],\n  });\n\n  const [update, setUpdate] = useState(false);\n\n  const handleMetricSelect = (panel: string, index: number) => {\n    const selectedPanelGroupMapArray: PanelGroupMap[] =\n      dashboardDetails.selectedPanelGroupMap ?? [];\n    if (selectedPanelGroupMapArray[index].panels.includes(panel)) {\n      selectedPanelGroupMapArray[index].panels = selectedPanelGroupMapArray[\n        index\n      ].panels.filter((selectedPanel: string) => selectedPanel !== panel);\n    } else {\n      selectedPanelGroupMapArray[index].panels.push(panel);\n    }\n    setDashboardDetails({ selectedPanelGroupMap: selectedPanelGroupMapArray });\n    setUpdate(true);\n  };\n\n  useEffect(() => {\n    let selectedNumberOfMetrics = 0;\n    dashboardDetails.selectedPanelGroupMap?.forEach((panelGroup) => {\n      selectedNumberOfMetrics += panelGroup.panels.length;\n    });\n    if (\n      !dashboardDetails.selectedPanelGroupMap?.length ||\n      !selectedNumberOfMetrics\n    ) {\n      setDisabledNext(true);\n    } else {\n      setDisabledNext(false);\n    }\n    if (update === true) {\n      CallbackToSetVars(dashboardDetails);\n      setUpdate(false);\n    }\n  }, [update]);\n\n  useEffect(() => {\n    if (dashboardDetails.selectedPanelGroupMap?.length === 0) {\n      generateAlert();\n    }\n  }, [dashboardDetails.selectedPanelGroupMap]);\n\n  return (\n    <div className={classes.root}>\n      {selectedDashboard.dashboardJSON &&\n      selectedDashboard.dashboardJSON.panelGroupMap ? (\n        selectedDashboard.dashboardJSON.panelGroupMap.map(\n          (panelGroup: PanelGroupMap, index: number) => (\n            <div\n              key={`${panelGroup.groupName}-applicationDashboard-form`}\n              className={classes.panelGroupMap}\n            >\n              <Typography\n                align=\"left\"\n                display=\"inline\"\n                className={classes.panelGroupName}\n              >\n                {panelGroup.groupName}\n              </Typography>\n              <FormGroup\n                key={`metrics-group-${panelGroup.groupName}`}\n                className={classes.formGroup}\n              >\n                {panelGroup.panels.map((panel: string) => (\n                  <FormControlLabel\n                    control={\n                      <CheckBox\n                        checked={\n                          dashboardDetails.selectedPanelGroupMap\n                            ? dashboardDetails.selectedPanelGroupMap[\n                                index\n                              ].panels.includes(panel)\n                            : false\n                        }\n                        onChange={() => handleMetricSelect(panel, index)}\n                        name={panel}\n                      />\n                    }\n                    label={\n                      <Typography className={classes.formControlLabel}>\n                        {panel}\n                      </Typography>\n                    }\n                    key={`metric-${panel}-label`}\n                  />\n                ))}\n              </FormGroup>\n            </div>\n          )\n        )\n      ) : (\n        <Typography\n          align=\"left\"\n          display=\"inline\"\n          className={classes.panelGroupName}\n        >\n          {t(\n            'analyticsDashboard.applicationDashboards.selectTheMetrics.errorMessage'\n          )}\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport default SelectTheMetricsForm;\n"]},"metadata":{},"sourceType":"module"}