{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/QueryEditor/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useLazyQuery } from '@apollo/client';\nimport { FormControl, IconButton, InputLabel, MenuItem, Select, TextField, Typography } from '@material-ui/core';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AutocompleteChipInput, InputField } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Accordion } from '../../../../../../../../components/Accordion';\nimport InfoTooltip from '../../../../../../../../components/InfoTooltip';\nimport { PROM_LABEL_VALUES } from '../../../../../../../../graphql';\nimport { ReactComponent as ExpandAccordion } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../../svg/expandQueryAccordion.svg\";\nimport { ReactComponent as CopyQuery } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../../svg/queryCopy.svg\";\nimport { ReactComponent as DeleteQuery } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../../svg/queryDelete.svg\";\nimport { ReactComponent as ShowHideQuery } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../../svg/queryHide.svg\";\nimport { ReactComponent as ShrinkAccordion } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../../svg/shrinkQueryAccordion.svg\";\nimport { getLabelsAndValues, setLabelsAndValues } from '../../../../../../../../utils/promUtils';\nimport { validateTimeInSeconds } from '../../../../../../../../utils/validate';\nimport PrometheusQueryEditor from './PrometheusQueryBox';\nimport useStyles from './styles';\nvar resolutions = ['1/1', '1/2', '1/3', '1/4', '1/5', '1/10'];\n\nvar QueryEditor = function QueryEditor(_ref) {\n  var _localQuery$base_quer, _localQuery$base_quer2, _labelValueData$GetPr2, _localQuery$prom_quer2, _seriesList$map, _labelValueData$GetPr3, _labelValueData$GetPr4, _labelValueData$GetPr5;\n\n  var index = _ref.index,\n      promQuery = _ref.promQuery,\n      selectedApps = _ref.selectedApps,\n      dsURL = _ref.dsURL,\n      seriesList = _ref.seriesList,\n      handleDeleteQuery = _ref.handleDeleteQuery,\n      handleShowAndHideQuery = _ref.handleShowAndHideQuery,\n      handleUpdateQuery = _ref.handleUpdateQuery;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedValuesForLabel = _React$useState4[0],\n      setSelectedValuesForLabel = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedLabel = _React$useState6[0],\n      setSelectedLabel = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      update = _React$useState8[0],\n      setUpdate = _React$useState8[1];\n\n  var _React$useState9 = React.useState(true),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      firstLoad = _React$useState10[0],\n      setFirstLoad = _React$useState10[1];\n\n  var _React$useState11 = React.useState(_objectSpread(_objectSpread({}, promQuery), {}, {\n    base_query: promQuery.prom_query_name.split('{')[0].includes('(') ? promQuery.prom_query_name.split('{')[0].substring(promQuery.prom_query_name.split('{')[0].lastIndexOf('(') + 1) : promQuery.prom_query_name.split('{')[0],\n    labels_and_values_list: getLabelsAndValues(promQuery.prom_query_name)\n  })),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      localQuery = _React$useState12[0],\n      setLocalQuery = _React$useState12[1];\n\n  var _useLazyQuery = useLazyQuery(PROM_LABEL_VALUES, {\n    variables: {\n      prometheusInput: {\n        ds_details: {\n          url: dsURL,\n          start: \"\".concat(new Date(moment.unix(Math.round(new Date().getTime() / 1000) - 900).format()).getTime() / 1000),\n          end: \"\".concat(new Date(moment.unix(Math.round(new Date().getTime() / 1000)).format()).getTime() / 1000)\n        },\n        series: (_localQuery$base_quer = localQuery.base_query) !== null && _localQuery$base_quer !== void 0 ? _localQuery$base_quer : ''\n      }\n    },\n    fetchPolicy: 'network-only'\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getLabelValues = _useLazyQuery2[0],\n      labelValueData = _useLazyQuery2[1].data;\n\n  var getAvailableValues = function getAvailableValues(label) {\n    var options = [];\n\n    if (labelValueData) {\n      var _labelValueData$GetPr;\n\n      (_labelValueData$GetPr = labelValueData.GetPromLabelNamesAndValues.labelValues) === null || _labelValueData$GetPr === void 0 ? void 0 : _labelValueData$GetPr.forEach(function (labelValue) {\n        if (labelValue.label === label) {\n          var _labelValue$values;\n\n          options = (_labelValue$values = labelValue.values) !== null && _labelValue$values !== void 0 ? _labelValue$values : [];\n        }\n      });\n    }\n\n    return options;\n  };\n\n  var getSelectedValuesForLabel = function getSelectedValuesForLabel(label) {\n    var allOptions = getAvailableValues(label).map(function (option) {\n      return option.name;\n    });\n    var labelValuesList = getLabelsAndValues(localQuery.prom_query_name);\n    var options = [];\n    labelValuesList.forEach(function (labelValue) {\n      if (labelValue.label === label) {\n        labelValue.value.forEach(function (item) {\n          options.push({\n            name: item\n          });\n        });\n      }\n    });\n    selectedApps.forEach(function (app) {\n      app.applications.forEach(function (appRes) {\n        if (label !== 'job' && label.toLowerCase().includes(appRes.kind.toLowerCase())) {\n          appRes.names.forEach(function (name) {\n            if (allOptions.includes(name)) {\n              options.push({\n                name: name\n              });\n            }\n          });\n        }\n\n        if (label === 'job') {\n          appRes.names.forEach(function (name) {\n            if (allOptions.includes(name)) {\n              options.push({\n                name: name\n              });\n            } else if (allOptions.includes(\"\".concat(app.namespace, \"/\").concat(name))) {\n              options.push({\n                name: \"\".concat(app.namespace, \"/\").concat(name)\n              });\n            }\n          });\n        }\n      });\n    });\n    setSelectedValuesForLabel(options);\n  };\n\n  useEffect(function () {\n    if (firstLoad && localQuery.base_query !== '' && dsURL !== '') {\n      getLabelValues();\n      getSelectedValuesForLabel(selectedLabel !== null && selectedLabel !== void 0 ? selectedLabel : '');\n      setFirstLoad(false);\n    }\n  }, [firstLoad]);\n  useEffect(function () {\n    if (update) {\n      handleUpdateQuery(localQuery, index);\n      setUpdate(false);\n    }\n  }, [update]);\n\n  var getValueList = function getValueList(list) {\n    var completionOptions = [];\n    list.forEach(function (labelValue) {\n      var _labelValue$values2;\n\n      (_labelValue$values2 = labelValue.values) === null || _labelValue$values2 === void 0 ? void 0 : _labelValue$values2.forEach(function (value) {\n        completionOptions.push({\n          value: value,\n          score: 3,\n          meta: \"Value for \".concat(labelValue.label)\n        });\n      });\n    });\n    return completionOptions;\n  };\n\n  var copyTextToClipboard = function copyTextToClipboard(text) {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n\n    navigator.clipboard.writeText(text).catch(function (err) {\n      return console.error('Async: Could not copy text: ', err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Accordion, {\n    expanded: open,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AccordionSummary, {\n    expandIcon: open ? /*#__PURE__*/React.createElement(ShrinkAccordion, {\n      onClick: function onClick() {\n        setOpen(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(ExpandAccordion, {\n      onClick: function onClick() {\n        setOpen(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }),\n    IconButtonProps: {\n      edge: 'start'\n    },\n    \"aria-controls\": \"query-\".concat(promQuery.queryid, \"-content\"),\n    id: \"query-\".concat(promQuery.queryid, \"-header\"),\n    className: classes.query,\n    key: \"\".concat(promQuery.queryid),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.flex, \" \").concat(classes.summaryHeader),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.queryTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, String.fromCharCode(65 + index)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.iconButton,\n    onClick: function onClick() {\n      copyTextToClipboard(localQuery.prom_query_name);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CopyQuery, {\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.iconButton,\n    onClick: function onClick() {\n      handleShowAndHideQuery(index);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ShowHideQuery, {\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.iconButton,\n    onClick: function onClick() {\n      handleDeleteQuery(index);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DeleteQuery, {\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(AccordionDetails, {\n    className: classes.queryContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '98.5%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    value: {\n      name: (_localQuery$base_quer2 = localQuery.base_query) !== null && _localQuery$base_quer2 !== void 0 ? _localQuery$base_quer2 : ''\n    },\n    freeSolo: true,\n    id: \"query-\".concat(promQuery.queryid, \"-query-name\"),\n    options: seriesList,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    style: {\n      width: '45%'\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.metric'),\n        variant: \"outlined\",\n        size: \"medium\",\n        InputLabelProps: {\n          className: classes.formLabel\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }\n      }));\n    },\n    onChange: function onChange(event, value, reason) {\n      var newQuery = value ? reason === 'create-option' ? value : value.name : '';\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        base_query: newQuery,\n        prom_query_name: newQuery,\n        labels_and_values_list: []\n      }));\n\n      if (newQuery !== '' && dsURL !== '') {\n        setSelectedValuesForLabel([]);\n        getLabelValues();\n      }\n\n      setUpdate(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.flex, \" \").concat(classes.paddedTop),\n    style: {\n      gap: '1rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    style: {\n      width: '25%'\n    },\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.keys')), /*#__PURE__*/React.createElement(Select, {\n    value: selectedLabel,\n    onChange: function onChange(event) {\n      setSelectedLabel(event.target.value);\n      getSelectedValuesForLabel(event.target.value);\n    },\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.selectKey'),\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, labelValueData && ((_labelValueData$GetPr2 = labelValueData.GetPromLabelNamesAndValues.labelValues) === null || _labelValueData$GetPr2 === void 0 ? void 0 : _labelValueData$GetPr2.map(function (labelValue) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: labelValue.label,\n      value: labelValue.label,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 25\n      }\n    }, labelValue.label);\n  })))), /*#__PURE__*/React.createElement(AutocompleteChipInput, {\n    value: selectedValuesForLabel,\n    onChange: function onChange(event, value) {\n      var _localQuery$labels_an, _localQuery$base_quer3, _localQuery$prom_quer;\n\n      var selectedValues = value;\n      var existingLabelValuesList = (_localQuery$labels_an = localQuery.labels_and_values_list) !== null && _localQuery$labels_an !== void 0 ? _localQuery$labels_an : [];\n      var updateStatus = false;\n      existingLabelValuesList.forEach(function (labelValue, index) {\n        if (labelValue.label === selectedLabel) {\n          existingLabelValuesList[index].value = selectedValues.map(function (option) {\n            return option.name;\n          });\n          updateStatus = true;\n        }\n      });\n\n      if (!updateStatus) {\n        existingLabelValuesList.push({\n          label: selectedLabel,\n          value: selectedValues.map(function (option) {\n            return option.name;\n          })\n        });\n      }\n\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        prom_query_name: setLabelsAndValues((_localQuery$base_quer3 = localQuery.base_query) !== null && _localQuery$base_quer3 !== void 0 ? _localQuery$base_quer3 : '', (_localQuery$prom_quer = localQuery.prom_query_name) !== null && _localQuery$prom_quer !== void 0 ? _localQuery$prom_quer : '', existingLabelValuesList),\n        labels_and_values_list: existingLabelValuesList\n      }));\n      getSelectedValuesForLabel(selectedLabel !== null && selectedLabel !== void 0 ? selectedLabel : '');\n      setUpdate(true);\n    },\n    getOptionSelected: function getOptionSelected(option) {\n      return selectedValuesForLabel.map(function (selections) {\n        return selections.name;\n      }).includes(option.name);\n    },\n    options: getAvailableValues(selectedLabel !== null && selectedLabel !== void 0 ? selectedLabel : ''),\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.values'),\n    placeholder: \"\".concat(t('analyticsDashboard.applicationDashboards.tuneTheQueries.addValue')),\n    disableCloseOnSelect: true,\n    disableClearable: false,\n    limitTags: 4,\n    style: {\n      width: '75%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(PrometheusQueryEditor, {\n    index: index,\n    content: (_localQuery$prom_quer2 = localQuery.prom_query_name) !== null && _localQuery$prom_quer2 !== void 0 ? _localQuery$prom_quer2 : '',\n    seriesListCompletionOptions: (_seriesList$map = seriesList.map(function (option) {\n      return {\n        value: option.name,\n        score: 1,\n        meta: t('analyticsDashboard.applicationDashboards.tuneTheQueries.seriesName')\n      };\n    })) !== null && _seriesList$map !== void 0 ? _seriesList$map : [],\n    labelListCompletionOptions: (_labelValueData$GetPr3 = labelValueData === null || labelValueData === void 0 ? void 0 : (_labelValueData$GetPr4 = labelValueData.GetPromLabelNamesAndValues.labelValues) === null || _labelValueData$GetPr4 === void 0 ? void 0 : _labelValueData$GetPr4.map(function (labelValue) {\n      return {\n        value: labelValue.label,\n        score: 2,\n        meta: localQuery.base_query ? \"\".concat(t('analyticsDashboard.applicationDashboards.tuneTheQueries.labelFor'), \" \").concat(localQuery.base_query) : t('analyticsDashboard.applicationDashboards.tuneTheQueries.label')\n      };\n    })) !== null && _labelValueData$GetPr3 !== void 0 ? _labelValueData$GetPr3 : [],\n    valueListCompletionOptions: getValueList((_labelValueData$GetPr5 = labelValueData === null || labelValueData === void 0 ? void 0 : labelValueData.GetPromLabelNamesAndValues.labelValues) !== null && _labelValueData$GetPr5 !== void 0 ? _labelValueData$GetPr5 : []),\n    saveQueryChange: function saveQueryChange(updatedQuery) {\n      var _localQuery$base_quer4;\n\n      var existingBaseQuery = (_localQuery$base_quer4 = localQuery.base_query) !== null && _localQuery$base_quer4 !== void 0 ? _localQuery$base_quer4 : '';\n      var newBaseQuery = updatedQuery.split('{')[0].includes('(') ? updatedQuery.split('{')[0].substring(updatedQuery.split('{')[0].lastIndexOf('(') + 1) : updatedQuery.split('{')[0];\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        base_query: newBaseQuery,\n        labels_and_values_list: getLabelsAndValues(updatedQuery),\n        prom_query_name: updatedQuery\n      }));\n\n      if (existingBaseQuery !== newBaseQuery && localQuery.base_query !== '' && dsURL !== '') {\n        getLabelValues();\n        setSelectedValuesForLabel([]);\n      }\n\n      setUpdate(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.configHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.configuration')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.flex, \" \").concat(classes.paddedTop, \" \").concat(classes.configSection),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.legend'),\n    \"data-cy\": \"queryLegend\",\n    width: \"16rem\",\n    variant: \"primary\",\n    value: localQuery.legend,\n    onChange: function onChange(event) {\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        legend: event.target.value\n      }));\n      setUpdate(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InfoTooltip, {\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.legendInfo'),\n    className: classes.infoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.minStep'),\n    \"data-cy\": \"minStep\",\n    width: \"9rem\",\n    variant: !validateTimeInSeconds(\"\".concat(localQuery.minstep, \"s\")) ? 'error' : 'primary',\n    value: \"\".concat(localQuery.minstep, \"s\"),\n    onChange: function onChange(event) {\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        minstep: event.target.value.split('s')[0]\n      }));\n      setUpdate(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InfoTooltip, {\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.minStepInfo'),\n    className: classes.infoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.format'),\n    \"data-cy\": \"dataFormat\",\n    width: \"9rem\",\n    variant: \"primary\",\n    disabled: true,\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.timeSeries'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InfoTooltip, {\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.formatInfo'),\n    className: classes.infoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.flex, \" \").concat(classes.paddedTop),\n    style: {\n      gap: '2.5rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    style: {\n      width: '12.5rem'\n    },\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 19\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.graph')), /*#__PURE__*/React.createElement(Select, {\n    value: localQuery.line ? 'Line graph' : 'Area graph',\n    onChange: function onChange(event) {\n      var line = event.target.value === 'Line graph';\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        line: line,\n        close_area: !line\n      }));\n      setUpdate(true);\n    },\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.graph'),\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"\".concat(t('analyticsDashboard.applicationDashboards.tuneTheQueries.lineGraph')),\n    value: \"Line graph\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 21\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.lineGraph')), /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"\".concat(t('analyticsDashboard.applicationDashboards.tuneTheQueries.areaGraph')),\n    value: \"Area graph\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 21\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.areaGraph')))), /*#__PURE__*/React.createElement(InfoTooltip, {\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.graphInfo'),\n    className: classes.infoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    style: {\n      width: '8.5rem'\n    },\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectTextLabel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 19\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.resolution')), /*#__PURE__*/React.createElement(Select, {\n    value: localQuery.resolution,\n    onChange: function onChange(event) {\n      setLocalQuery(_objectSpread(_objectSpread({}, localQuery), {}, {\n        resolution: event.target.value\n      }));\n      setUpdate(true);\n    },\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.resolution'),\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 19\n    }\n  }, resolutions.map(function (resolution) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: resolution,\n      value: resolution,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 23\n      }\n    }, resolution);\n  }))), /*#__PURE__*/React.createElement(InfoTooltip, {\n    value: t('analyticsDashboard.applicationDashboards.tuneTheQueries.resolutionInfo'),\n    className: classes.infoIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 17\n    }\n  })))))));\n};\n\nexport default QueryEditor;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/QueryEditingWizard/QueryEditor/index.tsx"],"names":["useLazyQuery","FormControl","IconButton","InputLabel","MenuItem","Select","TextField","Typography","AccordionDetails","AccordionSummary","Autocomplete","AutocompleteChipInput","InputField","moment","React","useEffect","useTranslation","Accordion","InfoTooltip","PROM_LABEL_VALUES","getLabelsAndValues","setLabelsAndValues","validateTimeInSeconds","PrometheusQueryEditor","useStyles","resolutions","QueryEditor","index","promQuery","selectedApps","dsURL","seriesList","handleDeleteQuery","handleShowAndHideQuery","handleUpdateQuery","classes","t","useState","open","setOpen","selectedValuesForLabel","setSelectedValuesForLabel","selectedLabel","setSelectedLabel","update","setUpdate","firstLoad","setFirstLoad","base_query","prom_query_name","split","includes","substring","lastIndexOf","labels_and_values_list","localQuery","setLocalQuery","variables","prometheusInput","ds_details","url","start","Date","unix","Math","round","getTime","format","end","series","fetchPolicy","getLabelValues","labelValueData","data","getAvailableValues","label","options","GetPromLabelNamesAndValues","labelValues","forEach","labelValue","values","getSelectedValuesForLabel","allOptions","map","option","name","labelValuesList","value","item","push","app","applications","appRes","toLowerCase","kind","names","namespace","getValueList","list","completionOptions","score","meta","copyTextToClipboard","text","navigator","clipboard","console","error","writeText","catch","err","root","edge","queryid","query","flex","summaryHeader","queryTitle","String","fromCharCode","iconButton","icon","queryContainer","width","params","className","formLabel","event","reason","newQuery","paddedTop","gap","formControl","selectTextLabel","target","selectText","selectedValues","existingLabelValuesList","updateStatus","selections","updatedQuery","existingBaseQuery","newBaseQuery","configHeader","configSection","legend","infoIcon","minstep","line","close_area","resolution"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useLazyQuery } from '@apollo/client';\nimport {\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AutocompleteChipInput, InputField } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Accordion } from '../../../../../../../../components/Accordion';\nimport InfoTooltip from '../../../../../../../../components/InfoTooltip';\nimport { PROM_LABEL_VALUES } from '../../../../../../../../graphql';\nimport {\n  PromQueryDetails,\n  QueryLabelValue,\n} from '../../../../../../../../models/dashboardsData';\nimport { ApplicationMetadata } from '../../../../../../../../models/graphql/dashboardsDetails';\nimport {\n  LabelValue,\n  PrometheusSeriesQueryVars,\n  PrometheusSeriesResponse,\n} from '../../../../../../../../models/graphql/prometheus';\nimport { ReactComponent as ExpandAccordion } from '../../../../../../../../svg/expandQueryAccordion.svg';\nimport { ReactComponent as CopyQuery } from '../../../../../../../../svg/queryCopy.svg';\nimport { ReactComponent as DeleteQuery } from '../../../../../../../../svg/queryDelete.svg';\nimport { ReactComponent as ShowHideQuery } from '../../../../../../../../svg/queryHide.svg';\nimport { ReactComponent as ShrinkAccordion } from '../../../../../../../../svg/shrinkQueryAccordion.svg';\nimport {\n  getLabelsAndValues,\n  setLabelsAndValues,\n} from '../../../../../../../../utils/promUtils';\nimport { validateTimeInSeconds } from '../../../../../../../../utils/validate';\nimport PrometheusQueryEditor from './PrometheusQueryBox';\nimport useStyles from './styles';\n\ninterface QueryEditorProps {\n  index: number;\n  promQuery: PromQueryDetails;\n  selectedApps: ApplicationMetadata[];\n  dsURL: string;\n  seriesList: Option[];\n  handleDeleteQuery: (index: number) => void;\n  handleShowAndHideQuery: (index: number) => void;\n  handleUpdateQuery: (query: PromQueryDetails, index: number) => void;\n}\n\ninterface Option {\n  name: string;\n  [index: string]: any;\n}\n\nconst resolutions: string[] = ['1/1', '1/2', '1/3', '1/4', '1/5', '1/10'];\n\nconst QueryEditor: React.FC<QueryEditorProps> = ({\n  index,\n  promQuery,\n  selectedApps,\n  dsURL,\n  seriesList,\n  handleDeleteQuery,\n  handleShowAndHideQuery,\n  handleUpdateQuery,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [open, setOpen] = React.useState<boolean>(true);\n  const [selectedValuesForLabel, setSelectedValuesForLabel] = React.useState<\n    Array<Option>\n  >([]);\n\n  const [selectedLabel, setSelectedLabel] = React.useState<string>('');\n  const [update, setUpdate] = React.useState<boolean>(false);\n  const [firstLoad, setFirstLoad] = React.useState<boolean>(true);\n  const [localQuery, setLocalQuery] = React.useState<PromQueryDetails>({\n    ...promQuery,\n    base_query: promQuery.prom_query_name.split('{')[0].includes('(')\n      ? promQuery.prom_query_name\n          .split('{')[0]\n          .substring(\n            promQuery.prom_query_name.split('{')[0].lastIndexOf('(') + 1\n          )\n      : promQuery.prom_query_name.split('{')[0],\n    labels_and_values_list: getLabelsAndValues(promQuery.prom_query_name),\n  });\n\n  const [getLabelValues, { data: labelValueData }] = useLazyQuery<\n    PrometheusSeriesResponse,\n    PrometheusSeriesQueryVars\n  >(PROM_LABEL_VALUES, {\n    variables: {\n      prometheusInput: {\n        ds_details: {\n          url: dsURL,\n          start: `${\n            new Date(\n              moment\n                .unix(Math.round(new Date().getTime() / 1000) - 900)\n                .format()\n            ).getTime() / 1000\n          }`,\n          end: `${\n            new Date(\n              moment.unix(Math.round(new Date().getTime() / 1000)).format()\n            ).getTime() / 1000\n          }`,\n        },\n        series: localQuery.base_query ?? '',\n      },\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const getAvailableValues = (label: string) => {\n    let options: Array<Option> = [];\n    if (labelValueData) {\n      labelValueData.GetPromLabelNamesAndValues.labelValues?.forEach(\n        (labelValue) => {\n          if (labelValue.label === label) {\n            options = labelValue.values ?? [];\n          }\n        }\n      );\n    }\n    return options;\n  };\n\n  const getSelectedValuesForLabel = (label: string) => {\n    const allOptions: string[] = getAvailableValues(label).map(\n      (option) => option.name\n    );\n    const labelValuesList: QueryLabelValue[] = getLabelsAndValues(\n      localQuery.prom_query_name\n    );\n    const options: Array<Option> = [];\n    labelValuesList.forEach((labelValue) => {\n      if (labelValue.label === label) {\n        labelValue.value.forEach((item) => {\n          options.push({ name: item });\n        });\n      }\n    });\n    selectedApps.forEach((app) => {\n      app.applications.forEach((appRes) => {\n        if (\n          label !== 'job' &&\n          label.toLowerCase().includes(appRes.kind.toLowerCase())\n        ) {\n          appRes.names.forEach((name) => {\n            if (allOptions.includes(name)) {\n              options.push({ name });\n            }\n          });\n        }\n        if (label === 'job') {\n          appRes.names.forEach((name) => {\n            if (allOptions.includes(name)) {\n              options.push({ name });\n            } else if (allOptions.includes(`${app.namespace}/${name}`)) {\n              options.push({ name: `${app.namespace}/${name}` });\n            }\n          });\n        }\n      });\n    });\n    setSelectedValuesForLabel(options);\n  };\n\n  useEffect(() => {\n    if (firstLoad && localQuery.base_query !== '' && dsURL !== '') {\n      getLabelValues();\n      getSelectedValuesForLabel(selectedLabel ?? '');\n      setFirstLoad(false);\n    }\n  }, [firstLoad]);\n\n  useEffect(() => {\n    if (update) {\n      handleUpdateQuery(localQuery, index);\n      setUpdate(false);\n    }\n  }, [update]);\n\n  const getValueList = (list: LabelValue[]) => {\n    const completionOptions: any[] = [];\n    list.forEach((labelValue) => {\n      labelValue.values?.forEach((value) => {\n        completionOptions.push({\n          value,\n          score: 3,\n          meta: `Value for ${labelValue.label}`,\n        });\n      });\n    });\n    return completionOptions;\n  };\n\n  const copyTextToClipboard = (text: string) => {\n    if (!navigator.clipboard) {\n      console.error('Oops Could not copy text: ');\n      return;\n    }\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n  };\n\n  return (\n    <div className={classes.root}>\n      <Accordion expanded={open}>\n        <AccordionSummary\n          expandIcon={\n            open ? (\n              <ShrinkAccordion\n                onClick={() => {\n                  setOpen(false);\n                }}\n              />\n            ) : (\n              <ExpandAccordion\n                onClick={() => {\n                  setOpen(true);\n                }}\n              />\n            )\n          }\n          IconButtonProps={{ edge: 'start' }}\n          aria-controls={`query-${promQuery.queryid}-content`}\n          id={`query-${promQuery.queryid}-header`}\n          className={classes.query}\n          key={`${promQuery.queryid}`}\n        >\n          <div className={`${classes.flex} ${classes.summaryHeader}`}>\n            <Typography className={classes.queryTitle}>\n              {String.fromCharCode(65 + index)}\n            </Typography>\n\n            <div className={classes.flex}>\n              <IconButton\n                className={classes.iconButton}\n                onClick={() => {\n                  copyTextToClipboard(localQuery.prom_query_name);\n                }}\n              >\n                <CopyQuery className={classes.icon} />\n              </IconButton>\n\n              <IconButton\n                className={classes.iconButton}\n                onClick={() => {\n                  handleShowAndHideQuery(index);\n                }}\n              >\n                <ShowHideQuery className={classes.icon} />\n              </IconButton>\n\n              <IconButton\n                className={classes.iconButton}\n                onClick={() => {\n                  handleDeleteQuery(index);\n                }}\n              >\n                <DeleteQuery className={classes.icon} />\n              </IconButton>\n            </div>\n          </div>\n        </AccordionSummary>\n        <AccordionDetails className={classes.queryContainer}>\n          <div style={{ width: '98.5%' }}>\n            <Autocomplete\n              value={{ name: localQuery.base_query ?? '' }}\n              freeSolo\n              id={`query-${promQuery.queryid}-query-name`}\n              options={seriesList}\n              getOptionLabel={(option: Option) => option.name}\n              style={{ width: '45%' }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.metric'\n                  )}\n                  variant=\"outlined\"\n                  size=\"medium\"\n                  InputLabelProps={{ className: classes.formLabel }}\n                />\n              )}\n              onChange={(event, value, reason) => {\n                const newQuery: string = value\n                  ? reason === 'create-option'\n                    ? (value as string)\n                    : (value as Option).name\n                  : '';\n                setLocalQuery({\n                  ...localQuery,\n                  base_query: newQuery,\n                  prom_query_name: newQuery,\n                  labels_and_values_list: [],\n                });\n                if (newQuery !== '' && dsURL !== '') {\n                  setSelectedValuesForLabel([]);\n                  getLabelValues();\n                }\n                setUpdate(true);\n              }}\n            />\n            <div\n              className={`${classes.flex} ${classes.paddedTop}`}\n              style={{ gap: '1rem' }}\n            >\n              <FormControl\n                variant=\"outlined\"\n                className={classes.formControl}\n                style={{ width: '25%' }}\n                color=\"primary\"\n              >\n                <InputLabel className={classes.selectTextLabel}>\n                  {t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.keys'\n                  )}\n                </InputLabel>\n                <Select\n                  value={selectedLabel}\n                  onChange={(event: any) => {\n                    setSelectedLabel(event.target.value as string);\n                    getSelectedValuesForLabel(event.target.value as string);\n                  }}\n                  label={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.selectKey'\n                  )}\n                  className={classes.selectText}\n                >\n                  {labelValueData &&\n                    labelValueData.GetPromLabelNamesAndValues.labelValues?.map(\n                      (labelValue: LabelValue) => (\n                        <MenuItem\n                          key={labelValue.label}\n                          value={labelValue.label}\n                        >\n                          {labelValue.label}\n                        </MenuItem>\n                      )\n                    )}\n                </Select>\n              </FormControl>\n\n              <AutocompleteChipInput\n                value={selectedValuesForLabel}\n                onChange={(event, value) => {\n                  const selectedValues: Array<Option> = value as Array<Option>;\n                  const existingLabelValuesList: QueryLabelValue[] =\n                    localQuery.labels_and_values_list ?? [];\n                  let updateStatus = false;\n                  existingLabelValuesList.forEach((labelValue, index) => {\n                    if (labelValue.label === selectedLabel) {\n                      existingLabelValuesList[index].value = selectedValues.map(\n                        (option) => option.name\n                      );\n                      updateStatus = true;\n                    }\n                  });\n                  if (!updateStatus) {\n                    existingLabelValuesList.push({\n                      label: selectedLabel,\n                      value: selectedValues.map((option) => option.name),\n                    });\n                  }\n                  setLocalQuery({\n                    ...localQuery,\n                    prom_query_name: setLabelsAndValues(\n                      localQuery.base_query ?? '',\n                      localQuery.prom_query_name ?? '',\n                      existingLabelValuesList\n                    ),\n                    labels_and_values_list: existingLabelValuesList,\n                  });\n                  getSelectedValuesForLabel(selectedLabel ?? '');\n                  setUpdate(true);\n                }}\n                getOptionSelected={(option) =>\n                  selectedValuesForLabel\n                    .map((selections) => selections.name)\n                    .includes(option.name)\n                }\n                options={getAvailableValues(selectedLabel ?? '')}\n                label={t(\n                  'analyticsDashboard.applicationDashboards.tuneTheQueries.values'\n                )}\n                placeholder={`${t(\n                  'analyticsDashboard.applicationDashboards.tuneTheQueries.addValue'\n                )}`}\n                disableCloseOnSelect\n                disableClearable={false}\n                limitTags={4}\n                style={{ width: '75%' }}\n              />\n            </div>\n\n            <PrometheusQueryEditor\n              index={index}\n              content={localQuery.prom_query_name ?? ''}\n              seriesListCompletionOptions={\n                seriesList.map((option: Option) => ({\n                  value: option.name,\n                  score: 1,\n                  meta: t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.seriesName'\n                  ),\n                })) ?? []\n              }\n              labelListCompletionOptions={\n                labelValueData?.GetPromLabelNamesAndValues.labelValues?.map(\n                  (labelValue: LabelValue) => ({\n                    value: labelValue.label,\n                    score: 2,\n                    meta: localQuery.base_query\n                      ? `${t(\n                          'analyticsDashboard.applicationDashboards.tuneTheQueries.labelFor'\n                        )} ${localQuery.base_query}`\n                      : t(\n                          'analyticsDashboard.applicationDashboards.tuneTheQueries.label'\n                        ),\n                  })\n                ) ?? []\n              }\n              valueListCompletionOptions={getValueList(\n                labelValueData?.GetPromLabelNamesAndValues.labelValues ?? []\n              )}\n              saveQueryChange={(updatedQuery: string) => {\n                const existingBaseQuery: string = localQuery.base_query ?? '';\n                const newBaseQuery: string = updatedQuery\n                  .split('{')[0]\n                  .includes('(')\n                  ? updatedQuery\n                      .split('{')[0]\n                      .substring(\n                        updatedQuery.split('{')[0].lastIndexOf('(') + 1\n                      )\n                  : updatedQuery.split('{')[0];\n                setLocalQuery({\n                  ...localQuery,\n                  base_query: newBaseQuery,\n                  labels_and_values_list: getLabelsAndValues(updatedQuery),\n                  prom_query_name: updatedQuery,\n                });\n                if (\n                  existingBaseQuery !== newBaseQuery &&\n                  localQuery.base_query !== '' &&\n                  dsURL !== ''\n                ) {\n                  getLabelValues();\n                  setSelectedValuesForLabel([]);\n                }\n                setUpdate(true);\n              }}\n            />\n\n            <Typography className={classes.configHeader}>\n              {t(\n                'analyticsDashboard.applicationDashboards.tuneTheQueries.configuration'\n              )}\n            </Typography>\n\n            <div\n              className={`${classes.flex} ${classes.paddedTop} ${classes.configSection}`}\n            >\n              <div className={classes.flex}>\n                <InputField\n                  label={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.legend'\n                  )}\n                  data-cy=\"queryLegend\"\n                  width=\"16rem\"\n                  variant=\"primary\"\n                  value={localQuery.legend}\n                  onChange={(event: React.ChangeEvent<{ value: string }>) => {\n                    setLocalQuery({\n                      ...localQuery,\n                      legend: (event.target as HTMLInputElement).value,\n                    });\n                    setUpdate(true);\n                  }}\n                />\n                <InfoTooltip\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.legendInfo'\n                  )}\n                  className={classes.infoIcon}\n                />\n              </div>\n\n              <div className={classes.flex}>\n                <InputField\n                  label={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.minStep'\n                  )}\n                  data-cy=\"minStep\"\n                  width=\"9rem\"\n                  variant={\n                    !validateTimeInSeconds(`${localQuery.minstep}s`)\n                      ? 'error'\n                      : 'primary'\n                  }\n                  value={`${localQuery.minstep}s`}\n                  onChange={(event: React.ChangeEvent<{ value: string }>) => {\n                    setLocalQuery({\n                      ...localQuery,\n                      minstep: (event.target as HTMLInputElement).value.split(\n                        's'\n                      )[0],\n                    });\n                    setUpdate(true);\n                  }}\n                />\n                <InfoTooltip\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.minStepInfo'\n                  )}\n                  className={classes.infoIcon}\n                />\n              </div>\n\n              <div className={classes.flex}>\n                <InputField\n                  label={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.format'\n                  )}\n                  data-cy=\"dataFormat\"\n                  width=\"9rem\"\n                  variant=\"primary\"\n                  disabled\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.timeSeries'\n                  )}\n                />\n                <InfoTooltip\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.formatInfo'\n                  )}\n                  className={classes.infoIcon}\n                />\n              </div>\n            </div>\n\n            <div\n              className={`${classes.flex} ${classes.paddedTop}`}\n              style={{ gap: '2.5rem' }}\n            >\n              <div className={classes.flex}>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  style={{ width: '12.5rem' }}\n                  color=\"primary\"\n                >\n                  <InputLabel className={classes.selectTextLabel}>\n                    {t(\n                      'analyticsDashboard.applicationDashboards.tuneTheQueries.graph'\n                    )}\n                  </InputLabel>\n                  <Select\n                    value={localQuery.line ? 'Line graph' : 'Area graph'}\n                    onChange={(event) => {\n                      const line =\n                        (event.target.value as string) === 'Line graph';\n                      setLocalQuery({\n                        ...localQuery,\n                        line,\n                        close_area: !line,\n                      });\n                      setUpdate(true);\n                    }}\n                    label={t(\n                      'analyticsDashboard.applicationDashboards.tuneTheQueries.graph'\n                    )}\n                    className={classes.selectText}\n                  >\n                    <MenuItem\n                      key={`${t(\n                        'analyticsDashboard.applicationDashboards.tuneTheQueries.lineGraph'\n                      )}`}\n                      value=\"Line graph\"\n                    >\n                      {t(\n                        'analyticsDashboard.applicationDashboards.tuneTheQueries.lineGraph'\n                      )}\n                    </MenuItem>\n                    <MenuItem\n                      key={`${t(\n                        'analyticsDashboard.applicationDashboards.tuneTheQueries.areaGraph'\n                      )}`}\n                      value=\"Area graph\"\n                    >\n                      {t(\n                        'analyticsDashboard.applicationDashboards.tuneTheQueries.areaGraph'\n                      )}\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n                <InfoTooltip\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.graphInfo'\n                  )}\n                  className={classes.infoIcon}\n                />\n              </div>\n\n              <div className={classes.flex}>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  style={{ width: '8.5rem' }}\n                  color=\"primary\"\n                >\n                  <InputLabel className={classes.selectTextLabel}>\n                    {t(\n                      'analyticsDashboard.applicationDashboards.tuneTheQueries.resolution'\n                    )}\n                  </InputLabel>\n                  <Select\n                    value={localQuery.resolution}\n                    onChange={(event) => {\n                      setLocalQuery({\n                        ...localQuery,\n                        resolution: event.target.value as string,\n                      });\n                      setUpdate(true);\n                    }}\n                    label={t(\n                      'analyticsDashboard.applicationDashboards.tuneTheQueries.resolution'\n                    )}\n                    className={classes.selectText}\n                  >\n                    {resolutions.map((resolution: string) => (\n                      <MenuItem key={resolution} value={resolution}>\n                        {resolution}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                <InfoTooltip\n                  value={t(\n                    'analyticsDashboard.applicationDashboards.tuneTheQueries.resolutionInfo'\n                  )}\n                  className={classes.infoIcon}\n                />\n              </div>\n            </div>\n          </div>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default QueryEditor;\n"]},"metadata":{},"sourceType":"module"}