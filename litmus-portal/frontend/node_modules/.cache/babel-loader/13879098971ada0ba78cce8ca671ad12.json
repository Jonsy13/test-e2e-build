{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/uploadYAML.tsx\";\n\nimport { AccordionDetails, Button, Paper, Typography } from '@material-ui/core';\nimport { ButtonFilled } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { updateEngineName, updateNamespace } from '../../../utils/yamlUtils';\nimport useStyles from './styles';\n\nvar UploadYAML = function UploadYAML() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      uploadedYAML = _useState2[0],\n      setUploadedYAML = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fileName = _useState4[0],\n      setFileName = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      uploadError = _useState6[0],\n      setUploadError = _useState6[1];\n\n  var workflowAction = useActions(WorkflowActions);\n\n  var _useSelector = useSelector(function (state) {\n    return state.workflowData;\n  }),\n      namespace = _useSelector.namespace;\n\n  var saveToLocalForage = function saveToLocalForage() {\n    var selection = {\n      selected: 'D'\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('hasSetWorkflowData', false);\n  }; // Function to handle when a File is dragged on the upload field\n\n\n  var handleDrag = function handleDrag(e) {\n    Array.from(e.dataTransfer.files).filter(function (file) {\n      return file.name.split('.')[1] === 'yaml' || file.name.split('.')[1] === 'yml';\n    }).forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var readFile, wfmanifest, updatedManifest;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return file.text();\n\n              case 2:\n                readFile = _context.sent;\n                setUploadedYAML(readFile);\n                setFileName(file.name);\n\n                try {\n                  setUploadError(false);\n                  wfmanifest = updateEngineName(YAML.parse(readFile));\n                  updatedManifest = updateNamespace(wfmanifest, namespace);\n                  workflowAction.setWorkflowManifest({\n                    manifest: YAML.stringify(updatedManifest)\n                  });\n                } catch (_unused) {\n                  setUploadError(true);\n                  workflowAction.setWorkflowManifest({\n                    manifest: ''\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    saveToLocalForage();\n  }; // Function to handle File upload on button click\n\n\n  var handleFileUpload = function handleFileUpload(e) {\n    var readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    var extension = readFile === null || readFile === void 0 ? void 0 : readFile.name.substring(readFile.name.lastIndexOf('.') + 1);\n\n    if ((extension === 'yaml' || extension === 'yml') && readFile) {\n      readFile.text().then(function (response) {\n        setUploadedYAML(response);\n\n        try {\n          setUploadError(false);\n          var wfmanifest = updateEngineName(YAML.parse(response));\n          var updatedManifest = updateNamespace(wfmanifest, namespace);\n          workflowAction.setWorkflowManifest({\n            manifest: YAML.stringify(updatedManifest)\n          });\n        } catch (_unused2) {\n          setUploadError(true);\n          workflowAction.setWorkflowManifest({\n            manifest: ''\n          });\n        }\n      });\n    }\n\n    saveToLocalForage();\n  };\n\n  return /*#__PURE__*/React.createElement(AccordionDetails, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    component: \"div\",\n    onDragOver: function onDragOver(e) {\n      e.preventDefault();\n    },\n    onDrop: function onDrop(e) {\n      e.preventDefault();\n      handleDrag(e);\n    },\n    className: classes.uploadYAMLDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, uploadError ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadSuccessDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/error-upload.svg\",\n    alt: \"upload error\",\n    width: \"20\",\n    height: \"20\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.errorText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.errorUpload')), /*#__PURE__*/React.createElement(ButtonFilled, {\n    className: classes.errorBtn,\n    onClick: function onClick() {\n      setUploadedYAML('');\n      setUploadError(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/retry.svg\",\n    alt: \"Retry\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.retryText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, t('customWorkflow.createWorkflow.retryUpload')))) : uploadedYAML === '' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadYAMLText,\n    \"data-cy\": \"uploadYAMLInput\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/upload-yaml.svg\",\n    alt: \"upload yaml\",\n    className: classes.uploadImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.drag')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.orText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"or\"), /*#__PURE__*/React.createElement(\"input\", {\n    accept: \".yaml\",\n    style: {\n      display: 'none'\n    },\n    id: \"contained-button-file\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      handleFileUpload(e);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"contained-button-file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.uploadBtn,\n    component: \"span\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, t('customWorkflow.createWorkflow.uploadFile'))))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.uploadSuccessDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/upload-success.svg\",\n    alt: \"checkmark\",\n    className: classes.uploadSuccessImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.uploadSuccessText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, t('customWorkflow.createWorkflow.uploadSuccess'), \" \", fileName))));\n};\n\nexport default UploadYAML;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/uploadYAML.tsx"],"names":["AccordionDetails","Button","Paper","Typography","ButtonFilled","localforage","React","useState","useTranslation","useSelector","YAML","useActions","WorkflowActions","updateEngineName","updateNamespace","useStyles","UploadYAML","classes","t","uploadedYAML","setUploadedYAML","fileName","setFileName","uploadError","setUploadError","workflowAction","state","workflowData","namespace","saveToLocalForage","selection","selected","setItem","handleDrag","e","Array","from","dataTransfer","files","filter","file","name","split","forEach","text","readFile","wfmanifest","parse","updatedManifest","setWorkflowManifest","manifest","stringify","handleFileUpload","target","extension","substring","lastIndexOf","then","response","preventDefault","uploadYAMLDiv","uploadSuccessDiv","errorText","errorBtn","retryText","uploadYAMLText","uploadImage","orText","display","uploadBtn","uploadSuccessImg","uploadSuccessText"],"mappings":"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","sourcesContent":["import { AccordionDetails, Button, Paper, Typography } from '@material-ui/core';\nimport { ButtonFilled } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { updateEngineName, updateNamespace } from '../../../utils/yamlUtils';\nimport useStyles from './styles';\n\ninterface ChooseWorkflowRadio {\n  selected: string;\n}\n\nconst UploadYAML = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [uploadedYAML, setUploadedYAML] = useState('');\n  const [fileName, setFileName] = useState<string | null>('');\n  const [uploadError, setUploadError] = useState(false);\n  const workflowAction = useActions(WorkflowActions);\n  const { namespace } = useSelector((state: RootState) => state.workflowData);\n\n  const saveToLocalForage = () => {\n    const selection: ChooseWorkflowRadio = {\n      selected: 'D',\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('hasSetWorkflowData', false);\n  };\n\n  // Function to handle when a File is dragged on the upload field\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    Array.from(e.dataTransfer.files)\n      .filter(\n        (file) =>\n          file.name.split('.')[1] === 'yaml' ||\n          file.name.split('.')[1] === 'yml'\n      )\n      .forEach(async (file) => {\n        const readFile = await file.text();\n        setUploadedYAML(readFile);\n        setFileName(file.name);\n        try {\n          setUploadError(false);\n          const wfmanifest = updateEngineName(YAML.parse(readFile));\n          const updatedManifest = updateNamespace(wfmanifest, namespace);\n          workflowAction.setWorkflowManifest({\n            manifest: YAML.stringify(updatedManifest),\n          });\n        } catch {\n          setUploadError(true);\n          workflowAction.setWorkflowManifest({\n            manifest: '',\n          });\n        }\n      });\n    saveToLocalForage();\n  };\n\n  // Function to handle File upload on button click\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    const extension = readFile?.name.substring(\n      readFile.name.lastIndexOf('.') + 1\n    );\n    if ((extension === 'yaml' || extension === 'yml') && readFile) {\n      readFile.text().then((response) => {\n        setUploadedYAML(response);\n        try {\n          setUploadError(false);\n          const wfmanifest = updateEngineName(YAML.parse(response));\n          const updatedManifest = updateNamespace(wfmanifest, namespace);\n          workflowAction.setWorkflowManifest({\n            manifest: YAML.stringify(updatedManifest),\n          });\n        } catch {\n          setUploadError(true);\n          workflowAction.setWorkflowManifest({\n            manifest: '',\n          });\n        }\n      });\n    }\n    saveToLocalForage();\n  };\n  return (\n    <AccordionDetails>\n      <Paper\n        elevation={3}\n        component=\"div\"\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          handleDrag(e);\n        }}\n        className={classes.uploadYAMLDiv}\n      >\n        {uploadError ? (\n          <div className={classes.uploadSuccessDiv}>\n            <img\n              src=\"./icons/error-upload.svg\"\n              alt=\"upload error\"\n              width=\"20\"\n              height=\"20\"\n            />\n            <Typography className={classes.errorText}>\n              {t('customWorkflow.createWorkflow.errorUpload')}\n            </Typography>\n            <ButtonFilled\n              className={classes.errorBtn}\n              onClick={() => {\n                setUploadedYAML('');\n                setUploadError(false);\n              }}\n            >\n              <img src=\"./icons/retry.svg\" alt=\"Retry\" />\n              <Typography className={classes.retryText}>\n                {t('customWorkflow.createWorkflow.retryUpload')}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        ) : uploadedYAML === '' ? (\n          <div className={classes.uploadYAMLText} data-cy=\"uploadYAMLInput\">\n            <img\n              src=\"./icons/upload-yaml.svg\"\n              alt=\"upload yaml\"\n              className={classes.uploadImage}\n            />\n            <Typography variant=\"h6\">\n              {t('customWorkflow.createWorkflow.drag')}\n            </Typography>\n            <Typography className={classes.orText}>or</Typography>\n            <input\n              accept=\".yaml\"\n              style={{ display: 'none' }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={(e) => {\n                handleFileUpload(e);\n              }}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <label htmlFor=\"contained-button-file\">\n                <Button\n                  variant=\"outlined\"\n                  className={classes.uploadBtn}\n                  component=\"span\"\n                >\n                  {t('customWorkflow.createWorkflow.uploadFile')}\n                </Button>\n              </label>\n            </label>\n          </div>\n        ) : (\n          <div className={classes.uploadSuccessDiv}>\n            <img\n              src=\"./icons/upload-success.svg\"\n              alt=\"checkmark\"\n              className={classes.uploadSuccessImg}\n            />\n            <Typography className={classes.uploadSuccessText}>\n              {t('customWorkflow.createWorkflow.uploadSuccess')} {fileName}\n            </Typography>\n          </div>\n        )}\n      </Paper>\n    </AccordionDetails>\n  );\n};\nexport default UploadYAML;\n"]},"metadata":{},"sourceType":"module"}