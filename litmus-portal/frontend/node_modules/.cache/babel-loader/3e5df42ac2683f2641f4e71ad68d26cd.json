{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Stepper/index.tsx\",\n    _this = this;\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { ButtonFilled, ButtonOutlined } from 'litmus-ui';\nimport React, { useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { LitmusStepper } from '../../../../components/LitmusStepper';\nimport Loader from '../../../../components/Loader';\nimport Row from '../../../../containers/layouts/Row';\nimport useActions from '../../../../redux/actions';\nimport * as AlertActions from '../../../../redux/actions/alert';\nimport { getProjectRole } from '../../../../utils/getSearchParams';\nimport ChooseADashboardType from '../Steps/ChooseADashboardType';\nimport ConfigureDashboardMetadata from '../Steps/ConfigureDashboardMetadata';\nimport SelectTheMetrics from '../Steps/SelectTheMetrics';\nimport TuneTheQueries from '../Steps/TuneTheQueries';\nimport useStyles from './styles';\n\nfunction Alert(props) {\n  return /*#__PURE__*/React.createElement(MuiAlert, Object.assign({\n    elevation: 6,\n    variant: \"filled\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }));\n}\n\nvar DashboardStepper = function DashboardStepper(_ref) {\n  var _existingDashboardVar, _existingDashboardVar2, _existingDashboardVar3, _existingDashboardVar4, _existingDashboardVar5, _existingDashboardVar6, _existingDashboardVar7, _existingDashboardVar8, _existingDashboardVar9, _existingDashboardVar10, _existingDashboardVar11, _existingDashboardVar12, _existingDashboardVar13, _existingDashboardVar14;\n\n  var configure = _ref.configure,\n      activePanelID = _ref.activePanelID,\n      existingDashboardVars = _ref.existingDashboardVars,\n      dataSourceList = _ref.dataSourceList;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var stepsArray = [\"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step1')), \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step2')), \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step3')), \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step4'))];\n  var childRef = useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(configure && activePanelID !== '' ? 1 : 0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeStep = _React$useState4[0],\n      setActiveStep = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    id: !configure ? '' : (_existingDashboardVar = existingDashboardVars.id) !== null && _existingDashboardVar !== void 0 ? _existingDashboardVar : '',\n    name: !configure ? '' : (_existingDashboardVar2 = existingDashboardVars.name) !== null && _existingDashboardVar2 !== void 0 ? _existingDashboardVar2 : '',\n    dashboardTypeID: !configure ? '' : (_existingDashboardVar3 = existingDashboardVars.dashboardTypeID) !== null && _existingDashboardVar3 !== void 0 ? _existingDashboardVar3 : '',\n    dashboardTypeName: !configure ? '' : (_existingDashboardVar4 = existingDashboardVars.dashboardTypeName) !== null && _existingDashboardVar4 !== void 0 ? _existingDashboardVar4 : '',\n    dataSourceType: !configure ? '' : (_existingDashboardVar5 = existingDashboardVars.dataSourceType) !== null && _existingDashboardVar5 !== void 0 ? _existingDashboardVar5 : '',\n    dataSourceID: !configure ? dataSourceList.length !== 0 ? dataSourceList[0].ds_id : '' : (_existingDashboardVar6 = existingDashboardVars.dataSourceID) !== null && _existingDashboardVar6 !== void 0 ? _existingDashboardVar6 : '',\n    dataSourceURL: !configure ? dataSourceList.length !== 0 ? dataSourceList[0].ds_url : '' : (_existingDashboardVar7 = existingDashboardVars.dataSourceURL) !== null && _existingDashboardVar7 !== void 0 ? _existingDashboardVar7 : '',\n    chaosEventQueryTemplate: !configure ? '' : (_existingDashboardVar8 = existingDashboardVars.chaosEventQueryTemplate) !== null && _existingDashboardVar8 !== void 0 ? _existingDashboardVar8 : '',\n    chaosVerdictQueryTemplate: !configure ? '' : (_existingDashboardVar9 = existingDashboardVars.chaosVerdictQueryTemplate) !== null && _existingDashboardVar9 !== void 0 ? _existingDashboardVar9 : '',\n    agentID: !configure ? '' : (_existingDashboardVar10 = existingDashboardVars.agentID) !== null && _existingDashboardVar10 !== void 0 ? _existingDashboardVar10 : '',\n    information: !configure ? '' : (_existingDashboardVar11 = existingDashboardVars.information) !== null && _existingDashboardVar11 !== void 0 ? _existingDashboardVar11 : '',\n    panelGroupMap: !configure ? [] : (_existingDashboardVar12 = existingDashboardVars.panelGroupMap) !== null && _existingDashboardVar12 !== void 0 ? _existingDashboardVar12 : [],\n    panelGroups: !configure ? [] : (_existingDashboardVar13 = existingDashboardVars.panelGroups) !== null && _existingDashboardVar13 !== void 0 ? _existingDashboardVar13 : [],\n    selectedPanelGroupMap: [],\n    applicationMetadataMap: !configure ? [] : (_existingDashboardVar14 = existingDashboardVars.applicationMetadataMap) !== null && _existingDashboardVar14 !== void 0 ? _existingDashboardVar14 : []\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dashboardVars = _React$useState6[0],\n      setDashboardVars = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      disabledNext = _React$useState8[0],\n      _setDisabledNext = _React$useState8[1];\n\n  var steps = stepsArray;\n\n  if (configure) {\n    steps = steps.filter(function (step) {\n      return step !== \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step1')) && step !== \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step3'));\n    });\n  } else if (dashboardVars.dashboardTypeID === 'custom') {\n    steps = steps.filter(function (step) {\n      return step !== \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.steps.step3'));\n    });\n  } // Checks if the button is in loading state or not\n\n\n  var isButtonLoading = function isButtonLoading(status) {\n    return setLoading(status);\n  };\n\n  var _handleNext = function handleNext() {\n    if (childRef.current && childRef.current.onNext()) {\n      setActiveStep(function (prevActiveStep) {\n        return prevActiveStep + 1;\n      });\n    }\n  };\n\n  function getStepContent(stepIndex, childRef) {\n    switch (stepIndex) {\n      case !configure ? 0 : -1:\n        return /*#__PURE__*/React.createElement(ChooseADashboardType, {\n          ref: childRef,\n          handleNext: _handleNext,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 16\n          }\n        });\n\n      case !configure ? 1 : 0:\n        return /*#__PURE__*/React.createElement(ConfigureDashboardMetadata, {\n          ref: childRef,\n          configure: configure,\n          dashboardVars: dashboardVars,\n          dataSourceList: dataSourceList,\n          handleMetadataUpdate: function handleMetadataUpdate(dashboardMetadata) {\n            var _dashboardMetadata$id, _dashboardMetadata$na, _dashboardMetadata$da, _dashboardMetadata$da2, _dashboardMetadata$da3, _dashboardMetadata$da4, _dashboardMetadata$da5, _dashboardMetadata$ch, _dashboardMetadata$ch2, _dashboardMetadata$ag, _dashboardMetadata$in, _dashboardMetadata$pa, _dashboardMetadata$pa2, _dashboardMetadata$ap;\n\n            setDashboardVars(_objectSpread(_objectSpread({}, dashboardVars), {}, {\n              id: (_dashboardMetadata$id = dashboardMetadata.id) !== null && _dashboardMetadata$id !== void 0 ? _dashboardMetadata$id : '',\n              name: (_dashboardMetadata$na = dashboardMetadata.name) !== null && _dashboardMetadata$na !== void 0 ? _dashboardMetadata$na : '',\n              dashboardTypeID: (_dashboardMetadata$da = dashboardMetadata.dashboardTypeID) !== null && _dashboardMetadata$da !== void 0 ? _dashboardMetadata$da : '',\n              dashboardTypeName: (_dashboardMetadata$da2 = dashboardMetadata.dashboardTypeName) !== null && _dashboardMetadata$da2 !== void 0 ? _dashboardMetadata$da2 : '',\n              dataSourceType: (_dashboardMetadata$da3 = dashboardMetadata.dataSourceType) !== null && _dashboardMetadata$da3 !== void 0 ? _dashboardMetadata$da3 : '',\n              dataSourceID: (_dashboardMetadata$da4 = dashboardMetadata.dataSourceID) !== null && _dashboardMetadata$da4 !== void 0 ? _dashboardMetadata$da4 : '',\n              dataSourceURL: (_dashboardMetadata$da5 = dashboardMetadata.dataSourceURL) !== null && _dashboardMetadata$da5 !== void 0 ? _dashboardMetadata$da5 : '',\n              chaosEventQueryTemplate: (_dashboardMetadata$ch = dashboardMetadata.chaosEventQueryTemplate) !== null && _dashboardMetadata$ch !== void 0 ? _dashboardMetadata$ch : '',\n              chaosVerdictQueryTemplate: (_dashboardMetadata$ch2 = dashboardMetadata.chaosVerdictQueryTemplate) !== null && _dashboardMetadata$ch2 !== void 0 ? _dashboardMetadata$ch2 : '',\n              agentID: (_dashboardMetadata$ag = dashboardMetadata.agentID) !== null && _dashboardMetadata$ag !== void 0 ? _dashboardMetadata$ag : '',\n              information: (_dashboardMetadata$in = dashboardMetadata.information) !== null && _dashboardMetadata$in !== void 0 ? _dashboardMetadata$in : '',\n              panelGroupMap: (_dashboardMetadata$pa = dashboardMetadata.panelGroupMap) !== null && _dashboardMetadata$pa !== void 0 ? _dashboardMetadata$pa : [],\n              panelGroups: (_dashboardMetadata$pa2 = dashboardMetadata.panelGroups) !== null && _dashboardMetadata$pa2 !== void 0 ? _dashboardMetadata$pa2 : [],\n              applicationMetadataMap: (_dashboardMetadata$ap = dashboardMetadata.applicationMetadataMap) !== null && _dashboardMetadata$ap !== void 0 ? _dashboardMetadata$ap : []\n            }));\n          },\n          setDisabledNext: function setDisabledNext(next) {\n            _setDisabledNext(next);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }\n        });\n\n      case !configure ? dashboardVars.dashboardTypeID !== 'custom' ? 2 : -1 : -1:\n        return /*#__PURE__*/React.createElement(SelectTheMetrics, {\n          ref: childRef,\n          dashboardVars: dashboardVars,\n          handleMetricsUpdate: function handleMetricsUpdate(dashboardMetrics) {\n            var _dashboardMetrics$sel;\n\n            setDashboardVars(_objectSpread(_objectSpread({}, dashboardVars), {}, {\n              selectedPanelGroupMap: (_dashboardMetrics$sel = dashboardMetrics.selectedPanelGroupMap) !== null && _dashboardMetrics$sel !== void 0 ? _dashboardMetrics$sel : []\n            }));\n          },\n          setDisabledNext: function setDisabledNext(next) {\n            _setDisabledNext(next);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 11\n          }\n        });\n\n      case !configure ? dashboardVars.dashboardTypeID !== 'custom' ? 3 : 2 : 1:\n        return /*#__PURE__*/React.createElement(TuneTheQueries, {\n          ref: childRef,\n          configure: configure,\n          isLoading: isButtonLoading,\n          activeEditPanelID: activePanelID,\n          dashboardVars: dashboardVars,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(ChooseADashboardType, {\n          ref: childRef,\n          handleNext: _handleNext,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  var isAlertOpen = useSelector(function (state) {\n    return state.alert.isAlertOpen;\n  });\n  var alert = useActions(AlertActions);\n\n  var handleBack = function handleBack() {\n    if (activeStep === 1 && !configure) {\n      setDashboardVars({\n        id: '',\n        name: '',\n        dashboardTypeID: '',\n        dashboardTypeName: '',\n        dataSourceType: '',\n        dataSourceID: '',\n        dataSourceURL: '',\n        chaosEventQueryTemplate: '',\n        chaosVerdictQueryTemplate: '',\n        agentID: '',\n        information: '',\n        panelGroupMap: [],\n        panelGroups: [],\n        selectedPanelGroupMap: [],\n        applicationMetadataMap: []\n      });\n    }\n\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n  /** \n    Control Buttons\n    ------------------------------------------------------------------------------\n    When active step is zero (First Step) there won't be a Back button\n    When active step is the last step in the stepper the button will change to Finish\n    All steps in the middle will have next and back buttons\n  * */\n\n\n  var ControlButton = function ControlButton() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, activeStep === steps.length - 1 ?\n    /*#__PURE__*/\n    // Show Save changes button at Bottom for Last Step\n    React.createElement(\"div\", {\n      className: classes.headerButtonWrapper,\n      \"aria-label\": \"buttons\",\n      style: {\n        width: 'fit-content'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    }, !loading && /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: function onClick() {\n        return handleBack();\n      },\n      style: {\n        marginRight: '1rem'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, t('analyticsDashboard.applicationDashboards.stepper.buttons.back'))), /*#__PURE__*/React.createElement(ButtonFilled, {\n      disabled: loading,\n      onClick: function onClick() {\n        return _handleNext();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }\n    }, !loading && /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/icons/save-changes.svg\",\n      alt: \"Info icon\",\n      className: classes.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      className: classes.buttonText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 15\n      }\n    }, !loading ? \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.saveChanges')) : configure ? \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.status.updating')) : \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.status.creating'))), loading && /*#__PURE__*/React.createElement(Loader, {\n      size: 20,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 27\n      }\n    }))) : activeStep !== 0 && !configure || activeStep === 0 && configure ?\n    /*#__PURE__*/\n    // Apply headerButtonWrapper style for top button's div\n    React.createElement(\"div\", {\n      className: classes.headerButtonWrapper,\n      \"aria-label\": \"buttons\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }\n    }, !(activeStep === 0 && configure) && /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: function onClick() {\n        return handleBack();\n      },\n      style: {\n        marginRight: '1rem'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, t('analyticsDashboard.applicationDashboards.stepper.buttons.back'))), /*#__PURE__*/React.createElement(ButtonFilled, {\n      onClick: function onClick() {\n        return _handleNext();\n      },\n      disabled: disabledNext,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }, t('analyticsDashboard.applicationDashboards.stepper.buttons.next')))) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  };\n  /** \n    Alert\n    ------------------------------------------------------------------------------\n    Displays a snackbar with the appropriate message whenever a condition is not satisfied\n  * */\n\n\n  var AlertBox = function AlertBox(_ref2) {\n    var message = _ref2.message;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 7\n      }\n    }, isAlertOpen ? /*#__PURE__*/React.createElement(Snackbar, {\n      open: isAlertOpen,\n      autoHideDuration: 6000,\n      onClose: function onClose() {\n        return alert.changeAlertState(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      onClose: function onClose() {\n        return alert.changeAlertState(false);\n      },\n      severity: \"error\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 13\n      }\n    }, message)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  };\n\n  function getAlertMessage(stepNumber) {\n    switch (stepNumber) {\n      case !configure ? 0 : -1:\n        if (getProjectRole() === 'Viewer') {\n          return t('analyticsDashboard.applicationDashboards.stepper.errors.step1.messageViewer');\n        }\n\n        return t('analyticsDashboard.applicationDashboards.stepper.errors.step1.message');\n\n      case !configure ? 1 : 0:\n        return t('analyticsDashboard.applicationDashboards.stepper.errors.step2.messageViewer');\n\n      case !configure ? dashboardVars.dashboardTypeID !== 'custom' ? 2 : -1 : -1:\n        return t('analyticsDashboard.applicationDashboards.stepper.errors.step3.message');\n\n      case !configure ? dashboardVars.dashboardTypeID !== 'custom' ? 3 : 2 : 1:\n        return configure ? t('analyticsDashboard.applicationDashboards.stepper.errors.step4.messageConfigure') : t('analyticsDashboard.applicationDashboards.stepper.errors.step4.messageCreate');\n\n      default:\n        return '';\n    }\n  }\n\n  useEffect(function () {\n    if (configure) {\n      setDashboardVars(_objectSpread({}, existingDashboardVars));\n    }\n  }, [existingDashboardVars]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AlertBox, {\n    message: getAlertMessage(activeStep),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justifyContent: \"space-between\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 11\n    }\n  }, !configure ? t('analyticsDashboard.applicationDashboards.createHeader') : \"\".concat(t('analyticsDashboard.applicationDashboards.configureHeader'), \" / \").concat(dashboardVars.name)), /*#__PURE__*/React.createElement(ControlButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LitmusStepper, {\n    steps: steps,\n    activeStep: activeStep,\n    handleBack: handleBack,\n    loader: loading,\n    hideNext: !configure ? !activeStep : false,\n    disableNext: configure && activeStep === steps.length - 1 ? loading : disabledNext,\n    handleNext: function handleNext() {\n      return _handleNext();\n    },\n    finishAction: function finishAction() {},\n    finishButtonText: /*#__PURE__*/React.createElement(React.Fragment, null, !loading && /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/icons/save-changes.svg\",\n      alt: \"Info icon\",\n      className: classes.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 13\n      }\n    }, !loading ? \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.saveChanges')) : configure ? \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.status.updating')) : \"\".concat(t('analyticsDashboard.applicationDashboards.stepper.buttons.status.creating')))),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  }, getStepContent(activeStep, childRef)));\n};\n\nexport default DashboardStepper;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Stepper/index.tsx"],"names":["Snackbar","Typography","MuiAlert","ButtonFilled","ButtonOutlined","React","useEffect","useRef","useTranslation","useSelector","LitmusStepper","Loader","Row","useActions","AlertActions","getProjectRole","ChooseADashboardType","ConfigureDashboardMetadata","SelectTheMetrics","TuneTheQueries","useStyles","Alert","props","DashboardStepper","configure","activePanelID","existingDashboardVars","dataSourceList","classes","t","stepsArray","childRef","useState","loading","setLoading","activeStep","setActiveStep","id","name","dashboardTypeID","dashboardTypeName","dataSourceType","dataSourceID","length","ds_id","dataSourceURL","ds_url","chaosEventQueryTemplate","chaosVerdictQueryTemplate","agentID","information","panelGroupMap","panelGroups","selectedPanelGroupMap","applicationMetadataMap","dashboardVars","setDashboardVars","disabledNext","setDisabledNext","steps","filter","step","isButtonLoading","status","handleNext","current","onNext","prevActiveStep","getStepContent","stepIndex","dashboardMetadata","next","dashboardMetrics","isAlertOpen","state","alert","handleBack","ControlButton","headerButtonWrapper","width","marginRight","icon","buttonText","AlertBox","message","changeAlertState","getAlertMessage","stepNumber","root","headWrapper","header"],"mappings":"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","sourcesContent":["import Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { ButtonFilled, ButtonOutlined } from 'litmus-ui';\nimport React, { useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { LitmusStepper } from '../../../../components/LitmusStepper';\nimport Loader from '../../../../components/Loader';\nimport Row from '../../../../containers/layouts/Row';\nimport { DashboardDetails } from '../../../../models/dashboardsData';\nimport { ListDataSourceResponse } from '../../../../models/graphql/dataSourceDetails';\nimport useActions from '../../../../redux/actions';\nimport * as AlertActions from '../../../../redux/actions/alert';\nimport { RootState } from '../../../../redux/reducers';\nimport { getProjectRole } from '../../../../utils/getSearchParams';\nimport ChooseADashboardType from '../Steps/ChooseADashboardType';\nimport ConfigureDashboardMetadata from '../Steps/ConfigureDashboardMetadata';\nimport SelectTheMetrics from '../Steps/SelectTheMetrics';\nimport TuneTheQueries from '../Steps/TuneTheQueries';\nimport useStyles from './styles';\n\ninterface ChildRef {\n  onNext: () => void;\n}\n\ninterface AlertBoxProps {\n  message: string;\n}\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\ninterface DashboardStepperProps {\n  configure: boolean;\n  activePanelID: string;\n  existingDashboardVars: DashboardDetails;\n  dataSourceList: ListDataSourceResponse[];\n}\n\nconst DashboardStepper: React.FC<DashboardStepperProps> = ({\n  configure,\n  activePanelID,\n  existingDashboardVars,\n  dataSourceList,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const stepsArray: string[] = [\n    `${t('analyticsDashboard.applicationDashboards.stepper.steps.step1')}`,\n    `${t('analyticsDashboard.applicationDashboards.stepper.steps.step2')}`,\n    `${t('analyticsDashboard.applicationDashboards.stepper.steps.step3')}`,\n    `${t('analyticsDashboard.applicationDashboards.stepper.steps.step4')}`,\n  ];\n  const childRef = useRef<ChildRef>();\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [activeStep, setActiveStep] = React.useState<number>(\n    configure && activePanelID !== '' ? 1 : 0\n  );\n  const [dashboardVars, setDashboardVars] = React.useState<DashboardDetails>({\n    id: !configure ? '' : existingDashboardVars.id ?? '',\n    name: !configure ? '' : existingDashboardVars.name ?? '',\n    dashboardTypeID: !configure\n      ? ''\n      : existingDashboardVars.dashboardTypeID ?? '',\n    dashboardTypeName: !configure\n      ? ''\n      : existingDashboardVars.dashboardTypeName ?? '',\n    dataSourceType: !configure\n      ? ''\n      : existingDashboardVars.dataSourceType ?? '',\n    dataSourceID: !configure\n      ? dataSourceList.length !== 0\n        ? dataSourceList[0].ds_id\n        : ''\n      : existingDashboardVars.dataSourceID ?? '',\n    dataSourceURL: !configure\n      ? dataSourceList.length !== 0\n        ? dataSourceList[0].ds_url\n        : ''\n      : existingDashboardVars.dataSourceURL ?? '',\n    chaosEventQueryTemplate: !configure\n      ? ''\n      : existingDashboardVars.chaosEventQueryTemplate ?? '',\n    chaosVerdictQueryTemplate: !configure\n      ? ''\n      : existingDashboardVars.chaosVerdictQueryTemplate ?? '',\n    agentID: !configure ? '' : existingDashboardVars.agentID ?? '',\n    information: !configure ? '' : existingDashboardVars.information ?? '',\n    panelGroupMap: !configure ? [] : existingDashboardVars.panelGroupMap ?? [],\n    panelGroups: !configure ? [] : existingDashboardVars.panelGroups ?? [],\n    selectedPanelGroupMap: [],\n    applicationMetadataMap: !configure\n      ? []\n      : existingDashboardVars.applicationMetadataMap ?? [],\n  });\n  const [disabledNext, setDisabledNext] = React.useState<boolean>(true);\n  let steps = stepsArray;\n  if (configure) {\n    steps = steps.filter(\n      (step: string) =>\n        step !==\n          `${t(\n            'analyticsDashboard.applicationDashboards.stepper.steps.step1'\n          )}` &&\n        step !==\n          `${t('analyticsDashboard.applicationDashboards.stepper.steps.step3')}`\n    );\n  } else if (dashboardVars.dashboardTypeID === 'custom') {\n    steps = steps.filter(\n      (step: string) =>\n        step !==\n        `${t('analyticsDashboard.applicationDashboards.stepper.steps.step3')}`\n    );\n  }\n  // Checks if the button is in loading state or not\n  const isButtonLoading = (status: boolean) => setLoading(status);\n  const handleNext = () => {\n    if (childRef.current && childRef.current.onNext()) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n  function getStepContent(\n    stepIndex: number,\n    childRef: React.MutableRefObject<ChildRef | undefined>\n  ): React.ReactNode {\n    switch (stepIndex) {\n      case !configure ? 0 : -1:\n        return <ChooseADashboardType ref={childRef} handleNext={handleNext} />;\n      case !configure ? 1 : 0:\n        return (\n          <ConfigureDashboardMetadata\n            ref={childRef}\n            configure={configure}\n            dashboardVars={dashboardVars}\n            dataSourceList={dataSourceList}\n            handleMetadataUpdate={(dashboardMetadata: DashboardDetails) => {\n              setDashboardVars({\n                ...dashboardVars,\n                id: dashboardMetadata.id ?? '',\n                name: dashboardMetadata.name ?? '',\n                dashboardTypeID: dashboardMetadata.dashboardTypeID ?? '',\n                dashboardTypeName: dashboardMetadata.dashboardTypeName ?? '',\n                dataSourceType: dashboardMetadata.dataSourceType ?? '',\n                dataSourceID: dashboardMetadata.dataSourceID ?? '',\n                dataSourceURL: dashboardMetadata.dataSourceURL ?? '',\n                chaosEventQueryTemplate:\n                  dashboardMetadata.chaosEventQueryTemplate ?? '',\n                chaosVerdictQueryTemplate:\n                  dashboardMetadata.chaosVerdictQueryTemplate ?? '',\n                agentID: dashboardMetadata.agentID ?? '',\n                information: dashboardMetadata.information ?? '',\n                panelGroupMap: dashboardMetadata.panelGroupMap ?? [],\n                panelGroups: dashboardMetadata.panelGroups ?? [],\n                applicationMetadataMap:\n                  dashboardMetadata.applicationMetadataMap ?? [],\n              });\n            }}\n            setDisabledNext={(next: boolean) => {\n              setDisabledNext(next);\n            }}\n          />\n        );\n      case !configure\n        ? dashboardVars.dashboardTypeID !== 'custom'\n          ? 2\n          : -1\n        : -1:\n        return (\n          <SelectTheMetrics\n            ref={childRef}\n            dashboardVars={dashboardVars}\n            handleMetricsUpdate={(dashboardMetrics: DashboardDetails) => {\n              setDashboardVars({\n                ...dashboardVars,\n                selectedPanelGroupMap:\n                  dashboardMetrics.selectedPanelGroupMap ?? [],\n              });\n            }}\n            setDisabledNext={(next: boolean) => {\n              setDisabledNext(next);\n            }}\n          />\n        );\n      case !configure\n        ? dashboardVars.dashboardTypeID !== 'custom'\n          ? 3\n          : 2\n        : 1:\n        return (\n          <TuneTheQueries\n            ref={childRef}\n            configure={configure}\n            isLoading={isButtonLoading}\n            activeEditPanelID={activePanelID}\n            dashboardVars={dashboardVars}\n          />\n        );\n      default:\n        return <ChooseADashboardType ref={childRef} handleNext={handleNext} />;\n    }\n  }\n\n  const isAlertOpen = useSelector(\n    (state: RootState) => state.alert.isAlertOpen\n  );\n  const alert = useActions(AlertActions);\n  const handleBack = () => {\n    if (activeStep === 1 && !configure) {\n      setDashboardVars({\n        id: '',\n        name: '',\n        dashboardTypeID: '',\n        dashboardTypeName: '',\n        dataSourceType: '',\n        dataSourceID: '',\n        dataSourceURL: '',\n        chaosEventQueryTemplate: '',\n        chaosVerdictQueryTemplate: '',\n        agentID: '',\n        information: '',\n        panelGroupMap: [],\n        panelGroups: [],\n        selectedPanelGroupMap: [],\n        applicationMetadataMap: [],\n      });\n    }\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  /** \n    Control Buttons\n    ------------------------------------------------------------------------------\n    When active step is zero (First Step) there won't be a Back button\n    When active step is the last step in the stepper the button will change to Finish\n    All steps in the middle will have next and back buttons\n  * */\n\n  const ControlButton: React.FC = () => {\n    return (\n      <>\n        {activeStep === steps.length - 1 ? ( // Show Save changes button at Bottom for Last Step\n          <div\n            className={classes.headerButtonWrapper}\n            aria-label=\"buttons\"\n            style={{ width: 'fit-content' }}\n          >\n            {!loading && (\n              <ButtonOutlined\n                onClick={() => handleBack()}\n                style={{ marginRight: '1rem' }}\n              >\n                <Typography>\n                  {t(\n                    'analyticsDashboard.applicationDashboards.stepper.buttons.back'\n                  )}\n                </Typography>\n              </ButtonOutlined>\n            )}\n            <ButtonFilled disabled={loading} onClick={() => handleNext()}>\n              {!loading && (\n                <img\n                  src=\"/icons/save-changes.svg\"\n                  alt=\"Info icon\"\n                  className={classes.icon}\n                />\n              )}\n              <Typography className={classes.buttonText}>\n                {!loading\n                  ? `${t(\n                      'analyticsDashboard.applicationDashboards.stepper.buttons.saveChanges'\n                    )}`\n                  : configure\n                  ? `${t(\n                      'analyticsDashboard.applicationDashboards.stepper.buttons.status.updating'\n                    )}`\n                  : `${t(\n                      'analyticsDashboard.applicationDashboards.stepper.buttons.status.creating'\n                    )}`}\n              </Typography>\n              {loading && <Loader size={20} />}\n            </ButtonFilled>\n          </div>\n        ) : (activeStep !== 0 && !configure) ||\n          (activeStep === 0 && configure) ? ( // Apply headerButtonWrapper style for top button's div\n          <div className={classes.headerButtonWrapper} aria-label=\"buttons\">\n            {!(activeStep === 0 && configure) && (\n              <ButtonOutlined\n                onClick={() => handleBack()}\n                style={{ marginRight: '1rem' }}\n              >\n                <Typography>\n                  {t(\n                    'analyticsDashboard.applicationDashboards.stepper.buttons.back'\n                  )}\n                </Typography>\n              </ButtonOutlined>\n            )}\n            <ButtonFilled onClick={() => handleNext()} disabled={disabledNext}>\n              <Typography>\n                {t(\n                  'analyticsDashboard.applicationDashboards.stepper.buttons.next'\n                )}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        ) : (\n          <></>\n        )}\n      </>\n    );\n  };\n\n  /** \n    Alert\n    ------------------------------------------------------------------------------\n    Displays a snackbar with the appropriate message whenever a condition is not satisfied\n  * */\n\n  const AlertBox: React.FC<AlertBoxProps> = ({ message }) => {\n    return (\n      <div>\n        {isAlertOpen ? (\n          <Snackbar\n            open={isAlertOpen}\n            autoHideDuration={6000}\n            onClose={() => alert.changeAlertState(false)}\n          >\n            <Alert\n              onClose={() => alert.changeAlertState(false)}\n              severity=\"error\"\n            >\n              {message}\n            </Alert>\n          </Snackbar>\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  };\n\n  function getAlertMessage(stepNumber: number) {\n    switch (stepNumber) {\n      case !configure ? 0 : -1:\n        if (getProjectRole() === 'Viewer') {\n          return t(\n            'analyticsDashboard.applicationDashboards.stepper.errors.step1.messageViewer'\n          );\n        }\n        return t(\n          'analyticsDashboard.applicationDashboards.stepper.errors.step1.message'\n        );\n      case !configure ? 1 : 0:\n        return t(\n          'analyticsDashboard.applicationDashboards.stepper.errors.step2.messageViewer'\n        );\n      case !configure\n        ? dashboardVars.dashboardTypeID !== 'custom'\n          ? 2\n          : -1\n        : -1:\n        return t(\n          'analyticsDashboard.applicationDashboards.stepper.errors.step3.message'\n        );\n      case !configure\n        ? dashboardVars.dashboardTypeID !== 'custom'\n          ? 3\n          : 2\n        : 1:\n        return configure\n          ? t(\n              'analyticsDashboard.applicationDashboards.stepper.errors.step4.messageConfigure'\n            )\n          : t(\n              'analyticsDashboard.applicationDashboards.stepper.errors.step4.messageCreate'\n            );\n      default:\n        return '';\n    }\n  }\n\n  useEffect(() => {\n    if (configure) {\n      setDashboardVars({\n        ...existingDashboardVars,\n      });\n    }\n  }, [existingDashboardVars]);\n\n  return (\n    <div className={classes.root}>\n      {/* Alert */}\n      <AlertBox message={getAlertMessage(activeStep)} />\n\n      {/* Header */}\n      <div className={classes.headWrapper}>\n        <Row justifyContent=\"space-between\">\n          <Typography className={classes.header}>\n            {!configure\n              ? t('analyticsDashboard.applicationDashboards.createHeader')\n              : `${t(\n                  'analyticsDashboard.applicationDashboards.configureHeader'\n                )} / ${dashboardVars.name}`}\n          </Typography>\n          <ControlButton />\n        </Row>\n      </div>\n      <br />\n      {/* Stepper */}\n      <LitmusStepper\n        steps={steps}\n        activeStep={activeStep}\n        handleBack={handleBack}\n        loader={loading}\n        hideNext={!configure ? !activeStep : false}\n        disableNext={\n          configure && activeStep === steps.length - 1 ? loading : disabledNext\n        }\n        handleNext={() => handleNext()}\n        finishAction={() => {}}\n        finishButtonText={\n          <>\n            {!loading && (\n              <img\n                src=\"/icons/save-changes.svg\"\n                alt=\"Info icon\"\n                className={classes.icon}\n              />\n            )}\n            <Typography>\n              {!loading\n                ? `${t(\n                    'analyticsDashboard.applicationDashboards.stepper.buttons.saveChanges'\n                  )}`\n                : configure\n                ? `${t(\n                    'analyticsDashboard.applicationDashboards.stepper.buttons.status.updating'\n                  )}`\n                : `${t(\n                    'analyticsDashboard.applicationDashboards.stepper.buttons.status.creating'\n                  )}`}\n            </Typography>\n          </>\n        }\n      >\n        {getStepContent(activeStep, childRef)}\n      </LitmusStepper>\n    </div>\n  );\n};\n\nexport default DashboardStepper;\n"]},"metadata":{},"sourceType":"module"}