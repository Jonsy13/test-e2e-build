{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/Panel/PanelContent.tsx\";\n\nimport { useQuery } from '@apollo/client';\nimport { IconButton, Typography } from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport { ButtonOutlined, LineAreaGraph, Modal } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { ToolTip } from '../../../../components/ToolTip';\nimport { PROM_QUERY } from '../../../../graphql';\nimport { DEFAULT_REFRESH_RATE, DEFAULT_RELATIVE_TIME_RANGE, DEFAULT_TOLERANCE_LIMIT, MAX_REFRESH_RATE, MINIMUM_TOLERANCE_LIMIT, PROMETHEUS_ERROR_QUERY_RESOLUTION_LIMIT_REACHED } from '../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport { ReactComponent as ViewChaosMetric } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/aligment.svg\";\nimport { ReactComponent as DisableViewChaosMetric } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/alignmentStriked.svg\";\nimport { ReactComponent as Expand } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/arrowsOut.svg\";\nimport { ReactComponent as Edit } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/edit.svg\";\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport { DataParserForPrometheus, getPromQueryInput } from '../../../../utils/promUtils';\nimport useStyles from './styles';\n\nvar PanelContent = function PanelContent(_ref) {\n  var _prometheusQueryData$, _prometheusQueryData$2;\n\n  var panel_id = _ref.panel_id,\n      panel_name = _ref.panel_name,\n      prom_queries = _ref.prom_queries,\n      y_axis_left = _ref.y_axis_left,\n      unit = _ref.unit,\n      className = _ref.className,\n      controllerPanelID = _ref.controllerPanelID,\n      selectedApplications = _ref.selectedApplications;\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // get ProjectID\n\n\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var dashboard = useActions(DashboardActions);\n  var lineGraph = palette.graph.line;\n  var areaGraph = palette.graph.area;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      popOut = _useState2[0],\n      setPopOut = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      viewEventMetric = _useState4[0],\n      setViewEventMetric = _useState4[1];\n\n  var _React$useState = React.useState({\n    promInput: {\n      ds_details: {\n        url: '',\n        start: '',\n        end: ''\n      },\n      queries: []\n    },\n    firstLoad: true\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prometheusQueryData = _React$useState2[0],\n      setPrometheusQueryData = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: []\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      graphData = _React$useState4[0],\n      setGraphData = _React$useState4[1];\n\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n  var selectedDataSource = useSelector(function (state) {\n    return state.selectDataSource;\n  }); // Apollo query to get the prometheus data\n\n  useQuery(PROM_QUERY, {\n    variables: {\n      prometheusInput: (_prometheusQueryData$ = prometheusQueryData === null || prometheusQueryData === void 0 ? void 0 : prometheusQueryData.promInput) !== null && _prometheusQueryData$ !== void 0 ? _prometheusQueryData$ : {\n        ds_details: {\n          url: '',\n          start: '',\n          end: ''\n        },\n        queries: []\n      }\n    },\n    fetchPolicy: 'no-cache',\n    skip: (prometheusQueryData === null || prometheusQueryData === void 0 ? void 0 : (_prometheusQueryData$2 = prometheusQueryData.promInput.queries) === null || _prometheusQueryData$2 === void 0 ? void 0 : _prometheusQueryData$2.length) === 0 || (prometheusQueryData === null || prometheusQueryData === void 0 ? void 0 : prometheusQueryData.promInput.ds_details.url) === '',\n    onCompleted: function onCompleted(prometheusData) {\n      if (prometheusData) {\n        var parsedData = DataParserForPrometheus(prometheusData, lineGraph, areaGraph, prom_queries.filter(function (query) {\n          return query.close_area;\n        }).map(function (query) {\n          return query.queryid;\n        }), selectedApplications);\n        setGraphData(parsedData);\n      }\n\n      dashboard.selectDashboard({\n        forceUpdate: false\n      });\n    },\n    onError: function onError(error) {\n      if (error.message === PROMETHEUS_ERROR_QUERY_RESOLUTION_LIMIT_REACHED) {\n        if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n          dashboard.selectDashboard({\n            refreshRate: MAX_REFRESH_RATE\n          });\n        }\n\n        setPrometheusQueryData(_objectSpread(_objectSpread({}, prometheusQueryData), {}, {\n          firstLoad: true\n        }));\n      }\n    }\n  });\n\n  var generatePromQueries = function generatePromQueries() {\n    var _prometheusQueryData$3;\n\n    var promQueries = (_prometheusQueryData$3 = prometheusQueryData.promInput.queries) !== null && _prometheusQueryData$3 !== void 0 ? _prometheusQueryData$3 : [];\n\n    if (prometheusQueryData.firstLoad) {\n      var timeRangeDiff = new Date(moment(selectedDashboard.range.endDate).format()).getTime() / 1000 - new Date(moment(selectedDashboard.range.startDate).format()).getTime() / 1000;\n      promQueries = getPromQueryInput(prom_queries, timeRangeDiff, true);\n    }\n\n    setPrometheusQueryData({\n      promInput: {\n        ds_details: {\n          url: selectedDataSource.selectedDataSourceURL,\n          start: \"\".concat(new Date(moment(selectedDashboard.range.startDate).format()).getTime() / 1000),\n          end: \"\".concat(new Date(moment(selectedDashboard.range.endDate).format()).getTime() / 1000)\n        },\n        queries: promQueries\n      },\n      firstLoad: false\n    });\n  };\n\n  useEffect(function () {\n    if (prometheusQueryData.firstLoad) {\n      generatePromQueries();\n\n      if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE && panel_id === controllerPanelID) {\n        dashboard.selectDashboard({\n          range: {\n            startDate: moment.unix(Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE).format(),\n            endDate: moment.unix(Math.round(new Date().getTime() / 1000)).format()\n          }\n        });\n      }\n    }\n\n    if (!prometheusQueryData.firstLoad) {\n      if (panel_id === controllerPanelID) {\n        var _selectedDashboard$re, _selectedDashboard$re2;\n\n        var endDate = new Date(moment(selectedDashboard.range.endDate).format()).getTime() / 1000;\n        var now = Math.round(new Date().getTime() / 1000);\n        var diff = Math.abs(now - endDate);\n        var maxLim = ((_selectedDashboard$re = selectedDashboard.refreshRate) !== null && _selectedDashboard$re !== void 0 ? _selectedDashboard$re : DEFAULT_REFRESH_RATE) / 1000 !== 0 ? ((_selectedDashboard$re2 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re2 !== void 0 ? _selectedDashboard$re2 : DEFAULT_REFRESH_RATE) / 1000 + MINIMUM_TOLERANCE_LIMIT : DEFAULT_TOLERANCE_LIMIT;\n\n        if (diff >= 0 && diff <= maxLim && selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n          var startDate = new Date(moment(selectedDashboard.range.startDate).format()).getTime() / 1000;\n          var interval = endDate - startDate;\n          dashboard.selectDashboard({\n            range: {\n              startDate: moment.unix(Math.round(new Date().getTime() / 1000) - interval).format(),\n              endDate: moment.unix(Math.round(new Date().getTime() / 1000)).format()\n            }\n          });\n        }\n      }\n\n      setTimeout(function () {\n        generatePromQueries();\n      }, selectedDashboard.refreshRate !== 0 ? selectedDashboard.refreshRate : DEFAULT_REFRESH_RATE);\n    }\n  }, [prometheusQueryData]);\n  useEffect(function () {\n    var _selectedDashboard$re3, _selectedDashboard$re4;\n\n    var endDate = new Date(moment(selectedDashboard.range.endDate).format()).getTime() / 1000;\n    var now = Math.round(new Date().getTime() / 1000);\n    var diff = Math.abs(now - endDate);\n    var maxLim = ((_selectedDashboard$re3 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re3 !== void 0 ? _selectedDashboard$re3 : DEFAULT_REFRESH_RATE) / 1000 !== 0 ? ((_selectedDashboard$re4 = selectedDashboard.refreshRate) !== null && _selectedDashboard$re4 !== void 0 ? _selectedDashboard$re4 : DEFAULT_REFRESH_RATE) / 1000 + MINIMUM_TOLERANCE_LIMIT : DEFAULT_TOLERANCE_LIMIT;\n\n    if (!(diff >= 0 && diff <= maxLim) && selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n      setPrometheusQueryData(_objectSpread(_objectSpread({}, prometheusQueryData), {}, {\n        firstLoad: true\n      }));\n      dashboard.selectDashboard({\n        refreshRate: MAX_REFRESH_RATE\n      });\n    }\n\n    if (diff >= 0 && diff <= maxLim && selectedDashboard.refreshRate === MAX_REFRESH_RATE) {\n      setPrometheusQueryData(_objectSpread(_objectSpread({}, prometheusQueryData), {}, {\n        firstLoad: true\n      }));\n    }\n  }, [selectedDashboard.range]);\n  useEffect(function () {\n    if (selectedDashboard.forceUpdate) {\n      setPrometheusQueryData(_objectSpread(_objectSpread({}, prometheusQueryData), {}, {\n        firstLoad: true\n      }));\n    }\n  }, [selectedDashboard.forceUpdate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \" \".concat(classes.rootPanel, \" \").concat(className, \" \").concat(viewEventMetric ? classes.expand : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.wrapperParentIconsTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, panel_name), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.wrapperIcons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, viewEventMetric ? /*#__PURE__*/React.createElement(ToolTip, {\n    title: \"\".concat(t('analyticsDashboard.toolTip.hideChaosMetric')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.panelIconButton,\n    onClick: function onClick() {\n      setViewEventMetric(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DisableViewChaosMetric, {\n    className: classes.panelIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(ToolTip, {\n    title: \"\".concat(t('analyticsDashboard.toolTip.viewChaosMetric')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.panelIconButton,\n    onClick: function onClick() {\n      setViewEventMetric(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ViewChaosMetric, {\n    className: classes.panelIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.panelIconButton,\n    onClick: function onClick() {\n      dashboard.selectDashboard({\n        selectedDashboardID: selectedDashboard.selectedDashboardID,\n        activePanelID: panel_id\n      });\n      history.push({\n        pathname: '/analytics/dashboard/configure',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Edit, {\n    className: classes.panelIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ToolTip, {\n    title: \"\".concat(t('analyticsDashboard.toolTip.popout')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.panelIconButton,\n    onClick: function onClick() {\n      setPopOut(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Expand, {\n    className: classes.panelIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    open: popOut,\n    onClose: function onClose() {\n      return setPopOut(false);\n    },\n    disableBackdropClick: true,\n    disableEscapeKeyDown: true,\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: function onClick() {\n        return setPopOut(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, \"\\u2715\"),\n    height: \"95% !important\",\n    width: \"95%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.popOutModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }\n  }, panel_name), /*#__PURE__*/React.createElement(LineAreaGraph, {\n    legendTableHeight: 120,\n    openSeries: graphData.seriesData,\n    closedSeries: graphData.closedAreaData,\n    eventSeries: graphData.chaosData,\n    showPoints: false,\n    showLegendTable: true,\n    showEventTable: true,\n    showTips: false,\n    showEventMarkers: true,\n    marginLeftEventTable: 10,\n    unit: unit,\n    yLabel: y_axis_left,\n    yLabelOffset: 55,\n    margin: {\n      left: 75,\n      right: 20,\n      top: 20,\n      bottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.singleGraph,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineAreaGraph, {\n    legendTableHeight: 120,\n    openSeries: graphData.seriesData,\n    closedSeries: graphData.closedAreaData,\n    eventSeries: graphData.chaosData,\n    showPoints: false,\n    showEventTable: viewEventMetric,\n    showLegendTable: true,\n    showTips: false,\n    showEventMarkers: true,\n    unit: unit,\n    yLabel: y_axis_left,\n    yLabelOffset: 55,\n    margin: {\n      left: 75,\n      right: 20,\n      top: 20,\n      bottom: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PanelContent;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/Panel/PanelContent.tsx"],"names":["useQuery","IconButton","Typography","useTheme","ButtonOutlined","LineAreaGraph","Modal","moment","React","useEffect","useState","useTranslation","useSelector","ToolTip","PROM_QUERY","DEFAULT_REFRESH_RATE","DEFAULT_RELATIVE_TIME_RANGE","DEFAULT_TOLERANCE_LIMIT","MAX_REFRESH_RATE","MINIMUM_TOLERANCE_LIMIT","PROMETHEUS_ERROR_QUERY_RESOLUTION_LIMIT_REACHED","useActions","DashboardActions","history","getProjectID","getProjectRole","DataParserForPrometheus","getPromQueryInput","useStyles","PanelContent","panel_id","panel_name","prom_queries","y_axis_left","unit","className","controllerPanelID","selectedApplications","palette","classes","t","projectID","projectRole","dashboard","lineGraph","graph","line","areaGraph","area","popOut","setPopOut","viewEventMetric","setViewEventMetric","promInput","ds_details","url","start","end","queries","firstLoad","prometheusQueryData","setPrometheusQueryData","seriesData","closedAreaData","chaosData","graphData","setGraphData","selectedDashboard","state","selectDashboard","selectedDataSource","selectDataSource","variables","prometheusInput","fetchPolicy","skip","length","onCompleted","prometheusData","parsedData","filter","query","close_area","map","queryid","forceUpdate","onError","error","message","refreshRate","generatePromQueries","promQueries","timeRangeDiff","Date","range","endDate","format","getTime","startDate","selectedDataSourceURL","unix","Math","round","now","diff","abs","maxLim","interval","setTimeout","rootPanel","expand","wrapperParentIconsTitle","title","wrapperIcons","panelIconButton","panelIcon","selectedDashboardID","activePanelID","push","pathname","search","popOutModal","left","right","top","bottom","singleGraph"],"mappings":"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","sourcesContent":["import { ApolloError, useQuery } from '@apollo/client';\nimport { IconButton, Typography } from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport { ButtonOutlined, LineAreaGraph, Modal } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { ToolTip } from '../../../../components/ToolTip';\nimport { PROM_QUERY } from '../../../../graphql';\nimport {\n  GraphPanelProps,\n  ParsedPrometheusData,\n} from '../../../../models/dashboardsData';\nimport {\n  PrometheusQueryVars,\n  PrometheusResponse,\n  promInput,\n  promQueryInput,\n} from '../../../../models/graphql/prometheus';\nimport {\n  DEFAULT_REFRESH_RATE,\n  DEFAULT_RELATIVE_TIME_RANGE,\n  DEFAULT_TOLERANCE_LIMIT,\n  MAX_REFRESH_RATE,\n  MINIMUM_TOLERANCE_LIMIT,\n  PROMETHEUS_ERROR_QUERY_RESOLUTION_LIMIT_REACHED,\n} from '../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport { RootState } from '../../../../redux/reducers';\nimport { ReactComponent as ViewChaosMetric } from '../../../../svg/aligment.svg';\nimport { ReactComponent as DisableViewChaosMetric } from '../../../../svg/alignmentStriked.svg';\nimport { ReactComponent as Expand } from '../../../../svg/arrowsOut.svg';\nimport { ReactComponent as Edit } from '../../../../svg/edit.svg';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport {\n  DataParserForPrometheus,\n  getPromQueryInput,\n} from '../../../../utils/promUtils';\nimport useStyles from './styles';\n\ninterface PrometheusQueryDataInterface {\n  promInput: promInput;\n  firstLoad: Boolean;\n}\n\nconst PanelContent: React.FC<GraphPanelProps> = ({\n  panel_id,\n  panel_name,\n  prom_queries,\n  y_axis_left,\n  unit,\n  className,\n  controllerPanelID,\n  selectedApplications,\n}) => {\n  const { palette } = useTheme();\n  const classes = useStyles();\n  const { t } = useTranslation();\n  // get ProjectID\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const dashboard = useActions(DashboardActions);\n  const lineGraph: string[] = palette.graph.line;\n  const areaGraph: string[] = palette.graph.area;\n  const [popOut, setPopOut] = useState(false);\n  const [viewEventMetric, setViewEventMetric] = useState(false);\n  const [prometheusQueryData, setPrometheusQueryData] =\n    React.useState<PrometheusQueryDataInterface>({\n      promInput: {\n        ds_details: {\n          url: '',\n          start: '',\n          end: '',\n        },\n        queries: [],\n      },\n      firstLoad: true,\n    });\n\n  const [graphData, setGraphData] = React.useState<ParsedPrometheusData>({\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: [],\n  });\n\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n\n  const selectedDataSource = useSelector(\n    (state: RootState) => state.selectDataSource\n  );\n\n  // Apollo query to get the prometheus data\n  useQuery<PrometheusResponse, PrometheusQueryVars>(PROM_QUERY, {\n    variables: {\n      prometheusInput: prometheusQueryData?.promInput ?? {\n        ds_details: {\n          url: '',\n          start: '',\n          end: '',\n        },\n        queries: [],\n      },\n    },\n    fetchPolicy: 'no-cache',\n    skip:\n      prometheusQueryData?.promInput.queries?.length === 0 ||\n      prometheusQueryData?.promInput.ds_details.url === '',\n    onCompleted: (prometheusData) => {\n      if (prometheusData) {\n        const parsedData: ParsedPrometheusData = DataParserForPrometheus(\n          prometheusData,\n          lineGraph,\n          areaGraph,\n          prom_queries\n            .filter((query) => query.close_area)\n            .map((query) => query.queryid),\n          selectedApplications\n        );\n        setGraphData(parsedData);\n      }\n      dashboard.selectDashboard({\n        forceUpdate: false,\n      });\n    },\n    onError: (error: ApolloError) => {\n      if (error.message === PROMETHEUS_ERROR_QUERY_RESOLUTION_LIMIT_REACHED) {\n        if (selectedDashboard.refreshRate !== MAX_REFRESH_RATE) {\n          dashboard.selectDashboard({\n            refreshRate: MAX_REFRESH_RATE,\n          });\n        }\n        setPrometheusQueryData({ ...prometheusQueryData, firstLoad: true });\n      }\n    },\n  });\n\n  const generatePromQueries = () => {\n    let promQueries: promQueryInput[] =\n      prometheusQueryData.promInput.queries ?? [];\n    if (prometheusQueryData.firstLoad) {\n      const timeRangeDiff: number =\n        new Date(moment(selectedDashboard.range.endDate).format()).getTime() /\n          1000 -\n        new Date(moment(selectedDashboard.range.startDate).format()).getTime() /\n          1000;\n      promQueries = getPromQueryInput(prom_queries, timeRangeDiff, true);\n    }\n    setPrometheusQueryData({\n      promInput: {\n        ds_details: {\n          url: selectedDataSource.selectedDataSourceURL,\n          start: `${\n            new Date(\n              moment(selectedDashboard.range.startDate).format()\n            ).getTime() / 1000\n          }`,\n          end: `${\n            new Date(\n              moment(selectedDashboard.range.endDate).format()\n            ).getTime() / 1000\n          }`,\n        },\n        queries: promQueries,\n      },\n      firstLoad: false,\n    });\n  };\n\n  useEffect(() => {\n    if (prometheusQueryData.firstLoad) {\n      generatePromQueries();\n      if (\n        selectedDashboard.refreshRate !== MAX_REFRESH_RATE &&\n        panel_id === controllerPanelID\n      ) {\n        dashboard.selectDashboard({\n          range: {\n            startDate: moment\n              .unix(\n                Math.round(new Date().getTime() / 1000) -\n                  DEFAULT_RELATIVE_TIME_RANGE\n              )\n              .format(),\n            endDate: moment\n              .unix(Math.round(new Date().getTime() / 1000))\n              .format(),\n          },\n        });\n      }\n    }\n    if (!prometheusQueryData.firstLoad) {\n      if (panel_id === controllerPanelID) {\n        const endDate: number =\n          new Date(moment(selectedDashboard.range.endDate).format()).getTime() /\n          1000;\n        const now: number = Math.round(new Date().getTime() / 1000);\n        const diff: number = Math.abs(now - endDate);\n        const maxLim: number =\n          (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n            ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n              MINIMUM_TOLERANCE_LIMIT\n            : DEFAULT_TOLERANCE_LIMIT;\n        if (\n          diff >= 0 &&\n          diff <= maxLim &&\n          selectedDashboard.refreshRate !== MAX_REFRESH_RATE\n        ) {\n          const startDate: number =\n            new Date(\n              moment(selectedDashboard.range.startDate).format()\n            ).getTime() / 1000;\n          const interval: number = endDate - startDate;\n          dashboard.selectDashboard({\n            range: {\n              startDate: moment\n                .unix(Math.round(new Date().getTime() / 1000) - interval)\n                .format(),\n              endDate: moment\n                .unix(Math.round(new Date().getTime() / 1000))\n                .format(),\n            },\n          });\n        }\n      }\n      setTimeout(\n        () => {\n          generatePromQueries();\n        },\n        selectedDashboard.refreshRate !== 0\n          ? selectedDashboard.refreshRate\n          : DEFAULT_REFRESH_RATE\n      );\n    }\n  }, [prometheusQueryData]);\n\n  useEffect(() => {\n    const endDate: number =\n      new Date(moment(selectedDashboard.range.endDate).format()).getTime() /\n      1000;\n    const now: number = Math.round(new Date().getTime() / 1000);\n    const diff: number = Math.abs(now - endDate);\n    const maxLim: number =\n      (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 !== 0\n        ? (selectedDashboard.refreshRate ?? DEFAULT_REFRESH_RATE) / 1000 +\n          MINIMUM_TOLERANCE_LIMIT\n        : DEFAULT_TOLERANCE_LIMIT;\n    if (\n      !(diff >= 0 && diff <= maxLim) &&\n      selectedDashboard.refreshRate !== MAX_REFRESH_RATE\n    ) {\n      setPrometheusQueryData({ ...prometheusQueryData, firstLoad: true });\n      dashboard.selectDashboard({\n        refreshRate: MAX_REFRESH_RATE,\n      });\n    }\n    if (\n      diff >= 0 &&\n      diff <= maxLim &&\n      selectedDashboard.refreshRate === MAX_REFRESH_RATE\n    ) {\n      setPrometheusQueryData({ ...prometheusQueryData, firstLoad: true });\n    }\n  }, [selectedDashboard.range]);\n\n  useEffect(() => {\n    if (selectedDashboard.forceUpdate) {\n      setPrometheusQueryData({ ...prometheusQueryData, firstLoad: true });\n    }\n  }, [selectedDashboard.forceUpdate]);\n\n  return (\n    <div\n      className={` ${classes.rootPanel} ${className} ${\n        viewEventMetric ? classes.expand : ''\n      }`}\n    >\n      <div className={classes.wrapperParentIconsTitle}>\n        <Typography className={classes.title}>{panel_name}</Typography>\n        <div className={classes.wrapperIcons}>\n          {viewEventMetric ? (\n            <ToolTip\n              title={`${t('analyticsDashboard.toolTip.hideChaosMetric')}`}\n            >\n              <IconButton\n                className={classes.panelIconButton}\n                onClick={() => {\n                  setViewEventMetric(false);\n                }}\n              >\n                <DisableViewChaosMetric className={classes.panelIcon} />\n              </IconButton>\n            </ToolTip>\n          ) : (\n            <ToolTip\n              title={`${t('analyticsDashboard.toolTip.viewChaosMetric')}`}\n            >\n              <IconButton\n                className={classes.panelIconButton}\n                onClick={() => {\n                  setViewEventMetric(true);\n                }}\n              >\n                <ViewChaosMetric className={classes.panelIcon} />\n              </IconButton>\n            </ToolTip>\n          )}\n          <IconButton\n            className={classes.panelIconButton}\n            onClick={() => {\n              dashboard.selectDashboard({\n                selectedDashboardID: selectedDashboard.selectedDashboardID,\n                activePanelID: panel_id,\n              });\n              history.push({\n                pathname: '/analytics/dashboard/configure',\n                search: `?projectID=${projectID}&projectRole=${projectRole}`,\n              });\n            }}\n          >\n            <Edit className={classes.panelIcon} />\n          </IconButton>\n          <ToolTip title={`${t('analyticsDashboard.toolTip.popout')}`}>\n            <IconButton\n              className={classes.panelIconButton}\n              onClick={() => {\n                setPopOut(true);\n              }}\n            >\n              <Expand className={classes.panelIcon} />\n            </IconButton>\n          </ToolTip>\n        </div>\n      </div>\n      <div>\n        <Modal\n          open={popOut}\n          onClose={() => setPopOut(false)}\n          disableBackdropClick\n          disableEscapeKeyDown\n          modalActions={\n            <ButtonOutlined onClick={() => setPopOut(false)}>\n              &#x2715;\n            </ButtonOutlined>\n          }\n          height=\"95% !important\"\n          width=\"95%\"\n        >\n          <div className={classes.popOutModal}>\n            <Typography className={classes.title}>{panel_name}</Typography>\n            <LineAreaGraph\n              legendTableHeight={120}\n              openSeries={graphData.seriesData}\n              closedSeries={graphData.closedAreaData}\n              eventSeries={graphData.chaosData}\n              showPoints={false}\n              showLegendTable\n              showEventTable\n              showTips={false}\n              showEventMarkers\n              marginLeftEventTable={10}\n              unit={unit}\n              yLabel={y_axis_left}\n              yLabelOffset={55}\n              margin={{ left: 75, right: 20, top: 20, bottom: 10 }}\n            />\n          </div>\n        </Modal>\n      </div>\n      <div className={classes.singleGraph}>\n        <LineAreaGraph\n          legendTableHeight={120}\n          openSeries={graphData.seriesData}\n          closedSeries={graphData.closedAreaData}\n          eventSeries={graphData.chaosData}\n          showPoints={false}\n          showEventTable={viewEventMetric}\n          showLegendTable\n          showTips={false}\n          showEventMarkers\n          unit={unit}\n          yLabel={y_axis_left}\n          yLabelOffset={55}\n          margin={{ left: 75, right: 20, top: 20, bottom: 10 }}\n        />\n      </div>\n    </div>\n  );\n};\nexport default PanelContent;\n"]},"metadata":{},"sourceType":"module"}