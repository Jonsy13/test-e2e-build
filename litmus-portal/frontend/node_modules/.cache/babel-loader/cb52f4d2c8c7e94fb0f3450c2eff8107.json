{"ast":null,"code":"import{Typography}from'@material-ui/core';import React,{forwardRef,useImperativeHandle}from'react';import{useTranslation}from'react-i18next';import DashboardList from'../../../../../components/PreconfiguredDashboards/data';import useActions from'../../../../../redux/actions';import*as AlertActions from'../../../../../redux/actions/alert';import{getProjectRole}from'../../../../../utils/getSearchParams';import DashboardCards from'./Cards/DashBoardCards';import useStyles from'./styles';var ChooseADashboardType=forwardRef(function(_ref,ref){var handleNext=_ref.handleNext;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var alert=useActions(AlertActions);function onNext(){if(getProjectRole()==='Viewer'){alert.changeAlertState(true);return false;}return true;}useImperativeHandle(ref,function(){return{onNext:onNext};});return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Typography,{className:classes.heading},t('analyticsDashboard.applicationDashboards.chooseADashboardType.header')),/*#__PURE__*/React.createElement(Typography,{className:classes.description},t('analyticsDashboard.applicationDashboards.chooseADashboardType.description')),/*#__PURE__*/React.createElement(\"div\",{className:classes.cards},/*#__PURE__*/React.createElement(DashboardCards,{dashboards:DashboardList,handleClick:handleNext,generateAlert:function generateAlert(){alert.changeAlertState(true);}})));});export default ChooseADashboardType;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/index.tsx"],"names":["Typography","React","forwardRef","useImperativeHandle","useTranslation","DashboardList","useActions","AlertActions","getProjectRole","DashboardCards","useStyles","ChooseADashboardType","ref","handleNext","classes","t","alert","onNext","changeAlertState","heading","description","cards"],"mappings":"AAAA,OAASA,UAAT,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,mBAA5B,KAAuD,OAAvD,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,MAAOC,CAAAA,aAAP,KAA0B,wDAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CACA,MAAO,GAAKC,CAAAA,YAAZ,KAA8B,oCAA9B,CACA,OAASC,cAAT,KAA+B,sCAA/B,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAMA,GAAMC,CAAAA,oBAAoB,CAAGT,UAAU,CACrC,cAA4CU,GAA5C,CAAoD,IAAjDC,CAAAA,UAAiD,MAAjDA,UAAiD,CAClD,GAAMC,CAAAA,OAAO,CAAGJ,SAAS,EAAzB,CACA,oBAAcN,cAAc,EAA5B,CAAQW,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,KAAK,CAAGV,UAAU,CAACC,YAAD,CAAxB,CAEA,QAASU,CAAAA,MAAT,EAAkB,CAChB,GAAIT,cAAc,KAAO,QAAzB,CAAmC,CACjCQ,KAAK,CAACE,gBAAN,CAAuB,IAAvB,EACA,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CACD,CAEDf,mBAAmB,CAACS,GAAD,CAAM,iBAAO,CAC9BK,MAAM,CAANA,MAD8B,CAAP,EAAN,CAAnB,CAIA,mBACE,4CACE,oBAAC,UAAD,EAAY,SAAS,CAAEH,OAAO,CAACK,OAA/B,EACGJ,CAAC,CACA,sEADA,CADJ,CADF,cAME,oBAAC,UAAD,EAAY,SAAS,CAAED,OAAO,CAACM,WAA/B,EACGL,CAAC,CACA,2EADA,CADJ,CANF,cAWE,2BAAK,SAAS,CAAED,OAAO,CAACO,KAAxB,eACE,oBAAC,cAAD,EACE,UAAU,CAAEhB,aADd,CAEE,WAAW,CAAEQ,UAFf,CAGE,aAAa,CAAE,wBAAM,CACnBG,KAAK,CAACE,gBAAN,CAAuB,IAAvB,EACD,CALH,EADF,CAXF,CADF,CAuBD,CAzCoC,CAAvC,CA4CA,cAAeP,CAAAA,oBAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DashboardList from '../../../../../components/PreconfiguredDashboards/data';\nimport useActions from '../../../../../redux/actions';\nimport * as AlertActions from '../../../../../redux/actions/alert';\nimport { getProjectRole } from '../../../../../utils/getSearchParams';\nimport DashboardCards from './Cards/DashBoardCards';\nimport useStyles from './styles';\n\ninterface ChooseADashboardTypeProps {\n  handleNext: () => void;\n}\n\nconst ChooseADashboardType = forwardRef(\n  ({ handleNext }: ChooseADashboardTypeProps, ref) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const alert = useActions(AlertActions);\n\n    function onNext() {\n      if (getProjectRole() === 'Viewer') {\n        alert.changeAlertState(true);\n        return false;\n      }\n      return true;\n    }\n\n    useImperativeHandle(ref, () => ({\n      onNext,\n    }));\n\n    return (\n      <div>\n        <Typography className={classes.heading}>\n          {t(\n            'analyticsDashboard.applicationDashboards.chooseADashboardType.header'\n          )}\n        </Typography>\n        <Typography className={classes.description}>\n          {t(\n            'analyticsDashboard.applicationDashboards.chooseADashboardType.description'\n          )}\n        </Typography>\n        <div className={classes.cards}>\n          <DashboardCards\n            dashboards={DashboardList}\n            handleClick={handleNext}\n            generateAlert={() => {\n              alert.changeAlertState(true);\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ChooseADashboardType;\n"]},"metadata":{},"sourceType":"module"}