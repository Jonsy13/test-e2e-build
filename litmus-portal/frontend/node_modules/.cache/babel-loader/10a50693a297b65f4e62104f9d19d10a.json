{"ast":null,"code":"import _defineProperty from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Community/CommunityTimeSeriesPlot/index.tsx\";\n\n/* eslint-disable no-empty-pattern */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-param-reassign */\nimport { FormControl, InputLabel, MenuItem, Select, useTheme } from '@material-ui/core';\nimport Plotly from 'plotly.js';\nimport { string } from 'prop-types';\nimport React, { useEffect } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { useSelector } from 'react-redux';\nimport useStyles from './styles';\nvar Plot = createPlotlyComponent(Plotly);\n\nvar CommunityAnalyticsPlot = function CommunityAnalyticsPlot() {\n  var classes = useStyles();\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var _useSelector = useSelector(function (state) {\n    return state.communityData;\n  }),\n      communityData = _useSelector.communityData;\n\n  var dailyOperators = communityData.google.dailyOperatorData;\n  var dailyExperiments = communityData.google.dailyExperimentData;\n  var monthlyOperators = communityData.google.monthlyOperatorData;\n  var monthlyExperiments = communityData.google.monthlyExperimentData;\n\n  var _React$useState = React.useState({\n    x: [],\n    y: [],\n    y2: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    name: 'Growth'\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      currentPlotType = _React$useState4[0],\n      setPlotType = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    name: 'Monthly'\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      currentGranularityType = _React$useState6[0],\n      setGranularityType = _React$useState6[1];\n\n  var handleChangeInType = function handleChangeInType(event) {\n    var name = event.target.name;\n\n    if (name !== currentPlotType.name) {\n      setPlotType(_objectSpread(_objectSpread({}, currentPlotType), {}, _defineProperty({}, name, event.target.value)));\n    }\n  };\n\n  var handleChangeInGranularity = function handleChangeInGranularity(event) {\n    var name = event.target.name;\n\n    if (name !== currentGranularityType.name) {\n      setGranularityType(_objectSpread(_objectSpread({}, currentGranularityType), {}, _defineProperty({}, name, event.target.value)));\n    }\n  };\n\n  var cumulativeSum = function cumulativeSum(timeSeriesCounts) {\n    var countSum = function (sum) {\n      return function (value) {\n        return sum = parseInt(sum, 10) + parseInt(value, 10);\n      };\n    }(0);\n\n    var MappedCumulativeSum = timeSeriesCounts.map(countSum);\n    return MappedCumulativeSum;\n  };\n\n  var processData = function processData() {\n    var _ref, _ref2, _ref3;\n\n    var Operators = [];\n    var Experiments = [];\n\n    if (currentGranularityType.name === 'Daily') {\n      dailyOperators.forEach(function (element, index) {\n        Operators.push(element.count);\n        Experiments.push(dailyExperiments[index].count);\n      });\n    } else {\n      monthlyOperators.forEach(function (element, index) {\n        Operators.push(element.count);\n        Experiments.push(monthlyExperiments[index].count);\n      });\n    }\n\n    if (currentPlotType.name === 'Growth') {\n      Operators = cumulativeSum(Operators);\n      Experiments = cumulativeSum(Experiments);\n    }\n\n    var rawData = [];\n\n    if (currentGranularityType.name === 'Daily') {\n      dailyOperators.forEach(function (element, index) {\n        rawData.push({\n          date: element.date,\n          operatorInstalls: Operators[index],\n          experimentRuns: Experiments[index]\n        });\n      });\n    } else {\n      monthlyOperators.forEach(function (element, index) {\n        rawData.push({\n          date: element.date,\n          operatorInstalls: Operators[index],\n          experimentRuns: Experiments[index]\n        });\n      });\n    }\n\n    var dataObject = {\n      x: (_ref = [Date], _ref),\n      y: (_ref2 = [string], _ref2),\n      y2: (_ref3 = [string], _ref3)\n    };\n    rawData.forEach(function dateSplit(datum) {\n      var splits = datum.date.split('-');\n      dataObject.x.push(new Date(splits[0], splits[1] - 1, splits[2]));\n      dataObject.y.push(datum.operatorInstalls);\n      dataObject.y2.push(datum.experimentRuns);\n    });\n    setData(dataObject);\n  };\n\n  var selectorOptions = {\n    buttons: [{\n      step: 'day',\n      stepmode: 'backward',\n      count: 7,\n      label: '1w'\n    }, {\n      step: 'day',\n      stepmode: 'backward',\n      count: 14,\n      label: '2w'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 1,\n      label: '1m'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 3,\n      label: '3m'\n    }, {\n      step: 'month',\n      stepmode: 'backward',\n      count: 6,\n      label: '6m'\n    }, {\n      step: 'year',\n      stepmode: 'backward',\n      count: 1,\n      label: '1y'\n    }, {\n      step: 'all',\n      label: 'default'\n    }]\n  };\n  useEffect(function () {\n    processData();\n\n    try {\n      var nodeStyle = document.getElementsByClassName('modebar')[0].style;\n      nodeStyle.left = '29%';\n      nodeStyle.width = 'fit-content';\n      nodeStyle.backgroundColor = palette.background.paper;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [currentPlotType, currentGranularityType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.plotCard,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"primary\",\n    focused: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-selection\",\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, \"Plot Style\"), /*#__PURE__*/React.createElement(Select, {\n    value: currentPlotType.name,\n    onChange: handleChangeInType,\n    label: \"Plot Type\",\n    inputProps: {\n      name: 'name',\n      id: 'outlined-selection'\n    },\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Growth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  }, \"Growth\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Trend\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, \"Trend\"))), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"primary\",\n    focused: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-selection-granularity\",\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, \"Granularity\"), /*#__PURE__*/React.createElement(Select, {\n    value: currentGranularityType.name,\n    onChange: handleChangeInGranularity,\n    label: \"Granularity\",\n    inputProps: {\n      name: 'name',\n      id: 'outlined-selection-granularity'\n    },\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Daily\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Monthly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Monthly\"))), /*#__PURE__*/React.createElement(Plot, {\n    className: classes.plot,\n    data: [{\n      type: 'scatter',\n      x: data.x,\n      y: data.y,\n      mode: 'lines',\n      name: 'Operator Installs',\n      line: {\n        color: palette.secondary.main\n      }\n    }, {\n      type: 'scatter',\n      x: data.x,\n      y: data.y2,\n      mode: 'lines',\n      name: 'Experiment Runs',\n      yaxis: 'y2',\n      line: {\n        color: palette.primary.main\n      }\n    }],\n    layout: {\n      autosize: true,\n      height: 800,\n      margin: {\n        l: 60,\n        r: 60,\n        b: 10,\n        t: 5,\n        pad: 10\n      },\n      xaxis: {\n        rangeselector: selectorOptions,\n        rangeslider: {\n          visible: true\n        }\n      },\n      yaxis: {\n        title: 'Operators',\n        side: 'left',\n        showgrid: false\n      },\n      yaxis2: {\n        title: 'Experiments',\n        side: 'right',\n        overlaying: 'y'\n      },\n      legend: {\n        x: 0,\n        y: 1,\n        traceorder: 'normal',\n        font: {\n          family: 'ubuntu',\n          size: 12,\n          color: palette.text.primary\n        },\n        bgcolor: palette.background.paper,\n        bordercolor: palette.background.paper,\n        borderwidth: 0\n      }\n    },\n    useResizeHandler: true,\n    style: {\n      margin: 'auto'\n    },\n    config: {\n      displaylogo: false,\n      autosizable: true,\n      responsive: true,\n      frameMargins: 0.2,\n      showAxisDragHandles: true,\n      showAxisRangeEntryBoxes: true,\n      showTips: true,\n      displayModeBar: true,\n      toImageButtonOptions: {\n        format: 'png',\n        filename: 'Litmus_Community_Stats',\n        width: 1920,\n        height: 1080,\n        scale: 2\n      }\n    },\n    onInitialized: function onInitialized() {\n      try {\n        var nodeStyle = document.getElementsByClassName('modebar')[0].style;\n        nodeStyle.left = '29%';\n        nodeStyle.width = 'fit-content';\n        nodeStyle.backgroundColor = palette.background.paper;\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CommunityAnalyticsPlot;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Community/CommunityTimeSeriesPlot/index.tsx"],"names":["FormControl","InputLabel","MenuItem","Select","useTheme","Plotly","string","React","useEffect","createPlotlyComponent","useSelector","useStyles","Plot","CommunityAnalyticsPlot","classes","palette","state","communityData","dailyOperators","google","dailyOperatorData","dailyExperiments","dailyExperimentData","monthlyOperators","monthlyOperatorData","monthlyExperiments","monthlyExperimentData","useState","x","y","y2","data","setData","name","currentPlotType","setPlotType","currentGranularityType","setGranularityType","handleChangeInType","event","target","value","handleChangeInGranularity","cumulativeSum","timeSeriesCounts","countSum","sum","parseInt","MappedCumulativeSum","map","processData","Operators","Experiments","forEach","element","index","push","count","rawData","date","operatorInstalls","experimentRuns","dataObject","Date","dateSplit","datum","splits","split","selectorOptions","buttons","step","stepmode","label","nodeStyle","document","getElementsByClassName","style","left","width","backgroundColor","background","paper","err","console","error","plotCard","formControl","root","id","plot","type","mode","line","color","secondary","main","yaxis","primary","autosize","height","margin","l","r","b","t","pad","xaxis","rangeselector","rangeslider","visible","title","side","showgrid","yaxis2","overlaying","legend","traceorder","font","family","size","text","bgcolor","bordercolor","borderwidth","displaylogo","autosizable","responsive","frameMargins","showAxisDragHandles","showAxisRangeEntryBoxes","showTips","displayModeBar","toImageButtonOptions","format","filename","scale"],"mappings":"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","sourcesContent":["/* eslint-disable no-empty-pattern */\n/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  useTheme,\n} from '@material-ui/core';\nimport Plotly from 'plotly.js';\nimport { string } from 'prop-types';\nimport React, { useEffect } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/reducers';\nimport useStyles from './styles';\n\nconst Plot = createPlotlyComponent(Plotly);\n\nconst CommunityAnalyticsPlot: React.FC = () => {\n  const classes = useStyles();\n  const { palette } = useTheme();\n\n  const { communityData } = useSelector(\n    (state: RootState) => state.communityData\n  );\n\n  const dailyOperators = communityData.google.dailyOperatorData;\n\n  const dailyExperiments = communityData.google.dailyExperimentData;\n\n  const monthlyOperators = communityData.google.monthlyOperatorData;\n\n  const monthlyExperiments = communityData.google.monthlyExperimentData;\n\n  const [data, setData] = React.useState({ x: [], y: [], y2: [] });\n\n  const [currentPlotType, setPlotType] = React.useState<{ name: string }>({\n    name: 'Growth',\n  });\n\n  const [currentGranularityType, setGranularityType] = React.useState<{\n    name: string;\n  }>({\n    name: 'Monthly',\n  });\n\n  const handleChangeInType = (\n    event: React.ChangeEvent<{ name?: string; value: unknown }>\n  ) => {\n    const name = event.target.name as keyof typeof currentPlotType;\n    if (name !== currentPlotType.name) {\n      setPlotType({\n        ...currentPlotType,\n        [name]: event.target.value as string,\n      });\n    }\n  };\n\n  const handleChangeInGranularity = (\n    event: React.ChangeEvent<{ name?: string; value: unknown }>\n  ) => {\n    const name = event.target.name as keyof typeof currentGranularityType;\n    if (name !== currentGranularityType.name) {\n      setGranularityType({\n        ...currentGranularityType,\n        [name]: event.target.value as string,\n      });\n    }\n  };\n\n  const cumulativeSum = (timeSeriesCounts: any) => {\n    const countSum = (\n      (sum: any) => (value: any) =>\n        (sum = parseInt(sum, 10) + parseInt(value, 10))\n    )(0);\n    const MappedCumulativeSum = timeSeriesCounts.map(countSum);\n    return MappedCumulativeSum;\n  };\n\n  const processData = () => {\n    let Operators: string[] = [];\n    let Experiments: string[] = [];\n    if (currentGranularityType.name === 'Daily') {\n      dailyOperators.forEach((element: any, index: any) => {\n        Operators.push(element.count);\n        Experiments.push(dailyExperiments[index].count);\n      });\n    } else {\n      monthlyOperators.forEach((element: any, index: any) => {\n        Operators.push(element.count);\n        Experiments.push(monthlyExperiments[index].count);\n      });\n    }\n\n    if (currentPlotType.name === 'Growth') {\n      Operators = cumulativeSum(Operators);\n      Experiments = cumulativeSum(Experiments);\n    }\n\n    const rawData: any = [];\n    if (currentGranularityType.name === 'Daily') {\n      dailyOperators.forEach((element: any, index: any) => {\n        rawData.push({\n          date: element.date,\n          operatorInstalls: Operators[index],\n          experimentRuns: Experiments[index],\n        });\n      });\n    } else {\n      monthlyOperators.forEach((element: any, index: any) => {\n        rawData.push({\n          date: element.date,\n          operatorInstalls: Operators[index],\n          experimentRuns: Experiments[index],\n        });\n      });\n    }\n\n    const dataObject = {\n      x: ([] = [Date]),\n      y: ([] = [string]),\n      y2: ([] = [string]),\n    };\n\n    rawData.forEach(function dateSplit(datum: any) {\n      const splits = datum.date.split('-');\n      dataObject.x.push(\n        new Date(\n          splits[0] as any,\n          (splits[1] as any) - 1,\n          splits[2] as any\n        ) as any\n      );\n      dataObject.y.push(datum.operatorInstalls as any);\n      dataObject.y2.push(datum.experimentRuns as any);\n    });\n\n    setData(dataObject as any);\n  };\n\n  const selectorOptions = {\n    buttons: [\n      {\n        step: 'day',\n        stepmode: 'backward',\n        count: 7,\n        label: '1w',\n      },\n      {\n        step: 'day',\n        stepmode: 'backward',\n        count: 14,\n        label: '2w',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 1,\n        label: '1m',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 3,\n        label: '3m',\n      },\n      {\n        step: 'month',\n        stepmode: 'backward',\n        count: 6,\n        label: '6m',\n      },\n      {\n        step: 'year',\n        stepmode: 'backward',\n        count: 1,\n        label: '1y',\n      },\n      {\n        step: 'all',\n        label: 'default',\n      },\n    ],\n  };\n\n  useEffect(() => {\n    processData();\n    try {\n      const nodeStyle = (\n        document.getElementsByClassName('modebar')[0] as HTMLElement\n      ).style;\n      nodeStyle.left = '29%';\n      nodeStyle.width = 'fit-content';\n      nodeStyle.backgroundColor = palette.background.paper;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [currentPlotType, currentGranularityType]);\n\n  return (\n    <div className={classes.plotCard}>\n      <FormControl\n        variant=\"outlined\"\n        className={classes.formControl}\n        color=\"primary\"\n        focused\n      >\n        <InputLabel htmlFor=\"outlined-selection\" className={classes.root}>\n          Plot Style\n        </InputLabel>\n        <Select\n          value={currentPlotType.name}\n          onChange={handleChangeInType}\n          label=\"Plot Type\"\n          inputProps={{\n            name: 'name',\n            id: 'outlined-selection',\n          }}\n          className={classes.root}\n        >\n          <MenuItem value=\"Growth\">Growth</MenuItem>\n          <MenuItem value=\"Trend\">Trend</MenuItem>\n        </Select>\n      </FormControl>\n\n      <FormControl\n        variant=\"outlined\"\n        className={classes.formControl}\n        color=\"primary\"\n        focused\n      >\n        <InputLabel\n          htmlFor=\"outlined-selection-granularity\"\n          className={classes.root}\n        >\n          Granularity\n        </InputLabel>\n        <Select\n          value={currentGranularityType.name}\n          onChange={handleChangeInGranularity}\n          label=\"Granularity\"\n          inputProps={{\n            name: 'name',\n            id: 'outlined-selection-granularity',\n          }}\n          className={classes.root}\n        >\n          <MenuItem value=\"Daily\">Daily</MenuItem>\n          <MenuItem value=\"Monthly\">Monthly</MenuItem>\n        </Select>\n      </FormControl>\n      <Plot\n        className={classes.plot}\n        data={[\n          {\n            type: 'scatter',\n            x: data.x,\n            y: data.y,\n            mode: 'lines',\n            name: 'Operator Installs',\n            line: { color: palette.secondary.main },\n          },\n          {\n            type: 'scatter',\n            x: data.x,\n            y: data.y2,\n            mode: 'lines',\n            name: 'Experiment Runs',\n            yaxis: 'y2',\n            line: { color: palette.primary.main },\n          },\n        ]}\n        layout={{\n          autosize: true,\n          height: 800,\n          margin: {\n            l: 60,\n            r: 60,\n            b: 10,\n            t: 5,\n            pad: 10,\n          },\n          xaxis: {\n            rangeselector: selectorOptions as any,\n            rangeslider: { visible: true },\n          },\n          yaxis: {\n            title: 'Operators',\n            side: 'left',\n            showgrid: false,\n          },\n          yaxis2: {\n            title: 'Experiments',\n            side: 'right',\n            overlaying: 'y',\n          },\n          legend: {\n            x: 0,\n            y: 1,\n            traceorder: 'normal',\n            font: {\n              family: 'ubuntu',\n              size: 12,\n              color: palette.text.primary,\n            },\n            bgcolor: palette.background.paper,\n            bordercolor: palette.background.paper,\n            borderwidth: 0,\n          },\n        }}\n        useResizeHandler\n        style={{\n          margin: 'auto',\n        }}\n        config={{\n          displaylogo: false,\n          autosizable: true,\n          responsive: true,\n          frameMargins: 0.2,\n          showAxisDragHandles: true,\n          showAxisRangeEntryBoxes: true,\n          showTips: true,\n          displayModeBar: true,\n          toImageButtonOptions: {\n            format: 'png',\n            filename: 'Litmus_Community_Stats',\n            width: 1920,\n            height: 1080,\n            scale: 2,\n          },\n        }}\n        onInitialized={() => {\n          try {\n            const nodeStyle = (\n              document.getElementsByClassName('modebar')[0] as HTMLElement\n            ).style;\n            nodeStyle.left = '29%';\n            nodeStyle.width = 'fit-content';\n            nodeStyle.backgroundColor = palette.background.paper;\n          } catch (err) {\n            console.error(err);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CommunityAnalyticsPlot;\n"]},"metadata":{},"sourceType":"module"}