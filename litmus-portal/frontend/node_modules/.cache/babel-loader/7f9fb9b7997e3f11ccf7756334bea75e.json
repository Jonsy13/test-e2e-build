{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChaosHub/index.tsx\";\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { ButtonFilled, ButtonOutlined, Modal } from 'litmus-ui';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@material-ui/lab';\nimport DeveloperGuide from '../../components/DeveloperGuide';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { DELETE_HUB, GET_HUB_STATUS, SYNC_REPO } from '../../graphql';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport CustomMyHubCard from './customMyHubCard';\nimport useStyles from './styles';\nimport MyHubConnectDrawer from './MyHubConnectDrawer';\nimport { constants } from '../../constants';\n\nvar MyHub = function MyHub() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Get selected projectID from the URL\n\n\n  var projectID = getProjectID();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayResult = _useState2[0],\n      setDisplayResult = _useState2[1];\n\n  var _useState3 = useState({\n    type: '',\n    message: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cloneResult = _useState4[0],\n      setCloneResult = _useState4[1]; // Get MyHubs with Status\n\n\n  var _useQuery = useQuery(GET_HUB_STATUS, {\n    variables: {\n      data: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      drawerState = _useState6[0],\n      setDrawerState = _useState6[1];\n  /**\n   * State Variables for Edit MyHub\n   */\n\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hubName = _useState8[0],\n      setHubName = _useState8[1]; // To distinguish between create or edit MyHub\n\n\n  var openHubDrawer = function openHubDrawer(myHubName) {\n    setHubName(myHubName);\n    setDrawerState(true);\n  };\n\n  var handleDrawerClose = function handleDrawerClose() {\n    if (hubName.length) {\n      setHubName('');\n    }\n\n    setDrawerState(false);\n  };\n\n  var handleDrawerCloseWithRefetch = function handleDrawerCloseWithRefetch() {\n    setDrawerState(false);\n\n    if (hubName.length) {\n      setHubName('');\n    }\n\n    refetch();\n  };\n\n  var handleAlertClose = function handleAlertClose() {\n    setDisplayResult(false);\n  };\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      key = _useState10[0],\n      setKey = _useState10[1]; // Mutation to refresh a repo\n\n\n  var _useMutation = useMutation(SYNC_REPO, {\n    refetchQueries: [{\n      query: GET_HUB_STATUS,\n      variables: {\n        data: projectID\n      }\n    }],\n    onError: function onError() {\n      refetch();\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      refreshRepo = _useMutation2[0],\n      refreshLoading = _useMutation2[1].loading; // Mutation to delete a repo\n\n\n  var _useMutation3 = useMutation(DELETE_HUB, {\n    onCompleted: function onCompleted() {\n      refetch();\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      deleteRepo = _useMutation4[0];\n\n  var totalHubs = data && data.getHubStatus;\n\n  var _useState11 = useState({\n    deleteHubModal: false,\n    hubID: ''\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      deleteHub = _useState12[0],\n      setDeleteHub = _useState12[1];\n\n  var handleHubDelete = function handleHubDelete() {\n    deleteRepo({\n      variables: {\n        hub_id: deleteHub.hubID\n      }\n    });\n    setDeleteHub({\n      deleteHubModal: false,\n      hubID: ''\n    });\n  };\n\n  var handleDelete = function handleDelete(hubId) {\n    setDeleteHub({\n      deleteHubModal: true,\n      hubID: hubId\n    });\n  };\n\n  var handleClose = function handleClose() {\n    setDeleteHub({\n      deleteHubModal: false,\n      hubID: ''\n    });\n  };\n\n  var handleRefresh = function handleRefresh(hubId) {\n    setKey(hubId);\n    refreshRepo({\n      variables: {\n        id: hubId\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, t('myhub.mainPage.header')), /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      return setDrawerState(true);\n    },\n    className: classes.connectNewHub,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, t('myhub.mainPage.connect'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.githubConfirmed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.connectHub,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, t('myhub.mainPage.switchHub')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noHub,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, totalHubs && totalHubs.length === 0 ? /*#__PURE__*/React.createElement(DeveloperGuide, {\n    header: t('myhub.mainPage.devGuideHeader'),\n    description: t('myhub.mainPage.devGuideDescription'),\n    expAvailable: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartsGroup,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, totalHubs && totalHubs.map(function (hub) {\n    return /*#__PURE__*/React.createElement(CustomMyHubCard, {\n      key: hub.id,\n      hub: hub,\n      keyValue: key,\n      handleDelete: handleDelete,\n      handleRefresh: handleRefresh,\n      refreshLoader: refreshLoading,\n      handleEditHub: openHubDrawer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 23\n      }\n    });\n  })))), deleteHub.deleteHubModal ? /*#__PURE__*/React.createElement(Modal, {\n    open: deleteHub.deleteHubModal,\n    onClose: handleClose,\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: handleClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 19\n      }\n    }, \"\\u2715\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.modalDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/red-cross.svg\",\n    alt: \"disconnect\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.disconnectHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }, t('myhub.mainPage.disconnectHeader')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.disconnectConfirm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }\n  }, t('myhub.mainPage.disconnectDesc')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.disconnectBtns,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: handleClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, t('myhub.mainPage.cancel')), /*#__PURE__*/React.createElement(ButtonFilled, {\n    variant: \"error\",\n    onClick: handleHubDelete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, t('myhub.mainPage.deleteHub'))))) : null)), /*#__PURE__*/React.createElement(MyHubConnectDrawer, {\n    hubName: hubName,\n    drawerState: drawerState,\n    handleDrawerClose: handleDrawerClose,\n    refetchQuery: handleDrawerCloseWithRefetch,\n    setAlertState: function setAlertState(alert) {\n      return setDisplayResult(alert);\n    },\n    setAlertResult: function setAlertResult(alertResult) {\n      return setCloneResult(alertResult);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Snackbar, {\n    open: displayResult,\n    autoHideDuration: 6000,\n    onClose: function onClose() {\n      if (cloneResult.type === constants.error) {\n        setDisplayResult(false);\n      } else {\n        handleAlertClose();\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: function onClose() {\n      if (cloneResult.type === constants.error) {\n        setDisplayResult(false);\n      } else {\n        handleAlertClose();\n      }\n    },\n    severity: cloneResult.type === constants.error ? 'error' : 'success',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, cloneResult.message)));\n};\n\nexport default MyHub;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChaosHub/index.tsx"],"names":["useMutation","useQuery","Snackbar","Typography","ButtonFilled","ButtonOutlined","Modal","React","useState","useTranslation","Alert","DeveloperGuide","Loader","Scaffold","DELETE_HUB","GET_HUB_STATUS","SYNC_REPO","getProjectID","CustomMyHubCard","useStyles","MyHubConnectDrawer","constants","MyHub","classes","t","projectID","displayResult","setDisplayResult","type","message","cloneResult","setCloneResult","variables","data","fetchPolicy","loading","refetch","drawerState","setDrawerState","hubName","setHubName","openHubDrawer","myHubName","handleDrawerClose","length","handleDrawerCloseWithRefetch","handleAlertClose","key","setKey","refetchQueries","query","onError","refreshRepo","refreshLoading","onCompleted","deleteRepo","totalHubs","getHubStatus","deleteHubModal","hubID","deleteHub","setDeleteHub","handleHubDelete","hub_id","handleDelete","hubId","handleClose","handleRefresh","id","header","connectNewHub","mainDiv","githubConfirmed","connectHub","noHub","chartsGroup","map","hub","modalDiv","disconnectHeader","disconnectConfirm","disconnectBtns","alert","alertResult","error"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { ButtonFilled, ButtonOutlined, Modal } from 'litmus-ui';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@material-ui/lab';\nimport DeveloperGuide from '../../components/DeveloperGuide';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { DELETE_HUB, GET_HUB_STATUS, SYNC_REPO } from '../../graphql';\nimport { HubDetails, HubStatus } from '../../models/redux/myhub';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport CustomMyHubCard from './customMyHubCard';\nimport useStyles from './styles';\nimport MyHubConnectDrawer from './MyHubConnectDrawer';\nimport { constants } from '../../constants';\n\ninterface DeleteHub {\n  deleteHubModal: boolean;\n  hubID: string;\n}\n\ninterface CloneResult {\n  type: string;\n  message: string;\n}\n\nconst MyHub: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  // Get selected projectID from the URL\n  const projectID = getProjectID();\n\n  const [displayResult, setDisplayResult] = useState<boolean>(false);\n  const [cloneResult, setCloneResult] = useState<CloneResult>({\n    type: '',\n    message: '',\n  });\n\n  // Get MyHubs with Status\n  const { data, loading, refetch } = useQuery<HubStatus>(GET_HUB_STATUS, {\n    variables: { data: projectID },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const [drawerState, setDrawerState] = useState(false);\n\n  /**\n   * State Variables for Edit MyHub\n   */\n  const [hubName, setHubName] = useState(''); // To distinguish between create or edit MyHub\n\n  const openHubDrawer = (myHubName: string) => {\n    setHubName(myHubName);\n    setDrawerState(true);\n  };\n\n  const handleDrawerClose = () => {\n    if (hubName.length) {\n      setHubName('');\n    }\n    setDrawerState(false);\n  };\n\n  const handleDrawerCloseWithRefetch = () => {\n    setDrawerState(false);\n    if (hubName.length) {\n      setHubName('');\n    }\n    refetch();\n  };\n\n  const handleAlertClose = () => {\n    setDisplayResult(false);\n  };\n\n  const [key, setKey] = useState('');\n\n  // Mutation to refresh a repo\n  const [refreshRepo, { loading: refreshLoading }] = useMutation(SYNC_REPO, {\n    refetchQueries: [\n      {\n        query: GET_HUB_STATUS,\n        variables: { data: projectID },\n      },\n    ],\n    onError: () => {\n      refetch();\n    },\n  });\n\n  // Mutation to delete a repo\n  const [deleteRepo] = useMutation(DELETE_HUB, {\n    onCompleted: () => {\n      refetch();\n    },\n  });\n\n  const totalHubs = data && data.getHubStatus;\n\n  const [deleteHub, setDeleteHub] = useState<DeleteHub>({\n    deleteHubModal: false,\n    hubID: '',\n  });\n\n  const handleHubDelete = () => {\n    deleteRepo({\n      variables: {\n        hub_id: deleteHub.hubID,\n      },\n    });\n    setDeleteHub({\n      deleteHubModal: false,\n      hubID: '',\n    });\n  };\n\n  const handleDelete = (hubId: string) => {\n    setDeleteHub({\n      deleteHubModal: true,\n      hubID: hubId,\n    });\n  };\n\n  const handleClose = () => {\n    setDeleteHub({\n      deleteHubModal: false,\n      hubID: '',\n    });\n  };\n\n  const handleRefresh = (hubId: string) => {\n    setKey(hubId);\n    refreshRepo({\n      variables: {\n        id: hubId,\n      },\n    });\n  };\n\n  return (\n    <Scaffold>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          {/* Header Div */}\n          <div className={classes.header}>\n            <Typography variant=\"h3\">{t('myhub.mainPage.header')}</Typography>\n            <ButtonFilled\n              onClick={() => setDrawerState(true)}\n              className={classes.connectNewHub}\n            >\n              {t('myhub.mainPage.connect')}\n            </ButtonFilled>\n          </div>\n          {/* Charts Div */}\n          <div className={classes.mainDiv}>\n            <div className={classes.githubConfirmed}>\n              <Typography className={classes.connectHub}>\n                {t('myhub.mainPage.switchHub')}\n              </Typography>\n              <div className={classes.noHub}>\n                {totalHubs && totalHubs.length === 0 ? (\n                  <DeveloperGuide\n                    header={t('myhub.mainPage.devGuideHeader')}\n                    description={t('myhub.mainPage.devGuideDescription')}\n                    expAvailable={false}\n                  />\n                ) : (\n                  <></>\n                )}\n                <div className={classes.chartsGroup}>\n                  {totalHubs &&\n                    totalHubs.map((hub: HubDetails) => (\n                      <CustomMyHubCard\n                        key={hub.id}\n                        hub={hub}\n                        keyValue={key}\n                        handleDelete={handleDelete}\n                        handleRefresh={handleRefresh}\n                        refreshLoader={refreshLoading}\n                        handleEditHub={openHubDrawer}\n                      />\n                    ))}\n                </div>\n              </div>\n            </div>\n            {deleteHub.deleteHubModal ? (\n              <Modal\n                open={deleteHub.deleteHubModal}\n                onClose={handleClose}\n                modalActions={\n                  <ButtonOutlined onClick={handleClose}>\n                    &#x2715;\n                  </ButtonOutlined>\n                }\n              >\n                <div className={classes.modalDiv}>\n                  <img src=\"/icons/red-cross.svg\" alt=\"disconnect\" />\n                  <Typography className={classes.disconnectHeader}>\n                    {t('myhub.mainPage.disconnectHeader')}\n                  </Typography>\n                  <Typography className={classes.disconnectConfirm}>\n                    {t('myhub.mainPage.disconnectDesc')}\n                  </Typography>\n                  <div className={classes.disconnectBtns}>\n                    <ButtonOutlined onClick={handleClose}>\n                      {t('myhub.mainPage.cancel')}\n                    </ButtonOutlined>\n                    <ButtonFilled variant=\"error\" onClick={handleHubDelete}>\n                      {t('myhub.mainPage.deleteHub')}\n                    </ButtonFilled>\n                  </div>\n                </div>\n              </Modal>\n            ) : null}\n          </div>\n        </>\n      )}\n\n      {/* Add/Edit MyHub Drawer */}\n      <MyHubConnectDrawer\n        hubName={hubName}\n        drawerState={drawerState}\n        handleDrawerClose={handleDrawerClose}\n        refetchQuery={handleDrawerCloseWithRefetch}\n        setAlertState={(alert) => setDisplayResult(alert)}\n        setAlertResult={(alertResult) => setCloneResult(alertResult)}\n      />\n      {/* SnackBar to display success/failure alerts */}\n      <Snackbar\n        open={displayResult}\n        autoHideDuration={6000}\n        onClose={() => {\n          if (cloneResult.type === constants.error) {\n            setDisplayResult(false);\n          } else {\n            handleAlertClose();\n          }\n        }}\n      >\n        <Alert\n          onClose={() => {\n            if (cloneResult.type === constants.error) {\n              setDisplayResult(false);\n            } else {\n              handleAlertClose();\n            }\n          }}\n          severity={cloneResult.type === constants.error ? 'error' : 'success'}\n        >\n          {cloneResult.message}\n        </Alert>\n      </Snackbar>\n    </Scaffold>\n  );\n};\n\nexport default MyHub;\n"]},"metadata":{},"sourceType":"module"}