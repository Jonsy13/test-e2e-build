{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Typography}from'@material-ui/core';import Done from'@material-ui/icons/DoneAllTwoTone';import{ButtonOutlined}from'litmus-ui';import React,{useState}from'react';import{useTranslation}from'react-i18next';import useStyles from'./styles';var TargetCopy=function TargetCopy(){var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),copying=_useState2[0],setCopying=_useState2[1];function fallbackCopyTextToClipboard(text){// eslint-disable-next-line no-alert\nwindow.prompt('Copy to clipboard: Ctrl+C, Enter',text);}function copyTextToClipboard(text){if(!navigator.clipboard){fallbackCopyTextToClipboard(text);return;}setCopying(true);navigator.clipboard.writeText(text).catch(function(err){return console.error('Async: Could not copy text: ',err);});setTimeout(function(){return setCopying(false);},3000);}var command='litmusctl agent connect';return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},copying&&/*#__PURE__*/React.createElement(Typography,{className:classes.copiedDiv},t('targets.copy.copying')),/*#__PURE__*/React.createElement(\"div\",{className:classes.commandContainer},/*#__PURE__*/React.createElement(Typography,{className:classes.command},\"$ \",command),/*#__PURE__*/React.createElement(ButtonOutlined,{startIcon:!copying?/*#__PURE__*/React.createElement(\"img\",{className:classes.copyIcon,src:\"/icons/copy.svg\",alt:\"copy\"}):/*#__PURE__*/React.createElement(Done,{className:classes.copyIcon}),onClick:function onClick(){return copyTextToClipboard(command);}},copying?/*#__PURE__*/React.createElement(Typography,null,t('targets.copy.copied')):/*#__PURE__*/React.createElement(Typography,null,t('targets.copy.copy')))));};export default TargetCopy;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Targets/TargetCopy/index.tsx"],"names":["Typography","Done","ButtonOutlined","React","useState","useTranslation","useStyles","TargetCopy","classes","t","copying","setCopying","fallbackCopyTextToClipboard","text","window","prompt","copyTextToClipboard","navigator","clipboard","writeText","catch","err","console","error","setTimeout","command","root","copiedDiv","commandContainer","copyIcon"],"mappings":"mLAAA,OAASA,UAAT,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,mCAAjB,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAEA,GAAMC,CAAAA,UAAoB,CAAG,QAAvBA,CAAAA,UAAuB,EAAM,CACjC,GAAMC,CAAAA,OAAO,CAAGF,SAAS,EAAzB,CACA,oBAAcD,cAAc,EAA5B,CAAQI,CAAR,iBAAQA,CAAR,CAEA,cAA8BL,QAAQ,CAAC,KAAD,CAAtC,wCAAOM,OAAP,eAAgBC,UAAhB,eAEA,QAASC,CAAAA,2BAAT,CAAqCC,IAArC,CAAmD,CACjD;AACAC,MAAM,CAACC,MAAP,CAAc,kCAAd,CAAkDF,IAAlD,EACD,CAED,QAASG,CAAAA,mBAAT,CAA6BH,IAA7B,CAA2C,CACzC,GAAI,CAACI,SAAS,CAACC,SAAf,CAA0B,CACxBN,2BAA2B,CAACC,IAAD,CAA3B,CACA,OACD,CACDF,UAAU,CAAC,IAAD,CAAV,CACAM,SAAS,CAACC,SAAV,CACGC,SADH,CACaN,IADb,EAEGO,KAFH,CAES,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,CAA8CF,GAA9C,CAAT,EAFT,EAIAG,UAAU,CAAC,iBAAMb,CAAAA,UAAU,CAAC,KAAD,CAAhB,EAAD,CAA0B,IAA1B,CAAV,CACD,CAED,GAAMc,CAAAA,OAAO,CAAG,yBAAhB,CAEA,mBACE,2BAAK,SAAS,CAAEjB,OAAO,CAACkB,IAAxB,EACGhB,OAAO,eACN,oBAAC,UAAD,EAAY,SAAS,CAAEF,OAAO,CAACmB,SAA/B,EACGlB,CAAC,CAAC,sBAAD,CADJ,CAFJ,cAME,2BAAK,SAAS,CAAED,OAAO,CAACoB,gBAAxB,eACE,oBAAC,UAAD,EAAY,SAAS,CAAEpB,OAAO,CAACiB,OAA/B,OAA2CA,OAA3C,CADF,cAEE,oBAAC,cAAD,EACE,SAAS,CACP,CAACf,OAAD,cACE,2BACE,SAAS,CAAEF,OAAO,CAACqB,QADrB,CAEE,GAAG,CAAC,iBAFN,CAGE,GAAG,CAAC,MAHN,EADF,cAOE,oBAAC,IAAD,EAAM,SAAS,CAAErB,OAAO,CAACqB,QAAzB,EATN,CAYE,OAAO,CAAE,yBAAMb,CAAAA,mBAAmB,CAACS,OAAD,CAAzB,EAZX,EAcGf,OAAO,cACN,oBAAC,UAAD,MAAaD,CAAC,CAAC,qBAAD,CAAd,CADM,cAGN,oBAAC,UAAD,MAAaA,CAAC,CAAC,mBAAD,CAAd,CAjBJ,CAFF,CANF,CADF,CAgCD,CA1DD,CA4DA,cAAeF,CAAAA,UAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useStyles from './styles';\n\nconst TargetCopy: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const [copying, setCopying] = useState(false);\n\n  function fallbackCopyTextToClipboard(text: string) {\n    // eslint-disable-next-line no-alert\n    window.prompt('Copy to clipboard: Ctrl+C, Enter', text);\n  }\n\n  function copyTextToClipboard(text: string) {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n      return;\n    }\n    setCopying(true);\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n\n    setTimeout(() => setCopying(false), 3000);\n  }\n\n  const command = 'litmusctl agent connect';\n\n  return (\n    <div className={classes.root}>\n      {copying && (\n        <Typography className={classes.copiedDiv}>\n          {t('targets.copy.copying')}\n        </Typography>\n      )}\n      <div className={classes.commandContainer}>\n        <Typography className={classes.command}>$ {command}</Typography>\n        <ButtonOutlined\n          startIcon={\n            !copying ? (\n              <img\n                className={classes.copyIcon}\n                src=\"/icons/copy.svg\"\n                alt=\"copy\"\n              />\n            ) : (\n              <Done className={classes.copyIcon} />\n            )\n          }\n          onClick={() => copyTextToClipboard(command)}\n        >\n          {copying ? (\n            <Typography>{t('targets.copy.copied')}</Typography>\n          ) : (\n            <Typography>{t('targets.copy.copy')}</Typography>\n          )}\n        </ButtonOutlined>\n      </div>\n    </div>\n  );\n};\n\nexport default TargetCopy;\n"]},"metadata":{},"sourceType":"module"}