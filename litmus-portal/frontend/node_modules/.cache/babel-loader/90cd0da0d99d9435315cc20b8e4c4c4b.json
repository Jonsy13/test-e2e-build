{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/WorkflowAnalytics/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\n\n/* eslint-disable no-loop-func */\nimport { useQuery } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport BackButton from '../../components/Button/BackButton';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_LIST_DETAILS } from '../../graphql';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport PopOver from '../../views/Analytics/WorkflowDashboard/PopOver';\nimport WorkflowDetailsTable from '../../views/Analytics/WorkflowDashboard/WorkflowRunDetailsTable';\nimport WorkflowRunsBarChart from '../../views/Analytics/WorkflowDashboard/WorkflowRunsBarChart';\nimport useStyles from './styles';\n\nvar AnalyticsPage = function AnalyticsPage() {\n  var _selectedWorkflowSche5, _workflowRuns$length;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popoverOpen = _React$useState2[0],\n      setPopoverOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      workflowRunPresent = _React$useState4[0],\n      setWorkflowRunPresent = _React$useState4[1];\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname; // Getting the workflow nome from the pathname\n\n\n  var workflowId = pathname.split('/')[3];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedWorkflowRunID = _React$useState6[0],\n      setSelectedWorkflowRunID = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      selectedWorkflowRunDetails = _React$useState8[0],\n      setSelectedWorkflowRunDetails = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      workflowRunDataForPlot = _React$useState10[0],\n      setWorkflowRunDataForPlot = _React$useState10[1];\n\n  var _React$useState11 = React.useState({\n    testsPassed: 0,\n    testsFailed: 0,\n    resilienceScore: 0,\n    testDate: '',\n    xLoc: 0,\n    yLoc: 0,\n    workflowRunID: ''\n  }),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      selectedWorkflowRunData = _React$useState12[0],\n      setSelectedWorkflowRunData = _React$useState12[1]; // get ProjectID\n\n\n  var projectID = getProjectID(); // Apollo query to get the scheduled workflow data\n\n  var _useQuery = useQuery(WORKFLOW_LIST_DETAILS, {\n    variables: {\n      workflowInput: {\n        project_id: projectID,\n        workflow_ids: [workflowId]\n      }\n    },\n    pollInterval: 5000\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  var setPopOverDisplay = function setPopOverDisplay(selectedWorkflowRunDetails, visible) {\n    setSelectedWorkflowRunData(selectedWorkflowRunDetails);\n    setPopoverOpen(visible);\n  };\n\n  useEffect(function () {\n    var workflowRuns = [];\n    var experimentTestResultsArray = [];\n    var chaosDataArray = [];\n    var validWorkflowRunsData = [];\n\n    try {\n      var _selectedWorkflowSche;\n\n      var _selectedWorkflowSchedule = data === null || data === void 0 ? void 0 : data.ListWorkflow.workflows;\n\n      var selectedWorkflows = _selectedWorkflowSchedule ? (_selectedWorkflowSche = _selectedWorkflowSchedule[0]) === null || _selectedWorkflowSche === void 0 ? void 0 : _selectedWorkflowSche.workflow_runs : [];\n      selectedWorkflows === null || selectedWorkflows === void 0 ? void 0 : selectedWorkflows.forEach(function (data) {\n        try {\n          (function () {\n            var executionData = JSON.parse(data.execution_data);\n            var nodes = executionData.nodes;\n            var experimentTestResultsArrayPerWorkflowRun = [];\n            var weightsSum = 0;\n            var isValid = false;\n            var totalExperimentsPassed = 0;\n\n            for (var _i = 0, _Object$keys = Object.keys(nodes); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n              var node = nodes[key];\n\n              if (node.chaosData) {\n                (function () {\n                  var chaosData = node.chaosData;\n                  chaosDataArray.push(chaosData);\n\n                  if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                    var _selectedWorkflowSche2;\n\n                    var weightageMap = _selectedWorkflowSchedule ? (_selectedWorkflowSche2 = _selectedWorkflowSchedule[0]) === null || _selectedWorkflowSche2 === void 0 ? void 0 : _selectedWorkflowSche2.weightages : [];\n                    weightageMap.forEach(function (weightage) {\n                      if (weightage.experiment_name === chaosData.experimentName) {\n                        if (chaosData.experimentVerdict === 'Pass') {\n                          experimentTestResultsArray.push(weightage.weightage * parseInt(chaosData.probeSuccessPercentage, 10) / 100);\n                          totalExperimentsPassed += 1;\n                        }\n\n                        if (chaosData.experimentVerdict === 'Fail') {\n                          experimentTestResultsArray.push(0);\n                        }\n\n                        if (chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail') {\n                          experimentTestResultsArrayPerWorkflowRun.push(chaosData.experimentVerdict === 'Fail' ? 0 : weightage.weightage * parseInt(chaosData.probeSuccessPercentage, 10) / 100);\n                          weightsSum += weightage.weightage;\n                          isValid = true;\n                        }\n                      }\n                    });\n                  }\n                })();\n              }\n            }\n\n            if (executionData.event_type === 'UPDATE' && isValid) {\n              var workflowRun = {\n                testsPassed: totalExperimentsPassed,\n                testsFailed: experimentTestResultsArrayPerWorkflowRun.length - totalExperimentsPassed,\n                resilienceScore: experimentTestResultsArrayPerWorkflowRun.length ? experimentTestResultsArrayPerWorkflowRun.reduce(function (a, b) {\n                  return a + b;\n                }, 0) / weightsSum * 100 : 0,\n                testDate: data.last_updated,\n                workflowRunID: data.workflow_run_id,\n                workflowID: workflowId\n              };\n              validWorkflowRunsData.push(workflowRun);\n            }\n          })();\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    } catch (error) {\n      setWorkflowRunPresent(false);\n      return;\n    }\n\n    if (validWorkflowRunsData.length === 1) {\n      var resDate = moment(new Date(parseInt(validWorkflowRunsData[0].testDate, 10) * 1000).toString()).format('YYYY-MM-DD');\n      var edgeLow = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(parseInt(moment(resDate).subtract(1.5, 'days').endOf('day').format('x'), 10) / 1000).toString(),\n        workflowRunID: 'edge_low',\n        workflowID: workflowId\n      };\n      var edgeHigh = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(parseInt(moment(resDate).add(1.5, 'days').startOf('day').format('x'), 10) / 1000).toString(),\n        workflowRunID: 'edge_high',\n        workflowID: workflowId\n      };\n      workflowRuns.push(edgeLow);\n      workflowRuns.push(validWorkflowRunsData[0]);\n      workflowRuns.push(edgeHigh);\n      setWorkflowRunDataForPlot(workflowRuns);\n    } else {\n      setWorkflowRunDataForPlot(validWorkflowRunsData);\n    }\n  }, [selectedWorkflowRunID, data]);\n  useEffect(function () {\n    var workflowTestsArray = [];\n\n    try {\n      var _selectedWorkflowSche3;\n\n      var _selectedWorkflowSchedule2 = data === null || data === void 0 ? void 0 : data.ListWorkflow.workflows;\n\n      var _workflowRuns = _selectedWorkflowSchedule2 ? (_selectedWorkflowSche3 = _selectedWorkflowSchedule2[0]) === null || _selectedWorkflowSche3 === void 0 ? void 0 : _selectedWorkflowSche3.workflow_runs : [];\n\n      var selectedWorkflows = _workflowRuns === null || _workflowRuns === void 0 ? void 0 : _workflowRuns.filter(function (w) {\n        return w.workflow_run_id === selectedWorkflowRunID;\n      });\n      selectedWorkflows === null || selectedWorkflows === void 0 ? void 0 : selectedWorkflows.forEach(function (data) {\n        try {\n          (function () {\n            var executionData = JSON.parse(data.execution_data);\n            var nodes = executionData.nodes;\n            var index = 1;\n\n            for (var _i2 = 0, _Object$keys2 = Object.keys(nodes); _i2 < _Object$keys2.length; _i2++) {\n              var key = _Object$keys2[_i2];\n              var node = nodes[key];\n\n              if (node.chaosData) {\n                (function () {\n                  var _selectedWorkflowSche4;\n\n                  var chaosData = node.chaosData;\n                  var weightageMap = _selectedWorkflowSchedule2 ? (_selectedWorkflowSche4 = _selectedWorkflowSchedule2[0]) === null || _selectedWorkflowSche4 === void 0 ? void 0 : _selectedWorkflowSche4.weightages : [];\n                  weightageMap.forEach(function (weightage) {\n                    if (weightage.experiment_name === chaosData.experimentName) {\n                      workflowTestsArray.push({\n                        test_id: index,\n                        test_name: chaosData.experimentName,\n                        test_result: chaosData.experimentVerdict,\n                        test_weight: weightage.weightage,\n                        resulting_points: chaosData.experimentVerdict === 'Pass' || chaosData.experimentVerdict === 'Fail' ? weightage.weightage * parseInt(chaosData.probeSuccessPercentage, 10) / 100 : 0,\n                        last_run: chaosData.lastUpdatedAt\n                      });\n                    }\n                  });\n                })();\n              }\n\n              index += 1;\n            }\n          })();\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      setSelectedWorkflowRunDetails(workflowTestsArray);\n    } catch (error) {\n      setWorkflowRunPresent(false);\n    }\n  }, [selectedWorkflowRunID, data]); // Number of Workflow Runs for the selected Schedule\n\n  var selectedWorkflowSchedule = data === null || data === void 0 ? void 0 : data.ListWorkflow.workflows;\n  var workflowRuns = selectedWorkflowSchedule ? (_selectedWorkflowSche5 = selectedWorkflowSchedule[0]) === null || _selectedWorkflowSche5 === void 0 ? void 0 : _selectedWorkflowSche5.workflow_runs : [];\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, workflowRunPresent ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, workflowRunDataForPlot.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, \" \", t('analytics.workflowAnalytics'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 19\n    }\n  }, t('analytics.viewTestResult'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.analyticsDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowRunsBarChart, {\n    numberOfWorkflowRuns: (_workflowRuns$length = workflowRuns === null || workflowRuns === void 0 ? void 0 : workflowRuns.length) !== null && _workflowRuns$length !== void 0 ? _workflowRuns$length : 0,\n    workflowRunData: workflowRunDataForPlot,\n    callBackToShowPopOver: setPopOverDisplay,\n    callBackToSelectWorkflowRun: function callBackToSelectWorkflowRun(selectedWorkflowRunID) {\n      setSelectedWorkflowRunID(selectedWorkflowRunID);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }), selectedWorkflowRunID !== '' ? /*#__PURE__*/React.createElement(WorkflowDetailsTable, {\n    workflowRunDetails: selectedWorkflowRunDetails !== null && selectedWorkflowRunDetails !== void 0 ? selectedWorkflowRunDetails : [],\n    workflowID: workflowId,\n    reloadAnalytics: function reloadAnalytics() {\n      setSelectedWorkflowRunID('');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }\n  }), popoverOpen ? /*#__PURE__*/React.createElement(PopOver, {\n    testsPassed: selectedWorkflowRunData.testsPassed,\n    testsFailed: selectedWorkflowRunData.testsFailed,\n    resilienceScore: selectedWorkflowRunData.resilienceScore,\n    testDate: selectedWorkflowRunData.testDate,\n    xLoc: selectedWorkflowRunData.xLoc,\n    yLoc: selectedWorkflowRunData.yLoc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  })))) : error ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 15\n    }\n  }, t('analytics.fetchError'))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.waitingScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, t('analytics.chaosCompleteWaitingMessage')), /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.waitingScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.waitingText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  }, t('analytics.waitingMessage')), /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default AnalyticsPage;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/WorkflowAnalytics/index.tsx"],"names":["useQuery","Typography","moment","React","useEffect","useTranslation","useLocation","BackButton","Loader","Scaffold","WORKFLOW_LIST_DETAILS","getProjectID","PopOver","WorkflowDetailsTable","WorkflowRunsBarChart","useStyles","AnalyticsPage","classes","useState","popoverOpen","setPopoverOpen","workflowRunPresent","setWorkflowRunPresent","pathname","workflowId","split","t","selectedWorkflowRunID","setSelectedWorkflowRunID","selectedWorkflowRunDetails","setSelectedWorkflowRunDetails","workflowRunDataForPlot","setWorkflowRunDataForPlot","testsPassed","testsFailed","resilienceScore","testDate","xLoc","yLoc","workflowRunID","selectedWorkflowRunData","setSelectedWorkflowRunData","projectID","variables","workflowInput","project_id","workflow_ids","pollInterval","data","error","setPopOverDisplay","visible","workflowRuns","experimentTestResultsArray","chaosDataArray","validWorkflowRunsData","selectedWorkflowSchedule","ListWorkflow","workflows","selectedWorkflows","workflow_runs","forEach","executionData","JSON","parse","execution_data","nodes","experimentTestResultsArrayPerWorkflowRun","weightsSum","isValid","totalExperimentsPassed","Object","keys","key","node","chaosData","push","experimentVerdict","weightageMap","weightages","weightage","experiment_name","experimentName","parseInt","probeSuccessPercentage","event_type","workflowRun","length","reduce","a","b","last_updated","workflow_run_id","workflowID","console","resDate","Date","toString","format","edgeLow","Math","round","subtract","endOf","edgeHigh","add","startOf","workflowTestsArray","filter","w","index","test_id","test_name","test_result","test_weight","resulting_points","last_run","lastUpdatedAt","rootContainer","root","button","headerDiv","analyticsDiv","waitingText","waitingScreen"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-loop-func */\nimport { useQuery } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport BackButton from '../../components/Button/BackButton';\nimport Loader from '../../components/Loader';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { WORKFLOW_LIST_DETAILS } from '../../graphql';\nimport { ChaosData, ExecutionData } from '../../models/graphql/workflowData';\nimport {\n  ListWorkflowsInput,\n  ScheduledWorkflows,\n  WeightageMap,\n} from '../../models/graphql/workflowListData';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport PopOver from '../../views/Analytics/WorkflowDashboard/PopOver';\nimport WorkflowDetailsTable from '../../views/Analytics/WorkflowDashboard/WorkflowRunDetailsTable';\nimport WorkflowRunsBarChart from '../../views/Analytics/WorkflowDashboard/WorkflowRunsBarChart';\nimport useStyles from './styles';\n\ninterface WorkflowRunData {\n  testsPassed: number;\n  testsFailed: number;\n  resilienceScore: number;\n  testDate: string;\n  workflowRunID: string;\n  workflowID: string;\n}\n\ninterface SelectedWorkflowRunData {\n  testsPassed: number;\n  testsFailed: number;\n  resilienceScore: number;\n  testDate: string;\n  xLoc: number;\n  yLoc: number;\n  workflowRunID: string;\n}\n\ninterface WorkFlowTests {\n  test_id: number;\n  test_name: string;\n  test_result: string;\n  test_weight: number;\n  resulting_points: number;\n  last_run: string;\n}\n\nconst AnalyticsPage: React.FC = () => {\n  const classes = useStyles();\n  const [popoverOpen, setPopoverOpen] = React.useState<boolean>(false);\n  const [workflowRunPresent, setWorkflowRunPresent] =\n    React.useState<boolean>(true);\n  const { pathname } = useLocation();\n  // Getting the workflow nome from the pathname\n  const workflowId = pathname.split('/')[3];\n  const { t } = useTranslation();\n  const [selectedWorkflowRunID, setSelectedWorkflowRunID] =\n    React.useState<string>('');\n  const [selectedWorkflowRunDetails, setSelectedWorkflowRunDetails] =\n    React.useState<WorkFlowTests[]>();\n  const [workflowRunDataForPlot, setWorkflowRunDataForPlot] = React.useState<\n    WorkflowRunData[]\n  >([]);\n  const [selectedWorkflowRunData, setSelectedWorkflowRunData] =\n    React.useState<SelectedWorkflowRunData>({\n      testsPassed: 0,\n      testsFailed: 0,\n      resilienceScore: 0,\n      testDate: '',\n      xLoc: 0,\n      yLoc: 0,\n      workflowRunID: '',\n    });\n\n  // get ProjectID\n  const projectID = getProjectID();\n\n  // Apollo query to get the scheduled workflow data\n  const { data, error } = useQuery<ScheduledWorkflows, ListWorkflowsInput>(\n    WORKFLOW_LIST_DETAILS,\n    {\n      variables: {\n        workflowInput: { project_id: projectID, workflow_ids: [workflowId] },\n      },\n      pollInterval: 5000,\n    }\n  );\n\n  const setPopOverDisplay = (\n    selectedWorkflowRunDetails: SelectedWorkflowRunData,\n    visible: boolean\n  ) => {\n    setSelectedWorkflowRunData(selectedWorkflowRunDetails);\n    setPopoverOpen(visible);\n  };\n\n  useEffect(() => {\n    const workflowRuns: WorkflowRunData[] = [];\n    const experimentTestResultsArray: number[] = [];\n    const chaosDataArray: ChaosData[] = [];\n    const validWorkflowRunsData: WorkflowRunData[] = [];\n    try {\n      const selectedWorkflowSchedule = data?.ListWorkflow.workflows;\n      const selectedWorkflows = selectedWorkflowSchedule\n        ? selectedWorkflowSchedule[0]?.workflow_runs\n        : [];\n      selectedWorkflows?.forEach((data) => {\n        try {\n          const executionData: ExecutionData = JSON.parse(data.execution_data);\n          const { nodes } = executionData;\n          const experimentTestResultsArrayPerWorkflowRun: number[] = [];\n          let weightsSum: number = 0;\n          let isValid: boolean = false;\n          let totalExperimentsPassed: number = 0;\n          for (const key of Object.keys(nodes)) {\n            const node = nodes[key];\n            if (node.chaosData) {\n              const { chaosData } = node;\n              chaosDataArray.push(chaosData);\n              if (\n                chaosData.experimentVerdict === 'Pass' ||\n                chaosData.experimentVerdict === 'Fail'\n              ) {\n                const weightageMap: WeightageMap[] = selectedWorkflowSchedule\n                  ? selectedWorkflowSchedule[0]?.weightages\n                  : [];\n                weightageMap.forEach((weightage) => {\n                  if (weightage.experiment_name === chaosData.experimentName) {\n                    if (chaosData.experimentVerdict === 'Pass') {\n                      experimentTestResultsArray.push(\n                        (weightage.weightage *\n                          parseInt(chaosData.probeSuccessPercentage, 10)) /\n                          100\n                      );\n                      totalExperimentsPassed += 1;\n                    }\n                    if (chaosData.experimentVerdict === 'Fail') {\n                      experimentTestResultsArray.push(0);\n                    }\n                    if (\n                      chaosData.experimentVerdict === 'Pass' ||\n                      chaosData.experimentVerdict === 'Fail'\n                    ) {\n                      experimentTestResultsArrayPerWorkflowRun.push(\n                        chaosData.experimentVerdict === 'Fail'\n                          ? 0\n                          : (weightage.weightage *\n                              parseInt(chaosData.probeSuccessPercentage, 10)) /\n                              100\n                      );\n                      weightsSum += weightage.weightage;\n                      isValid = true;\n                    }\n                  }\n                });\n              }\n            }\n          }\n          if (executionData.event_type === 'UPDATE' && isValid) {\n            const workflowRun = {\n              testsPassed: totalExperimentsPassed,\n              testsFailed:\n                experimentTestResultsArrayPerWorkflowRun.length -\n                totalExperimentsPassed,\n              resilienceScore: experimentTestResultsArrayPerWorkflowRun.length\n                ? (experimentTestResultsArrayPerWorkflowRun.reduce(\n                    (a, b) => a + b,\n                    0\n                  ) /\n                    weightsSum) *\n                  100\n                : 0,\n              testDate: data.last_updated,\n              workflowRunID: data.workflow_run_id,\n              workflowID: workflowId,\n            };\n            validWorkflowRunsData.push(workflowRun);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    } catch (error) {\n      setWorkflowRunPresent(false);\n      return;\n    }\n    if (validWorkflowRunsData.length === 1) {\n      const resDate = moment(\n        new Date(\n          parseInt(validWorkflowRunsData[0].testDate, 10) * 1000\n        ).toString()\n      ).format('YYYY-MM-DD');\n      const edgeLow = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(\n          parseInt(\n            moment(resDate).subtract(1.5, 'days').endOf('day').format('x'),\n            10\n          ) / 1000\n        ).toString(),\n        workflowRunID: 'edge_low',\n        workflowID: workflowId,\n      };\n      const edgeHigh = {\n        testsPassed: 0,\n        testsFailed: 0,\n        resilienceScore: 0,\n        testDate: Math.round(\n          parseInt(\n            moment(resDate).add(1.5, 'days').startOf('day').format('x'),\n            10\n          ) / 1000\n        ).toString(),\n        workflowRunID: 'edge_high',\n        workflowID: workflowId,\n      };\n      workflowRuns.push(edgeLow);\n      workflowRuns.push(validWorkflowRunsData[0]);\n      workflowRuns.push(edgeHigh);\n      setWorkflowRunDataForPlot(workflowRuns);\n    } else {\n      setWorkflowRunDataForPlot(validWorkflowRunsData);\n    }\n  }, [selectedWorkflowRunID, data]);\n\n  useEffect(() => {\n    const workflowTestsArray: WorkFlowTests[] = [];\n    try {\n      const selectedWorkflowSchedule = data?.ListWorkflow.workflows;\n      const workflowRuns = selectedWorkflowSchedule\n        ? selectedWorkflowSchedule[0]?.workflow_runs\n        : [];\n      const selectedWorkflows = workflowRuns?.filter(\n        (w) => w.workflow_run_id === selectedWorkflowRunID\n      );\n      selectedWorkflows?.forEach((data) => {\n        try {\n          const executionData: ExecutionData = JSON.parse(data.execution_data);\n          const { nodes } = executionData;\n          let index: number = 1;\n          for (const key of Object.keys(nodes)) {\n            const node = nodes[key];\n            if (node.chaosData) {\n              const { chaosData } = node;\n              const weightageMap: WeightageMap[] = selectedWorkflowSchedule\n                ? selectedWorkflowSchedule[0]?.weightages\n                : [];\n              weightageMap.forEach((weightage) => {\n                if (weightage.experiment_name === chaosData.experimentName) {\n                  workflowTestsArray.push({\n                    test_id: index,\n                    test_name: chaosData.experimentName,\n                    test_result: chaosData.experimentVerdict,\n                    test_weight: weightage.weightage,\n                    resulting_points:\n                      chaosData.experimentVerdict === 'Pass' ||\n                      chaosData.experimentVerdict === 'Fail'\n                        ? (weightage.weightage *\n                            parseInt(chaosData.probeSuccessPercentage, 10)) /\n                          100\n                        : 0,\n                    last_run: chaosData.lastUpdatedAt,\n                  });\n                }\n              });\n            }\n            index += 1;\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      setSelectedWorkflowRunDetails(workflowTestsArray);\n    } catch (error) {\n      setWorkflowRunPresent(false);\n    }\n  }, [selectedWorkflowRunID, data]);\n\n  // Number of Workflow Runs for the selected Schedule\n  const selectedWorkflowSchedule = data?.ListWorkflow.workflows;\n  const workflowRuns = selectedWorkflowSchedule\n    ? selectedWorkflowSchedule[0]?.workflow_runs\n    : [];\n\n  return (\n    <Scaffold>\n      {workflowRunPresent ? (\n        <div>\n          {workflowRunDataForPlot.length ? (\n            <div className={classes.rootContainer}>\n              <div className={classes.root}>\n                <div className={classes.button}>\n                  <BackButton />\n                </div>\n                <Typography variant=\"h4\">\n                  <strong> {t('analytics.workflowAnalytics')}</strong>\n                </Typography>\n                <div className={classes.headerDiv}>\n                  <Typography variant=\"body1\">\n                    {t('analytics.viewTestResult')}\n                  </Typography>\n                </div>\n                <div className={classes.analyticsDiv}>\n                  <WorkflowRunsBarChart\n                    numberOfWorkflowRuns={workflowRuns?.length ?? 0}\n                    workflowRunData={workflowRunDataForPlot}\n                    callBackToShowPopOver={setPopOverDisplay}\n                    callBackToSelectWorkflowRun={(\n                      selectedWorkflowRunID: string\n                    ) => {\n                      setSelectedWorkflowRunID(selectedWorkflowRunID);\n                    }}\n                  />\n                  {selectedWorkflowRunID !== '' ? (\n                    <WorkflowDetailsTable\n                      workflowRunDetails={selectedWorkflowRunDetails ?? []}\n                      workflowID={workflowId}\n                      reloadAnalytics={() => {\n                        setSelectedWorkflowRunID('');\n                      }}\n                    />\n                  ) : (\n                    <div />\n                  )}\n                  {popoverOpen ? (\n                    <PopOver\n                      testsPassed={selectedWorkflowRunData.testsPassed}\n                      testsFailed={selectedWorkflowRunData.testsFailed}\n                      resilienceScore={selectedWorkflowRunData.resilienceScore}\n                      testDate={selectedWorkflowRunData.testDate}\n                      xLoc={selectedWorkflowRunData.xLoc}\n                      yLoc={selectedWorkflowRunData.yLoc}\n                    />\n                  ) : (\n                    <div />\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : error ? (\n            <div>\n              <Typography className={classes.waitingText}>\n                {t('analytics.fetchError')}\n              </Typography>\n            </div>\n          ) : (\n            <div className={classes.waitingScreen}>\n              <Typography className={classes.waitingText}>\n                {t('analytics.chaosCompleteWaitingMessage')}\n              </Typography>\n              <Loader />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className={classes.waitingScreen}>\n          <Typography className={classes.waitingText}>\n            {t('analytics.waitingMessage')}\n          </Typography>\n          <Loader />\n        </div>\n      )}\n    </Scaffold>\n  );\n};\n\nexport default AnalyticsPage;\n"]},"metadata":{},"sourceType":"module"}