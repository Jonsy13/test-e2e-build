{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useMutation } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport React, { forwardRef, useImperativeHandle, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CREATE_DASHBOARD, UPDATE_DASHBOARD } from '../../../../../graphql';\nimport { DEFAULT_DASHBOARD_REFRESH_RATE_STRING, DEFAULT_RELATIVE_TIME_RANGE } from '../../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../../redux/actions';\nimport * as AlertActions from '../../../../../redux/actions/alert';\nimport * as DashboardActions from '../../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../../redux/actions/dataSource';\nimport { history } from '../../../../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../../../../utils/getSearchParams';\nimport EditPanelsWizard from './EditPanelsWizard';\nimport useStyles from './styles';\nvar TuneTheQueries = forwardRef(function (_ref, ref) {\n  var isLoading = _ref.isLoading,\n      configure = _ref.configure,\n      activeEditPanelID = _ref.activeEditPanelID,\n      dashboardVars = _ref.dashboardVars;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var alert = useActions(AlertActions);\n  var dashboard = useActions(DashboardActions);\n  var dataSource = useActions(DataSourceActions);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      proceed = _React$useState2[0],\n      setProceed = _React$useState2[1];\n\n  var _useState = useState({\n    selectedPanels: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      updatedDashboardDetails = _useState2[0],\n      setUpdatedDashboardDetails = _useState2[1];\n\n  var onDashboardLoadRoutine = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dbID) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dashboard.selectDashboard({\n                selectedDashboardID: dbID,\n                refreshRate: 0\n              });\n              dataSource.selectDataSource({\n                selectedDataSourceURL: '',\n                selectedDataSourceID: '',\n                selectedDataSourceName: ''\n              });\n              return _context.abrupt(\"return\", true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onDashboardLoadRoutine(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useMutation = useMutation(CREATE_DASHBOARD, {\n    onCompleted: function onCompleted(data) {\n      var _data$createDashBoard, _data$createDashBoard2;\n\n      isLoading(false);\n      setProceed(true);\n      onDashboardLoadRoutine((_data$createDashBoard = (_data$createDashBoard2 = data.createDashBoard) === null || _data$createDashBoard2 === void 0 ? void 0 : _data$createDashBoard2.db_id) !== null && _data$createDashBoard !== void 0 ? _data$createDashBoard : '').then(function () {\n        history.push({\n          pathname: '/analytics/application-dashboard',\n          search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n        });\n      });\n    },\n    onError: function onError() {\n      alert.changeAlertState(true);\n      isLoading(false);\n      setProceed(false);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createDashboard = _useMutation2[0];\n\n  var _useMutation3 = useMutation(UPDATE_DASHBOARD, {\n    onCompleted: function onCompleted() {\n      var _dashboardVars$id;\n\n      isLoading(false);\n      setProceed(true);\n      onDashboardLoadRoutine((_dashboardVars$id = dashboardVars.id) !== null && _dashboardVars$id !== void 0 ? _dashboardVars$id : '').then(function () {\n        history.push({\n          pathname: '/analytics/application-dashboard',\n          search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n        });\n      });\n    },\n    onError: function onError() {\n      alert.changeAlertState(true);\n      isLoading(false);\n      setProceed(false);\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateDashboard = _useMutation4[0];\n\n  var getPanelGroups = function getPanelGroups() {\n    var _updatedDashboardDeta2;\n\n    if (configure === false) {\n      var _updatedDashboardDeta;\n\n      var _panelGroups = [];\n      (_updatedDashboardDeta = updatedDashboardDetails.selectedPanels) === null || _updatedDashboardDeta === void 0 ? void 0 : _updatedDashboardDeta.forEach(function (panelDetails) {\n        var panelQueries = [];\n        panelDetails.prom_queries.forEach(function (query) {\n          panelQueries.push({\n            queryid: query.queryid,\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area\n          });\n        });\n        var panel = {\n          prom_queries: panelQueries,\n          panel_options: panelDetails.panel_options,\n          panel_name: panelDetails.panel_name,\n          y_axis_left: panelDetails.y_axis_left,\n          y_axis_right: panelDetails.y_axis_right,\n          x_axis_down: panelDetails.x_axis_down,\n          unit: panelDetails.unit\n        };\n        var panelGroupFound = false;\n\n        _panelGroups.forEach(function (panelGroup, index) {\n          if (panelGroup.panel_group_name === panelDetails.panel_group_name) {\n            _panelGroups[index].panels.push(panel);\n\n            panelGroupFound = true;\n          }\n        });\n\n        if (!panelGroupFound) {\n          var _panelDetails$panel_g;\n\n          _panelGroups.push({\n            panel_group_name: (_panelDetails$panel_g = panelDetails.panel_group_name) !== null && _panelDetails$panel_g !== void 0 ? _panelDetails$panel_g : '',\n            panels: [panel]\n          });\n        }\n      });\n      return _panelGroups;\n    }\n\n    var panelGroups = [];\n    (_updatedDashboardDeta2 = updatedDashboardDetails.selectedPanels) === null || _updatedDashboardDeta2 === void 0 ? void 0 : _updatedDashboardDeta2.forEach(function (panelDetails) {\n      var _panelDetails$panel_i, _panelDetails$created, _panelDetails$panel_g2;\n\n      var panelQueries = [];\n      panelDetails.prom_queries.forEach(function (query) {\n        panelQueries.push({\n          queryid: query.queryid,\n          prom_query_name: query.prom_query_name,\n          legend: query.legend,\n          resolution: query.resolution,\n          minstep: query.minstep,\n          line: query.line,\n          close_area: query.close_area\n        });\n      });\n      var panel = {\n        panel_id: (_panelDetails$panel_i = panelDetails.panel_id) !== null && _panelDetails$panel_i !== void 0 ? _panelDetails$panel_i : '',\n        created_at: (_panelDetails$created = panelDetails.created_at) !== null && _panelDetails$created !== void 0 ? _panelDetails$created : '',\n        panel_group_id: (_panelDetails$panel_g2 = panelDetails.panel_group_id) !== null && _panelDetails$panel_g2 !== void 0 ? _panelDetails$panel_g2 : '',\n        prom_queries: panelQueries,\n        panel_options: panelDetails.panel_options,\n        panel_name: panelDetails.panel_name,\n        y_axis_left: panelDetails.y_axis_left,\n        y_axis_right: panelDetails.y_axis_right,\n        x_axis_down: panelDetails.x_axis_down,\n        unit: panelDetails.unit\n      };\n      var panelGroupFound = false;\n      panelGroups.forEach(function (panelGroup, index) {\n        if (panelGroup.panel_group_name === panelDetails.panel_group_name) {\n          if (panelDetails.panel_group_id !== panelGroup.panel_group_id) {\n            panel.panel_group_id = panelGroup.panel_group_id;\n          }\n\n          panelGroups[index].panels.push(panel);\n          panelGroupFound = true;\n        }\n      });\n\n      if (!panelGroupFound) {\n        var _panelDetails$panel_g3, _panelDetails$panel_g4;\n\n        panelGroups.push({\n          panel_group_id: (_panelDetails$panel_g3 = panelDetails.panel_group_id) !== null && _panelDetails$panel_g3 !== void 0 ? _panelDetails$panel_g3 : '',\n          panel_group_name: (_panelDetails$panel_g4 = panelDetails.panel_group_name) !== null && _panelDetails$panel_g4 !== void 0 ? _panelDetails$panel_g4 : '',\n          panels: [panel]\n        });\n      }\n    });\n    return panelGroups;\n  };\n\n  var handleCreateMutation = function handleCreateMutation() {\n    var _dashboardVars$dataSo, _dashboardVars$name, _dashboardVars$dashbo, _dashboardVars$dashbo2, _dashboardVars$inform, _dashboardVars$chaosE, _dashboardVars$chaosV, _dashboardVars$applic, _dashboardVars$agentI;\n\n    isLoading(true);\n    var dashboardInput = {\n      ds_id: (_dashboardVars$dataSo = dashboardVars.dataSourceID) !== null && _dashboardVars$dataSo !== void 0 ? _dashboardVars$dataSo : '',\n      db_name: (_dashboardVars$name = dashboardVars.name) !== null && _dashboardVars$name !== void 0 ? _dashboardVars$name : '',\n      db_type_id: (_dashboardVars$dashbo = dashboardVars.dashboardTypeID) !== null && _dashboardVars$dashbo !== void 0 ? _dashboardVars$dashbo : '',\n      db_type_name: (_dashboardVars$dashbo2 = dashboardVars.dashboardTypeName) !== null && _dashboardVars$dashbo2 !== void 0 ? _dashboardVars$dashbo2 : '',\n      db_information: (_dashboardVars$inform = dashboardVars.information) !== null && _dashboardVars$inform !== void 0 ? _dashboardVars$inform : '',\n      chaos_event_query_template: (_dashboardVars$chaosE = dashboardVars.chaosEventQueryTemplate) !== null && _dashboardVars$chaosE !== void 0 ? _dashboardVars$chaosE : '',\n      chaos_verdict_query_template: (_dashboardVars$chaosV = dashboardVars.chaosVerdictQueryTemplate) !== null && _dashboardVars$chaosV !== void 0 ? _dashboardVars$chaosV : '',\n      application_metadata_map: (_dashboardVars$applic = dashboardVars.applicationMetadataMap) !== null && _dashboardVars$applic !== void 0 ? _dashboardVars$applic : [],\n      panel_groups: getPanelGroups(),\n      end_time: \"\".concat(Math.round(new Date().getTime() / 1000)),\n      start_time: \"\".concat(Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE),\n      project_id: projectID,\n      cluster_id: (_dashboardVars$agentI = dashboardVars.agentID) !== null && _dashboardVars$agentI !== void 0 ? _dashboardVars$agentI : '',\n      refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING\n    };\n    createDashboard({\n      variables: {\n        createDBInput: dashboardInput\n      }\n    });\n  };\n\n  var handleUpdateMutation = function handleUpdateMutation() {\n    var _dashboardVars$id2, _dashboardVars$dataSo2, _dashboardVars$name2, _dashboardVars$dashbo3, _dashboardVars$dashbo4, _dashboardVars$inform2, _dashboardVars$chaosE2, _dashboardVars$chaosV2, _dashboardVars$applic2, _dashboardVars$agentI2;\n\n    isLoading(true);\n    var dashboardInput = {\n      db_id: (_dashboardVars$id2 = dashboardVars.id) !== null && _dashboardVars$id2 !== void 0 ? _dashboardVars$id2 : '',\n      ds_id: (_dashboardVars$dataSo2 = dashboardVars.dataSourceID) !== null && _dashboardVars$dataSo2 !== void 0 ? _dashboardVars$dataSo2 : '',\n      db_name: (_dashboardVars$name2 = dashboardVars.name) !== null && _dashboardVars$name2 !== void 0 ? _dashboardVars$name2 : '',\n      db_type_id: (_dashboardVars$dashbo3 = dashboardVars.dashboardTypeID) !== null && _dashboardVars$dashbo3 !== void 0 ? _dashboardVars$dashbo3 : '',\n      db_type_name: (_dashboardVars$dashbo4 = dashboardVars.dashboardTypeName) !== null && _dashboardVars$dashbo4 !== void 0 ? _dashboardVars$dashbo4 : '',\n      db_information: (_dashboardVars$inform2 = dashboardVars.information) !== null && _dashboardVars$inform2 !== void 0 ? _dashboardVars$inform2 : '',\n      chaos_event_query_template: (_dashboardVars$chaosE2 = dashboardVars.chaosEventQueryTemplate) !== null && _dashboardVars$chaosE2 !== void 0 ? _dashboardVars$chaosE2 : '',\n      chaos_verdict_query_template: (_dashboardVars$chaosV2 = dashboardVars.chaosVerdictQueryTemplate) !== null && _dashboardVars$chaosV2 !== void 0 ? _dashboardVars$chaosV2 : '',\n      application_metadata_map: (_dashboardVars$applic2 = dashboardVars.applicationMetadataMap) !== null && _dashboardVars$applic2 !== void 0 ? _dashboardVars$applic2 : [],\n      panel_groups: getPanelGroups(),\n      end_time: \"\".concat(Math.round(new Date().getTime() / 1000)),\n      start_time: \"\".concat(Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE),\n      refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n      cluster_id: (_dashboardVars$agentI2 = dashboardVars.agentID) !== null && _dashboardVars$agentI2 !== void 0 ? _dashboardVars$agentI2 : ''\n    };\n    updateDashboard({\n      variables: {\n        updateDBInput: dashboardInput\n      }\n    });\n  };\n\n  function onNext() {\n    if (configure) {\n      handleUpdateMutation();\n    } else {\n      handleCreateMutation();\n    }\n\n    return proceed;\n  }\n\n  useImperativeHandle(ref, function () {\n    return {\n      onNext: onNext\n    };\n  });\n\n  var CallbackToSetPanels = function CallbackToSetPanels(panels) {\n    setUpdatedDashboardDetails({\n      selectedPanels: panels\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.header')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.applicationDashboards.tuneTheQueries.description')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editPanelsWizard,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EditPanelsWizard, {\n    configure: configure,\n    activeEditPanelID: activeEditPanelID,\n    dashboardVars: dashboardVars,\n    CallbackToSetPanels: CallbackToSetPanels,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  })));\n});\nexport default TuneTheQueries;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/index.tsx"],"names":["useMutation","Typography","React","forwardRef","useImperativeHandle","useState","useTranslation","CREATE_DASHBOARD","UPDATE_DASHBOARD","DEFAULT_DASHBOARD_REFRESH_RATE_STRING","DEFAULT_RELATIVE_TIME_RANGE","useActions","AlertActions","DashboardActions","DataSourceActions","history","getProjectID","getProjectRole","EditPanelsWizard","useStyles","TuneTheQueries","ref","isLoading","configure","activeEditPanelID","dashboardVars","classes","t","projectID","projectRole","alert","dashboard","dataSource","proceed","setProceed","selectedPanels","updatedDashboardDetails","setUpdatedDashboardDetails","onDashboardLoadRoutine","dbID","selectDashboard","selectedDashboardID","refreshRate","selectDataSource","selectedDataSourceURL","selectedDataSourceID","selectedDataSourceName","onCompleted","data","createDashBoard","db_id","then","push","pathname","search","onError","changeAlertState","createDashboard","id","updateDashboard","getPanelGroups","panelGroups","forEach","panelDetails","panelQueries","prom_queries","query","queryid","prom_query_name","legend","resolution","minstep","line","close_area","panel","panel_options","panel_name","y_axis_left","y_axis_right","x_axis_down","unit","panelGroupFound","panelGroup","index","panel_group_name","panels","panel_id","created_at","panel_group_id","handleCreateMutation","dashboardInput","ds_id","dataSourceID","db_name","name","db_type_id","dashboardTypeID","db_type_name","dashboardTypeName","db_information","information","chaos_event_query_template","chaosEventQueryTemplate","chaos_verdict_query_template","chaosVerdictQueryTemplate","application_metadata_map","applicationMetadataMap","panel_groups","end_time","Math","round","Date","getTime","start_time","project_id","cluster_id","agentID","refresh_rate","variables","createDBInput","handleUpdateMutation","updateDBInput","onNext","CallbackToSetPanels","root","heading","description","editPanelsWizard"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useMutation } from '@apollo/client';\nimport { Typography } from '@material-ui/core';\nimport React, { forwardRef, useImperativeHandle, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CREATE_DASHBOARD, UPDATE_DASHBOARD } from '../../../../../graphql';\nimport {\n  DashboardDetails,\n  PanelDetails,\n} from '../../../../../models/dashboardsData';\nimport {\n  CreateDashboardInput,\n  Panel,\n  PanelGroup,\n  PromQuery,\n  UpdateDashboardInput,\n  updatePanelGroupInput,\n} from '../../../../../models/graphql/dashboardsDetails';\nimport {\n  DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n  DEFAULT_RELATIVE_TIME_RANGE,\n} from '../../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../../redux/actions';\nimport * as AlertActions from '../../../../../redux/actions/alert';\nimport * as DashboardActions from '../../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../../redux/actions/dataSource';\nimport { history } from '../../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../../utils/getSearchParams';\nimport EditPanelsWizard from './EditPanelsWizard';\nimport useStyles from './styles';\n\ninterface TuneTheQueriesProps {\n  isLoading: (status: boolean) => void;\n  configure: boolean;\n  activeEditPanelID: string;\n  dashboardVars: DashboardDetails;\n}\n\nconst TuneTheQueries = forwardRef(\n  (\n    {\n      isLoading,\n      configure,\n      activeEditPanelID,\n      dashboardVars,\n    }: TuneTheQueriesProps,\n    ref\n  ) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const projectID = getProjectID();\n    const projectRole = getProjectRole();\n    const alert = useActions(AlertActions);\n    const dashboard = useActions(DashboardActions);\n    const dataSource = useActions(DataSourceActions);\n    const [proceed, setProceed] = React.useState<boolean>(false);\n\n    const [updatedDashboardDetails, setUpdatedDashboardDetails] =\n      useState<DashboardDetails>({\n        selectedPanels: [],\n      });\n\n    const onDashboardLoadRoutine = async (dbID: string) => {\n      dashboard.selectDashboard({\n        selectedDashboardID: dbID,\n        refreshRate: 0,\n      });\n      dataSource.selectDataSource({\n        selectedDataSourceURL: '',\n        selectedDataSourceID: '',\n        selectedDataSourceName: '',\n      });\n      return true;\n    };\n\n    const [createDashboard] = useMutation<CreateDashboardInput>(\n      CREATE_DASHBOARD,\n      {\n        onCompleted: (data) => {\n          isLoading(false);\n          setProceed(true);\n          onDashboardLoadRoutine(data.createDashBoard?.db_id ?? '').then(() => {\n            history.push({\n              pathname: '/analytics/application-dashboard',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          });\n        },\n        onError: () => {\n          alert.changeAlertState(true);\n          isLoading(false);\n          setProceed(false);\n        },\n      }\n    );\n    const [updateDashboard] = useMutation<UpdateDashboardInput>(\n      UPDATE_DASHBOARD,\n      {\n        onCompleted: () => {\n          isLoading(false);\n          setProceed(true);\n          onDashboardLoadRoutine(dashboardVars.id ?? '').then(() => {\n            history.push({\n              pathname: '/analytics/application-dashboard',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          });\n        },\n        onError: () => {\n          alert.changeAlertState(true);\n          isLoading(false);\n          setProceed(false);\n        },\n      }\n    );\n\n    const getPanelGroups = () => {\n      if (configure === false) {\n        const panelGroups: PanelGroup[] = [];\n        updatedDashboardDetails.selectedPanels?.forEach((panelDetails) => {\n          const panelQueries: PromQuery[] = [];\n          panelDetails.prom_queries.forEach((query) => {\n            panelQueries.push({\n              queryid: query.queryid,\n              prom_query_name: query.prom_query_name,\n              legend: query.legend,\n              resolution: query.resolution,\n              minstep: query.minstep,\n              line: query.line,\n              close_area: query.close_area,\n            });\n          });\n          const panel: Panel = {\n            prom_queries: panelQueries,\n            panel_options: panelDetails.panel_options,\n            panel_name: panelDetails.panel_name,\n            y_axis_left: panelDetails.y_axis_left,\n            y_axis_right: panelDetails.y_axis_right,\n            x_axis_down: panelDetails.x_axis_down,\n            unit: panelDetails.unit,\n          };\n          let panelGroupFound = false;\n          panelGroups.forEach((panelGroup, index) => {\n            if (panelGroup.panel_group_name === panelDetails.panel_group_name) {\n              panelGroups[index].panels.push(panel);\n              panelGroupFound = true;\n            }\n          });\n          if (!panelGroupFound) {\n            panelGroups.push({\n              panel_group_name: panelDetails.panel_group_name ?? '',\n              panels: [panel],\n            });\n          }\n        });\n        return panelGroups;\n      }\n      const panelGroups: updatePanelGroupInput[] = [];\n      updatedDashboardDetails.selectedPanels?.forEach((panelDetails) => {\n        const panelQueries: PromQuery[] = [];\n        panelDetails.prom_queries.forEach((query) => {\n          panelQueries.push({\n            queryid: query.queryid,\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const panel: Panel = {\n          panel_id: panelDetails.panel_id ?? '',\n          created_at: panelDetails.created_at ?? '',\n          panel_group_id: panelDetails.panel_group_id ?? '',\n          prom_queries: panelQueries,\n          panel_options: panelDetails.panel_options,\n          panel_name: panelDetails.panel_name,\n          y_axis_left: panelDetails.y_axis_left,\n          y_axis_right: panelDetails.y_axis_right,\n          x_axis_down: panelDetails.x_axis_down,\n          unit: panelDetails.unit,\n        };\n        let panelGroupFound = false;\n        panelGroups.forEach((panelGroup, index) => {\n          if (panelGroup.panel_group_name === panelDetails.panel_group_name) {\n            if (panelDetails.panel_group_id !== panelGroup.panel_group_id) {\n              panel.panel_group_id = panelGroup.panel_group_id;\n            }\n            panelGroups[index].panels.push(panel);\n            panelGroupFound = true;\n          }\n        });\n        if (!panelGroupFound) {\n          panelGroups.push({\n            panel_group_id: panelDetails.panel_group_id ?? '',\n            panel_group_name: panelDetails.panel_group_name ?? '',\n            panels: [panel],\n          });\n        }\n      });\n      return panelGroups;\n    };\n\n    const handleCreateMutation = () => {\n      isLoading(true);\n      const dashboardInput = {\n        ds_id: dashboardVars.dataSourceID ?? '',\n        db_name: dashboardVars.name ?? '',\n        db_type_id: dashboardVars.dashboardTypeID ?? '',\n        db_type_name: dashboardVars.dashboardTypeName ?? '',\n        db_information: dashboardVars.information ?? '',\n        chaos_event_query_template: dashboardVars.chaosEventQueryTemplate ?? '',\n        chaos_verdict_query_template:\n          dashboardVars.chaosVerdictQueryTemplate ?? '',\n        application_metadata_map: dashboardVars.applicationMetadataMap ?? [],\n        panel_groups: getPanelGroups(),\n        end_time: `${Math.round(new Date().getTime() / 1000)}`,\n        start_time: `${\n          Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE\n        }`,\n        project_id: projectID,\n        cluster_id: dashboardVars.agentID ?? '',\n        refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n      };\n      createDashboard({\n        variables: { createDBInput: dashboardInput },\n      });\n    };\n\n    const handleUpdateMutation = () => {\n      isLoading(true);\n      const dashboardInput = {\n        db_id: dashboardVars.id ?? '',\n        ds_id: dashboardVars.dataSourceID ?? '',\n        db_name: dashboardVars.name ?? '',\n        db_type_id: dashboardVars.dashboardTypeID ?? '',\n        db_type_name: dashboardVars.dashboardTypeName ?? '',\n        db_information: dashboardVars.information ?? '',\n        chaos_event_query_template: dashboardVars.chaosEventQueryTemplate ?? '',\n        chaos_verdict_query_template:\n          dashboardVars.chaosVerdictQueryTemplate ?? '',\n        application_metadata_map: dashboardVars.applicationMetadataMap ?? [],\n        panel_groups: getPanelGroups(),\n        end_time: `${Math.round(new Date().getTime() / 1000)}`,\n        start_time: `${\n          Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE\n        }`,\n        refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n        cluster_id: dashboardVars.agentID ?? '',\n      };\n      updateDashboard({\n        variables: { updateDBInput: dashboardInput },\n      });\n    };\n\n    function onNext() {\n      if (configure) {\n        handleUpdateMutation();\n      } else {\n        handleCreateMutation();\n      }\n      return proceed;\n    }\n\n    useImperativeHandle(ref, () => ({\n      onNext,\n    }));\n\n    const CallbackToSetPanels = (panels: PanelDetails[]) => {\n      setUpdatedDashboardDetails({ selectedPanels: panels });\n    };\n\n    return (\n      <div className={classes.root}>\n        <Typography className={classes.heading}>\n          {t('analyticsDashboard.applicationDashboards.tuneTheQueries.header')}\n        </Typography>\n        <Typography className={classes.description}>\n          {t(\n            'analyticsDashboard.applicationDashboards.tuneTheQueries.description'\n          )}\n        </Typography>\n        <div className={classes.editPanelsWizard}>\n          <EditPanelsWizard\n            configure={configure}\n            activeEditPanelID={activeEditPanelID}\n            dashboardVars={dashboardVars}\n            CallbackToSetPanels={CallbackToSetPanels}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default TuneTheQueries;\n"]},"metadata":{},"sourceType":"module"}