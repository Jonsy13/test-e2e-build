{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/index.tsx\";\n\nimport { useLazyQuery } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, ButtonOutlined, Modal } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { forwardRef, useEffect, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport YAML from 'yaml';\nimport YamlEditor from '../../../components/YamlEditor/Editor';\nimport Row from '../../../containers/layouts/Row';\nimport Width from '../../../containers/layouts/Width';\nimport { GET_CHARTS_DATA, GET_ENGINE_YAML, GET_EXPERIMENT_YAML, GET_PREDEFINED_EXPERIMENT_YAML, GET_TEMPLATE_BY_ID } from '../../../graphql/queries';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport capitalize from '../../../utils/capitalize';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport { fetchWorkflowNameFromManifest, updateEngineName, updateManifestImage, updateNamespace } from '../../../utils/yamlUtils';\nimport AddExperimentModal from './AddExperimentModal';\nimport useStyles from './styles';\nimport WorkflowPreview from './WorkflowPreview';\nimport WorkflowSequence from './WorkflowSequence';\nimport WorkflowTable from './WorkflowTable';\nvar TuneWorkflow = forwardRef(function (_, ref) {\n  var classes = useStyles();\n  var childRef = useRef();\n  /**\n   * State Variables for Tune Workflow\n   */\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      hubName = _useState2[0],\n      setHubName = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      experiment = _useState4[0],\n      setExperiment = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allExperiments = _useState6[0],\n      setAllExperiments = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedRadio = _useState8[0],\n      setSelectedRadio = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedExp = _useState10[0],\n      setSelectedExp = _useState10[1];\n\n  var selectedProjectID = getProjectID();\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      addExpModal = _useState12[0],\n      setAddExpModal = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      editManifest = _useState14[0],\n      setEditManifest = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      confirmEdit = _useState16[0],\n      setConfirmEdit = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      isAlertOpen = _useState18[0],\n      setIsAlertOpen = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      isEditorSaveAlertOpen = _useState20[0],\n      setIsEditorSaveAlertOpen = _useState20[1];\n\n  var _useState21 = useState(true),\n      _useState22 = _slicedToArray(_useState21, 2),\n      yamlValid = _useState22[0],\n      setYamlValid = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      editSequence = _useState24[0],\n      setEditSequence = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      isVisualizationComplete = _useState26[0],\n      setIsVisualizationComplete = _useState26[1];\n\n  var _useState27 = useState({}),\n      _useState28 = _slicedToArray(_useState27, 2),\n      steps = _useState28[0],\n      setSteps = _useState28[1];\n\n  var _useState29 = useState({\n    name: '',\n    crd: '',\n    description: ''\n  }),\n      _useState30 = _slicedToArray(_useState29, 2),\n      workflow = _useState30[0],\n      setWorkflow = _useState30[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.workflowManifest;\n  }),\n      manifest = _useSelector.manifest,\n      isCustomWorkflow = _useSelector.isCustomWorkflow;\n\n  var imageRegistryData = useSelector(function (state) {\n    return state.selectedImageRegistry;\n  });\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.workflowData;\n  }),\n      namespace = _useSelector2.namespace;\n\n  var _useState31 = useState(false),\n      _useState32 = _slicedToArray(_useState31, 2),\n      YAMLModal = _useState32[0],\n      setYAMLModal = _useState32[1];\n  /**\n   * Actions\n   */\n\n\n  var workflowAction = useActions(WorkflowActions);\n  var alert = useActions(AlertActions);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n  /**\n   * Graphql query to get charts\n   */\n\n\n  var _useLazyQuery = useLazyQuery(GET_CHARTS_DATA, {\n    onCompleted: function onCompleted(data) {\n      var allExp = [];\n      data.getCharts.forEach(function (data) {\n        var _data$Spec$Experiment;\n\n        return (_data$Spec$Experiment = data.Spec.Experiments) === null || _data$Spec$Experiment === void 0 ? void 0 : _data$Spec$Experiment.forEach(function (experiment) {\n          allExp.push({\n            ChaosName: data.Metadata.Name,\n            ExperimentName: experiment\n          });\n        });\n      });\n      setAllExperiments([].concat(allExp));\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getCharts = _useLazyQuery2[0];\n  /**\n   * This query fetches the manifest for pre-defined workflows\n   */\n\n\n  var _useLazyQuery3 = useLazyQuery(GET_PREDEFINED_EXPERIMENT_YAML, {\n    onCompleted: function onCompleted(data) {\n      var wfmanifest = updateEngineName(YAML.parse(data.GetPredefinedExperimentYAML));\n      var updatedManifestImage = updateManifestImage(YAML.parse(wfmanifest), imageRegistryData);\n      var updatedManifest = updateNamespace(updatedManifestImage, namespace);\n      workflowAction.setWorkflowManifest({\n        manifest: YAML.stringify(updatedManifest)\n      });\n    }\n  }),\n      _useLazyQuery4 = _slicedToArray(_useLazyQuery3, 1),\n      getPredefinedExperimentYaml = _useLazyQuery4[0];\n  /**\n   * Graphql query to get the templates list\n   */\n\n\n  var _useLazyQuery5 = useLazyQuery(GET_TEMPLATE_BY_ID, {\n    onCompleted: function onCompleted(data) {\n      var parsedYAML = YAML.parse(data.GetTemplateManifestByID.manifest);\n      var updatedManifestImage = updateManifestImage(parsedYAML, imageRegistryData);\n      var updatedManifest = updateNamespace(YAML.parse(updatedManifestImage), namespace);\n      workflowAction.setWorkflowManifest({\n        manifest: YAML.stringify(updatedManifest)\n      });\n    }\n  }),\n      _useLazyQuery6 = _slicedToArray(_useLazyQuery5, 1),\n      getTemplate = _useLazyQuery6[0];\n\n  var _useState33 = useState(''),\n      _useState34 = _slicedToArray(_useState33, 2),\n      installAllExp = _useState34[0],\n      setInstallAllExp = _useState34[1];\n\n  useLayoutEffect(function () {\n    localforage.getItem('selectedScheduleOption').then(function (value) {\n      return value !== null && setSelectedRadio(value.selected);\n    });\n  }, []);\n\n  var handleEditSequenceRender = function handleEditSequenceRender(state) {\n    setIsVisualizationComplete(state);\n  };\n  /**\n   * Default Manifest Template\n   */\n\n\n  var yamlTemplate = {\n    apiVersion: 'argoproj.io/v1alpha1',\n    kind: 'Workflow',\n    metadata: {\n      name: \"\".concat(workflow.name, \"-\").concat(Math.round(new Date().getTime() / 1000)),\n      namespace: namespace\n    },\n    spec: {\n      arguments: {\n        parameters: [{\n          name: 'adminModeNamespace',\n          value: namespace\n        }]\n      },\n      entrypoint: 'custom-chaos',\n      securityContext: {\n        runAsNonRoot: true,\n        runAsUser: 1000\n      },\n      serviceAccountName: 'argo-chaos',\n      templates: [{\n        name: 'custom-chaos',\n        steps: [[{\n          name: 'install-chaos-experiments',\n          template: 'install-chaos-experiments'\n        }]]\n      }, {\n        name: 'install-chaos-experiments',\n        inputs: {\n          artifacts: []\n        },\n        container: {\n          args: [\"\".concat(installAllExp)],\n          command: ['sh', '-c'],\n          image: 'litmuschaos/k8s:latest'\n        }\n      }]\n    }\n  };\n  /**\n   * Generated YAML for custom workflows\n   */\n\n  var _useState35 = useState(manifest === '' ? yamlTemplate : YAML.parse(manifest)),\n      _useState36 = _slicedToArray(_useState35, 2),\n      generatedYAML = _useState36[0],\n      setGeneratedYAML = _useState36[1];\n  /**\n   * Index DB Fetching for extracting selected Button and Workflow Details\n   */\n\n\n  var getSelectedWorkflowDetails = function getSelectedWorkflowDetails() {\n    localforage.getItem('selectedScheduleOption').then(function (value) {\n      localforage.getItem('workflow').then(function (wfDetails) {\n        if (wfDetails) {\n          setWorkflow({\n            name: wfDetails.name,\n            crd: wfDetails.CRDLink,\n            description: wfDetails.description\n          });\n        }\n      });\n      /**\n       * Setting default data when MyHub is selected\n       */\n\n      if (value !== null && value.selected === 'A') {\n        localforage.getItem('workflow').then(function (value) {\n          if (value !== null && value.CRDLink !== '' && manifest === '')\n            /**\n             * Get Pre-defined experiment YAML of the selected hub\n             */\n            localforage.getItem('selectedHub').then(function (hub) {\n              getPredefinedExperimentYaml({\n                variables: {\n                  experimentInput: {\n                    ProjectID: selectedProjectID,\n                    ChartName: '',\n                    ExperimentName: value.CRDLink,\n                    HubName: hub,\n                    FileType: ''\n                  }\n                }\n              });\n            });\n        });\n      }\n\n      if (value !== null && value.selected === 'B') {\n        localforage.getItem('selectedScheduleOption').then(function (value) {\n          if (value !== null && value.id !== '' && manifest === '') {\n            getTemplate({\n              variables: {\n                data: value.id\n              }\n            });\n          }\n        });\n      }\n\n      if (value !== null && value.selected === 'C') {\n        localforage.getItem('selectedHub').then(function (hub) {\n          setHubName(hub);\n          getCharts({\n            variables: {\n              projectID: selectedProjectID,\n              HubName: hub\n            }\n          });\n        });\n      }\n    });\n  };\n\n  useEffect(function () {\n    getSelectedWorkflowDetails();\n  }, [manifest]);\n  /**\n   * Graphql Query for fetching Engine YAML\n   */\n\n  var _useLazyQuery7 = useLazyQuery(GET_ENGINE_YAML, {\n    fetchPolicy: 'network-only'\n  }),\n      _useLazyQuery8 = _slicedToArray(_useLazyQuery7, 2),\n      getEngineYaml = _useLazyQuery8[0],\n      _useLazyQuery8$ = _useLazyQuery8[1],\n      engineData = _useLazyQuery8$.data,\n      engineDataLoading = _useLazyQuery8$.loading;\n  /**\n   * Graphql Query for fetching Experiment YAML\n   */\n\n\n  var _useLazyQuery9 = useLazyQuery(GET_EXPERIMENT_YAML, {\n    fetchPolicy: 'network-only'\n  }),\n      _useLazyQuery10 = _slicedToArray(_useLazyQuery9, 2),\n      getExperimentYaml = _useLazyQuery10[0],\n      _useLazyQuery10$ = _useLazyQuery10[1],\n      experimentData = _useLazyQuery10$.data,\n      experimentDataLoading = _useLazyQuery10$.loading;\n  /**\n   * On Clicking the Done button present at Add Experiment Modal this function will get triggered\n   * Click => Done\n   * Function => handleDone()\n   * */\n\n\n  var handleDone = function handleDone() {\n    getExperimentYaml({\n      variables: {\n        experimentInput: {\n          ProjectID: selectedProjectID,\n          HubName: hubName,\n          ChartName: selectedExp.split('/')[0],\n          ExperimentName: selectedExp.split('/')[1],\n          FileType: 'experiment'\n        }\n      }\n    });\n    getEngineYaml({\n      variables: {\n        experimentInput: {\n          ProjectID: selectedProjectID,\n          HubName: hubName,\n          ChartName: selectedExp.split('/')[0],\n          ExperimentName: selectedExp.split('/')[1],\n          FileType: 'engine'\n        }\n      }\n    });\n    setAddExpModal(false);\n  };\n\n  var AlertBox = function AlertBox(_ref) {\n    var message = _ref.message,\n        isOpen = _ref.isOpen,\n        setOpen = _ref.setOpen;\n    return /*#__PURE__*/React.createElement(Snackbar, {\n      open: isOpen,\n      autoHideDuration: 6000,\n      onClose: function onClose() {\n        return setOpen(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      onClose: function onClose() {\n        return setOpen(false);\n      },\n      severity: \"error\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 7\n      }\n    }, message));\n  };\n  /**\n   * UpdateCRD is used to updated the manifest while adding experiments from MyHub\n   */\n\n\n  var updateCRD = function updateCRD(crd, experiment) {\n    var generatedYAML = crd;\n    var installAll = '';\n\n    var modifyYAML = function modifyYAML(link) {\n      var _generatedYAML$spec$t, _generatedYAML$spec$w, _generatedYAML$spec$t2, _generatedYAML$spec$w2;\n\n      var steps = generatedYAML.kind === 'Workflow' ? (_generatedYAML$spec$t = generatedYAML.spec.templates[0]) === null || _generatedYAML$spec$t === void 0 ? void 0 : _generatedYAML$spec$t.steps : (_generatedYAML$spec$w = generatedYAML.spec.workflowSpec.templates[0]) === null || _generatedYAML$spec$w === void 0 ? void 0 : _generatedYAML$spec$w.steps;\n      if (steps !== undefined) steps.push([{\n        name: YAML.parse(link).metadata.name,\n        template: YAML.parse(link).metadata.name\n      }]);\n      installAll = \"\".concat(installAllExp, \"kubectl apply -f /tmp/\").concat(YAML.parse(link).metadata.name, \".yaml -n {{workflow.parameters.adminModeNamespace}} | \");\n      var arg = generatedYAML.kind === 'Workflow' ? (_generatedYAML$spec$t2 = generatedYAML.spec.templates[1]) === null || _generatedYAML$spec$t2 === void 0 ? void 0 : _generatedYAML$spec$t2.container : (_generatedYAML$spec$w2 = generatedYAML.spec.workflowSpec.templates[1]) === null || _generatedYAML$spec$w2 === void 0 ? void 0 : _generatedYAML$spec$w2.container;\n      if (arg !== undefined) arg.args = [\"\".concat(installAll, \" sleep 30\")];\n      setInstallAllExp(installAll);\n    };\n\n    experiment.forEach(function (exp) {\n      modifyYAML(Object.values(exp.Experiment)[0]);\n    });\n    /**\n     * Step to add experiment and engine YAMLs of all experiments\n     */\n\n    experiment.forEach(function (data) {\n      var _generatedYAML$spec$t3, _generatedYAML$spec$w3;\n\n      /**\n       * Adding experiment YAML\n       */\n      var ExperimentYAML = YAML.parse(Object.values(data.Experiment)[0]);\n      var artifacts = generatedYAML.kind === 'Workflow' ? (_generatedYAML$spec$t3 = generatedYAML.spec.templates[1].inputs) === null || _generatedYAML$spec$t3 === void 0 ? void 0 : _generatedYAML$spec$t3.artifacts : (_generatedYAML$spec$w3 = generatedYAML.spec.workflowSpec.templates[1].inputs) === null || _generatedYAML$spec$w3 === void 0 ? void 0 : _generatedYAML$spec$w3.artifacts;\n\n      if (artifacts !== undefined) {\n        artifacts.push({\n          name: ExperimentYAML.metadata.name,\n          path: \"/tmp/\".concat(ExperimentYAML.metadata.name, \".yaml\"),\n          raw: {\n            data: YAML.stringify(ExperimentYAML)\n          }\n        });\n      }\n      /**\n       * Adding engine YAML\n       */\n\n\n      var ChaosEngine = YAML.parse(Object.values(data.ChaosEngine)[0]);\n      var ExpName = YAML.parse(Object.values(data.Experiment)[0]).metadata.name;\n      ChaosEngine.metadata.generateName = \"\".concat(YAML.parse(Object.values(data.Experiment)[0]).metadata.name);\n      delete ChaosEngine.metadata.name;\n      ChaosEngine.metadata.namespace = '{{workflow.parameters.adminModeNamespace}}';\n      ChaosEngine.metadata['labels'] = {\n        instance_id: uuidv4()\n      };\n\n      if (ChaosEngine.spec.jobCleanUpPolicy) {\n        ChaosEngine.spec.jobCleanUpPolicy = 'retain';\n      }\n\n      ChaosEngine.spec.chaosServiceAccount = 'litmus-admin';\n      var templateToBePushed = {\n        name: ExpName,\n        inputs: {\n          artifacts: [{\n            name: ExpName,\n            path: \"/tmp/chaosengine-\".concat(ExpName, \".yaml\"),\n            raw: {\n              data: YAML.stringify(ChaosEngine)\n            }\n          }]\n        },\n        container: {\n          args: [\"-file=/tmp/chaosengine-\".concat(ExpName, \".yaml\"), \"-saveName=/tmp/engine-name\"],\n          image: 'litmuschaos/litmus-checker:latest'\n        }\n      };\n      if (generatedYAML.kind === 'Workflow') generatedYAML.spec.templates.push(templateToBePushed);else generatedYAML.spec.workflowSpec.templates.push(templateToBePushed);\n    });\n    return generatedYAML;\n  };\n  /**\n   * UseEffect to make changes in the generated YAML\n   * when a new experiment is added from MyHub\n   */\n\n\n  useEffect(function () {\n    if (isCustomWorkflow) {\n      var savedManifest = manifest !== '' ? YAML.parse(manifest) : generatedYAML;\n      var updatedManifest = updateCRD(savedManifest, experiment);\n      var updatedManifestImage = updateManifestImage(updatedManifest, imageRegistryData);\n      setGeneratedYAML(YAML.parse(updatedManifestImage));\n      workflowAction.setWorkflowManifest({\n        manifest: updatedManifestImage\n      });\n    }\n  }, [experiment]);\n\n  var saveManifestChanges = function saveManifestChanges() {\n    if (yamlValid) {\n      workflowAction.setWorkflowManifest({\n        manifest: editManifest\n      });\n      setYAMLModal(false);\n    } else {\n      setIsAlertOpen(true);\n    }\n  };\n\n  useEffect(function () {\n    var parsedManifest = manifest !== '' ? YAML.parse(manifest) : generatedYAML;\n    parsedManifest.metadata.name = \"\".concat(workflow.name, \"-\").concat(Math.round(new Date().getTime() / 1000));\n\n    if (manifest.length && selectedRadio === 'C' && parsedManifest.kind === 'Workflow' && parsedManifest.spec.templates[0].steps[parsedManifest.spec.templates[0].steps.length - 1][0].name === 'revert-chaos' && parsedManifest.spec.podGC) {\n      delete parsedManifest.spec.podGC;\n      parsedManifest.spec.templates[0].steps.pop(); // Remove the last step -> Revert Chaos\n\n      parsedManifest.spec.templates.pop(); // Remove the last template -> Revert Chaos Template\n    }\n\n    if (manifest.length && selectedRadio === 'C' && parsedManifest.kind === 'CronWorkflow' && parsedManifest.spec.workflowSpec.templates[0].steps[parsedManifest.spec.workflowSpec.templates[0].steps.length - 1][0].name === 'revert-chaos' && parsedManifest.spec.workflowSpec.podGC) {\n      delete parsedManifest.workflowSpec.spec.podGC;\n      parsedManifest.spec.workflowSpec.templates[0].steps.pop(); // Remove the last step -> Revert Chaos\n\n      parsedManifest.spec.workflowSpec.templates.pop(); // Remove the last template -> Revert Chaos Template\n    }\n\n    workflowAction.setWorkflowManifest({\n      manifest: YAML.stringify(parsedManifest)\n    });\n  }, [manifest, workflow.name]);\n\n  var onModalClose = function onModalClose() {\n    setAddExpModal(false);\n  };\n\n  var onSelectChange = function onSelectChange(e) {\n    setSelectedExp(e.target.value);\n  };\n\n  useEffect(function () {\n    if (engineData !== undefined && experimentData !== undefined) {\n      setExperiment([{\n        ChaosEngine: engineData,\n        Experiment: experimentData\n      }]);\n    }\n  }, [engineDataLoading, experimentDataLoading]);\n\n  function onNext() {\n    if (YAMLModal) {\n      setIsEditorSaveAlertOpen(true);\n      return false;\n    }\n\n    if (childRef.current) {\n      if (childRef.current.onNext() === false) {\n        alert.changeAlertState(true); // Custom Workflow has no experiments\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  var handleSteps = function handleSteps(steps) {\n    setSteps(steps);\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      onNext: onNext\n    };\n  });\n\n  var LeftButtonWrapper = function LeftButtonWrapper() {\n    return /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: function onClick() {\n        setYAMLModal(true);\n        setConfirmEdit(false);\n      },\n      className: classes.editBtn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./icons/viewYAMLicon.svg\",\n      alt: \"view YAML\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Width, {\n      width: \"1rem\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 7\n      }\n    }), \" \", t('createWorkflow.tuneWorkflow.edit'));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AlertBox, {\n    isOpen: isEditorSaveAlertOpen,\n    setOpen: setIsEditorSaveAlertOpen,\n    message: \"Please Save the changes in the editor to proceed forward\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AlertBox, {\n    isOpen: isAlertOpen,\n    setOpen: setIsAlertOpen,\n    message: \"The YAML contains errors, resolve them first to proceed\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 7\n    }\n  }), YAMLModal ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    open: confirmEdit,\n    onClose: function onClose() {},\n    width: \"30rem\",\n    height: \"25rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.confirmDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.confirmText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.tuneWorkflow.confirmText')), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    className: classes.backBtn,\n    disabled: !yamlValid,\n    onClick: function onClick() {\n      setConfirmEdit(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.tuneWorkflow.back')), /*#__PURE__*/React.createElement(ButtonFilled, {\n    className: classes.continueBtn,\n    disabled: !yamlValid,\n    onClick: function onClick() {\n      setYAMLModal(false);\n      setEditManifest('');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.tuneWorkflow.continue')))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editorWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.flex, \" \").concat(classes.additional),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: '2rem'\n    },\n    src: \"./icons/terminal.svg\",\n    alt: \"Terminal Icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 17\n    }\n  }, fetchWorkflowNameFromManifest(manifest), \".yaml\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flex,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      saveManifestChanges();\n    },\n    className: classes.editorTopBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 17\n    }\n  }, \"Save Changes\"), /*#__PURE__*/React.createElement(\"hr\", {\n    style: {\n      margin: '0 1rem',\n      height: '2.5rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      return yamlValid ? setConfirmEdit(true) : setIsAlertOpen(true);\n    },\n    className: classes.editorCloseBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 17\n    }\n  }, \"x\"))), /*#__PURE__*/React.createElement(YamlEditor, {\n    content: manifest,\n    filename: workflow.name,\n    readOnly: false,\n    setButtonState: function setButtonState(btnState) {\n      setYamlValid(btnState);\n    },\n    saveWorkflowChange: function saveWorkflowChange(updatedManifest) {\n      setEditManifest(updatedManifest);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 13\n    }\n  }, t('createWorkflow.tuneWorkflow.header')), /*#__PURE__*/React.createElement(Row, {\n    className: classes.descriptionWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 15\n    }\n  }, selectedRadio === 'A' ? t('createWorkflow.tuneWorkflow.selectedPreDefinedWorkflowInfo') : selectedRadio === 'B' ? t('createWorkflow.tuneWorkflow.selectedTemplateInfo') : selectedRadio === 'C' ? t('createWorkflow.tuneWorkflow.selectedCustomWorkflowInfo') : t('createWorkflow.tuneWorkflow.selectedUploadYAML'), ' ', /*#__PURE__*/React.createElement(\"i\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 19\n    }\n  }, workflow.name.split('-').map(function (text) {\n    return \"\".concat(capitalize(text), \" \");\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 17\n    }\n  }), t('createWorkflow.tuneWorkflow.description')), selectedRadio === 'C' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerBtn,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 17\n    }\n  }, LeftButtonWrapper(), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      setSelectedExp('');\n      setAddExpModal(true);\n    },\n    \"data-cy\": \"addExperimentButton\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.tuneWorkflow.addANewExperiment'))) : /*#__PURE__*/React.createElement(React.Fragment, null, LeftButtonWrapper()))), /*#__PURE__*/React.createElement(AddExperimentModal, {\n    addExpModal: addExpModal,\n    onModalClose: onModalClose,\n    hubName: hubName,\n    selectedExp: selectedExp,\n    onSelectChange: onSelectChange,\n    allExperiments: allExperiments,\n    handleDone: handleDone,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.experimentWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 11\n    }\n  }, manifest !== '' && /*#__PURE__*/React.createElement(ButtonOutlined, {\n    disabled: isVisualizationComplete,\n    onClick: function onClick() {\n      return setEditSequence(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/editsequence.svg\",\n    alt: \"Edit Sequence\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 17\n    }\n  }), ' ', /*#__PURE__*/React.createElement(Width, {\n    width: \"0.5rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 17\n    }\n  }), t('createWorkflow.tuneWorkflow.editSequence')), /*#__PURE__*/React.createElement(Modal, {\n    open: editSequence,\n    onClose: function onClose() {\n      setEditSequence(false);\n    },\n    width: \"60%\",\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: function onClick() {\n        setEditSequence(false);\n      },\n      className: classes.closeBtn,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./icons/cross-disabled.svg\",\n      alt: \"cross\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 19\n      }\n    })),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sequenceMainDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sequenceDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.tuneWorkflow.editSequence')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.dropText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.tuneWorkflow.dragndrop'))), /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Width, {\n    width: \"40%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowPreview, {\n    editSequenceLoader: handleEditSequenceRender,\n    SequenceSteps: steps,\n    isCustomWorkflow: isCustomWorkflow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Width, {\n    width: \"60%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowSequence, {\n    getSteps: handleSteps,\n    handleSequenceModal: function handleSequenceModal(sequenceState) {\n      setEditSequence(sequenceState);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 21\n    }\n  }))))), /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 854,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Width, {\n    width: \"30%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowPreview, {\n    editSequenceLoader: handleEditSequenceRender,\n    isCustomWorkflow: isCustomWorkflow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Width, {\n    width: \"70%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowTable, {\n    ref: childRef,\n    isCustom: isCustomWorkflow,\n    namespace: namespace,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 864,\n      columnNumber: 17\n    }\n  }))))));\n});\nexport default TuneWorkflow;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/index.tsx"],"names":["useLazyQuery","Snackbar","Typography","Alert","ButtonFilled","ButtonOutlined","Modal","localforage","React","forwardRef","useEffect","useImperativeHandle","useLayoutEffect","useRef","useState","useTranslation","useSelector","v4","uuidv4","YAML","YamlEditor","Row","Width","GET_CHARTS_DATA","GET_ENGINE_YAML","GET_EXPERIMENT_YAML","GET_PREDEFINED_EXPERIMENT_YAML","GET_TEMPLATE_BY_ID","useActions","AlertActions","WorkflowActions","capitalize","getProjectID","fetchWorkflowNameFromManifest","updateEngineName","updateManifestImage","updateNamespace","AddExperimentModal","useStyles","WorkflowPreview","WorkflowSequence","WorkflowTable","TuneWorkflow","_","ref","classes","childRef","hubName","setHubName","experiment","setExperiment","allExperiments","setAllExperiments","selectedRadio","setSelectedRadio","selectedExp","setSelectedExp","selectedProjectID","addExpModal","setAddExpModal","editManifest","setEditManifest","confirmEdit","setConfirmEdit","isAlertOpen","setIsAlertOpen","isEditorSaveAlertOpen","setIsEditorSaveAlertOpen","yamlValid","setYamlValid","editSequence","setEditSequence","isVisualizationComplete","setIsVisualizationComplete","steps","setSteps","name","crd","description","workflow","setWorkflow","state","workflowManifest","manifest","isCustomWorkflow","imageRegistryData","selectedImageRegistry","workflowData","namespace","YAMLModal","setYAMLModal","workflowAction","alert","t","onCompleted","data","allExp","getCharts","forEach","Spec","Experiments","push","ChaosName","Metadata","Name","ExperimentName","fetchPolicy","wfmanifest","parse","GetPredefinedExperimentYAML","updatedManifestImage","updatedManifest","setWorkflowManifest","stringify","getPredefinedExperimentYaml","parsedYAML","GetTemplateManifestByID","getTemplate","installAllExp","setInstallAllExp","getItem","then","value","selected","handleEditSequenceRender","yamlTemplate","apiVersion","kind","metadata","Math","round","Date","getTime","spec","arguments","parameters","entrypoint","securityContext","runAsNonRoot","runAsUser","serviceAccountName","templates","template","inputs","artifacts","container","args","command","image","generatedYAML","setGeneratedYAML","getSelectedWorkflowDetails","wfDetails","CRDLink","hub","variables","experimentInput","ProjectID","ChartName","HubName","FileType","id","projectID","getEngineYaml","engineData","engineDataLoading","loading","getExperimentYaml","experimentData","experimentDataLoading","handleDone","split","AlertBox","message","isOpen","setOpen","updateCRD","installAll","modifyYAML","link","workflowSpec","undefined","arg","exp","Object","values","Experiment","ExperimentYAML","path","raw","ChaosEngine","ExpName","generateName","instance_id","jobCleanUpPolicy","chaosServiceAccount","templateToBePushed","savedManifest","saveManifestChanges","parsedManifest","length","podGC","pop","onModalClose","onSelectChange","e","target","onNext","current","changeAlertState","handleSteps","LeftButtonWrapper","editBtn","confirmDiv","confirmText","backBtn","continueBtn","editorWrapper","flex","additional","width","editorTopBtn","margin","height","editorCloseBtn","btnState","root","headerWrapper","heading","descriptionWrapper","map","text","headerBtn","experimentWrapper","closeBtn","sequenceMainDiv","sequenceDiv","dropText","sequenceState"],"mappings":"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","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, ButtonOutlined, Modal } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, {\n  Dispatch,\n  forwardRef,\n  SetStateAction,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport YAML from 'yaml';\nimport YamlEditor from '../../../components/YamlEditor/Editor';\nimport Row from '../../../containers/layouts/Row';\nimport Width from '../../../containers/layouts/Width';\nimport {\n  GET_CHARTS_DATA,\n  GET_ENGINE_YAML,\n  GET_EXPERIMENT_YAML,\n  GET_PREDEFINED_EXPERIMENT_YAML,\n  GET_TEMPLATE_BY_ID,\n} from '../../../graphql/queries';\nimport { ChooseWorkflowRadio } from '../../../models/localforage/radioButton';\nimport { WorkflowDetailsProps } from '../../../models/localforage/workflow';\nimport { CustomYAML } from '../../../models/redux/customyaml';\nimport { Charts } from '../../../models/redux/myhub';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport capitalize from '../../../utils/capitalize';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport {\n  fetchWorkflowNameFromManifest,\n  updateEngineName,\n  updateManifestImage,\n  updateNamespace,\n} from '../../../utils/yamlUtils';\nimport AddExperimentModal from './AddExperimentModal';\nimport useStyles from './styles';\nimport WorkflowPreview from './WorkflowPreview';\nimport WorkflowSequence from './WorkflowSequence';\nimport WorkflowTable from './WorkflowTable';\n\ninterface WorkflowProps {\n  name: string;\n  crd: string;\n  description: string;\n}\n\ninterface WorkflowExperiment {\n  ChaosEngine: string;\n  Experiment: string;\n}\n\ninterface ManifestSteps {\n  name: string;\n  template: string;\n}\n\ninterface StepType {\n  [key: string]: ManifestSteps[];\n}\n\ninterface ChartName {\n  ChaosName: string;\n  ExperimentName: string;\n}\n\ninterface ChildRef {\n  onNext: () => void;\n}\n\ninterface WorkflowExperiment {\n  ChaosEngine: string;\n  Experiment: string;\n}\n\ninterface AlertBoxProps {\n  message: string;\n  isOpen: boolean;\n  setOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst TuneWorkflow = forwardRef((_, ref) => {\n  const classes = useStyles();\n  const childRef = useRef<ChildRef>();\n  /**\n   * State Variables for Tune Workflow\n   */\n  const [hubName, setHubName] = useState<string>('');\n  const [experiment, setExperiment] = useState<WorkflowExperiment[]>([]);\n  const [allExperiments, setAllExperiments] = useState<ChartName[]>([]);\n  const [selectedRadio, setSelectedRadio] = useState<string>('');\n  const [selectedExp, setSelectedExp] = useState('');\n  const selectedProjectID = getProjectID();\n  const [addExpModal, setAddExpModal] = useState(false);\n  const [editManifest, setEditManifest] = useState('');\n  const [confirmEdit, setConfirmEdit] = useState(false);\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [isEditorSaveAlertOpen, setIsEditorSaveAlertOpen] = useState(false);\n  const [yamlValid, setYamlValid] = useState(true);\n  const [editSequence, setEditSequence] = useState(false);\n  const [isVisualizationComplete, setIsVisualizationComplete] =\n    useState<boolean>(false);\n  const [steps, setSteps] = useState<StepType>({});\n  const [workflow, setWorkflow] = useState<WorkflowProps>({\n    name: '',\n    crd: '',\n    description: '',\n  });\n  const { manifest, isCustomWorkflow } = useSelector(\n    (state: RootState) => state.workflowManifest\n  );\n  const imageRegistryData = useSelector(\n    (state: RootState) => state.selectedImageRegistry\n  );\n  const { namespace } = useSelector((state: RootState) => state.workflowData);\n\n  const [YAMLModal, setYAMLModal] = useState<boolean>(false);\n  /**\n   * Actions\n   */\n  const workflowAction = useActions(WorkflowActions);\n  const alert = useActions(AlertActions);\n\n  const { t } = useTranslation();\n\n  /**\n   * Graphql query to get charts\n   */\n  const [getCharts] = useLazyQuery<Charts>(GET_CHARTS_DATA, {\n    onCompleted: (data) => {\n      const allExp: ChartName[] = [];\n      data.getCharts.forEach((data) => {\n        return data.Spec.Experiments?.forEach((experiment) => {\n          allExp.push({\n            ChaosName: data.Metadata.Name,\n            ExperimentName: experiment,\n          });\n        });\n      });\n      setAllExperiments([...allExp]);\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  /**\n   * This query fetches the manifest for pre-defined workflows\n   */\n  const [getPredefinedExperimentYaml] = useLazyQuery(\n    GET_PREDEFINED_EXPERIMENT_YAML,\n    {\n      onCompleted: (data) => {\n        const wfmanifest = updateEngineName(\n          YAML.parse(data.GetPredefinedExperimentYAML)\n        );\n        const updatedManifestImage = updateManifestImage(\n          YAML.parse(wfmanifest),\n          imageRegistryData\n        );\n        const updatedManifest = updateNamespace(\n          updatedManifestImage,\n          namespace\n        );\n        workflowAction.setWorkflowManifest({\n          manifest: YAML.stringify(updatedManifest),\n        });\n      },\n    }\n  );\n\n  /**\n   * Graphql query to get the templates list\n   */\n  const [getTemplate] = useLazyQuery(GET_TEMPLATE_BY_ID, {\n    onCompleted: (data) => {\n      const parsedYAML = YAML.parse(data.GetTemplateManifestByID.manifest);\n      const updatedManifestImage = updateManifestImage(\n        parsedYAML,\n        imageRegistryData\n      );\n      const updatedManifest = updateNamespace(\n        YAML.parse(updatedManifestImage),\n        namespace\n      );\n\n      workflowAction.setWorkflowManifest({\n        manifest: YAML.stringify(updatedManifest),\n      });\n    },\n  });\n\n  const [installAllExp, setInstallAllExp] = useState<string>('');\n\n  useLayoutEffect(() => {\n    localforage\n      .getItem('selectedScheduleOption')\n      .then(\n        (value) =>\n          value !== null &&\n          setSelectedRadio((value as ChooseWorkflowRadio).selected)\n      );\n  }, []);\n\n  const handleEditSequenceRender = (state: boolean) => {\n    setIsVisualizationComplete(state);\n  };\n\n  /**\n   * Default Manifest Template\n   */\n  const yamlTemplate: CustomYAML = {\n    apiVersion: 'argoproj.io/v1alpha1',\n    kind: 'Workflow',\n    metadata: {\n      name: `${workflow.name}-${Math.round(new Date().getTime() / 1000)}`,\n      namespace,\n    },\n    spec: {\n      arguments: {\n        parameters: [\n          {\n            name: 'adminModeNamespace',\n            value: namespace,\n          },\n        ],\n      },\n      entrypoint: 'custom-chaos',\n      securityContext: {\n        runAsNonRoot: true,\n        runAsUser: 1000,\n      },\n      serviceAccountName: 'argo-chaos',\n      templates: [\n        {\n          name: 'custom-chaos',\n          steps: [\n            [\n              {\n                name: 'install-chaos-experiments',\n                template: 'install-chaos-experiments',\n              },\n            ],\n          ],\n        },\n        {\n          name: 'install-chaos-experiments',\n          inputs: {\n            artifacts: [],\n          },\n          container: {\n            args: [`${installAllExp}`],\n            command: ['sh', '-c'],\n            image: 'litmuschaos/k8s:latest',\n          },\n        },\n      ],\n    },\n  };\n\n  /**\n   * Generated YAML for custom workflows\n   */\n  const [generatedYAML, setGeneratedYAML] = useState<CustomYAML>(\n    manifest === '' ? yamlTemplate : YAML.parse(manifest)\n  );\n\n  /**\n   * Index DB Fetching for extracting selected Button and Workflow Details\n   */\n  const getSelectedWorkflowDetails = () => {\n    localforage.getItem('selectedScheduleOption').then((value) => {\n      localforage.getItem('workflow').then((wfDetails) => {\n        if (wfDetails) {\n          setWorkflow({\n            name: (wfDetails as WorkflowDetailsProps).name,\n            crd: (wfDetails as WorkflowDetailsProps).CRDLink,\n            description: (wfDetails as WorkflowDetailsProps).description,\n          });\n        }\n      });\n      /**\n       * Setting default data when MyHub is selected\n       */\n      if (value !== null && (value as ChooseWorkflowRadio).selected === 'A') {\n        localforage.getItem('workflow').then((value) => {\n          if (\n            value !== null &&\n            (value as WorkflowDetailsProps).CRDLink !== '' &&\n            manifest === ''\n          )\n            /**\n             * Get Pre-defined experiment YAML of the selected hub\n             */\n            localforage.getItem('selectedHub').then((hub) => {\n              getPredefinedExperimentYaml({\n                variables: {\n                  experimentInput: {\n                    ProjectID: selectedProjectID,\n                    ChartName: '',\n                    ExperimentName: (value as WorkflowDetailsProps).CRDLink,\n                    HubName: hub as string,\n                    FileType: '',\n                  },\n                },\n              });\n            });\n        });\n      }\n      if (value !== null && (value as ChooseWorkflowRadio).selected === 'B') {\n        localforage.getItem('selectedScheduleOption').then((value) => {\n          if (\n            value !== null &&\n            (value as ChooseWorkflowRadio).id !== '' &&\n            manifest === ''\n          ) {\n            getTemplate({\n              variables: {\n                data: (value as ChooseWorkflowRadio).id,\n              },\n            });\n          }\n        });\n      }\n      if (value !== null && (value as ChooseWorkflowRadio).selected === 'C') {\n        localforage.getItem('selectedHub').then((hub) => {\n          setHubName(hub as string);\n          getCharts({\n            variables: { projectID: selectedProjectID, HubName: hub as string },\n          });\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    getSelectedWorkflowDetails();\n  }, [manifest]);\n\n  /**\n   * Graphql Query for fetching Engine YAML\n   */\n  const [getEngineYaml, { data: engineData, loading: engineDataLoading }] =\n    useLazyQuery(GET_ENGINE_YAML, {\n      fetchPolicy: 'network-only',\n    });\n\n  /**\n   * Graphql Query for fetching Experiment YAML\n   */\n  const [\n    getExperimentYaml,\n    { data: experimentData, loading: experimentDataLoading },\n  ] = useLazyQuery(GET_EXPERIMENT_YAML, {\n    fetchPolicy: 'network-only',\n  });\n\n  /**\n   * On Clicking the Done button present at Add Experiment Modal this function will get triggered\n   * Click => Done\n   * Function => handleDone()\n   * */\n  const handleDone = () => {\n    getExperimentYaml({\n      variables: {\n        experimentInput: {\n          ProjectID: selectedProjectID,\n          HubName: hubName,\n          ChartName: selectedExp.split('/')[0],\n          ExperimentName: selectedExp.split('/')[1],\n          FileType: 'experiment',\n        },\n      },\n    });\n    getEngineYaml({\n      variables: {\n        experimentInput: {\n          ProjectID: selectedProjectID,\n          HubName: hubName,\n          ChartName: selectedExp.split('/')[0],\n          ExperimentName: selectedExp.split('/')[1],\n          FileType: 'engine',\n        },\n      },\n    });\n\n    setAddExpModal(false);\n  };\n\n  const AlertBox: React.FC<AlertBoxProps> = ({ message, isOpen, setOpen }) => (\n    <Snackbar\n      open={isOpen}\n      autoHideDuration={6000}\n      onClose={() => setOpen(false)}\n    >\n      <Alert onClose={() => setOpen(false)} severity=\"error\">\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n\n  /**\n   * UpdateCRD is used to updated the manifest while adding experiments from MyHub\n   */\n  const updateCRD = (crd: CustomYAML, experiment: WorkflowExperiment[]) => {\n    const generatedYAML: CustomYAML = crd;\n    let installAll = '';\n    const modifyYAML = (link: string) => {\n      const steps =\n        generatedYAML.kind === 'Workflow'\n          ? generatedYAML.spec.templates[0]?.steps\n          : generatedYAML.spec.workflowSpec.templates[0]?.steps;\n      if (steps !== undefined)\n        steps.push([\n          {\n            name: YAML.parse(link as string).metadata.name,\n            template: YAML.parse(link as string).metadata.name,\n          },\n        ]);\n      installAll = `${installAllExp}kubectl apply -f /tmp/${\n        YAML.parse(link as string).metadata.name\n      }.yaml -n {{workflow.parameters.adminModeNamespace}} | `;\n      const arg =\n        generatedYAML.kind === 'Workflow'\n          ? generatedYAML.spec.templates[1]?.container\n          : generatedYAML.spec.workflowSpec.templates[1]?.container;\n      if (arg !== undefined) arg.args = [`${installAll} sleep 30`];\n      setInstallAllExp(installAll);\n    };\n\n    experiment.forEach((exp) => {\n      modifyYAML(Object.values(exp.Experiment)[0]);\n    });\n\n    /**\n     * Step to add experiment and engine YAMLs of all experiments\n     */\n    experiment.forEach((data) => {\n      /**\n       * Adding experiment YAML\n       */\n      const ExperimentYAML = YAML.parse(Object.values(data.Experiment)[0]);\n      const artifacts =\n        generatedYAML.kind === 'Workflow'\n          ? generatedYAML.spec.templates[1].inputs?.artifacts\n          : generatedYAML.spec.workflowSpec.templates[1].inputs?.artifacts;\n      if (artifacts !== undefined) {\n        artifacts.push({\n          name: ExperimentYAML.metadata.name,\n          path: `/tmp/${ExperimentYAML.metadata.name}.yaml`,\n          raw: {\n            data: YAML.stringify(ExperimentYAML),\n          },\n        });\n      }\n\n      /**\n       * Adding engine YAML\n       */\n      const ChaosEngine = YAML.parse(Object.values(data.ChaosEngine)[0]);\n      const ExpName = YAML.parse(Object.values(data.Experiment)[0]).metadata\n        .name;\n      ChaosEngine.metadata.generateName = `${\n        YAML.parse(Object.values(data.Experiment)[0]).metadata.name\n      }`;\n      delete ChaosEngine.metadata.name;\n      ChaosEngine.metadata.namespace =\n        '{{workflow.parameters.adminModeNamespace}}';\n      ChaosEngine.metadata['labels'] = {\n        instance_id: uuidv4(),\n      };\n      if (ChaosEngine.spec.jobCleanUpPolicy) {\n        ChaosEngine.spec.jobCleanUpPolicy = 'retain';\n      }\n      ChaosEngine.spec.chaosServiceAccount = 'litmus-admin';\n      const templateToBePushed = {\n        name: ExpName,\n        inputs: {\n          artifacts: [\n            {\n              name: ExpName,\n              path: `/tmp/chaosengine-${ExpName}.yaml`,\n              raw: {\n                data: YAML.stringify(ChaosEngine),\n              },\n            },\n          ],\n        },\n        container: {\n          args: [\n            `-file=/tmp/chaosengine-${ExpName}.yaml`,\n            `-saveName=/tmp/engine-name`,\n          ],\n          image: 'litmuschaos/litmus-checker:latest',\n        },\n      };\n      if (generatedYAML.kind === 'Workflow')\n        generatedYAML.spec.templates.push(templateToBePushed);\n      else generatedYAML.spec.workflowSpec.templates.push(templateToBePushed);\n    });\n    return generatedYAML;\n  };\n\n  /**\n   * UseEffect to make changes in the generated YAML\n   * when a new experiment is added from MyHub\n   */\n  useEffect(() => {\n    if (isCustomWorkflow) {\n      const savedManifest =\n        manifest !== '' ? YAML.parse(manifest) : generatedYAML;\n      const updatedManifest = updateCRD(savedManifest, experiment);\n      const updatedManifestImage = updateManifestImage(\n        updatedManifest,\n        imageRegistryData\n      );\n      setGeneratedYAML(YAML.parse(updatedManifestImage));\n      workflowAction.setWorkflowManifest({\n        manifest: updatedManifestImage,\n      });\n    }\n  }, [experiment]);\n\n  const saveManifestChanges = () => {\n    if (yamlValid) {\n      workflowAction.setWorkflowManifest({\n        manifest: editManifest,\n      });\n      setYAMLModal(false);\n    } else {\n      setIsAlertOpen(true);\n    }\n  };\n\n  useEffect(() => {\n    const parsedManifest =\n      manifest !== '' ? YAML.parse(manifest) : generatedYAML;\n    parsedManifest.metadata.name = `${workflow.name}-${Math.round(\n      new Date().getTime() / 1000\n    )}`;\n\n    if (\n      manifest.length &&\n      selectedRadio === 'C' &&\n      parsedManifest.kind === 'Workflow' &&\n      parsedManifest.spec.templates[0].steps[\n        parsedManifest.spec.templates[0].steps.length - 1\n      ][0].name === 'revert-chaos' &&\n      parsedManifest.spec.podGC\n    ) {\n      delete parsedManifest.spec.podGC;\n\n      parsedManifest.spec.templates[0].steps.pop(); // Remove the last step -> Revert Chaos\n\n      parsedManifest.spec.templates.pop(); // Remove the last template -> Revert Chaos Template\n    }\n\n    if (\n      manifest.length &&\n      selectedRadio === 'C' &&\n      parsedManifest.kind === 'CronWorkflow' &&\n      parsedManifest.spec.workflowSpec.templates[0].steps[\n        parsedManifest.spec.workflowSpec.templates[0].steps.length - 1\n      ][0].name === 'revert-chaos' &&\n      parsedManifest.spec.workflowSpec.podGC\n    ) {\n      delete parsedManifest.workflowSpec.spec.podGC;\n      parsedManifest.spec.workflowSpec.templates[0].steps.pop(); // Remove the last step -> Revert Chaos\n\n      parsedManifest.spec.workflowSpec.templates.pop(); // Remove the last template -> Revert Chaos Template\n    }\n\n    workflowAction.setWorkflowManifest({\n      manifest: YAML.stringify(parsedManifest),\n    });\n  }, [manifest, workflow.name]);\n\n  const onModalClose = () => {\n    setAddExpModal(false);\n  };\n\n  const onSelectChange = (\n    e: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setSelectedExp(e.target.value as string);\n  };\n\n  useEffect(() => {\n    if (engineData !== undefined && experimentData !== undefined) {\n      setExperiment([\n        {\n          ChaosEngine: engineData,\n          Experiment: experimentData,\n        },\n      ]);\n    }\n  }, [engineDataLoading, experimentDataLoading]);\n\n  function onNext() {\n    if (YAMLModal) {\n      setIsEditorSaveAlertOpen(true);\n      return false;\n    }\n    if (childRef.current) {\n      if ((childRef.current.onNext() as unknown) === false) {\n        alert.changeAlertState(true); // Custom Workflow has no experiments\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const handleSteps = (steps: any) => {\n    setSteps(steps);\n  };\n\n  useImperativeHandle(ref, () => ({\n    onNext,\n  }));\n\n  const LeftButtonWrapper = () => (\n    <ButtonOutlined\n      onClick={() => {\n        setYAMLModal(true);\n        setConfirmEdit(false);\n      }}\n      className={classes.editBtn}\n    >\n      <img src=\"./icons/viewYAMLicon.svg\" alt=\"view YAML\" />\n      <Width width=\"1rem\" /> {t('createWorkflow.tuneWorkflow.edit')}\n    </ButtonOutlined>\n  );\n\n  return (\n    <>\n      <AlertBox\n        isOpen={isEditorSaveAlertOpen}\n        setOpen={setIsEditorSaveAlertOpen}\n        message=\"Please Save the changes in the editor to proceed forward\"\n      />\n      <AlertBox\n        isOpen={isAlertOpen}\n        setOpen={setIsAlertOpen}\n        message=\"The YAML contains errors, resolve them first to proceed\"\n      />\n      {YAMLModal ? (\n        <>\n          <Modal\n            open={confirmEdit}\n            onClose={() => {}}\n            width=\"30rem\"\n            height=\"25rem\"\n          >\n            <div className={classes.confirmDiv}>\n              <Typography className={classes.confirmText}>\n                {t('createWorkflow.tuneWorkflow.confirmText')}\n              </Typography>\n              <ButtonOutlined\n                className={classes.backBtn}\n                disabled={!yamlValid}\n                onClick={() => {\n                  setConfirmEdit(false);\n                }}\n              >\n                {t('createWorkflow.tuneWorkflow.back')}\n              </ButtonOutlined>\n              <ButtonFilled\n                className={classes.continueBtn}\n                disabled={!yamlValid}\n                onClick={() => {\n                  setYAMLModal(false);\n                  setEditManifest('');\n                }}\n              >\n                {t('createWorkflow.tuneWorkflow.continue')}\n              </ButtonFilled>\n            </div>\n          </Modal>\n          <div className={classes.editorWrapper}>\n            <div className={`${classes.flex} ${classes.additional}`}>\n              <div className={classes.flex}>\n                <img\n                  style={{ width: '2rem' }}\n                  src=\"./icons/terminal.svg\"\n                  alt=\"Terminal Icon\"\n                />\n                <Typography className={classes.name}>\n                  {fetchWorkflowNameFromManifest(manifest)}.yaml\n                </Typography>\n              </div>\n              <div className={classes.flex}>\n                <ButtonOutlined\n                  onClick={() => {\n                    saveManifestChanges();\n                  }}\n                  className={classes.editorTopBtn}\n                >\n                  Save Changes\n                </ButtonOutlined>\n                <hr style={{ margin: '0 1rem', height: '2.5rem' }} />\n                <ButtonOutlined\n                  onClick={() =>\n                    yamlValid ? setConfirmEdit(true) : setIsAlertOpen(true)\n                  }\n                  className={classes.editorCloseBtn}\n                >\n                  x\n                </ButtonOutlined>\n              </div>\n            </div>\n            <YamlEditor\n              content={manifest}\n              filename={workflow.name}\n              readOnly={false}\n              setButtonState={(btnState: boolean) => {\n                setYamlValid(btnState);\n              }}\n              saveWorkflowChange={(updatedManifest: string) => {\n                setEditManifest(updatedManifest);\n              }}\n            />\n          </div>\n        </>\n      ) : (\n        <div className={classes.root}>\n          {/* Header */}\n          <div className={classes.headerWrapper}>\n            <Typography className={classes.heading}>\n              {t('createWorkflow.tuneWorkflow.header')}\n            </Typography>\n            <Row className={classes.descriptionWrapper}>\n              <Typography className={classes.description}>\n                {selectedRadio === 'A'\n                  ? t(\n                      'createWorkflow.tuneWorkflow.selectedPreDefinedWorkflowInfo'\n                    )\n                  : selectedRadio === 'B'\n                  ? t('createWorkflow.tuneWorkflow.selectedTemplateInfo')\n                  : selectedRadio === 'C'\n                  ? t('createWorkflow.tuneWorkflow.selectedCustomWorkflowInfo')\n                  : t('createWorkflow.tuneWorkflow.selectedUploadYAML')}{' '}\n                <i>\n                  <strong>\n                    {workflow.name\n                      .split('-')\n                      .map((text) => `${capitalize(text)} `)}\n                  </strong>\n                </i>\n                <br />\n                {t('createWorkflow.tuneWorkflow.description')}\n              </Typography>\n              {selectedRadio === 'C' ? (\n                <div className={classes.headerBtn}>\n                  {LeftButtonWrapper()}\n                  <ButtonOutlined\n                    onClick={() => {\n                      setSelectedExp('');\n                      setAddExpModal(true);\n                    }}\n                    data-cy=\"addExperimentButton\"\n                  >\n                    {t('createWorkflow.tuneWorkflow.addANewExperiment')}\n                  </ButtonOutlined>\n                </div>\n              ) : (\n                <>{LeftButtonWrapper()}</>\n              )}\n            </Row>\n          </div>\n\n          {/* Add Experiment Modal */}\n          <AddExperimentModal\n            addExpModal={addExpModal}\n            onModalClose={onModalClose}\n            hubName={hubName}\n            selectedExp={selectedExp}\n            onSelectChange={onSelectChange}\n            allExperiments={allExperiments}\n            handleDone={handleDone}\n          />\n\n          {/* Experiment Details */}\n          <div className={classes.experimentWrapper}>\n            {/* Edit Button */}\n            {manifest !== '' && (\n              <ButtonOutlined\n                disabled={isVisualizationComplete}\n                onClick={() => setEditSequence(true)}\n              >\n                <img src=\"./icons/editsequence.svg\" alt=\"Edit Sequence\" />{' '}\n                <Width width=\"0.5rem\" />\n                {t('createWorkflow.tuneWorkflow.editSequence')}\n              </ButtonOutlined>\n            )}\n            <Modal\n              open={editSequence}\n              onClose={() => {\n                setEditSequence(false);\n              }}\n              width=\"60%\"\n              modalActions={\n                <ButtonOutlined\n                  onClick={() => {\n                    setEditSequence(false);\n                  }}\n                  className={classes.closeBtn}\n                >\n                  <img src=\"./icons/cross-disabled.svg\" alt=\"cross\" />\n                </ButtonOutlined>\n              }\n            >\n              <div className={classes.sequenceMainDiv}>\n                <div className={classes.sequenceDiv}>\n                  <Typography variant=\"h4\">\n                    {t('createWorkflow.tuneWorkflow.editSequence')}\n                  </Typography>\n                  <Typography className={classes.dropText}>\n                    {t('createWorkflow.tuneWorkflow.dragndrop')}\n                  </Typography>\n                </div>\n                <Row>\n                  <Width width=\"40%\">\n                    <WorkflowPreview\n                      editSequenceLoader={handleEditSequenceRender}\n                      SequenceSteps={steps}\n                      isCustomWorkflow={isCustomWorkflow}\n                    />\n                  </Width>\n                  <Width width=\"60%\">\n                    <WorkflowSequence\n                      getSteps={handleSteps}\n                      handleSequenceModal={(sequenceState: boolean) => {\n                        setEditSequence(sequenceState);\n                      }}\n                    />\n                  </Width>\n                </Row>\n              </div>\n            </Modal>\n            {/* Details Section -> Graph on the Left and Table on the Right */}\n\n            {/* Details Section -> Graph on the Left and Table on the Right */}\n            <Row>\n              {/* Argo Workflow Graph */}\n              <Width width=\"30%\">\n                <WorkflowPreview\n                  editSequenceLoader={handleEditSequenceRender}\n                  isCustomWorkflow={isCustomWorkflow}\n                />\n              </Width>\n              {/* Workflow Table */}\n              <Width width=\"70%\">\n                <WorkflowTable\n                  ref={childRef}\n                  isCustom={isCustomWorkflow}\n                  namespace={namespace}\n                />\n              </Width>\n            </Row>\n          </div>\n        </div>\n      )}\n    </>\n  );\n});\n\nexport default TuneWorkflow;\n"]},"metadata":{},"sourceType":"module"}