{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import*as d3 from'd3';import dagreD3 from'dagre-d3';import React,{Component,createRef}from'react';var DagreGraph=/*#__PURE__*/function(_Component){_inherits(DagreGraph,_Component);var _super=_createSuper(DagreGraph);function DagreGraph(){var _this;_classCallCheck(this,DagreGraph);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.svg=createRef();_this.innerG=createRef();_this._drawChart=function(){var _this$props=_this.props,nodes=_this$props.nodes,links=_this$props.links,zoomable=_this$props.zoomable,fitBoundaries=_this$props.fitBoundaries,config=_this$props.config,animate=_this$props.animate,shape=_this$props.shape,onNodeClick=_this$props.onNodeClick,onRelationshipClick=_this$props.onRelationshipClick;var g=new dagreD3.graphlib.Graph().setGraph(config||{});nodes.forEach(function(node){return g.setNode(node.id,_objectSpread({label:node.label,class:node.class||'',labelType:node.labelType||'string'},node.config));});if(shape){g.nodes().forEach(function(v){g.node(v).shape=shape;});}links.forEach(function(link){g.setEdge(link.source,link.target,_objectSpread({label:link.label||'',class:link.class||''},link.config));});var render=new dagreD3.render();var svg=d3.select(_this.svg.current);var inner=d3.select(_this.innerG.current);var zoom=d3.zoom().on('zoom',function(){return inner.attr('transform',d3.event.transform);});if(zoomable){svg.call(zoom);}if(animate){g.graph().transition=function transition(selection){return selection.transition().duration(animate||1000);};}render(inner,g);if(fitBoundaries){// @BertCh recommendation for fitting boundaries\nvar _inner$node$getBBox=inner.node().getBBox(),width=_inner$node$getBBox.width,height=_inner$node$getBBox.height,x=_inner$node$getBBox.x,y=_inner$node$getBBox.y;var parent=inner.node().parentElement||inner.node().parentNode;var fullWidth=parent.clientWidth||parent.parentNode.clientWidth;var fullHeight=parent.clientHeight||parent.parentNode.clientHeight;var midX=x+width/2;var midY=y+height/2;if(width===0||height===0)return;// nothing to fit\nvar scale=0.9/Math.max(width/fullWidth,height/fullHeight);var translate=[fullWidth/2-scale*midX,fullHeight/2-scale*midY];var transform=d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale);svg.transition().duration(animate||0)// milliseconds\n.call(zoom.transform,transform);}if(onNodeClick){svg.selectAll('g.node').on('click',function(id){var _node=g.node(id);var _original=_this._getNodeData(id);onNodeClick({d3node:_node,original:_original});});}if(onRelationshipClick){svg.selectAll('g.edgeLabel, g.edgePath').on('click',function(id){var _source=g.node(id.v);var _original_source=_this._getNodeData(id.v);var _target=g.node(id.w);var _original_target=_this._getNodeData(id.w);onRelationshipClick({d3source:_source,source:_original_source,d3target:_target,target:_original_target});});}};return _this;}_createClass(DagreGraph,[{key:\"componentDidMount\",value:function componentDidMount(){this._drawChart();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this._drawChart();}},{key:\"_getNodeData\",value:function _getNodeData(id){var nodes=this.props.nodes;return nodes.find(function(node){return node.id===id;});}},{key:\"render\",value:function render(){var _this$props2=this.props,width=_this$props2.width,height=_this$props2.height,className=_this$props2.className;return/*#__PURE__*/React.createElement(\"svg\",{width:width,height:height,ref:this.svg,className:className||''},/*#__PURE__*/React.createElement(\"g\",{ref:this.innerG}));}}]);return DagreGraph;}(Component);DagreGraph.defaultProps={zoomable:false,fitBoundaries:false,className:'dagre-d3-react'};export default DagreGraph;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/DagreGraph/index.tsx"],"names":["d3","dagreD3","React","Component","createRef","DagreGraph","svg","innerG","_drawChart","props","nodes","links","zoomable","fitBoundaries","config","animate","shape","onNodeClick","onRelationshipClick","g","graphlib","Graph","setGraph","forEach","node","setNode","id","label","class","labelType","v","link","setEdge","source","target","render","select","current","inner","zoom","on","attr","event","transform","call","graph","transition","selection","duration","getBBox","width","height","x","y","parent","parentElement","parentNode","fullWidth","clientWidth","fullHeight","clientHeight","midX","midY","scale","Math","max","translate","zoomIdentity","selectAll","_node","_original","_getNodeData","d3node","original","_source","_original_source","_target","w","_original_target","d3source","d3target","find","className","defaultProps"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport dagreD3, { GraphLabel, Node } from 'dagre-d3';\nimport React, { Component, createRef } from 'react';\n\ninterface GraphProps {\n  nodes: d3Node[];\n  links: d3Link[];\n  zoomable?: boolean;\n  fitBoundaries?: boolean;\n  height?: string;\n  width?: string;\n  config?: GraphLabel;\n  animate?: number;\n  className?: string;\n  shape?: shapes;\n  onNodeClick?: nodeClick;\n  onRelationshipClick?: relationshipClick;\n}\ntype shapes = 'rect' | 'circle' | 'ellipse';\ntype labelType = 'html' | 'svg' | 'string';\n\ntype nodeClick = (nodeData: {\n  d3node: Node;\n  original: d3Node | undefined;\n}) => void;\n\ntype relationshipClick = (nodeData: {\n  d3source: Node;\n  source: d3Node | undefined;\n  d3target: Node;\n  target: d3Node | undefined;\n}) => void;\n\nexport type d3Node = {\n  id: any;\n  label: string | SVGElement;\n  class?: string;\n  labelType?: labelType;\n  config?: object;\n};\nexport type d3Link = {\n  source: string;\n  target: string;\n  class?: string;\n  label?: string;\n  config?: object;\n};\ntype Relationship = {\n  v: any;\n  w: any;\n};\n\nclass DagreGraph extends Component<GraphProps> {\n  svg = createRef<SVGSVGElement>();\n  innerG = createRef<SVGSVGElement>();\n\n  static defaultProps = {\n    zoomable: false,\n    fitBoundaries: false,\n    className: 'dagre-d3-react',\n  };\n  componentDidMount() {\n    this._drawChart();\n  }\n  componentDidUpdate() {\n    this._drawChart();\n  }\n\n  _drawChart = () => {\n    const {\n      nodes,\n      links,\n      zoomable,\n      fitBoundaries,\n      config,\n      animate,\n      shape,\n      onNodeClick,\n      onRelationshipClick,\n    } = this.props;\n    const g = new dagreD3.graphlib.Graph().setGraph(config || {});\n\n    nodes.forEach((node) =>\n      g.setNode(node.id, {\n        label: node.label,\n        class: node.class || '',\n        labelType: node.labelType || 'string',\n        ...node.config,\n      })\n    );\n\n    if (shape) {\n      g.nodes().forEach((v) => {\n        g.node(v).shape = shape;\n      });\n    }\n\n    links.forEach((link) => {\n      g.setEdge(link.source, link.target, {\n        label: link.label || '',\n        class: link.class || '',\n        ...link.config,\n      });\n    });\n\n    const render = new dagreD3.render();\n    const svg: any = d3.select(this.svg.current);\n    const inner: any = d3.select(this.innerG.current);\n\n    const zoom = d3\n      .zoom()\n      .on('zoom', () => inner.attr('transform', d3.event.transform));\n\n    if (zoomable) {\n      svg.call(zoom);\n    }\n    if (animate) {\n      g.graph().transition = function transition(selection) {\n        return selection.transition().duration(animate || 1000);\n      };\n    }\n\n    render(inner, g);\n\n    if (fitBoundaries) {\n      // @BertCh recommendation for fitting boundaries\n      const { width, height, x, y } = inner.node().getBBox();\n      const parent = inner.node().parentElement || inner.node().parentNode;\n      const fullWidth = parent.clientWidth || parent.parentNode.clientWidth;\n      const fullHeight = parent.clientHeight || parent.parentNode.clientHeight;\n      const midX = x + width / 2;\n      const midY = y + height / 2;\n\n      if (width === 0 || height === 0) return; // nothing to fit\n      const scale = 0.9 / Math.max(width / fullWidth, height / fullHeight);\n      const translate = [\n        fullWidth / 2 - scale * midX,\n        fullHeight / 2 - scale * midY,\n      ];\n      const transform = d3.zoomIdentity\n        .translate(translate[0], translate[1])\n        .scale(scale);\n\n      svg\n        .transition()\n        .duration(animate || 0) // milliseconds\n        .call(zoom.transform, transform);\n    }\n\n    if (onNodeClick) {\n      svg.selectAll('g.node').on('click', (id: any) => {\n        const _node: Node = g.node(id);\n        const _original = this._getNodeData(id);\n        onNodeClick({ d3node: _node, original: _original });\n      });\n    }\n    if (onRelationshipClick) {\n      svg\n        .selectAll('g.edgeLabel, g.edgePath')\n        .on('click', (id: Relationship) => {\n          const _source = g.node(id.v);\n          const _original_source = this._getNodeData(id.v);\n\n          const _target = g.node(id.w);\n          const _original_target = this._getNodeData(id.w);\n          onRelationshipClick({\n            d3source: _source,\n            source: _original_source,\n            d3target: _target,\n            target: _original_target,\n          });\n        });\n    }\n  };\n\n  _getNodeData(id: any) {\n    const { nodes } = this.props;\n    return nodes.find((node) => node.id === id);\n  }\n\n  render() {\n    const { width, height, className } = this.props;\n    return (\n      <svg\n        width={width}\n        height={height}\n        ref={this.svg}\n        className={className || ''}\n      >\n        <g ref={this.innerG} />\n      </svg>\n    );\n  }\n}\n\nexport default DagreGraph;\n"]},"metadata":{},"sourceType":"module"}