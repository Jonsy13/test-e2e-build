{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/LogsModal/index.tsx\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport timeDifference from '../../../utils/datesModifier';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport trimstring from '../../../utils/trim';\nimport useActions from '../../../redux/actions';\nimport WorkflowStatus from '../WorkflowStatus';\nimport LogsSwitcher from '../LogsSwitcher';\n\nvar NodeLogsModal = function NodeLogsModal(_ref) {\n  var logsOpen = _ref.logsOpen,\n      handleClose = _ref.handleClose,\n      cluster_id = _ref.cluster_id,\n      workflow_run_id = _ref.workflow_run_id,\n      data = _ref.data,\n      workflow_name = _ref.workflow_name;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var nodeSelection = useActions(NodeSelectionActions);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      nodesArray = _useState2[0],\n      setNodesArray = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.selectedNode;\n  }),\n      pod_name = _useSelector.pod_name;\n\n  var changeNodeLogs = function changeNodeLogs(selectedKey) {\n    nodeSelection.selectNode(_objectSpread(_objectSpread({}, data.nodes[selectedKey]), {}, {\n      pod_name: selectedKey\n    }));\n  };\n\n  useEffect(function () {\n    var filteredNodes = [];\n    Object.keys(data.nodes).forEach(function (key) {\n      if (data.nodes[key].type !== 'StepGroup' && data.nodes[key].type !== 'Steps') {\n        filteredNodes.push(_objectSpread(_objectSpread({}, data.nodes[key]), {}, {\n          id: key\n        }));\n      }\n    });\n    setNodesArray([].concat(filteredNodes));\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    open: logsOpen,\n    onClose: handleClose,\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      className: classes.closeButton,\n      onClick: handleClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"\\u2715\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, t('workflowDetailsView.headerDesc'), \" \", workflow_name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.section,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.nodesData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, nodesArray.map(function (node) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(classes.nodeData, \"\\n                  \").concat(node.id === pod_name && classes.selectedNode),\n      onClick: function onClick() {\n        return changeNodeLogs(node.id);\n      },\n      key: node.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.experiment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.icon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/icons/experiment_icon.svg\",\n      alt: \"Experiment Icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Typography, {\n      className: classes.nodeName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }, trimstring(node.name, 20))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.statusWidth,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(WorkflowStatus, {\n      phase: node.phase,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    })));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logsPanel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logsHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.experiment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/experiment_icon.svg\",\n    alt: \"Experiment Icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.nodeName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }, trimstring(data.nodes[pod_name].name, 30)))), /*#__PURE__*/React.createElement(WorkflowStatus, {\n    phase: data.nodes[pod_name].phase,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.subLogsHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }, t('workflowDetailsView.workflowInfo.runTime.startTime'))), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, data.nodes[pod_name].phase === 'Pending' ? '- -' : timeDifference(data.nodes[pod_name].startedAt))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.subLogsHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, t('workflowDetailsView.workflowInfo.runTime.endTime'))), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, data.nodes[pod_name].finishedAt === '' ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"- -\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, timeDifference(data.nodes[pod_name].finishedAt))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logsHeight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LogsSwitcher, {\n    cluster_id: cluster_id,\n    workflow_run_id: workflow_run_id,\n    pod_namespace: data.namespace,\n    pod_name: pod_name,\n    pod_type: data.nodes[pod_name].type,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default NodeLogsModal;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/LogsModal/index.tsx"],"names":["Typography","ButtonOutlined","Modal","React","useState","useEffect","useTranslation","useSelector","useStyles","timeDifference","NodeSelectionActions","trimstring","useActions","WorkflowStatus","LogsSwitcher","NodeLogsModal","logsOpen","handleClose","cluster_id","workflow_run_id","data","workflow_name","classes","t","nodeSelection","nodesArray","setNodesArray","state","selectedNode","pod_name","changeNodeLogs","selectedKey","selectNode","nodes","filteredNodes","Object","keys","forEach","key","type","push","id","closeButton","root","header","title","section","nodesData","map","node","nodeData","experiment","icon","nodeName","name","statusWidth","phase","logsPanel","logsHeader","subLogsHeader","startedAt","finishedAt","logsHeight","namespace"],"mappings":";;;;;;AAAA;;AACA;AACA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,WAAtC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAGA,OAAO,KAAKC,oBAAZ,MAAsC,sCAAtC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAeA,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,OAO9C;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,eAGI,QAHJA,eAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADJC,aACI,QADJA,aACI;AACJ,MAAMC,OAAO,GAAGd,SAAS,EAAzB;;AACA,wBAAcF,cAAc,EAA5B;AAAA,MAAQiB,CAAR,mBAAQA,CAAR;;AACA,MAAMC,aAAa,GAAGZ,UAAU,CAACF,oBAAD,CAAhC;;AACA,kBAAoCN,QAAQ,CAAqB,EAArB,CAA5C;AAAA;AAAA,MAAOqB,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,qBAAqBnB,WAAW,CAAC,UAACoB,KAAD;AAAA,WAAsBA,KAAK,CAACC,YAA5B;AAAA,GAAD,CAAhC;AAAA,MAAQC,QAAR,gBAAQA,QAAR;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAyB;AAC9CP,IAAAA,aAAa,CAACQ,UAAd,iCACKZ,IAAI,CAACa,KAAL,CAAWF,WAAX,CADL;AAEEF,MAAAA,QAAQ,EAAEE;AAFZ;AAID,GALD;;AAOA1B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM6B,aAAiC,GAAG,EAA1C;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYhB,IAAI,CAACa,KAAjB,EAAwBI,OAAxB,CAAgC,UAACC,GAAD,EAAS;AACvC,UACElB,IAAI,CAACa,KAAL,CAAWK,GAAX,EAAgBC,IAAhB,KAAyB,WAAzB,IACAnB,IAAI,CAACa,KAAL,CAAWK,GAAX,EAAgBC,IAAhB,KAAyB,OAF3B,EAGE;AACAL,QAAAA,aAAa,CAACM,IAAd,iCAAwBpB,IAAI,CAACa,KAAL,CAAWK,GAAX,CAAxB;AAAyCG,UAAAA,EAAE,EAAEH;AAA7C;AACD;AACF,KAPD;AAQAZ,IAAAA,aAAa,WAAKQ,aAAL,EAAb;AACD,GAXQ,EAWN,CAACd,IAAD,CAXM,CAAT;AAaA,sBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAEJ,QADR;AAEE,IAAA,OAAO,EAAEC,WAFX;AAGE,IAAA,YAAY,eACV,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAEK,OAAO,CAACoB,WAAnC;AAAgD,MAAA,OAAO,EAAEzB,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAK,IAAA,SAAS,EAAEK,OAAO,CAACqB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAErB,OAAO,CAACsB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtB,OAAO,CAACuB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,CAAC,CAAC,gCAAD,CADJ,OACyCF,aADzC,CADF,CADF,eAME;AAAK,IAAA,SAAS,EAAEC,OAAO,CAACwB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAExB,OAAO,CAACyB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,UAAU,CAACuB,GAAX,CAAe,UAACC,IAAD;AAAA,wBACd;AACE,MAAA,SAAS,YAAK3B,OAAO,CAAC4B,QAAb,iCACLD,IAAI,CAACR,EAAL,KAAYZ,QAAZ,IAAwBP,OAAO,CAACM,YAD3B,CADX;AAGE,MAAA,OAAO,EAAE;AAAA,eAAME,cAAc,CAACmB,IAAI,CAACR,EAAN,CAApB;AAAA,OAHX;AAIE,MAAA,GAAG,EAAEQ,IAAI,CAACR,EAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AAAK,MAAA,SAAS,EAAEnB,OAAO,CAAC6B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAE7B,OAAO,CAAC8B,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,GAAG,EAAC,4BADN;AAEE,MAAA,GAAG,EAAC,iBAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAOE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE9B,OAAO,CAAC+B,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG1C,UAAU,CAACsC,IAAI,CAACK,IAAN,EAAY,EAAZ,CADb,CAPF,CANF,eAiBE;AAAK,MAAA,SAAS,EAAEhC,OAAO,CAACiC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAEN,IAAI,CAACO,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADc;AAAA,GAAf,CADH,CADF,eA0BE;AAAK,IAAA,SAAS,EAAElC,OAAO,CAACmC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEnC,OAAO,CAACoC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEpC,OAAO,CAAC6B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAE7B,OAAO,CAAC8B,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,4BAAT;AAAsC,IAAA,GAAG,EAAC,iBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAE9B,OAAO,CAAC+B,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAS1C,UAAU,CAACS,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqByB,IAAtB,EAA4B,EAA5B,CAAnB,CADF,CAJF,CADF,eASE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAElC,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqB2B,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAElC,OAAO,CAACqC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpC,CAAC,CAAC,oDAAD,CADJ,CADF,CADF,eAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqB2B,KAArB,KAA+B,SAA/B,GACG,KADH,GAEG/C,cAAc,CAACW,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqB+B,SAAtB,CAHpB,CANF,CAVF,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtC,OAAO,CAACqC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpC,CAAC,CAAC,kDAAD,CADJ,CADF,CADF,eAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqBgC,UAArB,KAAoC,EAApC,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpD,cAAc,CAACW,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqBgC,UAAtB,CADjB,CAJJ,CANF,CAtBF,CADF,eAwCE;AAAK,IAAA,SAAS,EAAEvC,OAAO,CAACwC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,UAAU,EAAE5C,UADd;AAEE,IAAA,eAAe,EAAEC,eAFnB;AAGE,IAAA,aAAa,EAAEC,IAAI,CAAC2C,SAHtB;AAIE,IAAA,QAAQ,EAAElC,QAJZ;AAKE,IAAA,QAAQ,EAAET,IAAI,CAACa,KAAL,CAAWJ,QAAX,EAAqBU,IALjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAxCF,CA1BF,CANF,CATF,CADF;AAgGD,CAnID;;AAqIA,eAAexB,aAAf","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport timeDifference from '../../../utils/datesModifier';\nimport { RootState } from '../../../redux/reducers';\nimport { ExecutionData, Node } from '../../../models/graphql/workflowData';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport trimstring from '../../../utils/trim';\nimport useActions from '../../../redux/actions';\nimport WorkflowStatus from '../WorkflowStatus';\nimport LogsSwitcher from '../LogsSwitcher';\n\ninterface NodeLogsModalProps {\n  logsOpen: boolean;\n  handleClose: () => void;\n  cluster_id: string;\n  workflow_run_id: string;\n  data: ExecutionData;\n  workflow_name: string;\n}\n\ninterface SelectedNodeType extends Node {\n  id: string;\n}\n\nconst NodeLogsModal: React.FC<NodeLogsModalProps> = ({\n  logsOpen,\n  handleClose,\n  cluster_id,\n  workflow_run_id,\n  data,\n  workflow_name,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const nodeSelection = useActions(NodeSelectionActions);\n  const [nodesArray, setNodesArray] = useState<SelectedNodeType[]>([]);\n\n  const { pod_name } = useSelector((state: RootState) => state.selectedNode);\n\n  const changeNodeLogs = (selectedKey: string) => {\n    nodeSelection.selectNode({\n      ...data.nodes[selectedKey],\n      pod_name: selectedKey,\n    });\n  };\n\n  useEffect(() => {\n    const filteredNodes: SelectedNodeType[] = [];\n    Object.keys(data.nodes).forEach((key) => {\n      if (\n        data.nodes[key].type !== 'StepGroup' &&\n        data.nodes[key].type !== 'Steps'\n      ) {\n        filteredNodes.push({ ...data.nodes[key], id: key });\n      }\n    });\n    setNodesArray([...filteredNodes]);\n  }, [data]);\n\n  return (\n    <Modal\n      open={logsOpen}\n      onClose={handleClose}\n      modalActions={\n        <ButtonOutlined className={classes.closeButton} onClick={handleClose}>\n          &#x2715;\n        </ButtonOutlined>\n      }\n    >\n      <div className={classes.root}>\n        <div className={classes.header}>\n          <Typography className={classes.title}>\n            {t('workflowDetailsView.headerDesc')} {workflow_name}\n          </Typography>\n        </div>\n        <div className={classes.section}>\n          <div className={classes.nodesData}>\n            {nodesArray.map((node: SelectedNodeType) => (\n              <div\n                className={`${classes.nodeData}\n                  ${node.id === pod_name && classes.selectedNode}`}\n                onClick={() => changeNodeLogs(node.id)}\n                key={node.id}\n              >\n                <div className={classes.experiment}>\n                  <span className={classes.icon}>\n                    <img\n                      src=\"/icons/experiment_icon.svg\"\n                      alt=\"Experiment Icon\"\n                    />\n                  </span>\n                  <Typography className={classes.nodeName}>\n                    {trimstring(node.name, 20)}\n                  </Typography>\n                </div>\n                <div className={classes.statusWidth}>\n                  <WorkflowStatus phase={node.phase} />\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className={classes.logsPanel}>\n            <div className={classes.logsHeader}>\n              <div className={classes.experiment}>\n                <span className={classes.icon}>\n                  <img src=\"/icons/experiment_icon.svg\" alt=\"Experiment Icon\" />\n                </span>\n                <Typography className={classes.nodeName}>\n                  <strong>{trimstring(data.nodes[pod_name].name, 30)}</strong>\n                </Typography>\n              </div>\n              <WorkflowStatus phase={data.nodes[pod_name].phase} />\n              <div>\n                <Typography className={classes.subLogsHeader}>\n                  <strong>\n                    {t('workflowDetailsView.workflowInfo.runTime.startTime')}\n                  </strong>\n                </Typography>\n                <Typography>\n                  {data.nodes[pod_name].phase === 'Pending'\n                    ? '- -'\n                    : timeDifference(data.nodes[pod_name].startedAt)}\n                </Typography>\n              </div>\n              <div>\n                <Typography className={classes.subLogsHeader}>\n                  <strong>\n                    {t('workflowDetailsView.workflowInfo.runTime.endTime')}\n                  </strong>\n                </Typography>\n                <Typography>\n                  {data.nodes[pod_name].finishedAt === '' ? (\n                    <span>- -</span>\n                  ) : (\n                    <span>\n                      {timeDifference(data.nodes[pod_name].finishedAt)}\n                    </span>\n                  )}\n                </Typography>\n              </div>\n            </div>\n            <div className={classes.logsHeight}>\n              <LogsSwitcher\n                cluster_id={cluster_id}\n                workflow_run_id={workflow_run_id}\n                pod_namespace={data.namespace}\n                pod_name={pod_name}\n                pod_type={data.nodes[pod_name].type}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default NodeLogsModal;\n"]},"metadata":{},"sourceType":"module"}