{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useLazyQuery,useMutation,useQuery}from'@apollo/client';import{FormControl,FormControlLabel,IconButton,InputLabel,MenuItem,Popover,Radio,RadioGroup,Select,Typography}from'@material-ui/core';import{ButtonFilled,InputField}from'litmus-ui';import React,{useEffect,useState}from'react';import{useTranslation}from'react-i18next';import InfoIcon from'@material-ui/icons/Info';import Loader from'../../../components/Loader';import{constants}from'../../../constants';import{ADD_IMAGE_REGISTRY,GET_IMAGE_REGISTRY,LIST_IMAGE_REGISTRY,UPDATE_IMAGE_REGISTRY}from'../../../graphql';import{getProjectID}from'../../../utils/getSearchParams';import useStyles from'./styles';var ImageRegistry=function ImageRegistry(){var _useTranslation=useTranslation(),t=_useTranslation.t;var classes=useStyles();var projectID=getProjectID();var _useState=useState('enabled'),_useState2=_slicedToArray(_useState,2),registry=_useState2[0],setRegistry=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),registryID=_useState4[0],setRegistryID=_useState4[1];var _useState5=useState('Public'),_useState6=_slicedToArray(_useState5,2),registryType=_useState6[0],setRegistryType=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isCustomRegistryEnabled=_useState8[0],setIsCustomRegistryEnabled=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),isAvailable=_useState10[0],setIsAvailable=_useState10[1];/**\n   * GetRegistryData to fetch Registry Data by ID\n   */var _useLazyQuery=useLazyQuery(GET_IMAGE_REGISTRY,{fetchPolicy:'network-only'}),_useLazyQuery2=_slicedToArray(_useLazyQuery,2),getRegistryData=_useLazyQuery2[0],_useLazyQuery2$=_useLazyQuery2[1],data=_useLazyQuery2$.data,loading=_useLazyQuery2$.loading;var _useState11=useState({registry_name:'',repo_name:'',registry_type:constants.public,secret_name:'',secret_namespace:'',enable_registry:true}),_useState12=_slicedToArray(_useState11,2),registryInfo=_useState12[0],setRegistryInfo=_useState12[1];var _useState13=useState({registry_name:'',repo_name:'',registry_type:''}),_useState14=_slicedToArray(_useState13,2),registryData=_useState14[0],setRegistryData=_useState14[1];/**\n   * State variables to manage popover actions\n   */var _React$useState=React.useState(null),_React$useState2=_slicedToArray(_React$useState,2),anchorEl=_React$useState2[0],setAnchorEl=_React$useState2[1];var handleClick=function handleClick(event){setAnchorEl(event.currentTarget);};var handleClose=function handleClose(){setAnchorEl(null);};var open=Boolean(anchorEl);var id=open?'simple-popover':undefined;/**\n   * ListImageRegistry is used to fetch the list of image registries\n   */var _useQuery=useQuery(LIST_IMAGE_REGISTRY,{variables:{data:projectID},fetchPolicy:'network-only',onCompleted:function onCompleted(data){if(data.ListImageRegistry!==null&&data.ListImageRegistry.length>0){setRegistryID(data.ListImageRegistry[0].image_registry_id);getRegistryData({variables:{registryid:data.ListImageRegistry[0].image_registry_id,projectid:projectID}});}else{setIsAvailable(false);setRegistry('disabled');}}}),listLoading=_useQuery.loading;/**\n   * UpdateImageRegistry is used to update the Image Registry\n   */var _useMutation=useMutation(UPDATE_IMAGE_REGISTRY,{onCompleted:function onCompleted(data){if(data.updateImageRegistry.image_registry_info.image_repo_name==='litmuschaos'){setIsCustomRegistryEnabled(false);setRegistry('disabled');}else{setIsCustomRegistryEnabled(true);setRegistry('enabled');}setRegistryData({registry_name:data.updateImageRegistry.image_registry_info.image_registry_name,repo_name:data.updateImageRegistry.image_registry_info.image_repo_name,registry_type:data.updateImageRegistry.image_registry_info.image_registry_type});}}),_useMutation2=_slicedToArray(_useMutation,2),updateImageRegistry=_useMutation2[0],updateLoader=_useMutation2[1].loading;var _useMutation3=useMutation(ADD_IMAGE_REGISTRY,{refetchQueries:[{query:LIST_IMAGE_REGISTRY,variables:{data:projectID}}],onCompleted:function onCompleted(data){if(data!==undefined){setIsAvailable(true);}},onError:function onError(){setIsAvailable(false);}}),_useMutation4=_slicedToArray(_useMutation3,1),createImageRegistry=_useMutation4[0];/**\n   * UseEffect to set the initial data of image registry\n   */useEffect(function(){if(data!==undefined){if(data.GetImageRegistry.image_registry_info.image_repo_name===constants.litmus){setRegistry('disabled');setIsCustomRegistryEnabled(false);setRegistryData({registry_name:constants.docker,repo_name:constants.litmus,registry_type:constants.public});}else{setRegistry('enabled');setIsCustomRegistryEnabled(true);setRegistryData({registry_name:data.GetImageRegistry.image_registry_info.image_registry_name,repo_name:data.GetImageRegistry.image_registry_info.image_repo_name,registry_type:data.GetImageRegistry.image_registry_info.image_registry_type});}}},[data]);/**\n   * HandleSubmit is used to update the image registry to custom registry\n   */var handleSubmit=function handleSubmit(event){event.preventDefault();updateImageRegistry({variables:{imageRegistryID:registryID,projectID:projectID,imageRegistryInfo:{image_registry_name:registryInfo.registry_name,image_repo_name:registryInfo.repo_name,image_registry_type:registryInfo.registry_type,secret_name:registryInfo.secret_name,secret_namespace:registryInfo.secret_namespace,enable_registry:true}}});};return/*#__PURE__*/React.createElement(\"div\",{className:classes.container},/*#__PURE__*/React.createElement(Typography,{className:classes.headerText},t('settings.imageRegistry.heading')),/*#__PURE__*/React.createElement(Typography,{className:classes.headerDesc},t('settings.imageRegistry.headingDesc')),listLoading&&loading?/*#__PURE__*/React.createElement(Loader,null):/*#__PURE__*/React.createElement(\"form\",{id:\"login-form\",autoComplete:\"on\",onSubmit:handleSubmit},/*#__PURE__*/React.createElement(FormControl,{component:\"fieldset\",style:{width:'70%'}},/*#__PURE__*/React.createElement(RadioGroup,{name:\"image-registry\",value:registry,onChange:function onChange(event){setRegistry(event.target.value);}},/*#__PURE__*/React.createElement(\"div\",{className:classes.mainRadioDiv},/*#__PURE__*/React.createElement(FormControlLabel,{value:\"disabled\",control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),\"data-cy\":\"localRadioButton\",label:/*#__PURE__*/React.createElement(Typography,{className:classes.defaultText},t('settings.imageRegistry.defaultValues'))}),/*#__PURE__*/React.createElement(Typography,{className:classes.defaultTextDesc},t('settings.imageRegistry.defaultText')),/*#__PURE__*/React.createElement(\"div\",{className:classes.registryInfoDiv},/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.registry'),/*#__PURE__*/React.createElement(\"strong\",null,\" \",t('settings.imageRegistry.dockerio'))),/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.repo'),/*#__PURE__*/React.createElement(\"strong\",null,\" \",t('settings.imageRegistry.litmus'))),/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.repoType'),/*#__PURE__*/React.createElement(\"strong\",null,\" \",t('settings.imageRegistry.public')))),!isAvailable?/*#__PURE__*/React.createElement(Typography,{color:\"error\"},t('settings.imageRegistry.noRegistry')):/*#__PURE__*/React.createElement(React.Fragment,null),registry==='disabled'&&isCustomRegistryEnabled===true||!isAvailable?/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ButtonFilled,{className:classes.defaultBtn,\"data-cy\":\"disableGitopsButton\",disabled:updateLoader,onClick:function onClick(){return!isAvailable?createImageRegistry({variables:{projectID:projectID,imageRegistryInfo:{image_registry_name:constants.dockerio,image_repo_name:constants.litmus,image_registry_type:constants.public,secret_name:'',secret_namespace:'',enable_registry:true}}}):updateImageRegistry({variables:{imageRegistryID:registryID,projectID:projectID,imageRegistryInfo:{image_registry_name:constants.dockerio,image_repo_name:constants.litmus,image_registry_type:constants.public,secret_name:'',secret_namespace:'',enable_registry:true}}});}},t('settings.imageRegistry.defaultReg'))):null),/*#__PURE__*/React.createElement(\"div\",{className:classes.mainRadioDiv},/*#__PURE__*/React.createElement(FormControlLabel,{value:\"enabled\",control:/*#__PURE__*/React.createElement(Radio,{classes:{root:classes.radio,checked:classes.checked}}),\"data-cy\":\"localRadioButton\",label:/*#__PURE__*/React.createElement(Typography,{className:classes.defaultText},t('settings.imageRegistry.customValues'))}),isCustomRegistryEnabled?/*#__PURE__*/React.createElement(\"div\",{className:classes.registryInfoDiv},/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.registry'),/*#__PURE__*/React.createElement(\"strong\",null,registryData.registry_name)),/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.repo'),/*#__PURE__*/React.createElement(\"strong\",null,registryData.repo_name)),/*#__PURE__*/React.createElement(Typography,{className:classes.registryInfoText},t('settings.imageRegistry.repoType'),/*#__PURE__*/React.createElement(\"strong\",null,registryData.registry_type))):/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:classes.customDiv},/*#__PURE__*/React.createElement(InputField,{label:\"Custom Image Registry\",value:registryInfo.registry_name,className:classes.inputDiv,onChange:function onChange(event){setRegistryInfo(_objectSpread(_objectSpread({},registryInfo),{},{registry_name:event.target.value}));}}),/*#__PURE__*/React.createElement(InputField,{label:\"Custom Image Repository\",value:registryInfo.repo_name,onChange:function onChange(event){setRegistryInfo(_objectSpread(_objectSpread({},registryInfo),{},{repo_name:event.target.value}));}})),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl},/*#__PURE__*/React.createElement(InputLabel,{className:classes.labelText,id:\"demo-simple-select-helper-label\"},t('settings.imageRegistry.registryLabel')),/*#__PURE__*/React.createElement(Select,{labelId:\"demo-simple-select-helper-label\",id:\"demo-simple-select-helper\",value:registryType,onChange:function onChange(event){setRegistryType(event.target.value);setRegistryInfo(_objectSpread(_objectSpread({},registryInfo),{},{registry_type:event.target.value}));},label:\"Registry Type\"},/*#__PURE__*/React.createElement(MenuItem,{value:\"Public\"},t('settings.imageRegistry.public')),/*#__PURE__*/React.createElement(MenuItem,{value:\"Private\"},t('settings.imageRegistry.private')))),/*#__PURE__*/React.createElement(\"br\",null),registryType==='Private'&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex'}},/*#__PURE__*/React.createElement(Typography,{className:classes.additionalDetails},t('settings.imageRegistry.additionalInfo')),/*#__PURE__*/React.createElement(IconButton,{className:classes.iconBtn,onClick:handleClick,\"aria-label\":\"info\"},/*#__PURE__*/React.createElement(InfoIcon,null)),/*#__PURE__*/React.createElement(Popover,{id:id,open:open,anchorEl:anchorEl,onClose:handleClose,anchorOrigin:{vertical:'bottom',horizontal:'center'},transformOrigin:{vertical:'top',horizontal:'center'}},/*#__PURE__*/React.createElement(Typography,{className:classes.infoText},t('settings.imageRegistry.provideInfo'),' ',/*#__PURE__*/React.createElement(\"a\",{href:\"https://kubernetes.io/docs/concepts/configuration/secret/\",target:\"_\"},t('settings.imageRegistry.visit')),\".\"))),/*#__PURE__*/React.createElement(\"div\",{className:classes.customDiv},/*#__PURE__*/React.createElement(InputField,{label:\"Custom Image Secret\",value:registryInfo.secret_name,className:classes.inputDiv,onChange:function onChange(event){setRegistryInfo(_objectSpread(_objectSpread({},registryInfo),{},{secret_name:event.target.value}));}}),/*#__PURE__*/React.createElement(InputField,{label:\"Secret Namespace\",value:registryInfo.secret_namespace,onChange:function onChange(event){setRegistryInfo(_objectSpread(_objectSpread({},registryInfo),{},{secret_namespace:event.target.value}));}})),/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(ButtonFilled,{disabled:registry==='disabled'||registryInfo.registry_name.trim().length===0||registryInfo.repo_name.trim().length===0,type:\"submit\"},t('settings.imageRegistry.save'))))))));};export default ImageRegistry;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Settings/ImageRegistry/index.tsx"],"names":["useLazyQuery","useMutation","useQuery","FormControl","FormControlLabel","IconButton","InputLabel","MenuItem","Popover","Radio","RadioGroup","Select","Typography","ButtonFilled","InputField","React","useEffect","useState","useTranslation","InfoIcon","Loader","constants","ADD_IMAGE_REGISTRY","GET_IMAGE_REGISTRY","LIST_IMAGE_REGISTRY","UPDATE_IMAGE_REGISTRY","getProjectID","useStyles","ImageRegistry","t","classes","projectID","registry","setRegistry","registryID","setRegistryID","registryType","setRegistryType","isCustomRegistryEnabled","setIsCustomRegistryEnabled","isAvailable","setIsAvailable","fetchPolicy","getRegistryData","data","loading","registry_name","repo_name","registry_type","public","secret_name","secret_namespace","enable_registry","registryInfo","setRegistryInfo","registryData","setRegistryData","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","open","Boolean","id","undefined","variables","onCompleted","ListImageRegistry","length","image_registry_id","registryid","projectid","listLoading","updateImageRegistry","image_registry_info","image_repo_name","image_registry_name","image_registry_type","updateLoader","refetchQueries","query","onError","createImageRegistry","GetImageRegistry","litmus","docker","handleSubmit","preventDefault","imageRegistryID","imageRegistryInfo","container","headerText","headerDesc","width","target","value","mainRadioDiv","root","radio","checked","defaultText","defaultTextDesc","registryInfoDiv","registryInfoText","defaultBtn","dockerio","customDiv","inputDiv","formControl","labelText","display","additionalDetails","iconBtn","vertical","horizontal","infoText","trim"],"mappings":"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","sourcesContent":["import { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport {\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Popover,\n  Radio,\n  RadioGroup,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport { ButtonFilled, InputField } from 'litmus-ui';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Loader from '../../../components/Loader';\nimport { constants } from '../../../constants';\nimport {\n  ADD_IMAGE_REGISTRY,\n  GET_IMAGE_REGISTRY,\n  LIST_IMAGE_REGISTRY,\n  UPDATE_IMAGE_REGISTRY,\n} from '../../../graphql';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles from './styles';\n\ninterface RegistryInfo {\n  registry_name: string;\n  repo_name: string;\n  registry_type: string;\n  secret_name: string;\n  secret_namespace: string;\n  enable_registry: boolean;\n}\n\ninterface RegistryData {\n  registry_name: string;\n  repo_name: string;\n  registry_type: string;\n}\n\nconst ImageRegistry = () => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const projectID = getProjectID();\n  const [registry, setRegistry] = useState('enabled');\n  const [registryID, setRegistryID] = useState('');\n  const [registryType, setRegistryType] = useState('Public');\n  const [isCustomRegistryEnabled, setIsCustomRegistryEnabled] = useState(false);\n  const [isAvailable, setIsAvailable] = useState(true);\n  /**\n   * GetRegistryData to fetch Registry Data by ID\n   */\n  const [getRegistryData, { data, loading }] = useLazyQuery(\n    GET_IMAGE_REGISTRY,\n    {\n      fetchPolicy: 'network-only',\n    }\n  );\n  const [registryInfo, setRegistryInfo] = useState<RegistryInfo>({\n    registry_name: '',\n    repo_name: '',\n    registry_type: constants.public,\n    secret_name: '',\n    secret_namespace: '',\n    enable_registry: true,\n  });\n  const [registryData, setRegistryData] = useState<RegistryData>({\n    registry_name: '',\n    repo_name: '',\n    registry_type: '',\n  });\n\n  /**\n   * State variables to manage popover actions\n   */\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  /**\n   * ListImageRegistry is used to fetch the list of image registries\n   */\n  const { loading: listLoading } = useQuery(LIST_IMAGE_REGISTRY, {\n    variables: {\n      data: projectID,\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: (data) => {\n      if (\n        data.ListImageRegistry !== null &&\n        data.ListImageRegistry.length > 0\n      ) {\n        setRegistryID(data.ListImageRegistry[0].image_registry_id);\n        getRegistryData({\n          variables: {\n            registryid: data.ListImageRegistry[0].image_registry_id,\n            projectid: projectID,\n          },\n        });\n      } else {\n        setIsAvailable(false);\n        setRegistry('disabled');\n      }\n    },\n  });\n\n  /**\n   * UpdateImageRegistry is used to update the Image Registry\n   */\n  const [updateImageRegistry, { loading: updateLoader }] = useMutation(\n    UPDATE_IMAGE_REGISTRY,\n    {\n      onCompleted: (data) => {\n        if (\n          data.updateImageRegistry.image_registry_info.image_repo_name ===\n          'litmuschaos'\n        ) {\n          setIsCustomRegistryEnabled(false);\n          setRegistry('disabled');\n        } else {\n          setIsCustomRegistryEnabled(true);\n          setRegistry('enabled');\n        }\n        setRegistryData({\n          registry_name:\n            data.updateImageRegistry.image_registry_info.image_registry_name,\n          repo_name:\n            data.updateImageRegistry.image_registry_info.image_repo_name,\n          registry_type:\n            data.updateImageRegistry.image_registry_info.image_registry_type,\n        });\n      },\n    }\n  );\n\n  const [createImageRegistry] = useMutation(ADD_IMAGE_REGISTRY, {\n    refetchQueries: [\n      {\n        query: LIST_IMAGE_REGISTRY,\n        variables: {\n          data: projectID,\n        },\n      },\n    ],\n    onCompleted: (data) => {\n      if (data !== undefined) {\n        setIsAvailable(true);\n      }\n    },\n    onError: () => {\n      setIsAvailable(false);\n    },\n  });\n\n  /**\n   * UseEffect to set the initial data of image registry\n   */\n  useEffect(() => {\n    if (data !== undefined) {\n      if (\n        data.GetImageRegistry.image_registry_info.image_repo_name ===\n        constants.litmus\n      ) {\n        setRegistry('disabled');\n        setIsCustomRegistryEnabled(false);\n        setRegistryData({\n          registry_name: constants.docker,\n          repo_name: constants.litmus,\n          registry_type: constants.public,\n        });\n      } else {\n        setRegistry('enabled');\n        setIsCustomRegistryEnabled(true);\n        setRegistryData({\n          registry_name:\n            data.GetImageRegistry.image_registry_info.image_registry_name,\n          repo_name: data.GetImageRegistry.image_registry_info.image_repo_name,\n          registry_type:\n            data.GetImageRegistry.image_registry_info.image_registry_type,\n        });\n      }\n    }\n  }, [data]);\n\n  /**\n   * HandleSubmit is used to update the image registry to custom registry\n   */\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    updateImageRegistry({\n      variables: {\n        imageRegistryID: registryID,\n        projectID,\n        imageRegistryInfo: {\n          image_registry_name: registryInfo.registry_name,\n          image_repo_name: registryInfo.repo_name,\n          image_registry_type: registryInfo.registry_type,\n          secret_name: registryInfo.secret_name,\n          secret_namespace: registryInfo.secret_namespace,\n          enable_registry: true,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography className={classes.headerText}>\n        {t('settings.imageRegistry.heading')}\n      </Typography>\n      <Typography className={classes.headerDesc}>\n        {t('settings.imageRegistry.headingDesc')}\n      </Typography>\n\n      {listLoading && loading ? (\n        <Loader />\n      ) : (\n        <form id=\"login-form\" autoComplete=\"on\" onSubmit={handleSubmit}>\n          <FormControl component=\"fieldset\" style={{ width: '70%' }}>\n            <RadioGroup\n              name=\"image-registry\"\n              value={registry}\n              onChange={(event) => {\n                setRegistry(event.target.value);\n              }}\n            >\n              <div className={classes.mainRadioDiv}>\n                <FormControlLabel\n                  value=\"disabled\"\n                  control={\n                    <Radio\n                      classes={{\n                        root: classes.radio,\n                        checked: classes.checked,\n                      }}\n                    />\n                  }\n                  data-cy=\"localRadioButton\"\n                  label={\n                    <Typography className={classes.defaultText}>\n                      {t('settings.imageRegistry.defaultValues')}\n                    </Typography>\n                  }\n                />\n                <Typography className={classes.defaultTextDesc}>\n                  {t('settings.imageRegistry.defaultText')}\n                </Typography>\n                <div className={classes.registryInfoDiv}>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.registry')}\n                    <strong> {t('settings.imageRegistry.dockerio')}</strong>\n                  </Typography>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.repo')}\n                    <strong> {t('settings.imageRegistry.litmus')}</strong>\n                  </Typography>\n                  <Typography className={classes.registryInfoText}>\n                    {t('settings.imageRegistry.repoType')}\n                    <strong> {t('settings.imageRegistry.public')}</strong>\n                  </Typography>\n                </div>\n                {!isAvailable ? (\n                  <Typography color=\"error\">\n                    {t('settings.imageRegistry.noRegistry')}\n                  </Typography>\n                ) : (\n                  <></>\n                )}\n                {(registry === 'disabled' &&\n                  isCustomRegistryEnabled === true) ||\n                !isAvailable ? (\n                  <div>\n                    <ButtonFilled\n                      className={classes.defaultBtn}\n                      data-cy=\"disableGitopsButton\"\n                      disabled={updateLoader}\n                      onClick={() =>\n                        !isAvailable\n                          ? createImageRegistry({\n                              variables: {\n                                projectID,\n                                imageRegistryInfo: {\n                                  image_registry_name: constants.dockerio,\n                                  image_repo_name: constants.litmus,\n                                  image_registry_type: constants.public,\n                                  secret_name: '',\n                                  secret_namespace: '',\n                                  enable_registry: true,\n                                },\n                              },\n                            })\n                          : updateImageRegistry({\n                              variables: {\n                                imageRegistryID: registryID,\n                                projectID,\n                                imageRegistryInfo: {\n                                  image_registry_name: constants.dockerio,\n                                  image_repo_name: constants.litmus,\n                                  image_registry_type: constants.public,\n                                  secret_name: '',\n                                  secret_namespace: '',\n                                  enable_registry: true,\n                                },\n                              },\n                            })\n                      }\n                    >\n                      {t('settings.imageRegistry.defaultReg')}\n                    </ButtonFilled>\n                  </div>\n                ) : null}\n              </div>\n              <div className={classes.mainRadioDiv}>\n                <FormControlLabel\n                  value=\"enabled\"\n                  control={\n                    <Radio\n                      classes={{\n                        root: classes.radio,\n                        checked: classes.checked,\n                      }}\n                    />\n                  }\n                  data-cy=\"localRadioButton\"\n                  label={\n                    <Typography className={classes.defaultText}>\n                      {t('settings.imageRegistry.customValues')}\n                    </Typography>\n                  }\n                />\n\n                {isCustomRegistryEnabled ? (\n                  <div className={classes.registryInfoDiv}>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.registry')}\n                      <strong>{registryData.registry_name}</strong>\n                    </Typography>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.repo')}\n                      <strong>{registryData.repo_name}</strong>\n                    </Typography>\n                    <Typography className={classes.registryInfoText}>\n                      {t('settings.imageRegistry.repoType')}\n                      <strong>{registryData.registry_type}</strong>\n                    </Typography>\n                  </div>\n                ) : (\n                  <>\n                    <div className={classes.customDiv}>\n                      <InputField\n                        label=\"Custom Image Registry\"\n                        value={registryInfo.registry_name}\n                        className={classes.inputDiv}\n                        onChange={(event) => {\n                          setRegistryInfo({\n                            ...registryInfo,\n                            registry_name: event.target.value,\n                          });\n                        }}\n                      />\n\n                      <InputField\n                        label=\"Custom Image Repository\"\n                        value={registryInfo.repo_name}\n                        onChange={(event) => {\n                          setRegistryInfo({\n                            ...registryInfo,\n                            repo_name: event.target.value,\n                          });\n                        }}\n                      />\n                    </div>\n                    <FormControl\n                      variant=\"outlined\"\n                      className={classes.formControl}\n                    >\n                      <InputLabel\n                        className={classes.labelText}\n                        id=\"demo-simple-select-helper-label\"\n                      >\n                        {t('settings.imageRegistry.registryLabel')}\n                      </InputLabel>\n                      <Select\n                        labelId=\"demo-simple-select-helper-label\"\n                        id=\"demo-simple-select-helper\"\n                        value={registryType}\n                        onChange={(event) => {\n                          setRegistryType(event.target.value as string);\n                          setRegistryInfo({\n                            ...registryInfo,\n                            registry_type: event.target.value as string,\n                          });\n                        }}\n                        label=\"Registry Type\"\n                      >\n                        <MenuItem value=\"Public\">\n                          {t('settings.imageRegistry.public')}\n                        </MenuItem>\n                        <MenuItem value=\"Private\">\n                          {t('settings.imageRegistry.private')}\n                        </MenuItem>\n                      </Select>\n                    </FormControl>\n                    <br />\n                    {registryType === 'Private' && (\n                      <>\n                        <hr />\n                        <div style={{ display: 'flex' }}>\n                          <Typography className={classes.additionalDetails}>\n                            {t('settings.imageRegistry.additionalInfo')}\n                          </Typography>\n                          <IconButton\n                            className={classes.iconBtn}\n                            onClick={handleClick}\n                            aria-label=\"info\"\n                          >\n                            <InfoIcon />\n                          </IconButton>\n                          <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                              vertical: 'bottom',\n                              horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                              vertical: 'top',\n                              horizontal: 'center',\n                            }}\n                          >\n                            <Typography className={classes.infoText}>\n                              {t('settings.imageRegistry.provideInfo')}{' '}\n                              <a\n                                href=\"https://kubernetes.io/docs/concepts/configuration/secret/\"\n                                target=\"_\"\n                              >\n                                {t('settings.imageRegistry.visit')}\n                              </a>\n                              .\n                            </Typography>\n                          </Popover>\n                        </div>\n                        <div className={classes.customDiv}>\n                          <InputField\n                            label=\"Custom Image Secret\"\n                            value={registryInfo.secret_name}\n                            className={classes.inputDiv}\n                            onChange={(event) => {\n                              setRegistryInfo({\n                                ...registryInfo,\n                                secret_name: event.target.value,\n                              });\n                            }}\n                          />\n                          <InputField\n                            label=\"Secret Namespace\"\n                            value={registryInfo.secret_namespace}\n                            onChange={(event) => {\n                              setRegistryInfo({\n                                ...registryInfo,\n                                secret_namespace: event.target.value,\n                              });\n                            }}\n                          />\n                        </div>\n                        <br />\n                      </>\n                    )}\n                    <ButtonFilled\n                      disabled={\n                        registry === 'disabled' ||\n                        registryInfo.registry_name.trim().length === 0 ||\n                        registryInfo.repo_name.trim().length === 0\n                      }\n                      type=\"submit\"\n                    >\n                      {t('settings.imageRegistry.save')}\n                    </ButtonFilled>\n                  </>\n                )}\n              </div>\n            </RadioGroup>\n          </FormControl>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ImageRegistry;\n"]},"metadata":{},"sourceType":"module"}