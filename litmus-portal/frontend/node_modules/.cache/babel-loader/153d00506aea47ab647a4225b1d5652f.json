{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Home/AgentConfiguredHome/WorkflowRunCard/index.tsx\";\n\nimport { Link, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useActions from '../../../../redux/actions';\nimport * as NodeSelectionActions from '../../../../redux/actions/nodeSelection';\nimport { history } from '../../../../redux/configureStore';\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport { FAILED, NOTAVAILABLE, PENDING, RUNNING, SUCCEEDED } from '../../../WorkflowDetails/workflowConstants';\nimport useStyles from './styles';\n\nvar WorkflowRunCard = function WorkflowRunCard(_ref) {\n  var _data$resiliency_scor;\n\n  var data = _ref.data;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var classes = useStyles();\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var nodeSelection = useActions(NodeSelectionActions);\n\n  function getStatusVariant(phase) {\n    switch (phase) {\n      case SUCCEEDED:\n        return 'status-success.svg';\n\n      case RUNNING:\n        return 'status-running.svg';\n\n      case FAILED:\n        return 'status-failed.svg';\n\n      case PENDING:\n        return 'status-pending.svg';\n\n      case NOTAVAILABLE:\n        return 'status-NotAvailable.svg';\n\n      default:\n        return '';\n    }\n  }\n\n  function getResiliencyScoreVariant(score) {\n    if (score <= 40) {\n      return classes.lowScore;\n    }\n\n    if (score > 40 && score < 79) {\n      return classes.mediumScore;\n    }\n\n    return classes.highScore;\n  }\n\n  return /*#__PURE__*/React.createElement(Link, {\n    underline: \"none\",\n    color: \"initial\",\n    onClick: function onClick() {\n      nodeSelection.selectNode({\n        pod_name: ''\n      });\n      history.push({\n        pathname: \"/workflows/\".concat(data.workflow_run_id),\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    title: t('homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.cardTitle'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.animatedContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.workflowDataContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.statusDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"./icons/\".concat(getStatusVariant(data.phase)),\n    alt: data.phase,\n    title: data.phase,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.testName, \" \").concat(classes.noWrapProvider),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, data.workflow_name), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, data.cluster_name)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, t('homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.resilienceRate')), /*#__PURE__*/React.createElement(Typography, {\n    className: getResiliencyScoreVariant((_data$resiliency_scor = data.resiliency_score) !== null && _data$resiliency_scor !== void 0 ? _data$resiliency_scor : 0),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, data.resiliency_score === undefined || data.resiliency_score === null ? 'NA' : \"\".concat(data.resiliency_score, \"%\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.hint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, t('homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.lastRun')), /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.noWrapProvider, \" \").concat(classes.lastRunTime),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, timeDifferenceForDate(data.last_updated))))));\n};\n\nexport { WorkflowRunCard };","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Home/AgentConfiguredHome/WorkflowRunCard/index.tsx"],"names":["Link","Typography","React","useTranslation","useActions","NodeSelectionActions","history","timeDifferenceForDate","getProjectID","getProjectRole","FAILED","NOTAVAILABLE","PENDING","RUNNING","SUCCEEDED","useStyles","WorkflowRunCard","data","t","classes","projectID","projectRole","nodeSelection","getStatusVariant","phase","getResiliencyScoreVariant","score","lowScore","mediumScore","highScore","selectNode","pod_name","push","pathname","workflow_run_id","search","animatedContainer","workflowDataContainer","statusDiv","testName","noWrapProvider","workflow_name","hint","cluster_name","resiliency_score","undefined","lastRunTime","last_updated"],"mappings":"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","sourcesContent":["import { Link, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { WorkflowRun } from '../../../../models/graphql/workflowData';\nimport useActions from '../../../../redux/actions';\nimport * as NodeSelectionActions from '../../../../redux/actions/nodeSelection';\nimport { history } from '../../../../redux/configureStore';\nimport timeDifferenceForDate from '../../../../utils/datesModifier';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport {\n  FAILED,\n  NOTAVAILABLE,\n  PENDING,\n  RUNNING,\n  SUCCEEDED,\n} from '../../../WorkflowDetails/workflowConstants';\nimport useStyles from './styles';\n\ninterface WorkflowRunCardProps {\n  data: Partial<WorkflowRun>;\n}\n\nconst WorkflowRunCard: React.FC<WorkflowRunCardProps> = ({ data }) => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  function getStatusVariant(phase: string | undefined): string {\n    switch (phase) {\n      case SUCCEEDED:\n        return 'status-success.svg';\n      case RUNNING:\n        return 'status-running.svg';\n      case FAILED:\n        return 'status-failed.svg';\n      case PENDING:\n        return 'status-pending.svg';\n      case NOTAVAILABLE:\n        return 'status-NotAvailable.svg';\n      default:\n        return '';\n    }\n  }\n\n  function getResiliencyScoreVariant(score: number) {\n    if (score <= 40) {\n      return classes.lowScore;\n    }\n    if (score > 40 && score < 79) {\n      return classes.mediumScore;\n    }\n    return classes.highScore;\n  }\n\n  return (\n    <Link\n      underline=\"none\"\n      color=\"initial\"\n      onClick={() => {\n        nodeSelection.selectNode({\n          pod_name: '',\n        });\n        history.push({\n          pathname: `/workflows/${data.workflow_run_id}`,\n          search: `?projectID=${projectID}&projectRole=${projectRole}`,\n        });\n      }}\n      title={t(\n        'homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.cardTitle'\n      )}\n    >\n      <div className={classes.animatedContainer}>\n        <div className={classes.workflowDataContainer}>\n          <div>\n            <div className={classes.statusDiv}>\n              <img\n                src={`./icons/${getStatusVariant(data.phase)}`}\n                alt={data.phase}\n                title={data.phase}\n              />\n              <div>\n                <Typography\n                  className={`${classes.testName} ${classes.noWrapProvider}`}\n                >\n                  {data.workflow_name}\n                </Typography>\n                <Typography className={classes.hint}>\n                  {data.cluster_name}\n                </Typography>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <Typography className={classes.hint}>\n              {t(\n                'homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.resilienceRate'\n              )}\n            </Typography>\n            <Typography\n              className={getResiliencyScoreVariant(data.resiliency_score ?? 0)}\n            >\n              {data.resiliency_score === undefined ||\n              data.resiliency_score === null\n                ? 'NA'\n                : `${data.resiliency_score}%`}\n            </Typography>\n          </div>\n\n          <div>\n            <Typography className={classes.hint}>\n              {t(\n                'homeViews.agentConfiguredHome.recentWorkflowRuns.workflowRunCard.lastRun'\n              )}\n            </Typography>\n            <Typography\n              className={`${classes.noWrapProvider} ${classes.lastRunTime}`}\n            >\n              {timeDifferenceForDate(data.last_updated)}\n            </Typography>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport { WorkflowRunCard };\n"]},"metadata":{},"sourceType":"module"}