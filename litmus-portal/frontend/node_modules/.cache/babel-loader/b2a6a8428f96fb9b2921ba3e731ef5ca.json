{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowNodeInfo/index.tsx\";\n\nimport { IconButton, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport YAML from 'yaml';\nimport { ButtonOutlined } from 'litmus-ui';\nimport { useSelector } from 'react-redux';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles from './styles';\nimport trimstring from '../../../utils/trim';\nimport WorkflowStatus from '../WorkflowStatus';\nimport LogsSwitcher from '../LogsSwitcher';\nimport { stepEmbeddedYAMLExtractor } from '../../../utils/yamlUtils';\n\nvar WorkflowNodeInfo = function WorkflowNodeInfo(_ref) {\n  var manifest = _ref.manifest,\n      cluster_id = _ref.cluster_id,\n      workflow_run_id = _ref.workflow_run_id,\n      data = _ref.data,\n      setIsInfoToggled = _ref.setIsInfoToggled;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAppInfoVisible = _useState2[0],\n      setIsAppInfoVisible = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.selectedNode;\n  }),\n      pod_name = _useSelector.pod_name;\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      embeddedYAMLString = _useState4[0],\n      setEmbeddedYAMLString = _useState4[1];\n\n  useEffect(function () {\n    var currentEmbeddedYAMLString = stepEmbeddedYAMLExtractor(manifest, data.nodes[pod_name].name);\n    setEmbeddedYAMLString(currentEmbeddedYAMLString);\n    if (embeddedYAMLString && !YAML.parse(embeddedYAMLString).spec.appinfo) setIsAppInfoVisible(false);\n  }, [pod_name]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, trimstring(data.nodes[pod_name].name, 30))), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    className: classes.closeButton,\n    onClick: function onClick() {\n      setIsInfoToggled(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"\\u2715\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.section,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.leftPanel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowStatus, {\n    phase: data.nodes[pod_name].phase,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.textMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowNodeInfo.startTime'), \":\"), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, data.nodes[pod_name].phase !== 'Pending' ? timeDifference(data.nodes[pod_name].startedAt) : '- -')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.textMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowNodeInfo.endTime'), \":\"), \"\\xA0\\xA0\\xA0\", data.nodes[pod_name].finishedAt !== '' ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, timeDifference(data.nodes[pod_name].finishedAt)) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"- -\")), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.textMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, t('workflowDetailsView.workflowNodeInfo.duration'), \":\"), \"\\xA0\\xA0\\xA0\", data.nodes[pod_name].finishedAt !== '' ? ((parseInt(data.nodes[pod_name].finishedAt, 10) - parseInt(data.nodes[pod_name].startedAt, 10)) / 60).toFixed(1) : ((new Date().getTime() / 1000 - parseInt(data.nodes[pod_name].startedAt, 10)) / 60).toFixed(1), ' ', \"minutes\"), data.nodes[pod_name].type === 'ChaosEngine' && embeddedYAMLString && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {\n    disabled: !YAML.parse(embeddedYAMLString).spec.appinfo,\n    onClick: function onClick() {\n      return setIsAppInfoVisible(!isAppInfoVisible);\n    },\n    className: classes.buttonAlign,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, isAppInfoVisible ? /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/down-arrow.svg\",\n    alt: \"down arrow icon\",\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/right-arrow.svg\",\n    alt: \"right-arrow icon\",\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }, t('workflowDetailsView.workflowNodeInfo.viewApplicationDetails')))), isAppInfoVisible && YAML.parse(embeddedYAMLString).spec.appinfo && /*#__PURE__*/React.createElement(Typography, {\n    className: classes.textMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, Object.keys(YAML.parse(embeddedYAMLString).spec.appinfo).map(function (key, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index.toString(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, key, \" :\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, \"\\xA0\\xA0\", YAML.parse(embeddedYAMLString).spec.appinfo[key]));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rightPanel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LogsSwitcher, {\n    cluster_id: cluster_id,\n    workflow_run_id: workflow_run_id,\n    pod_namespace: data.namespace,\n    pod_type: data.nodes[pod_name].type,\n    pod_name: pod_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default WorkflowNodeInfo;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowNodeInfo/index.tsx"],"names":["IconButton","Typography","React","useEffect","useState","useTranslation","YAML","ButtonOutlined","useSelector","timeDifference","useStyles","trimstring","WorkflowStatus","LogsSwitcher","stepEmbeddedYAMLExtractor","WorkflowNodeInfo","manifest","cluster_id","workflow_run_id","data","setIsInfoToggled","classes","t","isAppInfoVisible","setIsAppInfoVisible","state","selectedNode","pod_name","embeddedYAMLString","setEmbeddedYAMLString","currentEmbeddedYAMLString","nodes","name","parse","spec","appinfo","root","header","title","closeButton","section","leftPanel","phase","textMargin","startedAt","finishedAt","parseInt","toFixed","Date","getTime","type","buttonAlign","icon","Object","keys","map","key","index","toString","rightPanel","namespace"],"mappings":"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","sourcesContent":["import { IconButton, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport YAML from 'yaml';\nimport { ButtonOutlined } from 'litmus-ui';\nimport { useSelector } from 'react-redux';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles from './styles';\nimport trimstring from '../../../utils/trim';\nimport WorkflowStatus from '../WorkflowStatus';\nimport LogsSwitcher from '../LogsSwitcher';\nimport { stepEmbeddedYAMLExtractor } from '../../../utils/yamlUtils';\nimport { ExecutionData } from '../../../models/graphql/workflowData';\nimport { RootState } from '../../../redux/reducers';\n\ninterface WorkflowNodeInfoProps {\n  setIsInfoToggled: React.Dispatch<React.SetStateAction<boolean>>;\n  manifest: string;\n  cluster_id: string;\n  workflow_run_id: string;\n  data: ExecutionData;\n}\n\nconst WorkflowNodeInfo: React.FC<WorkflowNodeInfoProps> = ({\n  manifest,\n  cluster_id,\n  workflow_run_id,\n  data,\n  setIsInfoToggled,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [isAppInfoVisible, setIsAppInfoVisible] = useState(false);\n\n  const { pod_name } = useSelector((state: RootState) => state.selectedNode);\n\n  const [embeddedYAMLString, setEmbeddedYAMLString] = useState('');\n\n  useEffect(() => {\n    const currentEmbeddedYAMLString = stepEmbeddedYAMLExtractor(\n      manifest,\n      data.nodes[pod_name].name\n    );\n    setEmbeddedYAMLString(currentEmbeddedYAMLString);\n    if (embeddedYAMLString && !YAML.parse(embeddedYAMLString).spec.appinfo)\n      setIsAppInfoVisible(false);\n  }, [pod_name]);\n\n  return (\n    <div className={classes.root}>\n      {/* Node Details */}\n\n      {/* Header */}\n      <div className={classes.header}>\n        <Typography className={classes.title}>\n          <strong>{trimstring(data.nodes[pod_name].name, 30)}</strong>\n        </Typography>\n        <ButtonOutlined\n          className={classes.closeButton}\n          onClick={() => {\n            setIsInfoToggled(false);\n          }}\n        >\n          &#x2715;\n        </ButtonOutlined>\n      </div>\n\n      {/* Section */}\n      <div className={classes.section}>\n        {/* Left-Panel Containing details about selected Node. */}\n        <div className={classes.leftPanel}>\n          {/* Phase */}\n          <WorkflowStatus phase={data.nodes[pod_name].phase} />\n          {/* Start Time */}\n          <Typography className={classes.textMargin}>\n            <strong>\n              {t('workflowDetailsView.workflowNodeInfo.startTime')}:\n            </strong>\n            &nbsp;&nbsp;&nbsp;\n            <span>\n              {data.nodes[pod_name].phase !== 'Pending'\n                ? timeDifference(data.nodes[pod_name].startedAt)\n                : '- -'}\n            </span>\n          </Typography>\n          {/* End Time */}\n          <Typography className={classes.textMargin}>\n            <strong>\n              {t('workflowDetailsView.workflowNodeInfo.endTime')}:\n            </strong>\n            &nbsp;&nbsp;&nbsp;\n            {data.nodes[pod_name].finishedAt !== '' ? (\n              <span>{timeDifference(data.nodes[pod_name].finishedAt)}</span>\n            ) : (\n              <span>- -</span>\n            )}\n          </Typography>\n          {/* Duration */}\n          <Typography className={classes.textMargin}>\n            <strong>\n              {t('workflowDetailsView.workflowNodeInfo.duration')}:\n            </strong>\n            &nbsp;&nbsp;&nbsp;\n            {data.nodes[pod_name].finishedAt !== ''\n              ? (\n                  (parseInt(data.nodes[pod_name].finishedAt, 10) -\n                    parseInt(data.nodes[pod_name].startedAt, 10)) /\n                  60\n                ).toFixed(1)\n              : (\n                  (new Date().getTime() / 1000 -\n                    parseInt(data.nodes[pod_name].startedAt, 10)) /\n                  60\n                ).toFixed(1)}{' '}\n            minutes\n          </Typography>\n          {/* Button to show Application Details */}\n          {data.nodes[pod_name].type === 'ChaosEngine' && embeddedYAMLString && (\n            <>\n              <IconButton\n                disabled={!YAML.parse(embeddedYAMLString).spec.appinfo}\n                onClick={() => setIsAppInfoVisible(!isAppInfoVisible)}\n                className={classes.buttonAlign}\n              >\n                {isAppInfoVisible ? (\n                  <img\n                    src=\"/icons/down-arrow.svg\"\n                    alt=\"down arrow icon\"\n                    className={classes.icon}\n                  />\n                ) : (\n                  <img\n                    src=\"/icons/right-arrow.svg\"\n                    alt=\"right-arrow icon\"\n                    className={classes.icon}\n                  />\n                )}\n                <Typography>\n                  <strong>\n                    {t(\n                      'workflowDetailsView.workflowNodeInfo.viewApplicationDetails'\n                    )}\n                  </strong>\n                </Typography>\n              </IconButton>\n              {isAppInfoVisible && YAML.parse(embeddedYAMLString).spec.appinfo && (\n                <Typography className={classes.textMargin}>\n                  {Object.keys(YAML.parse(embeddedYAMLString).spec.appinfo).map(\n                    (key, index) => (\n                      <div key={index.toString()}>\n                        <strong>{key} :</strong>\n                        <span>\n                          &nbsp;&nbsp;\n                          {YAML.parse(embeddedYAMLString).spec.appinfo[key]}\n                        </span>\n                      </div>\n                    )\n                  )}\n                </Typography>\n              )}\n            </>\n          )}\n        </div>\n        {/* Right Panel for Node Logs */}\n        <div className={classes.rightPanel}>\n          <LogsSwitcher\n            cluster_id={cluster_id}\n            workflow_run_id={workflow_run_id}\n            pod_namespace={data.namespace}\n            pod_type={data.nodes[pod_name].type}\n            pod_name={pod_name}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowNodeInfo;\n"]},"metadata":{},"sourceType":"module"}