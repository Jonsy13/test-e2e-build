{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Avatar,Button,FormControl,IconButton,InputAdornment,InputBase,InputLabel,MenuItem,OutlinedInput,Select,Typography}from'@material-ui/core';import useTheme from'@material-ui/core/styles/useTheme';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import DescriptionOutlinedIcon from'@material-ui/icons/DescriptionOutlined';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import SearchIcon from'@material-ui/icons/Search';import{ButtonOutlined}from'litmus-ui';import React,{useEffect,useRef,useState}from'react';import{useTranslation}from'react-i18next';import DateRangeSelector from'../../../../components/DateRangeSelector';import useStyles,{useOutlinedInputStyles}from'./styles';var TableToolBar=function TableToolBar(_ref){var numSelected=_ref.numSelected,handleSearch=_ref.handleSearch,searchToken=_ref.searchToken,clusters=_ref.clusters,callbackToSetCluster=_ref.callbackToSetCluster,callbackToSetRange=_ref.callbackToSetRange,callbackToCompare=_ref.callbackToCompare,callbackToExport=_ref.callbackToExport,comparisonState=_ref.comparisonState,reInitialize=_ref.reInitialize;var classes=useStyles();var outlinedInputClasses=useOutlinedInputStyles();var _useTheme=useTheme(),palette=_useTheme.palette;var _useTranslation=useTranslation(),t=_useTranslation.t;var _React$useState=React.useState('All'),_React$useState2=_slicedToArray(_React$useState,2),cluster=_React$useState2[0],setCluster=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),compare=_React$useState4[0],setCompare=_React$useState4[1];var _React$useState5=React.useState({startDate:' ',endDate:' '}),_React$useState6=_slicedToArray(_React$useState5,2),range=_React$useState6[0],setRange=_React$useState6[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDateRangeSelectorPopoverOpen=_useState2[0],setDateRangeSelectorPopoverOpen=_useState2[1];var dateRangeSelectorRef=useRef(null);var handleClusterChange=function handleClusterChange(event){setCluster(event.target.value);callbackToSetCluster(event.target.value);};var CallbackFromRangeSelector=function CallbackFromRangeSelector(selectedStartDate,selectedEndDate){setRange({startDate:selectedStartDate,endDate:selectedEndDate});callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2],\" \").concat(selectedStartDate.split(' ')[1],\" \").concat(selectedStartDate.split(' ')[3])),\"\".concat(\"\".concat(selectedEndDate.split(' ')[2],\" \").concat(selectedEndDate.split(' ')[1],\" \").concat(selectedEndDate.split(' ')[3])));};var handleClick=function handleClick(){setCompare(true);callbackToCompare(true);};var handleExport=function handleExport(){callbackToExport(true);};var reInitializer=function reInitializer(){setRange({startDate:' ',endDate:' '});setCluster('All');};useEffect(function(){if(comparisonState===false||reInitialize===true){reInitializer();}},[]);return/*#__PURE__*/React.createElement(\"div\",{className:classes.headerSection},/*#__PURE__*/React.createElement(InputBase,{id:\"input-with-icon-adornment\",placeholder:\"Search\",className:classes.search,value:searchToken,onChange:handleSearch,classes:{input:classes.input},startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))}),numSelected>0&&comparisonState===false?/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",className:classes.markStyleCorrect,display:\"inline\"},\"\\u2713\"),/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",component:\"div\",display:\"inline\"},/*#__PURE__*/React.createElement(\"strong\",null,\"\\xA0 \",numSelected,' ',numSelected===1?t('analytics.workflowSelected'):t('analytics.workflowsSelected'),' ',\"\\xA0 \\u2003\"))):/*#__PURE__*/React.createElement(\"span\",null),/*#__PURE__*/React.createElement(Button,{className:classes.selectDate,onClick:function onClick(){return setDateRangeSelectorPopoverOpen(true);},ref:dateRangeSelectorRef,\"aria-label\":\"time range\",\"aria-haspopup\":\"true\"},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},range.startDate===' '?'Select Period':\"\".concat(range.startDate.split(' ')[2],\" \").concat(range.startDate.split(' ')[1],\" \").concat(range.startDate.split(' ')[3],\" - \").concat(range.endDate.split(' ')[2],\" \").concat(range.endDate.split(' ')[1],\" \").concat(range.endDate.split(' ')[3]),/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorIcon},isDateRangeSelectorPopoverOpen?/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null):/*#__PURE__*/React.createElement(ChevronRightIcon,null)))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:classes.formControl},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},t('analytics.targetCluster')),/*#__PURE__*/React.createElement(Select,{label:\"Target cluster\",value:cluster,onChange:handleClusterChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),clusters.map(function(cluster){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(cluster,\"-litmusDashboard-workflowComparison-toolBar\"),value:cluster},cluster);}))),/*#__PURE__*/React.createElement(\"div\",{className:classes.featureButtons},compare===false||comparisonState===false?/*#__PURE__*/React.createElement(ButtonOutlined,{disabled:!(numSelected>1),onClick:handleClick},/*#__PURE__*/React.createElement(Typography,{className:classes.dateRangeDefault},t('analytics.compareWorkflows'))):/*#__PURE__*/React.createElement(ButtonOutlined,{onClick:handleExport,disabled:false},/*#__PURE__*/React.createElement(\"div\",{className:classes.export},/*#__PURE__*/React.createElement(Avatar,{className:classes.exportIcon},/*#__PURE__*/React.createElement(DescriptionOutlinedIcon,{htmlColor:palette.primary.main})),/*#__PURE__*/React.createElement(Typography,{className:classes.dateRangeDefault,display:\"inline\"},t('analytics.exportPDF'))))),/*#__PURE__*/React.createElement(DateRangeSelector,{anchorEl:dateRangeSelectorRef.current,isOpen:isDateRangeSelectorPopoverOpen,onClose:function onClose(){setDateRangeSelectorPopoverOpen(false);},callbackToSetRange:CallbackFromRangeSelector}));};export default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonTable/TableToolbar.tsx"],"names":["Avatar","Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","OutlinedInput","Select","Typography","useTheme","ChevronRightIcon","DescriptionOutlinedIcon","KeyboardArrowDownIcon","SearchIcon","ButtonOutlined","React","useEffect","useRef","useState","useTranslation","DateRangeSelector","useStyles","useOutlinedInputStyles","TableToolBar","numSelected","handleSearch","searchToken","clusters","callbackToSetCluster","callbackToSetRange","callbackToCompare","callbackToExport","comparisonState","reInitialize","classes","outlinedInputClasses","palette","t","cluster","setCluster","compare","setCompare","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","dateRangeSelectorRef","handleClusterChange","event","target","value","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","handleClick","handleExport","reInitializer","headerSection","search","input","markStyleCorrect","selectDate","displayDate","rangeSelectorIcon","formControl","selectText","map","featureButtons","dateRangeDefault","export","exportIcon","primary","main","current"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface ClusterCallBackType {\n  (clusterName: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface CompareCallBackType {\n  (compareWorkflows: boolean): void;\n}\n\ninterface ExportCallBackType {\n  (exportAnalytics: boolean): void;\n}\n\ninterface TableToolBarProps {\n  numSelected: number;\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  clusters: string[];\n  callbackToSetCluster: ClusterCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToCompare: CompareCallBackType;\n  callbackToExport: ExportCallBackType;\n  comparisonState: Boolean;\n  reInitialize: Boolean;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  numSelected,\n  handleSearch,\n  searchToken,\n  clusters,\n  callbackToSetCluster,\n  callbackToSetRange,\n  callbackToCompare,\n  callbackToExport,\n  comparisonState,\n  reInitialize,\n}) => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { palette } = useTheme();\n  const { t } = useTranslation();\n  const [cluster, setCluster] = React.useState<String>('All');\n  const [compare, setCompare] = React.useState<Boolean>(false);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n\n  const handleClusterChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setCluster(event.target.value as String);\n    callbackToSetCluster(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  const handleClick = () => {\n    setCompare(true);\n    callbackToCompare(true);\n  };\n\n  const handleExport = () => {\n    callbackToExport(true);\n  };\n\n  const reInitializer = () => {\n    setRange({\n      startDate: ' ',\n      endDate: ' ',\n    });\n    setCluster('All');\n  };\n\n  useEffect(() => {\n    if (comparisonState === false || reInitialize === true) {\n      reInitializer();\n    }\n  }, []);\n\n  return (\n    <div className={classes.headerSection}>\n      <InputBase\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Search\"\n        className={classes.search}\n        value={searchToken}\n        onChange={handleSearch}\n        classes={{\n          input: classes.input,\n        }}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n      />\n\n      {numSelected > 0 && comparisonState === false ? (\n        <span>\n          <Typography\n            variant=\"h6\"\n            className={classes.markStyleCorrect}\n            display=\"inline\"\n          >\n            {'\\u2713'}\n          </Typography>\n          <Typography variant=\"h6\" component=\"div\" display=\"inline\">\n            <strong>\n              &nbsp; {numSelected}{' '}\n              {numSelected === 1\n                ? t('analytics.workflowSelected')\n                : t('analytics.workflowsSelected')}{' '}\n              &nbsp; &emsp;\n            </strong>\n          </Typography>\n        </span>\n      ) : (\n        <span />\n      )}\n\n      <Button\n        className={classes.selectDate}\n        onClick={() => setDateRangeSelectorPopoverOpen(true)}\n        ref={dateRangeSelectorRef}\n        aria-label=\"time range\"\n        aria-haspopup=\"true\"\n      >\n        <Typography className={classes.displayDate}>\n          {range.startDate === ' '\n            ? 'Select Period'\n            : `${range.startDate.split(' ')[2]} ${\n                range.startDate.split(' ')[1]\n              } ${range.startDate.split(' ')[3]} - ${\n                range.endDate.split(' ')[2]\n              } ${range.endDate.split(' ')[1]} ${range.endDate.split(' ')[3]}`}\n\n          <IconButton className={classes.rangeSelectorIcon}>\n            {isDateRangeSelectorPopoverOpen ? (\n              <KeyboardArrowDownIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </Typography>\n      </Button>\n\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel className={classes.selectText}>\n          {t('analytics.targetCluster')}\n        </InputLabel>\n        <Select\n          label=\"Target cluster\"\n          value={cluster}\n          onChange={handleClusterChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {clusters.map((cluster: string) => (\n            <MenuItem\n              key={`${cluster}-litmusDashboard-workflowComparison-toolBar`}\n              value={cluster}\n            >\n              {cluster}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <div className={classes.featureButtons}>\n        {compare === false || comparisonState === false ? (\n          <ButtonOutlined disabled={!(numSelected > 1)} onClick={handleClick}>\n            <Typography className={classes.dateRangeDefault}>\n              {t('analytics.compareWorkflows')}\n            </Typography>\n          </ButtonOutlined>\n        ) : (\n          <ButtonOutlined onClick={handleExport} disabled={false}>\n            <div className={classes.export}>\n              <Avatar className={classes.exportIcon}>\n                <DescriptionOutlinedIcon htmlColor={palette.primary.main} />\n              </Avatar>\n              <Typography className={classes.dateRangeDefault} display=\"inline\">\n                {t('analytics.exportPDF')}\n              </Typography>\n            </div>\n          </ButtonOutlined>\n        )}\n      </div>\n      <DateRangeSelector\n        anchorEl={dateRangeSelectorRef.current as HTMLElement}\n        isOpen={isDateRangeSelectorPopoverOpen}\n        onClose={() => {\n          setDateRangeSelectorPopoverOpen(false);\n        }}\n        callbackToSetRange={CallbackFromRangeSelector}\n      />\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}