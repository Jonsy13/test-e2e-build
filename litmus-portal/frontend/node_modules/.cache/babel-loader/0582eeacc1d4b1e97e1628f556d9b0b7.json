{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,Typography}from'@material-ui/core';import{InputField}from'litmus-ui';import localforage from'localforage';import React,{useEffect}from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import YAML from'yaml';import useActions from'../../../../redux/actions';import*as WorkflowActions from'../../../../redux/actions/workflow';import useStyles from'./styles';var General=function General(_ref){var gotoStep=_ref.gotoStep,isCustom=_ref.isCustom;var _useTranslation=useTranslation(),t=_useTranslation.t;var classes=useStyles();var _React$useState=React.useState(''),_React$useState2=_slicedToArray(_React$useState,2),hubName=_React$useState2[0],setHubName=_React$useState2[1];var workflow=useActions(WorkflowActions);var engine=useSelector(function(state){return state.workflowManifest.engineYAML;});var namespace=useSelector(function(state){return state.workflowData.namespace;});var engineYAML=YAML.parse(engine);var _React$useState3=React.useState(engineYAML.metadata.generateName),_React$useState4=_slicedToArray(_React$useState3,2),experimentName=_React$useState4[0],setExperimentName=_React$useState4[1];var getContext=function getContext(){var context='';if(engineYAML.metadata.labels!==undefined&&engineYAML.metadata.labels.context!==undefined){return engineYAML.metadata.labels.context;}/**\n     * Split the experiments according to - in their names\n     * For index 0 to n-1 concat the experiment words with _\n     * For final index do not concat the _\n     * Adding Namespace to the front of the concatenated Exp Name\n     * to form the context\n     * */experimentName.split('-').map(function(name,i){if(i<experimentName.split('-').length-1)context=\"\".concat(context+name,\"_\");else context+=name;return null;});context=\"\".concat(namespace,\"_\").concat(context);return context;};useEffect(function(){getContext();});var _React$useState5=React.useState(getContext()),_React$useState6=_slicedToArray(_React$useState5,2),context=_React$useState6[0],setContext=_React$useState6[1];useEffect(function(){localforage.getItem('selectedScheduleOption').then(function(value){if(value!==null&&value.selected==='C'){localforage.getItem('selectedHub').then(function(hub){setHubName(hub);});}});},[]);var handleNext=function handleNext(){var parsedYAML=YAML.parse(engine);parsedYAML.metadata.generateName=experimentName;if(parsedYAML.metadata.labels){parsedYAML.metadata.labels['context']=context;}else{parsedYAML.metadata['labels']={context:context};}workflow.setWorkflowManifest({engineYAML:YAML.stringify(parsedYAML)});gotoStep(1);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Typography,null,t('createWorkflow.tuneWorkflow.verticalStepper.myHubInfo')),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",{className:classes.generalContainer},isCustom&&/*#__PURE__*/React.createElement(React.Fragment,null,hubName.length>0&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(InputField,{label:\"Hub\",value:hubName,InputProps:{readOnly:true}}),/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(InputField,{label:\"Experiment Name\",value:experimentName,onChange:function onChange(e){setExperimentName(e.target.value);}}),/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(InputField,{label:\"Context\",value:context,onChange:function onChange(e){setContext(e.target.value);}})),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:handleNext,className:classes.button},t('workflowStepper.next')));};export default General;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/TuneWorkflowSteps/General.tsx"],"names":["Button","Typography","InputField","localforage","React","useEffect","useTranslation","useSelector","YAML","useActions","WorkflowActions","useStyles","General","gotoStep","isCustom","t","classes","useState","hubName","setHubName","workflow","engine","state","workflowManifest","engineYAML","namespace","workflowData","parse","metadata","generateName","experimentName","setExperimentName","getContext","context","labels","undefined","split","map","name","i","length","setContext","getItem","then","value","selected","hub","handleNext","parsedYAML","setWorkflowManifest","stringify","generalContainer","readOnly","e","target","button"],"mappings":"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","sourcesContent":["import { Button, Typography } from '@material-ui/core';\nimport { InputField } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport { ChooseWorkflowRadio } from '../../../../models/localforage/radioButton';\nimport useActions from '../../../../redux/actions';\nimport * as WorkflowActions from '../../../../redux/actions/workflow';\nimport { RootState } from '../../../../redux/reducers';\nimport useStyles from './styles';\n\ninterface GeneralProps {\n  gotoStep: (page: number) => void;\n  isCustom: boolean | undefined;\n}\n\nconst General: React.FC<GeneralProps> = ({ gotoStep, isCustom }) => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n  const [hubName, setHubName] = React.useState<string>('');\n  const workflow = useActions(WorkflowActions);\n  const engine = useSelector(\n    (state: RootState) => state.workflowManifest.engineYAML\n  );\n  const namespace = useSelector(\n    (state: RootState) => state.workflowData.namespace\n  );\n  const engineYAML = YAML.parse(engine);\n  const [experimentName, setExperimentName] = React.useState<string>(\n    engineYAML.metadata.generateName\n  );\n  const getContext = () => {\n    let context = '';\n    if (\n      engineYAML.metadata.labels !== undefined &&\n      engineYAML.metadata.labels.context !== undefined\n    ) {\n      return engineYAML.metadata.labels.context;\n    }\n    /**\n     * Split the experiments according to - in their names\n     * For index 0 to n-1 concat the experiment words with _\n     * For final index do not concat the _\n     * Adding Namespace to the front of the concatenated Exp Name\n     * to form the context\n     * */\n\n    experimentName.split('-').map((name, i) => {\n      if (i < experimentName.split('-').length - 1)\n        context = `${context + name}_`;\n      else context += name;\n      return null;\n    });\n    context = `${namespace}_${context}`;\n    return context;\n  };\n\n  useEffect(() => {\n    getContext();\n  });\n  const [context, setContext] = React.useState<string>(getContext());\n  useEffect(() => {\n    localforage.getItem('selectedScheduleOption').then((value) => {\n      if (value !== null && (value as ChooseWorkflowRadio).selected === 'C') {\n        localforage.getItem('selectedHub').then((hub) => {\n          setHubName(hub as string);\n        });\n      }\n    });\n  }, []);\n\n  const handleNext = () => {\n    const parsedYAML = YAML.parse(engine);\n    parsedYAML.metadata.generateName = experimentName;\n    if (parsedYAML.metadata.labels) {\n      parsedYAML.metadata.labels['context'] = context;\n    } else {\n      parsedYAML.metadata['labels'] = {\n        context,\n      };\n    }\n    workflow.setWorkflowManifest({\n      engineYAML: YAML.stringify(parsedYAML),\n    });\n    gotoStep(1);\n  };\n\n  return (\n    <div>\n      <Typography>\n        {t('createWorkflow.tuneWorkflow.verticalStepper.myHubInfo')}\n      </Typography>\n      <br />\n      <div className={classes.generalContainer}>\n        {isCustom && (\n          <>\n            {hubName.length > 0 && (\n              <>\n                <InputField\n                  label=\"Hub\"\n                  value={hubName}\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                />\n                <br />\n              </>\n            )}\n            <InputField\n              label=\"Experiment Name\"\n              value={experimentName}\n              onChange={(e) => {\n                setExperimentName(e.target.value);\n              }}\n            />\n            <br />\n          </>\n        )}\n        <InputField\n          label=\"Context\"\n          value={context}\n          onChange={(e) => {\n            setContext(e.target.value);\n          }}\n        />\n      </div>\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleNext}\n        className={classes.button}\n      >\n        {t('workflowStepper.next')}\n      </Button>\n    </div>\n  );\n};\n\nexport default General;\n"]},"metadata":{},"sourceType":"module"}