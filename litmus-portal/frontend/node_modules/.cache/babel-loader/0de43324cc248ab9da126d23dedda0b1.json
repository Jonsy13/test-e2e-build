{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/SelectMyHub.tsx\";\n\nimport { useQuery } from '@apollo/client';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport localforage from 'localforage';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { GET_HUB_STATUS } from '../../../graphql/queries';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles, { MenuProps } from './styles';\n\nvar SelectMyHub = function SelectMyHub() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var selectedProjectID = getProjectID();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedHub = _useState2[0],\n      setSelectedHub = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      availableHubs = _useState4[0],\n      setAvailableHubs = _useState4[1]; // Get all MyHubs with status\n\n\n  var _useQuery = useQuery(GET_HUB_STATUS, {\n    variables: {\n      data: selectedProjectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      data = _useQuery.data;\n\n  var handleMyHubChange = function handleMyHubChange(event) {\n    setSelectedHub(event.target.value);\n    var selection = {\n      selected: 'C'\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('selectedHub', event.target.value);\n    localforage.setItem('hasSetWorkflowData', false);\n  };\n\n  useEffect(function () {\n    if ((data === null || data === void 0 ? void 0 : data.getHubStatus) !== undefined) {\n      if (data.getHubStatus.length) {\n        var hubDetails = [];\n        data.getHubStatus.forEach(function (hub) {\n          /**\n           * Push only available hubs\n           */\n          if (hub.IsAvailable) {\n            hubDetails.push({\n              id: hub.id,\n              HubName: hub.HubName,\n              RepoBranch: hub.RepoBranch,\n              RepoURL: hub.RepoURL\n            });\n          }\n        });\n        setAvailableHubs(hubDetails);\n        data.getHubStatus.forEach(function (hubData) {\n          if (hubData.HubName.toLowerCase() === 'chaos hub') {\n            setSelectedHub('Chaos Hub');\n            localforage.setItem('selectedHub', 'Chaos Hub');\n            localforage.setItem('hasSetWorkflowData', false);\n          }\n        });\n      }\n    }\n  }, [data]);\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, t('createWorkflow.chooseWorkflow.selectMyHub')), /*#__PURE__*/React.createElement(Select, {\n    \"data-cy\": \"myHubDropDown\",\n    value: selectedHub,\n    onChange: function onChange(e) {\n      handleMyHubChange(e);\n    },\n    label: \"Cluster Status\",\n    MenuProps: MenuProps,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, availableHubs.map(function (hubs) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: hubs.HubName,\n      \"data-cy\": \"hubOption\",\n      value: hubs.HubName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, hubs.HubName);\n  })))));\n};\n\nexport default SelectMyHub;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/SelectMyHub.tsx"],"names":["useQuery","FormControl","InputLabel","MenuItem","Select","localforage","React","useEffect","useState","useTranslation","GET_HUB_STATUS","getProjectID","useStyles","MenuProps","SelectMyHub","t","selectedProjectID","selectedHub","setSelectedHub","availableHubs","setAvailableHubs","variables","data","fetchPolicy","handleMyHubChange","event","target","value","selection","selected","setItem","getHubStatus","undefined","length","hubDetails","forEach","hub","IsAvailable","push","id","HubName","RepoBranch","RepoURL","hubData","toLowerCase","classes","inputDiv","formControl","label","e","map","hubs"],"mappings":"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","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport localforage from 'localforage';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { GET_HUB_STATUS } from '../../../graphql/queries';\nimport { MyHubDetail } from '../../../models/graphql/user';\nimport { ChooseWorkflowRadio } from '../../../models/localforage/radioButton';\nimport { HubStatus } from '../../../models/redux/myhub';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport useStyles, { MenuProps } from './styles';\n\nconst SelectMyHub = () => {\n  const { t } = useTranslation();\n  const selectedProjectID = getProjectID();\n  const [selectedHub, setSelectedHub] = useState('');\n  const [availableHubs, setAvailableHubs] = useState<MyHubDetail[]>([]);\n\n  // Get all MyHubs with status\n  const { data } = useQuery<HubStatus>(GET_HUB_STATUS, {\n    variables: { data: selectedProjectID },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const handleMyHubChange = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setSelectedHub(event.target.value as string);\n    const selection: ChooseWorkflowRadio = {\n      selected: 'C',\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('selectedHub', event.target.value as string);\n    localforage.setItem('hasSetWorkflowData', false);\n  };\n\n  useEffect(() => {\n    if (data?.getHubStatus !== undefined) {\n      if (data.getHubStatus.length) {\n        const hubDetails: MyHubDetail[] = [];\n        data.getHubStatus.forEach((hub) => {\n          /**\n           * Push only available hubs\n           */\n          if (hub.IsAvailable) {\n            hubDetails.push({\n              id: hub.id,\n              HubName: hub.HubName,\n              RepoBranch: hub.RepoBranch,\n              RepoURL: hub.RepoURL,\n            });\n          }\n        });\n        setAvailableHubs(hubDetails);\n        data.getHubStatus.forEach((hubData) => {\n          if (hubData.HubName.toLowerCase() === 'chaos hub') {\n            setSelectedHub('Chaos Hub');\n            localforage.setItem('selectedHub', 'Chaos Hub');\n            localforage.setItem('hasSetWorkflowData', false);\n          }\n        });\n      }\n    }\n  }, [data]);\n\n  const classes = useStyles();\n  return (\n    <div>\n      <div className={classes.inputDiv}>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel className={classes.label}>\n            {t('createWorkflow.chooseWorkflow.selectMyHub')}\n          </InputLabel>\n          <Select\n            data-cy=\"myHubDropDown\"\n            value={selectedHub}\n            onChange={(e) => {\n              handleMyHubChange(e);\n            }}\n            label=\"Cluster Status\"\n            MenuProps={MenuProps}\n          >\n            {availableHubs.map((hubs) => (\n              <MenuItem\n                key={hubs.HubName}\n                data-cy=\"hubOption\"\n                value={hubs.HubName}\n              >\n                {hubs.HubName}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n    </div>\n  );\n};\n\nexport default SelectMyHub;\n"]},"metadata":{},"sourceType":"module"}