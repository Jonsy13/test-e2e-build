{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/LocalQuickActionCard/index.tsx\";\n\n/* eslint-disable no-return-assign */\nimport { QuickActionCard } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { constants } from '../../constants';\nimport { Role } from '../../models/graphql/user';\nimport useActions from '../../redux/actions';\nimport * as TabActions from '../../redux/actions/tabs';\nimport { history } from '../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../utils/getSearchParams';\n\nvar LocalQuickActionCard = function LocalQuickActionCard(_ref) {\n  var variant = _ref.variant,\n      className = _ref.className;\n  var tabs = useActions(TabActions);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n  var userRole = getProjectRole();\n  var homePage = variant === 'homePage';\n  var returningHome = variant === 'returningHome';\n  var analytics = variant === 'analytics';\n  var community = variant === 'community';\n  var emptyData = {\n    src: '',\n    alt: '',\n    text: ''\n  };\n  var quickActionData = [analytics ? {\n    src: './icons/addDataSource.svg',\n    alt: 'data source',\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/analytics/datasource/select',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(userRole)\n      });\n    },\n    text: t('quickActionCard.addDataSource')\n  } : emptyData, returningHome ? {\n    src: '/icons/calendarWorkflowIcon.svg',\n    alt: 'workflow',\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/create-workflow',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(userRole)\n      });\n    },\n    text: t('quickActionCard.scheduleWorkflow')\n  } : emptyData, homePage || returningHome || analytics ? {\n    src: '/icons/target.svg',\n    alt: 'agent',\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/target-connect',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(userRole)\n      });\n    },\n    text: t('quickActionCard.connectNewAgent')\n  } : emptyData, // TODO: settings only accessible by Owner\n  (homePage || returningHome || community || analytics) && getProjectRole() === Role.owner ? {\n    src: '/icons/teamMember.svg',\n    alt: 'team',\n    onClick: function onClick() {\n      tabs.changeSettingsTabs(1);\n      history.push({\n        pathname: '/settings',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(userRole)\n      });\n    },\n    text: t('quickActionCard.inviteTeamMember')\n  } : emptyData, homePage || community ? {\n    src: '/icons/survey.svg',\n    alt: 'survey',\n    onClick: function onClick() {\n      return window.open(constants.FeedbackForm);\n    },\n    text: t('quickActionCard.quickSurvey')\n  } : emptyData, homePage || community || analytics ? {\n    src: '/icons/docs.svg',\n    alt: 'docs',\n    onClick: function onClick() {\n      return window.open('https://docs.litmuschaos.io/docs/getstarted');\n    },\n    text: t('quickActionCard.readDocs')\n  } : emptyData, community ? {\n    src: './icons/docs.svg',\n    alt: 'docs',\n    onClick: function onClick() {\n      return window.open('/api-docs/index.html');\n    },\n    text: t('quickActionCard.readAPIDocs')\n  } : emptyData].filter(function (el) {\n    return el.src.length > 0;\n  });\n  return /*#__PURE__*/React.createElement(QuickActionCard, {\n    className: className,\n    quickActions: quickActionData,\n    title: t('quickActionCard.quickActions'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  });\n};\n\nexport { LocalQuickActionCard };","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/LocalQuickActionCard/index.tsx"],"names":["QuickActionCard","React","useTranslation","constants","Role","useActions","TabActions","history","getProjectID","getProjectRole","LocalQuickActionCard","variant","className","tabs","t","projectID","userRole","homePage","returningHome","analytics","community","emptyData","src","alt","text","quickActionData","onClick","push","pathname","search","owner","changeSettingsTabs","window","open","FeedbackForm","filter","el","length"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport { QuickActionCard, QuickActionCardProps } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { constants } from '../../constants';\nimport { Role } from '../../models/graphql/user';\nimport useActions from '../../redux/actions';\nimport * as TabActions from '../../redux/actions/tabs';\nimport { history } from '../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../utils/getSearchParams';\n\ntype Variant = 'homePage' | 'returningHome' | 'analytics' | 'community';\n\ninterface LocalQuickActionCardProps {\n  variant?: Variant;\n  className?: string;\n}\n\nconst LocalQuickActionCard: React.FC<LocalQuickActionCardProps> = ({\n  variant,\n  className,\n}) => {\n  const tabs = useActions(TabActions);\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const userRole = getProjectRole();\n  const homePage = variant === 'homePage';\n  const returningHome = variant === 'returningHome';\n  const analytics = variant === 'analytics';\n  const community = variant === 'community';\n  const emptyData: QuickActionCardProps = {\n    src: '',\n    alt: '',\n    text: '',\n  };\n  const quickActionData: Array<QuickActionCardProps> = [\n    analytics\n      ? {\n          src: './icons/addDataSource.svg',\n          alt: 'data source',\n          onClick: () =>\n            history.push({\n              pathname: '/analytics/datasource/select',\n              search: `?projectID=${projectID}&projectRole=${userRole}`,\n            }),\n          text: t('quickActionCard.addDataSource'),\n        }\n      : emptyData,\n    returningHome\n      ? {\n          src: '/icons/calendarWorkflowIcon.svg',\n          alt: 'workflow',\n          onClick: () =>\n            history.push({\n              pathname: '/create-workflow',\n              search: `?projectID=${projectID}&projectRole=${userRole}`,\n            }),\n          text: t('quickActionCard.scheduleWorkflow'),\n        }\n      : emptyData,\n    homePage || returningHome || analytics\n      ? {\n          src: '/icons/target.svg',\n          alt: 'agent',\n          onClick: () =>\n            history.push({\n              pathname: '/target-connect',\n              search: `?projectID=${projectID}&projectRole=${userRole}`,\n            }),\n          text: t('quickActionCard.connectNewAgent'),\n        }\n      : emptyData,\n\n    // TODO: settings only accessible by Owner\n    (homePage || returningHome || community || analytics) &&\n    getProjectRole() === Role.owner\n      ? {\n          src: '/icons/teamMember.svg',\n          alt: 'team',\n          onClick: () => {\n            tabs.changeSettingsTabs(1);\n            history.push({\n              pathname: '/settings',\n              search: `?projectID=${projectID}&projectRole=${userRole}`,\n            });\n          },\n          text: t('quickActionCard.inviteTeamMember'),\n        }\n      : emptyData,\n    homePage || community\n      ? {\n          src: '/icons/survey.svg',\n          alt: 'survey',\n          onClick: () => window.open(constants.FeedbackForm),\n          text: t('quickActionCard.quickSurvey'),\n        }\n      : emptyData,\n    homePage || community || analytics\n      ? {\n          src: '/icons/docs.svg',\n          alt: 'docs',\n          onClick: () =>\n            window.open('https://docs.litmuschaos.io/docs/getstarted'),\n          text: t('quickActionCard.readDocs'),\n        }\n      : emptyData,\n    community\n      ? {\n          src: './icons/docs.svg',\n          alt: 'docs',\n          onClick: () => window.open('/api-docs/index.html'),\n          text: t('quickActionCard.readAPIDocs'),\n        }\n      : emptyData,\n  ].filter((el) => {\n    return el.src.length > 0;\n  });\n\n  return (\n    <QuickActionCard\n      className={className}\n      quickActions={quickActionData}\n      title={t('quickActionCard.quickActions')}\n    />\n  );\n};\nexport { LocalQuickActionCard };\n"]},"metadata":{},"sourceType":"module"}