{"ast":null,"code":"import{useTheme}from'@material-ui/core/styles';import Typography from'@material-ui/core/Typography';import React from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import Center from'../../containers/layouts/Center';import formatCount from'../../utils/formatCount';import Loader from'../Loader';import useStyles from'./styles';/*\n  Reusable Custom Information Card\n  Required Params: color, statType\n  Optional Params: plus, value\n*/var InfoFilledWrap=function InfoFilledWrap(){var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var theme=useTheme();// Card Value Data fetched from Redux\nvar _useSelector=useSelector(function(state){return state.communityData;}),communityData=_useSelector.communityData,loading=_useSelector.loading,error=_useSelector.error;var cardData=[{color:theme.palette.warning.main,value:parseInt(communityData.github.experimentsCount,10),statType:'Total Experiments'},{color:theme.palette.secondary.main,value:parseInt(communityData.google.operatorInstalls,10),statType:'Operator Installs',plus:true},{color:theme.palette.primary.main,value:parseInt(communityData.google.totalRuns,10),statType:'Total Experiment Runs',plus:true},{color:theme.palette.error.main,value:parseInt(communityData.github.stars,10),statType:'GitHub Stars'}];var cardArray=cardData.map(function(individualCard){return/*#__PURE__*/React.createElement(\"div\",{key:individualCard.value,style:{backgroundColor:\"\".concat(individualCard.color)},className:classes.infoFilledDiv},individualCard.plus?/*#__PURE__*/React.createElement(Typography,{className:classes.value},formatCount(individualCard.value),/*#__PURE__*/React.createElement(\"span\",{className:classes.plusBtn},\"+\")):/*#__PURE__*/React.createElement(Typography,{className:classes.value},formatCount(individualCard.value)),/*#__PURE__*/React.createElement(\"hr\",{className:classes.horizontalRule}),/*#__PURE__*/React.createElement(Typography,{className:classes.statType},individualCard.statType));});return/*#__PURE__*/React.createElement(\"div\",{className:classes.infoFilledWrap},loading?/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Loader,null),/*#__PURE__*/React.createElement(Typography,null,t('internetIssues.fetchData'))):error?/*#__PURE__*/React.createElement(\"div\",{className:classes.errorMessage},/*#__PURE__*/React.createElement(Center,null,/*#__PURE__*/React.createElement(Typography,{variant:\"h4\"},t('internetIssues.connectionError')))):cardArray);};export default InfoFilledWrap;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/InfoFilled/index.tsx"],"names":["useTheme","Typography","React","useTranslation","useSelector","Center","formatCount","Loader","useStyles","InfoFilledWrap","classes","t","theme","state","communityData","loading","error","cardData","color","palette","warning","main","value","parseInt","github","experimentsCount","statType","secondary","google","operatorInstalls","plus","primary","totalRuns","stars","cardArray","map","individualCard","backgroundColor","infoFilledDiv","plusBtn","horizontalRule","infoFilledWrap","errorMessage"],"mappings":"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","sourcesContent":["import { useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport Center from '../../containers/layouts/Center';\nimport { RootState } from '../../redux/reducers';\nimport formatCount from '../../utils/formatCount';\nimport Loader from '../Loader';\nimport useStyles from './styles';\n\ninterface CardValueData {\n  color: string;\n  value: number;\n  statType: string;\n  plus?: boolean | undefined;\n}\n/*\n  Reusable Custom Information Card\n  Required Params: color, statType\n  Optional Params: plus, value\n*/\n\nconst InfoFilledWrap: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const theme = useTheme();\n  // Card Value Data fetched from Redux\n  const { communityData, loading, error } = useSelector(\n    (state: RootState) => state.communityData\n  );\n\n  const cardData: CardValueData[] = [\n    {\n      color: theme.palette.warning.main,\n      value: parseInt(communityData.github.experimentsCount, 10),\n      statType: 'Total Experiments',\n    },\n    {\n      color: theme.palette.secondary.main,\n      value: parseInt(communityData.google.operatorInstalls, 10),\n      statType: 'Operator Installs',\n      plus: true,\n    },\n    {\n      color: theme.palette.primary.main,\n      value: parseInt(communityData.google.totalRuns, 10),\n      statType: 'Total Experiment Runs',\n      plus: true,\n    },\n    {\n      color: theme.palette.error.main,\n      value: parseInt(communityData.github.stars, 10),\n      statType: 'GitHub Stars',\n    },\n  ];\n\n  const cardArray = cardData.map((individualCard) => {\n    return (\n      <div\n        key={individualCard.value}\n        style={{ backgroundColor: `${individualCard.color}` }}\n        className={classes.infoFilledDiv}\n      >\n        {/*\n          If value of plus is provided then render a different\n          plus icon else dont\n          \n          formatCount -> utility is used to convert large value to\n          their respective Thousands or Millions respectively\n        */}\n        {individualCard.plus ? (\n          <Typography className={classes.value}>\n            {formatCount(individualCard.value)}\n            <span className={classes.plusBtn}>+</span>\n          </Typography>\n        ) : (\n          <Typography className={classes.value}>\n            {formatCount(individualCard.value)}\n          </Typography>\n        )}\n        <hr className={classes.horizontalRule} />\n        <Typography className={classes.statType}>\n          {individualCard.statType}\n        </Typography>\n      </div>\n    );\n  });\n\n  return (\n    <div className={classes.infoFilledWrap}>\n      {loading ? (\n        <div>\n          <Loader />\n          <Typography>{t('internetIssues.fetchData')}</Typography>\n        </div>\n      ) : error ? (\n        <div className={classes.errorMessage}>\n          <Center>\n            <Typography variant=\"h4\">\n              {t('internetIssues.connectionError')}\n            </Typography>\n          </Center>\n        </div>\n      ) : (\n        cardArray\n      )}\n    </div>\n  );\n};\n\nexport default InfoFilledWrap;\n"]},"metadata":{},"sourceType":"module"}