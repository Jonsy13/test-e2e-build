{"ast":null,"code":"import _regeneratorRuntime from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-unused-expressions */import{useMutation}from'@apollo/client';import{Snackbar,Typography}from'@material-ui/core';import{Alert}from'@material-ui/lab';import{ButtonFilled,ButtonOutlined,InputField,Modal}from'litmus-ui';import React from'react';import{useTranslation}from'react-i18next';import{v4 as uuidv4}from'uuid';import{CREATE_DASHBOARD}from'../../../../graphql/mutations';import{DEFAULT_DASHBOARD_REFRESH_RATE_STRING,DEFAULT_RELATIVE_TIME_RANGE}from'../../../../pages/ApplicationDashboard/constants';import useActions from'../../../../redux/actions';import*as DashboardActions from'../../../../redux/actions/dashboards';import*as DataSourceActions from'../../../../redux/actions/dataSource';import{getProjectID}from'../../../../utils/getSearchParams';import{validateTextEmpty}from'../../../../utils/validate';import useStyles from'./styles';var DashboardCloneModal=function DashboardCloneModal(_ref){var dashboardData=_ref.dashboardData,_onClose=_ref.onClose;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;// get ProjectID\nvar projectID=getProjectID();var dashboard=useActions(DashboardActions);var dataSource=useActions(DataSourceActions);var _React$useState=React.useState(\"Copy of \".concat(dashboardData.name)),_React$useState2=_slicedToArray(_React$useState,2),cloneName=_React$useState2[0],setCloneName=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),isAlertOpen=_React$useState4[0],setIsAlertOpen=_React$useState4[1];var onDashboardLoadRoutine=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dbID){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dashboard.selectDashboard({selectedDashboardID:dbID,refreshRate:0});dataSource.selectDataSource({selectedDataSourceURL:'',selectedDataSourceID:'',selectedDataSourceName:''});return _context.abrupt(\"return\",true);case 3:case\"end\":return _context.stop();}}},_callee);}));return function onDashboardLoadRoutine(_x){return _ref2.apply(this,arguments);};}();var _useMutation=useMutation(CREATE_DASHBOARD,{onCompleted:function onCompleted(data){var _data$createDashBoard,_data$createDashBoard2;onDashboardLoadRoutine((_data$createDashBoard=(_data$createDashBoard2=data.createDashBoard)===null||_data$createDashBoard2===void 0?void 0:_data$createDashBoard2.db_id)!==null&&_data$createDashBoard!==void 0?_data$createDashBoard:'').then(function(){window.location.reload();});},onError:function onError(){setIsAlertOpen(true);}}),_useMutation2=_slicedToArray(_useMutation,1),createDashboard=_useMutation2[0];var getPanelGroups=function getPanelGroups(){var panelGroups=[];dashboardData.metaData[0].panel_groups.forEach(function(panelGroup){var selectedPanels=[];panelGroup.panels.forEach(function(panel){var queries=[];panel.prom_queries.forEach(function(query){queries.push({queryid:uuidv4(),prom_query_name:query.prom_query_name,legend:query.legend,resolution:query.resolution,minstep:query.minstep,line:query.line,close_area:query.close_area});});var options={points:panel.panel_options.points,grids:panel.panel_options.grids,left_axis:panel.panel_options.left_axis};var selectedPanel={prom_queries:queries,panel_options:options,panel_name:panel.panel_name,y_axis_left:panel.y_axis_left,y_axis_right:panel.y_axis_right,x_axis_down:panel.x_axis_down,unit:panel.unit};selectedPanels.push(selectedPanel);});panelGroups.push({panel_group_name:panelGroup.panel_group_name,panels:selectedPanels});});return panelGroups;};var getApplicationMetadataMap=function getApplicationMetadataMap(){var _dashboardData$applic;var applicationMetadataMap=[];(_dashboardData$applic=dashboardData.applicationMetadataMap)===null||_dashboardData$applic===void 0?void 0:_dashboardData$applic.forEach(function(applicationMetadata){var applications=[];applicationMetadata.applications.forEach(function(application){applications.push({kind:application.kind,names:application.names});});applicationMetadataMap.push({namespace:applicationMetadata.namespace,applications:applications});});return applicationMetadataMap;};var handleCreateMutation=function handleCreateMutation(){var dashboardInput={ds_id:dashboardData.metaData[0].ds_id,db_name:cloneName,db_type_id:dashboardData.typeID,db_type_name:dashboardData.typeName,db_information:dashboardData.information,chaos_event_query_template:dashboardData.chaosEventQueryTemplate,chaos_verdict_query_template:dashboardData.chaosVerdictQueryTemplate,application_metadata_map:getApplicationMetadataMap(),panel_groups:getPanelGroups(),end_time:\"\".concat(Math.round(new Date().getTime()/1000)),start_time:\"\".concat(Math.round(new Date().getTime()/1000)-DEFAULT_RELATIVE_TIME_RANGE),project_id:projectID,cluster_id:dashboardData.agentID,refresh_rate:DEFAULT_DASHBOARD_REFRESH_RATE_STRING};createDashboard({variables:{createDBInput:dashboardInput}});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Modal,{open:true,onClose:function onClose(){_onClose();},modalActions:/*#__PURE__*/React.createElement(ButtonOutlined,{className:classes.closeButton,onClick:function onClick(){_onClose();}},\"\\u2715\"),width:\"45%\",height:\"fit-content\"},/*#__PURE__*/React.createElement(\"div\",{className:classes.modal},/*#__PURE__*/React.createElement(Typography,{className:classes.modalHeading,align:\"left\"},t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.heading')),/*#__PURE__*/React.createElement(InputField,{label:\"Name\",\"data-cy\":\"copyDashboardName\",width:\"82.5%\",variant:validateTextEmpty(cloneName)?'error':'primary',onChange:function onChange(event){setCloneName(event.target.value);},value:cloneName}),/*#__PURE__*/React.createElement(\"div\",{className:classes.flexButtons},/*#__PURE__*/React.createElement(ButtonOutlined,{onClick:function onClick(){_onClose();},className:classes.cancelButton},/*#__PURE__*/React.createElement(Typography,{className:classes.buttonText},t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.cancel'))),/*#__PURE__*/React.createElement(ButtonFilled,{onClick:function onClick(){return handleCreateMutation();}},/*#__PURE__*/React.createElement(Typography,{className:\"\".concat(classes.buttonText,\" \").concat(classes.okButtonText)},t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.ok')))))),/*#__PURE__*/React.createElement(Snackbar,{open:isAlertOpen,autoHideDuration:6000,onClose:function onClose(){return setIsAlertOpen(false);}},/*#__PURE__*/React.createElement(Alert,{onClose:function onClose(){return setIsAlertOpen(false);},severity:\"error\"},t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.error'))));};export default DashboardCloneModal;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/DashboardCloneModal/index.tsx"],"names":["useMutation","Snackbar","Typography","Alert","ButtonFilled","ButtonOutlined","InputField","Modal","React","useTranslation","v4","uuidv4","CREATE_DASHBOARD","DEFAULT_DASHBOARD_REFRESH_RATE_STRING","DEFAULT_RELATIVE_TIME_RANGE","useActions","DashboardActions","DataSourceActions","getProjectID","validateTextEmpty","useStyles","DashboardCloneModal","dashboardData","onClose","classes","t","projectID","dashboard","dataSource","useState","name","cloneName","setCloneName","isAlertOpen","setIsAlertOpen","onDashboardLoadRoutine","dbID","selectDashboard","selectedDashboardID","refreshRate","selectDataSource","selectedDataSourceURL","selectedDataSourceID","selectedDataSourceName","onCompleted","data","createDashBoard","db_id","then","window","location","reload","onError","createDashboard","getPanelGroups","panelGroups","metaData","panel_groups","forEach","panelGroup","selectedPanels","panels","panel","queries","prom_queries","query","push","queryid","prom_query_name","legend","resolution","minstep","line","close_area","options","points","panel_options","grids","left_axis","selectedPanel","panel_name","y_axis_left","y_axis_right","x_axis_down","unit","panel_group_name","getApplicationMetadataMap","applicationMetadataMap","applicationMetadata","applications","application","kind","names","namespace","handleCreateMutation","dashboardInput","ds_id","db_name","db_type_id","typeID","db_type_name","typeName","db_information","information","chaos_event_query_template","chaosEventQueryTemplate","chaos_verdict_query_template","chaosVerdictQueryTemplate","application_metadata_map","end_time","Math","round","Date","getTime","start_time","project_id","cluster_id","agentID","refresh_rate","variables","createDBInput","closeButton","modal","modalHeading","event","target","value","flexButtons","cancelButton","buttonText","okButtonText"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useMutation } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, ButtonOutlined, InputField, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CREATE_DASHBOARD } from '../../../../graphql/mutations';\nimport { SelectedDashboardInformation } from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  CreateDashboardInput,\n  Panel,\n  PanelGroup,\n  PanelOption,\n  PromQuery,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport {\n  DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n  DEFAULT_RELATIVE_TIME_RANGE,\n} from '../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../redux/actions/dataSource';\nimport { getProjectID } from '../../../../utils/getSearchParams';\nimport { validateTextEmpty } from '../../../../utils/validate';\nimport useStyles from './styles';\n\ninterface DashboardCloneModalProps {\n  dashboardData: SelectedDashboardInformation;\n  onClose: () => void;\n}\n\nconst DashboardCloneModal: React.FC<DashboardCloneModalProps> = ({\n  dashboardData,\n  onClose,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  // get ProjectID\n  const projectID = getProjectID();\n  const dashboard = useActions(DashboardActions);\n  const dataSource = useActions(DataSourceActions);\n  const [cloneName, setCloneName] = React.useState<string>(\n    `Copy of ${dashboardData.name}`\n  );\n  const [isAlertOpen, setIsAlertOpen] = React.useState<boolean>(false);\n\n  const onDashboardLoadRoutine = async (dbID: string) => {\n    dashboard.selectDashboard({\n      selectedDashboardID: dbID,\n      refreshRate: 0,\n    });\n    dataSource.selectDataSource({\n      selectedDataSourceURL: '',\n      selectedDataSourceID: '',\n      selectedDataSourceName: '',\n    });\n    return true;\n  };\n\n  const [createDashboard] = useMutation<CreateDashboardInput>(\n    CREATE_DASHBOARD,\n    {\n      onCompleted: (data) => {\n        onDashboardLoadRoutine(data.createDashBoard?.db_id ?? '').then(() => {\n          window.location.reload();\n        });\n      },\n      onError: () => {\n        setIsAlertOpen(true);\n      },\n    }\n  );\n\n  const getPanelGroups = () => {\n    const panelGroups: PanelGroup[] = [];\n    dashboardData.metaData[0].panel_groups.forEach((panelGroup) => {\n      const selectedPanels: Panel[] = [];\n      panelGroup.panels.forEach((panel) => {\n        const queries: PromQuery[] = [];\n        panel.prom_queries.forEach((query) => {\n          queries.push({\n            queryid: uuidv4(),\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const options: PanelOption = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis,\n        };\n        const selectedPanel: Panel = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels,\n      });\n    });\n    return panelGroups;\n  };\n\n  const getApplicationMetadataMap = () => {\n    const applicationMetadataMap: ApplicationMetadata[] = [];\n    dashboardData.applicationMetadataMap?.forEach((applicationMetadata) => {\n      const applications: Resource[] = [];\n      applicationMetadata.applications.forEach((application) => {\n        applications.push({\n          kind: application.kind,\n          names: application.names,\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications,\n      });\n    });\n    return applicationMetadataMap;\n  };\n\n  const handleCreateMutation = () => {\n    const dashboardInput = {\n      ds_id: dashboardData.metaData[0].ds_id,\n      db_name: cloneName,\n      db_type_id: dashboardData.typeID,\n      db_type_name: dashboardData.typeName,\n      db_information: dashboardData.information,\n      chaos_event_query_template: dashboardData.chaosEventQueryTemplate,\n      chaos_verdict_query_template: dashboardData.chaosVerdictQueryTemplate,\n      application_metadata_map: getApplicationMetadataMap(),\n      panel_groups: getPanelGroups(),\n      end_time: `${Math.round(new Date().getTime() / 1000)}`,\n      start_time: `${\n        Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE\n      }`,\n      project_id: projectID,\n      cluster_id: dashboardData.agentID,\n      refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n    };\n    createDashboard({\n      variables: { createDBInput: dashboardInput },\n    });\n  };\n\n  return (\n    <div>\n      <Modal\n        open\n        onClose={() => {\n          onClose();\n        }}\n        modalActions={\n          <ButtonOutlined\n            className={classes.closeButton}\n            onClick={() => {\n              onClose();\n            }}\n          >\n            &#x2715;\n          </ButtonOutlined>\n        }\n        width=\"45%\"\n        height=\"fit-content\"\n      >\n        <div className={classes.modal}>\n          <Typography className={classes.modalHeading} align=\"left\">\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.heading'\n            )}\n          </Typography>\n          <InputField\n            label=\"Name\"\n            data-cy=\"copyDashboardName\"\n            width=\"82.5%\"\n            variant={validateTextEmpty(cloneName) ? 'error' : 'primary'}\n            onChange={(event: React.ChangeEvent<{ value: string }>) => {\n              setCloneName((event.target as HTMLInputElement).value);\n            }}\n            value={cloneName}\n          />\n          <div className={classes.flexButtons}>\n            <ButtonOutlined\n              onClick={() => {\n                onClose();\n              }}\n              className={classes.cancelButton}\n            >\n              <Typography className={classes.buttonText}>\n                {t(\n                  'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.cancel'\n                )}\n              </Typography>\n            </ButtonOutlined>\n            <ButtonFilled onClick={() => handleCreateMutation()}>\n              <Typography\n                className={`${classes.buttonText} ${classes.okButtonText}`}\n              >\n                {t(\n                  'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.ok'\n                )}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        </div>\n      </Modal>\n      <Snackbar\n        open={isAlertOpen}\n        autoHideDuration={6000}\n        onClose={() => setIsAlertOpen(false)}\n      >\n        <Alert onClose={() => setIsAlertOpen(false)} severity=\"error\">\n          {t(\n            'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.error'\n          )}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default DashboardCloneModal;\n"]},"metadata":{},"sourceType":"module"}