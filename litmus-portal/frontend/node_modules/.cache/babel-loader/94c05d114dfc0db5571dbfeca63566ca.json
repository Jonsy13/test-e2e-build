{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowTable/TableData.tsx\";\n\nimport { Button, Popover, Typography } from '@material-ui/core';\nimport React from 'react';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useTranslation } from 'react-i18next';\nimport YAML from 'yaml';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles, { StyledTableCell } from './styles';\nimport WorkflowStatus from '../WorkflowStatus';\n\nvar TableData = function TableData(_ref) {\n  var data = _ref.data,\n      handleClose = _ref.handleClose,\n      embeddedYAML = _ref.embeddedYAML,\n      onViewLogsClick = _ref.onViewLogsClick;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      popAnchorEl = _React$useState2[0],\n      setPopAnchorEl = _React$useState2[1];\n\n  var isOpen = Boolean(popAnchorEl);\n  var id = isOpen ? 'simple-popover' : undefined;\n\n  var handlePopOverClose = function handlePopOverClose() {\n    setPopAnchorEl(null);\n  };\n\n  var handlePopOverClick = function handlePopOverClick(event) {\n    setPopAnchorEl(event.currentTarget);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.primaryText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, data.name)), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WorkflowStatus, {\n    phase: data.phase,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.primaryText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, data.finishedAt !== '' ? ((parseInt(data.finishedAt, 10) - parseInt(data.startedAt, 10)) / 60).toFixed(1) : ((new Date().getTime() / 1000 - parseInt(data.startedAt, 10)) / 60).toFixed(1), \"\\xA0\", t('workflowDetailsView.tableView.minutes'))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.primaryText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, timeDifference(data.startedAt))), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, data.type === 'ChaosEngine' && embeddedYAML ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: !YAML.parse(embeddedYAML).spec.appinfo,\n    onClick: function onClick(event) {\n      return handlePopOverClick(event);\n    },\n    style: {\n      textTransform: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.applicationDetails,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, isOpen ? /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    className: classes.arrowMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(ChevronRightIcon, {\n    className: classes.arrowMargin,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, t('workflowDetailsView.tableView.showProperties')))), /*#__PURE__*/React.createElement(Popover, {\n    id: id,\n    open: isOpen,\n    anchorEl: popAnchorEl,\n    onClose: handlePopOverClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.popover,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, YAML.parse(embeddedYAML).spec.appinfo && Object.keys(YAML.parse(embeddedYAML).spec.appinfo).map(function (key, index) {\n    return /*#__PURE__*/React.createElement(Typography, {\n      key: index.toString(),\n      className: classes.popoverItems,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.boldText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 27\n      }\n    }, key, \" :\"), \"\\xA0\", YAML.parse(embeddedYAML).spec.appinfo[key]);\n  })))) : null), /*#__PURE__*/React.createElement(StyledTableCell, {\n    className: classes.tableCellWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, data.type === 'ChaosEngine' && /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      handleClose();\n      onViewLogsClick();\n    },\n    style: {\n      textTransform: 'none'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.applicationDetails,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/eye.svg\",\n    alt: \"eye\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.viewLogs,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 19\n    }\n  }, t('workflowDetailsView.tableView.viewLogs'))))))));\n};\n\nexport default TableData;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowTable/TableData.tsx"],"names":["Button","Popover","Typography","React","KeyboardArrowDownIcon","ChevronRightIcon","useTranslation","YAML","timeDifference","useStyles","StyledTableCell","WorkflowStatus","TableData","data","handleClose","embeddedYAML","onViewLogsClick","classes","t","useState","popAnchorEl","setPopAnchorEl","isOpen","Boolean","id","undefined","handlePopOverClose","handlePopOverClick","event","currentTarget","tableCellWidth","primaryText","name","phase","finishedAt","parseInt","startedAt","toFixed","Date","getTime","type","parse","spec","appinfo","textTransform","applicationDetails","arrowMargin","vertical","horizontal","popover","Object","keys","map","key","index","toString","popoverItems","boldText","viewLogs"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,OAAjB,EAA0BC,UAA1B,QAA4C,mBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,UAA3C;AAEA,OAAOC,cAAP,MAA2B,mBAA3B;;AASA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,OAKtC;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,YAEI,QAFJA,YAEI;AAAA,MADJC,eACI,QADJA,eACI;AACJ,MAAMC,OAAO,GAAGR,SAAS,EAAzB;;AACA,wBAAcH,cAAc,EAA5B;AAAA,MAAQY,CAAR,mBAAQA,CAAR;;AACA,wBAAsCf,KAAK,CAACgB,QAAN,CACpC,IADoC,CAAtC;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,cAApB;;AAGA,MAAMC,MAAM,GAAGC,OAAO,CAACH,WAAD,CAAtB;AACA,MAAMI,EAAE,GAAGF,MAAM,GAAG,gBAAH,GAAsBG,SAAvC;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BL,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAGA,MAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAA0C;AACnEP,IAAAA,cAAc,CAACO,KAAK,CAACC,aAAP,CAAd;AACD,GAFD;;AAIA,sBACE,uDACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEZ,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEb,OAAO,CAACc,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6ClB,IAAI,CAACmB,IAAlD,CADF,CADF,eAIE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEf,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAEjB,IAAI,CAACoB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,eAOE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEhB,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEb,OAAO,CAACc,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,IAAI,CAACqB,UAAL,KAAoB,EAApB,GACG,CACE,CAACC,QAAQ,CAACtB,IAAI,CAACqB,UAAN,EAAkB,EAAlB,CAAR,GAAgCC,QAAQ,CAACtB,IAAI,CAACuB,SAAN,EAAiB,EAAjB,CAAzC,IACA,EAFF,EAGEC,OAHF,CAGU,CAHV,CADH,GAKG,CACE,CAAC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8BJ,QAAQ,CAACtB,IAAI,CAACuB,SAAN,EAAiB,EAAjB,CAAvC,IACA,EAFF,EAGEC,OAHF,CAGU,CAHV,CANN,UAWGnB,CAAC,CAAC,uCAAD,CAXJ,CADF,CAPF,eAsBE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEb,OAAO,CAACc,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,cAAc,CAACK,IAAI,CAACuB,SAAN,CADjB,CADF,CAtBF,eA2BE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEnB,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,IAAI,CAAC2B,IAAL,KAAc,aAAd,IAA+BzB,YAA/B,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAE,CAACR,IAAI,CAACkC,KAAL,CAAW1B,YAAX,EAAyB2B,IAAzB,CAA8BC,OAD3C;AAEE,IAAA,OAAO,EAAE,iBAACf,KAAD;AAAA,aAAWD,kBAAkB,CAACC,KAAD,CAA7B;AAAA,KAFX;AAGE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,aAAa,EAAE;AAAjB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,IAAA,SAAS,EAAE3B,OAAO,CAAC4B,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,MAAM,gBACL,oBAAC,qBAAD;AAAuB,IAAA,SAAS,EAAEL,OAAO,CAAC6B,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAE7B,OAAO,CAAC6B,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,CAAC,CAAC,8CAAD,CADJ,CANF,CALF,CADF,eAiBE,oBAAC,OAAD;AACE,IAAA,EAAE,EAAEM,EADN;AAEE,IAAA,IAAI,EAAEF,MAFR;AAGE,IAAA,QAAQ,EAAEF,WAHZ;AAIE,IAAA,OAAO,EAAEM,kBAJX;AAKE,IAAA,YAAY,EAAE;AACZqB,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KALhB;AASE,IAAA,eAAe,EAAE;AACfD,MAAAA,QAAQ,EAAE,KADK;AAEfC,MAAAA,UAAU,EAAE;AAFG,KATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAcE;AAAK,IAAA,SAAS,EAAE/B,OAAO,CAACgC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1C,IAAI,CAACkC,KAAL,CAAW1B,YAAX,EAAyB2B,IAAzB,CAA8BC,OAA9B,IACCO,MAAM,CAACC,IAAP,CAAY5C,IAAI,CAACkC,KAAL,CAAW1B,YAAX,EAAyB2B,IAAzB,CAA8BC,OAA1C,EAAmDS,GAAnD,CACE,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACd,wBACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEA,KAAK,CAACC,QAAN,EADP;AAEE,MAAA,SAAS,EAAEtC,OAAO,CAACuC,YAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAM,MAAA,SAAS,EAAEvC,OAAO,CAACwC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoCJ,GAApC,OAJF,UAMG9C,IAAI,CAACkC,KAAL,CAAW1B,YAAX,EAAyB2B,IAAzB,CAA8BC,OAA9B,CAAsCU,GAAtC,CANH,CADF;AAUD,GAZH,CAFJ,CAdF,CAjBF,CADD,GAmDG,IApDN,CA3BF,eAiFE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEpC,OAAO,CAACa,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,IAAI,CAAC2B,IAAL,KAAc,aAAd,iBACC,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACb1B,MAAAA,WAAW;AACXE,MAAAA,eAAe;AAChB,KAJH;AAKE,IAAA,KAAK,EAAE;AAAE4B,MAAAA,aAAa,EAAE;AAAjB,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAK,IAAA,SAAS,EAAE3B,OAAO,CAAC4B,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,gBAAT;AAA0B,IAAA,GAAG,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAE5B,OAAO,CAACyC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASxC,CAAC,CAAC,wCAAD,CAAV,CADF,CADF,CAFF,CAPF,CAFJ,CAjFF,CADF;AAwGD,CA5HD;;AA6HA,eAAeN,SAAf","sourcesContent":["import { Button, Popover, Typography } from '@material-ui/core';\nimport React from 'react';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useTranslation } from 'react-i18next';\nimport YAML from 'yaml';\nimport timeDifference from '../../../utils/datesModifier';\nimport useStyles, { StyledTableCell } from './styles';\nimport { ExecutionData } from '../../../models/graphql/workflowData';\nimport WorkflowStatus from '../WorkflowStatus';\n\ninterface TableDataProps {\n  onViewLogsClick: () => void;\n  embeddedYAML: string;\n  data: ExecutionData['nodes'][0];\n  handleClose: () => void;\n}\n\nconst TableData: React.FC<TableDataProps> = ({\n  data,\n  handleClose,\n  embeddedYAML,\n  onViewLogsClick,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [popAnchorEl, setPopAnchorEl] = React.useState<null | HTMLElement>(\n    null\n  );\n  const isOpen = Boolean(popAnchorEl);\n  const id = isOpen ? 'simple-popover' : undefined;\n  const handlePopOverClose = () => {\n    setPopAnchorEl(null);\n  };\n  const handlePopOverClick = (event: React.MouseEvent<HTMLElement>) => {\n    setPopAnchorEl(event.currentTarget);\n  };\n\n  return (\n    <>\n      <StyledTableCell className={classes.tableCellWidth}>\n        <Typography className={classes.primaryText}>{data.name}</Typography>\n      </StyledTableCell>\n      <StyledTableCell className={classes.tableCellWidth}>\n        <WorkflowStatus phase={data.phase} />\n      </StyledTableCell>\n      <StyledTableCell className={classes.tableCellWidth}>\n        <Typography className={classes.primaryText}>\n          {data.finishedAt !== ''\n            ? (\n                (parseInt(data.finishedAt, 10) - parseInt(data.startedAt, 10)) /\n                60\n              ).toFixed(1)\n            : (\n                (new Date().getTime() / 1000 - parseInt(data.startedAt, 10)) /\n                60\n              ).toFixed(1)}\n          &nbsp;\n          {t('workflowDetailsView.tableView.minutes')}\n        </Typography>\n      </StyledTableCell>\n      <StyledTableCell className={classes.tableCellWidth}>\n        <Typography className={classes.primaryText}>\n          {timeDifference(data.startedAt)}\n        </Typography>\n      </StyledTableCell>\n      <StyledTableCell className={classes.tableCellWidth}>\n        {data.type === 'ChaosEngine' && embeddedYAML ? (\n          <div>\n            <Button\n              disabled={!YAML.parse(embeddedYAML).spec.appinfo}\n              onClick={(event) => handlePopOverClick(event)}\n              style={{ textTransform: 'none' }}\n            >\n              <div className={classes.applicationDetails}>\n                {isOpen ? (\n                  <KeyboardArrowDownIcon className={classes.arrowMargin} />\n                ) : (\n                  <ChevronRightIcon className={classes.arrowMargin} />\n                )}\n                <Typography>\n                  {t('workflowDetailsView.tableView.showProperties')}\n                </Typography>\n              </div>\n            </Button>\n            <Popover\n              id={id}\n              open={isOpen}\n              anchorEl={popAnchorEl}\n              onClose={handlePopOverClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n              }}\n            >\n              <div className={classes.popover}>\n                {YAML.parse(embeddedYAML).spec.appinfo &&\n                  Object.keys(YAML.parse(embeddedYAML).spec.appinfo).map(\n                    (key, index) => {\n                      return (\n                        <Typography\n                          key={index.toString()}\n                          className={classes.popoverItems}\n                        >\n                          <span className={classes.boldText}>{key} :</span>\n                          &nbsp;\n                          {YAML.parse(embeddedYAML).spec.appinfo[key]}\n                        </Typography>\n                      );\n                    }\n                  )}\n              </div>\n            </Popover>\n          </div>\n        ) : null}\n      </StyledTableCell>\n      <StyledTableCell className={classes.tableCellWidth}>\n        {data.type === 'ChaosEngine' && (\n          <Button\n            onClick={() => {\n              handleClose();\n              onViewLogsClick();\n            }}\n            style={{ textTransform: 'none' }}\n          >\n            <div className={classes.applicationDetails}>\n              <img src=\"/icons/eye.svg\" alt=\"eye\" />\n              <Typography>\n                <span className={classes.viewLogs}>\n                  <strong>{t('workflowDetailsView.tableView.viewLogs')}</strong>\n                </span>\n              </Typography>\n            </div>\n          </Button>\n        )}\n      </StyledTableCell>\n    </>\n  );\n};\nexport default TableData;\n"]},"metadata":{},"sourceType":"module"}