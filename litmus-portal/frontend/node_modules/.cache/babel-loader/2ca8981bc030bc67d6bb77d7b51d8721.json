{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/WorkflowSettings/index.tsx\";\n\nimport { useLazyQuery } from '@apollo/client';\nimport { Avatar, Typography } from '@material-ui/core';\nimport { ButtonOutlined, InputField, Modal } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport config from '../../../config';\nimport { GET_EXPERIMENT_DATA, GET_TEMPLATE_BY_ID } from '../../../graphql';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport capitalize from '../../../utils/capitalize';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport { validateWorkflowName } from '../../../utils/validate';\nimport useStyles from './styles';\nvar WorkflowSettings = forwardRef(function (_, ref) {\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      avatarModal = _useState2[0],\n      setAvatarModal = _useState2[1];\n\n  var projectID = getProjectID(); // Workflow States\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState( /*#__PURE__*/React.createElement(React.Fragment, null)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      descriptionHeader = _useState6[0],\n      setDescriptionHeader = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      description = _useState8[0],\n      setDescription = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      icon = _useState10[0],\n      setIcon = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      CRDLink = _useState12[0],\n      setCRDLink = _useState12[1]; // Actions\n\n\n  var workflowAction = useActions(WorkflowActions);\n  var workflowData = useSelector(function (state) {\n    return state.workflowData;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.workflowManifest;\n  }),\n      manifest = _useSelector.manifest;\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      hubName = _useState14[0],\n      setHubName = _useState14[1]; // Query to get charts of selected MyHub\n\n\n  var _useLazyQuery = useLazyQuery(GET_EXPERIMENT_DATA, {\n    fetchPolicy: 'cache-and-network',\n    onCompleted: function onCompleted(data) {\n      if (data.getHubExperiment !== undefined) {\n        setName(data.getHubExperiment.Metadata.Name.toLowerCase());\n        setDescription(data.getHubExperiment.Spec.CategoryDescription);\n        setIcon(\"\".concat(config.grahqlEndpoint, \"/icon/\").concat(projectID, \"/\").concat(hubName, \"/predefined/\").concat(data.getHubExperiment.Metadata.Name, \".png\"));\n        setCRDLink(data.getHubExperiment.Metadata.Name);\n      }\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getWorkflowDetails = _useLazyQuery2[0];\n\n  var _useLazyQuery3 = useLazyQuery(GET_TEMPLATE_BY_ID, {\n    fetchPolicy: 'network-only',\n    onCompleted: function onCompleted(data) {\n      if (data.GetTemplateManifestByID !== undefined) {\n        setName(data.GetTemplateManifestByID.template_name);\n        setDescription(data.GetTemplateManifestByID.template_description);\n        setIcon('./avatars/litmus.svg');\n        setCRDLink(data.GetTemplateManifestByID.template_id);\n      }\n    }\n  }),\n      _useLazyQuery4 = _slicedToArray(_useLazyQuery3, 1),\n      getSavedTemplateDetails = _useLazyQuery4[0];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var alert = useActions(AlertActions);\n\n  var checkForStoredData = function checkForStoredData() {\n    localforage.getItem('workflow').then(function (workflow) {\n      // If data is present set all the data to local state for the UI to display\n      if (workflow && workflow.name !== '') {\n        setName(workflow.name);\n      }\n\n      if (workflow && workflow.description !== '') {\n        setDescription(workflow.description);\n      }\n\n      if (workflow && workflow.icon !== '') {\n        setIcon(workflow.icon);\n      }\n    });\n  };\n\n  var detectHeader = function detectHeader() {\n    return localforage.getItem('selectedScheduleOption').then(function (value) {\n      return value && value.selected === 'A' ? setDescriptionHeader( /*#__PURE__*/React.createElement(React.Fragment, null, t('createWorkflow.chooseWorkflow.descriptionA'), \" \")) : value && value.selected === 'B' ? setDescriptionHeader( /*#__PURE__*/React.createElement(React.Fragment, null, t('createWorkflow.chooseWorkflow.descriptionB'), \" \")) : value && value.selected === 'C' ? setDescriptionHeader( /*#__PURE__*/React.createElement(React.Fragment, null, t('createWorkflow.chooseWorkflow.descriptionC'), \" \")) : setDescriptionHeader( /*#__PURE__*/React.createElement(React.Fragment, null, t('createWorkflow.chooseWorkflow.descriptionD'), \" \"));\n    });\n  };\n\n  var initializeWithDefault = function initializeWithDefault() {\n    localforage.getItem('selectedScheduleOption').then(function (value) {\n      // Map over the list of predefined workflows and extract the name and detail\n      if (value.selected === 'A') {\n        localforage.getItem('selectedHub').then(function (hub) {\n          setHubName(hub);\n          getWorkflowDetails({\n            variables: {\n              data: {\n                HubName: hub,\n                ProjectID: projectID,\n                ChartName: 'predefined',\n                ExperimentName: value.id\n              }\n            }\n          });\n        });\n        workflowAction.setWorkflowManifest({\n          manifest: ''\n        });\n      }\n\n      if (value.selected === 'B') {\n        getSavedTemplateDetails({\n          variables: {\n            data: value.id\n          }\n        });\n        workflowAction.setWorkflowManifest({\n          manifest: ''\n        });\n      }\n\n      if (value.selected === 'C') {\n        setName('custom-chaos-workflow');\n        workflowAction.setWorkflowManifest({\n          manifest: manifest !== null && manifest !== void 0 ? manifest : ''\n        });\n        setDescription('Custom Chaos Workflow');\n        setIcon('./avatars/litmus.svg');\n      }\n\n      if (value.selected === 'D') {\n        setName('chaos-workflow');\n        setDescription('Chaos Workflow');\n        setIcon('./avatars/litmus.svg');\n      }\n      /** Store a boolean value in local storage to serve as an indication\n       *  whether user already has edited data or not\n       */\n\n\n      localforage.setItem('hasSetWorkflowData', false);\n    });\n  }; // Loading Workflow Related Data for Workflow Settings\n\n\n  useEffect(function () {\n    /** Retrieving saved data from index DB,\n     *  if user has already edited the details then it will fetch the stored data\n     *  and call checkForStoredData()\n     *  else it will initializeWithDefault()\n     */\n    localforage.getItem('hasSetWorkflowData').then(function (isDataPresent) {\n      return isDataPresent ? checkForStoredData() : initializeWithDefault();\n    });\n    alert.changeAlertState(false);\n    detectHeader();\n  }, []); // Workflow Name Change Handler\n\n  var nameChangeHandle = function nameChangeHandle(event) {\n    setName(event.target.value);\n    localforage.setItem('hasSetWorkflowData', true);\n  }; // Workflow Description Change Handler\n\n\n  var descriptionChangeHandle = function descriptionChangeHandle(event) {\n    setDescription(event.target.value);\n    localforage.setItem('hasSetWorkflowData', true);\n  };\n\n  var handleClose = function handleClose() {\n    setAvatarModal(false);\n  };\n\n  function onNext() {\n    /** Creating an object to be stored in local forage for iterative fetching\n     *  Used in cases where users need to return back to previous page\n     *  and wants the edited data stored/saved\n     */\n    var workflowDetails = {\n      name: name,\n      description: description,\n      icon: icon,\n      CRDLink: CRDLink\n    };\n    localforage.setItem('workflow', workflowDetails);\n\n    if (!name.length) {\n      alert.changeAlertState(true); // Workflow Name is empty and user clicked on Next\n\n      return false;\n    }\n\n    if (name.length > 0 && validateWorkflowName(name)) {\n      alert.changeAlertState(true); // Workflow Name is not valid and user clicked on Next\n\n      return false;\n    }\n\n    return true;\n  }\n\n  useImperativeHandle(ref, function () {\n    return {\n      onNext: onNext\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, t('createWorkflow.chooseWorkflow.settings')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, descriptionHeader, /*#__PURE__*/React.createElement(\"i\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, name.split('-').map(function (text) {\n    return \"\".concat(capitalize(text), \" \");\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }), t('createWorkflow.chooseWorkflow.description2'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatarDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatarImgDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    variant: \"square\",\n    className: classes.avatar,\n    alt: \"User\",\n    src: icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-details\": \"spacer\",\n    className: classes.mainDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputField, {\n    \"data-cy\": \"WorkflowName\",\n    title: \"workflowName\",\n    label: t('createWorkflow.chooseWorkflow.label.workflowName'),\n    fullWidth: true,\n    helperText: validateWorkflowName(name) ? t('createWorkflow.chooseWorkflow.validate') : '',\n    variant: validateWorkflowName(name) ? 'error' : 'primary',\n    onChange: nameChangeHandle,\n    value: name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(InputField, {\n    \"data-cy\": \"WorkflowNamespace\",\n    InputProps: {\n      readOnly: true\n    },\n    disabled: true,\n    className: classes.nsInput,\n    label: t('createWorkflow.chooseWorkflow.label.namespace'),\n    value: workflowData.namespace,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-details\": \"spacer\",\n    className: classes.descDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputField, {\n    \"data-cy\": \"WorkflowDescription\",\n    id: \"filled-workflowdescription-input\",\n    label: t('createWorkflow.chooseWorkflow.label.desc'),\n    fullWidth: true,\n    InputProps: {\n      disableUnderline: true\n    },\n    value: description,\n    onChange: descriptionChangeHandle,\n    multiline: true,\n    rows: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  })))), avatarModal ? /*#__PURE__*/React.createElement(Modal, {\n    open: avatarModal,\n    width: \"60%\",\n    onClose: function onClose() {\n      return setAvatarModal(false);\n    },\n    modalActions: /*#__PURE__*/React.createElement(ButtonOutlined, {\n      onClick: handleClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }\n    }, \"\\u2715\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '2.5rem',\n      fontSize: '2rem',\n      marginBottom: '15rem'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, \"Modal\")) : null);\n}); // Modal Content\n\n/* <WorkflowAvatarModal\n    setAvatar={setWorkflowDetails}\n    setAvatarModal={setAvatarModal}\n    avatar={workflowDetails.icon}\n  /> */\n\nexport default WorkflowSettings;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/WorkflowSettings/index.tsx"],"names":["useLazyQuery","Avatar","Typography","ButtonOutlined","InputField","Modal","localforage","React","forwardRef","useEffect","useImperativeHandle","useState","useTranslation","useSelector","config","GET_EXPERIMENT_DATA","GET_TEMPLATE_BY_ID","useActions","AlertActions","WorkflowActions","capitalize","getProjectID","validateWorkflowName","useStyles","WorkflowSettings","_","ref","classes","avatarModal","setAvatarModal","projectID","name","setName","descriptionHeader","setDescriptionHeader","description","setDescription","icon","setIcon","CRDLink","setCRDLink","workflowAction","workflowData","state","workflowManifest","manifest","hubName","setHubName","fetchPolicy","onCompleted","data","getHubExperiment","undefined","Metadata","Name","toLowerCase","Spec","CategoryDescription","grahqlEndpoint","getWorkflowDetails","GetTemplateManifestByID","template_name","template_description","template_id","getSavedTemplateDetails","t","alert","checkForStoredData","getItem","then","workflow","detectHeader","value","selected","initializeWithDefault","hub","variables","HubName","ProjectID","ChartName","ExperimentName","id","setWorkflowManifest","setItem","isDataPresent","changeAlertState","nameChangeHandle","event","target","descriptionChangeHandle","handleClose","onNext","workflowDetails","length","root","innerContainer","header","split","map","text","avatarDiv","avatarImgDiv","avatar","inputDiv","mainDiv","readOnly","nsInput","namespace","descDiv","disableUnderline","padding","fontSize","marginBottom"],"mappings":"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","sourcesContent":["import { useLazyQuery } from '@apollo/client';\nimport { Avatar, Typography } from '@material-ui/core';\nimport { ButtonOutlined, InputField, Modal } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport config from '../../../config';\nimport { GET_EXPERIMENT_DATA, GET_TEMPLATE_BY_ID } from '../../../graphql';\nimport { ChooseWorkflowRadio } from '../../../models/localforage/radioButton';\nimport { WorkflowDetailsProps } from '../../../models/localforage/workflow';\nimport { ExperimentDetail } from '../../../models/redux/myhub';\nimport useActions from '../../../redux/actions';\nimport * as AlertActions from '../../../redux/actions/alert';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport capitalize from '../../../utils/capitalize';\nimport { getProjectID } from '../../../utils/getSearchParams';\nimport { validateWorkflowName } from '../../../utils/validate';\nimport useStyles from './styles';\n\nconst WorkflowSettings = forwardRef((_, ref) => {\n  const classes = useStyles();\n  const [avatarModal, setAvatarModal] = useState<boolean>(false);\n  const projectID = getProjectID();\n  // Workflow States\n  const [name, setName] = useState<string>('');\n  const [descriptionHeader, setDescriptionHeader] = useState<JSX.Element>(\n    <></>\n  );\n  const [description, setDescription] = useState<string>('');\n  const [icon, setIcon] = useState<string>('');\n  const [CRDLink, setCRDLink] = useState<string>('');\n  // Actions\n  const workflowAction = useActions(WorkflowActions);\n  const workflowData = useSelector((state: RootState) => state.workflowData);\n  const { manifest } = useSelector(\n    (state: RootState) => state.workflowManifest\n  );\n  const [hubName, setHubName] = useState('');\n  // Query to get charts of selected MyHub\n  const [getWorkflowDetails] = useLazyQuery<ExperimentDetail>(\n    GET_EXPERIMENT_DATA,\n    {\n      fetchPolicy: 'cache-and-network',\n      onCompleted: (data) => {\n        if (data.getHubExperiment !== undefined) {\n          setName(data.getHubExperiment.Metadata.Name.toLowerCase());\n          setDescription(data.getHubExperiment.Spec.CategoryDescription);\n          setIcon(\n            `${config.grahqlEndpoint}/icon/${projectID}/${hubName}/predefined/${data.getHubExperiment.Metadata.Name}.png`\n          );\n          setCRDLink(data.getHubExperiment.Metadata.Name);\n        }\n      },\n    }\n  );\n\n  const [getSavedTemplateDetails] = useLazyQuery(GET_TEMPLATE_BY_ID, {\n    fetchPolicy: 'network-only',\n    onCompleted: (data) => {\n      if (data.GetTemplateManifestByID !== undefined) {\n        setName(data.GetTemplateManifestByID.template_name);\n        setDescription(data.GetTemplateManifestByID.template_description);\n        setIcon('./avatars/litmus.svg');\n        setCRDLink(data.GetTemplateManifestByID.template_id);\n      }\n    },\n  });\n\n  const { t } = useTranslation();\n  const alert = useActions(AlertActions);\n\n  const checkForStoredData = () => {\n    localforage.getItem('workflow').then((workflow) => {\n      // If data is present set all the data to local state for the UI to display\n      if (workflow && (workflow as WorkflowDetailsProps).name !== '') {\n        setName((workflow as WorkflowDetailsProps).name);\n      }\n      if (workflow && (workflow as WorkflowDetailsProps).description !== '') {\n        setDescription((workflow as WorkflowDetailsProps).description);\n      }\n      if (workflow && (workflow as WorkflowDetailsProps).icon !== '') {\n        setIcon((workflow as WorkflowDetailsProps).icon);\n      }\n    });\n  };\n\n  const detectHeader = () => {\n    return localforage\n      .getItem('selectedScheduleOption')\n      .then((value) =>\n        value && (value as ChooseWorkflowRadio).selected === 'A'\n          ? setDescriptionHeader(\n              <>{t('createWorkflow.chooseWorkflow.descriptionA')} </>\n            )\n          : value && (value as ChooseWorkflowRadio).selected === 'B'\n          ? setDescriptionHeader(\n              <>{t('createWorkflow.chooseWorkflow.descriptionB')} </>\n            )\n          : value && (value as ChooseWorkflowRadio).selected === 'C'\n          ? setDescriptionHeader(\n              <>{t('createWorkflow.chooseWorkflow.descriptionC')} </>\n            )\n          : setDescriptionHeader(\n              <>{t('createWorkflow.chooseWorkflow.descriptionD')} </>\n            )\n      );\n  };\n\n  const initializeWithDefault = () => {\n    localforage.getItem('selectedScheduleOption').then((value) => {\n      // Map over the list of predefined workflows and extract the name and detail\n      if ((value as ChooseWorkflowRadio).selected === 'A') {\n        localforage.getItem('selectedHub').then((hub) => {\n          setHubName(hub as string);\n          getWorkflowDetails({\n            variables: {\n              data: {\n                HubName: hub as string,\n                ProjectID: projectID,\n                ChartName: 'predefined',\n                ExperimentName: (value as ChooseWorkflowRadio).id,\n              },\n            },\n          });\n        });\n        workflowAction.setWorkflowManifest({ manifest: '' });\n      }\n      if ((value as ChooseWorkflowRadio).selected === 'B') {\n        getSavedTemplateDetails({\n          variables: {\n            data: (value as ChooseWorkflowRadio).id,\n          },\n        });\n        workflowAction.setWorkflowManifest({ manifest: '' });\n      }\n      if ((value as ChooseWorkflowRadio).selected === 'C') {\n        setName('custom-chaos-workflow');\n        workflowAction.setWorkflowManifest({ manifest: manifest ?? '' });\n        setDescription('Custom Chaos Workflow');\n        setIcon('./avatars/litmus.svg');\n      }\n      if ((value as ChooseWorkflowRadio).selected === 'D') {\n        setName('chaos-workflow');\n        setDescription('Chaos Workflow');\n        setIcon('./avatars/litmus.svg');\n      }\n\n      /** Store a boolean value in local storage to serve as an indication\n       *  whether user already has edited data or not\n       */\n\n      localforage.setItem('hasSetWorkflowData', false);\n    });\n  };\n\n  // Loading Workflow Related Data for Workflow Settings\n  useEffect(() => {\n    /** Retrieving saved data from index DB,\n     *  if user has already edited the details then it will fetch the stored data\n     *  and call checkForStoredData()\n     *  else it will initializeWithDefault()\n     */\n\n    localforage.getItem('hasSetWorkflowData').then((isDataPresent) => {\n      return isDataPresent ? checkForStoredData() : initializeWithDefault();\n    });\n    alert.changeAlertState(false);\n    detectHeader();\n  }, []);\n\n  // Workflow Name Change Handler\n  const nameChangeHandle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    localforage.setItem('hasSetWorkflowData', true);\n  };\n\n  // Workflow Description Change Handler\n  const descriptionChangeHandle = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDescription(event.target.value);\n    localforage.setItem('hasSetWorkflowData', true);\n  };\n\n  const handleClose = () => {\n    setAvatarModal(false);\n  };\n\n  function onNext() {\n    /** Creating an object to be stored in local forage for iterative fetching\n     *  Used in cases where users need to return back to previous page\n     *  and wants the edited data stored/saved\n     */\n    const workflowDetails: WorkflowDetailsProps = {\n      name,\n      description,\n      icon,\n      CRDLink,\n    };\n    localforage.setItem('workflow', workflowDetails);\n    if (!name.length) {\n      alert.changeAlertState(true); // Workflow Name is empty and user clicked on Next\n      return false;\n    }\n    if (name.length > 0 && validateWorkflowName(name)) {\n      alert.changeAlertState(true); // Workflow Name is not valid and user clicked on Next\n      return false;\n    }\n\n    return true;\n  }\n\n  useImperativeHandle(ref, () => ({\n    onNext,\n  }));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.innerContainer}>\n        <div>\n          <Typography className={classes.header}>\n            {t('createWorkflow.chooseWorkflow.settings')}\n          </Typography>\n          <Typography className={classes.description}>\n            {descriptionHeader}\n            <i>\n              <strong>\n                {name.split('-').map((text) => `${capitalize(text)} `)}\n              </strong>\n            </i>\n            <br />\n            {t('createWorkflow.chooseWorkflow.description2')}\n          </Typography>\n        </div>\n        <div className={classes.avatarDiv}>\n          <div className={classes.avatarImgDiv}>\n            <Avatar\n              variant=\"square\"\n              className={classes.avatar}\n              alt=\"User\"\n              src={icon}\n            />\n          </div>\n          <div className={classes.inputDiv}>\n            <div aria-details=\"spacer\" className={classes.mainDiv}>\n              <InputField\n                data-cy=\"WorkflowName\"\n                title=\"workflowName\"\n                label={t('createWorkflow.chooseWorkflow.label.workflowName')}\n                fullWidth\n                helperText={\n                  validateWorkflowName(name)\n                    ? t('createWorkflow.chooseWorkflow.validate')\n                    : ''\n                }\n                variant={validateWorkflowName(name) ? 'error' : 'primary'}\n                onChange={nameChangeHandle}\n                value={name}\n              />\n              <InputField\n                data-cy=\"WorkflowNamespace\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                disabled\n                className={classes.nsInput}\n                label={t('createWorkflow.chooseWorkflow.label.namespace')}\n                value={workflowData.namespace}\n              />\n            </div>\n            <div aria-details=\"spacer\" className={classes.descDiv} />\n            <InputField\n              data-cy=\"WorkflowDescription\"\n              id=\"filled-workflowdescription-input\"\n              label={t('createWorkflow.chooseWorkflow.label.desc')}\n              fullWidth\n              InputProps={{\n                disableUnderline: true,\n              }}\n              value={description}\n              onChange={descriptionChangeHandle}\n              multiline\n              rows={8}\n            />\n            <br />\n          </div>\n        </div>\n      </div>\n      {avatarModal ? (\n        <Modal\n          open={avatarModal}\n          width=\"60%\"\n          onClose={() => setAvatarModal(false)}\n          modalActions={\n            <ButtonOutlined onClick={handleClose}>&#x2715;</ButtonOutlined>\n          }\n        >\n          <div\n            style={{\n              padding: '2.5rem',\n              fontSize: '2rem',\n              marginBottom: '15rem',\n            }}\n          >\n            Modal\n          </div>\n        </Modal>\n      ) : null}\n    </div>\n  );\n});\n\n// Modal Content\n\n/* <WorkflowAvatarModal\n    setAvatar={setWorkflowDetails}\n    setAvatarModal={setAvatarModal}\n    avatar={workflowDetails.icon}\n  /> */\n\nexport default WorkflowSettings;\n"]},"metadata":{},"sourceType":"module"}