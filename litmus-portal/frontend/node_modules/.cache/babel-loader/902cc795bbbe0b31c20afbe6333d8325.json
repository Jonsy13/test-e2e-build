{"ast":null,"code":"import _regeneratorRuntime from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/DashboardCloneModal/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useMutation } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, InputField, Modal, TextButton } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CREATE_DASHBOARD } from '../../../../graphql/mutations';\nimport { DEFAULT_DASHBOARD_REFRESH_RATE_STRING, DEFAULT_RELATIVE_TIME_RANGE } from '../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../redux/actions/dataSource';\nimport { getProjectID } from '../../../../utils/getSearchParams';\nimport { validateTextEmpty } from '../../../../utils/validate';\nimport useStyles from './styles';\n\nvar DashboardCloneModal = function DashboardCloneModal(_ref) {\n  var dashboardData = _ref.dashboardData,\n      _onClose = _ref.onClose;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // get ProjectID\n\n\n  var projectID = getProjectID();\n  var dashboard = useActions(DashboardActions);\n  var dataSource = useActions(DataSourceActions);\n\n  var _React$useState = React.useState(\"Copy of \".concat(dashboardData.name)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cloneName = _React$useState2[0],\n      setCloneName = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isAlertOpen = _React$useState4[0],\n      setIsAlertOpen = _React$useState4[1];\n\n  var onDashboardLoadRoutine = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dbID) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dashboard.selectDashboard({\n                selectedDashboardID: dbID,\n                refreshRate: 0\n              });\n              dataSource.selectDataSource({\n                selectedDataSourceURL: '',\n                selectedDataSourceID: '',\n                selectedDataSourceName: ''\n              });\n              return _context.abrupt(\"return\", true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onDashboardLoadRoutine(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useMutation = useMutation(CREATE_DASHBOARD, {\n    onCompleted: function onCompleted(data) {\n      var _data$createDashBoard, _data$createDashBoard2;\n\n      onDashboardLoadRoutine((_data$createDashBoard = (_data$createDashBoard2 = data.createDashBoard) === null || _data$createDashBoard2 === void 0 ? void 0 : _data$createDashBoard2.db_id) !== null && _data$createDashBoard !== void 0 ? _data$createDashBoard : '').then(function () {\n        window.location.reload();\n      });\n    },\n    onError: function onError() {\n      setIsAlertOpen(true);\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createDashboard = _useMutation2[0];\n\n  var getPanelGroups = function getPanelGroups() {\n    var panelGroups = [];\n    dashboardData.metaData[0].panel_groups.forEach(function (panelGroup) {\n      var selectedPanels = [];\n      panelGroup.panels.forEach(function (panel) {\n        var queries = [];\n        panel.prom_queries.forEach(function (query) {\n          queries.push({\n            queryid: uuidv4(),\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area\n          });\n        });\n        var options = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis\n        };\n        var selectedPanel = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels\n      });\n    });\n    return panelGroups;\n  };\n\n  var getApplicationMetadataMap = function getApplicationMetadataMap() {\n    var _dashboardData$applic;\n\n    var applicationMetadataMap = [];\n    (_dashboardData$applic = dashboardData.applicationMetadataMap) === null || _dashboardData$applic === void 0 ? void 0 : _dashboardData$applic.forEach(function (applicationMetadata) {\n      var applications = [];\n      applicationMetadata.applications.forEach(function (application) {\n        applications.push({\n          kind: application.kind,\n          names: application.names\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications: applications\n      });\n    });\n    return applicationMetadataMap;\n  };\n\n  var handleCreateMutation = function handleCreateMutation() {\n    var dashboardInput = {\n      ds_id: dashboardData.metaData[0].ds_id,\n      db_name: cloneName,\n      db_type_id: dashboardData.typeID,\n      db_type_name: dashboardData.typeName,\n      db_information: dashboardData.information,\n      chaos_event_query_template: dashboardData.chaosEventQueryTemplate,\n      chaos_verdict_query_template: dashboardData.chaosVerdictQueryTemplate,\n      application_metadata_map: getApplicationMetadataMap(),\n      panel_groups: getPanelGroups(),\n      end_time: \"\".concat(Math.round(new Date().getTime() / 1000)),\n      start_time: \"\".concat(Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE),\n      project_id: projectID,\n      cluster_id: dashboardData.agentID,\n      refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING\n    };\n    createDashboard({\n      variables: {\n        createDBInput: dashboardInput\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    open: true,\n    onClose: function onClose() {\n      return _onClose();\n    },\n    width: \"45%\",\n    height: \"fit-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.modal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.modalHeading,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.heading')), /*#__PURE__*/React.createElement(InputField, {\n    label: \"Name\",\n    \"data-cy\": \"copyDashboardName\",\n    width: \"82.5%\",\n    variant: validateTextEmpty(cloneName) ? 'error' : 'primary',\n    onChange: function onChange(event) {\n      setCloneName(event.target.value);\n    },\n    value: cloneName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: function onClick() {\n      return _onClose();\n    },\n    className: classes.cancelButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.cancel'))), /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      return handleCreateMutation();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: \"\".concat(classes.buttonText, \" \").concat(classes.okButtonText),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.ok')))))), /*#__PURE__*/React.createElement(Snackbar, {\n    open: isAlertOpen,\n    autoHideDuration: 6000,\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    severity: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.error'))));\n};\n\nexport default DashboardCloneModal;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/DashboardCloneModal/index.tsx"],"names":["useMutation","Snackbar","Typography","Alert","ButtonFilled","InputField","Modal","TextButton","React","useTranslation","v4","uuidv4","CREATE_DASHBOARD","DEFAULT_DASHBOARD_REFRESH_RATE_STRING","DEFAULT_RELATIVE_TIME_RANGE","useActions","DashboardActions","DataSourceActions","getProjectID","validateTextEmpty","useStyles","DashboardCloneModal","dashboardData","onClose","classes","t","projectID","dashboard","dataSource","useState","name","cloneName","setCloneName","isAlertOpen","setIsAlertOpen","onDashboardLoadRoutine","dbID","selectDashboard","selectedDashboardID","refreshRate","selectDataSource","selectedDataSourceURL","selectedDataSourceID","selectedDataSourceName","onCompleted","data","createDashBoard","db_id","then","window","location","reload","onError","createDashboard","getPanelGroups","panelGroups","metaData","panel_groups","forEach","panelGroup","selectedPanels","panels","panel","queries","prom_queries","query","push","queryid","prom_query_name","legend","resolution","minstep","line","close_area","options","points","panel_options","grids","left_axis","selectedPanel","panel_name","y_axis_left","y_axis_right","x_axis_down","unit","panel_group_name","getApplicationMetadataMap","applicationMetadataMap","applicationMetadata","applications","application","kind","names","namespace","handleCreateMutation","dashboardInput","ds_id","db_name","db_type_id","typeID","db_type_name","typeName","db_information","information","chaos_event_query_template","chaosEventQueryTemplate","chaos_verdict_query_template","chaosVerdictQueryTemplate","application_metadata_map","end_time","Math","round","Date","getTime","start_time","project_id","cluster_id","agentID","refresh_rate","variables","createDBInput","modal","modalHeading","event","target","value","flexButtons","cancelButton","buttonText","okButtonText"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useMutation } from '@apollo/client';\nimport { Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ButtonFilled, InputField, Modal, TextButton } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CREATE_DASHBOARD } from '../../../../graphql/mutations';\nimport { SelectedDashboardInformation } from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  CreateDashboardInput,\n  Panel,\n  PanelGroup,\n  PanelOption,\n  PromQuery,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport {\n  DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n  DEFAULT_RELATIVE_TIME_RANGE,\n} from '../../../../pages/ApplicationDashboard/constants';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../../../redux/actions/dataSource';\nimport { getProjectID } from '../../../../utils/getSearchParams';\nimport { validateTextEmpty } from '../../../../utils/validate';\nimport useStyles from './styles';\n\ninterface DashboardCloneModalProps {\n  dashboardData: SelectedDashboardInformation;\n  onClose: () => void;\n}\n\nconst DashboardCloneModal: React.FC<DashboardCloneModalProps> = ({\n  dashboardData,\n  onClose,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  // get ProjectID\n  const projectID = getProjectID();\n  const dashboard = useActions(DashboardActions);\n  const dataSource = useActions(DataSourceActions);\n  const [cloneName, setCloneName] = React.useState<string>(\n    `Copy of ${dashboardData.name}`\n  );\n  const [isAlertOpen, setIsAlertOpen] = React.useState<boolean>(false);\n\n  const onDashboardLoadRoutine = async (dbID: string) => {\n    dashboard.selectDashboard({\n      selectedDashboardID: dbID,\n      refreshRate: 0,\n    });\n    dataSource.selectDataSource({\n      selectedDataSourceURL: '',\n      selectedDataSourceID: '',\n      selectedDataSourceName: '',\n    });\n    return true;\n  };\n\n  const [createDashboard] = useMutation<CreateDashboardInput>(\n    CREATE_DASHBOARD,\n    {\n      onCompleted: (data) => {\n        onDashboardLoadRoutine(data.createDashBoard?.db_id ?? '').then(() => {\n          window.location.reload();\n        });\n      },\n      onError: () => {\n        setIsAlertOpen(true);\n      },\n    }\n  );\n\n  const getPanelGroups = () => {\n    const panelGroups: PanelGroup[] = [];\n    dashboardData.metaData[0].panel_groups.forEach((panelGroup) => {\n      const selectedPanels: Panel[] = [];\n      panelGroup.panels.forEach((panel) => {\n        const queries: PromQuery[] = [];\n        panel.prom_queries.forEach((query) => {\n          queries.push({\n            queryid: uuidv4(),\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const options: PanelOption = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis,\n        };\n        const selectedPanel: Panel = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels,\n      });\n    });\n    return panelGroups;\n  };\n\n  const getApplicationMetadataMap = () => {\n    const applicationMetadataMap: ApplicationMetadata[] = [];\n    dashboardData.applicationMetadataMap?.forEach((applicationMetadata) => {\n      const applications: Resource[] = [];\n      applicationMetadata.applications.forEach((application) => {\n        applications.push({\n          kind: application.kind,\n          names: application.names,\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications,\n      });\n    });\n    return applicationMetadataMap;\n  };\n\n  const handleCreateMutation = () => {\n    const dashboardInput = {\n      ds_id: dashboardData.metaData[0].ds_id,\n      db_name: cloneName,\n      db_type_id: dashboardData.typeID,\n      db_type_name: dashboardData.typeName,\n      db_information: dashboardData.information,\n      chaos_event_query_template: dashboardData.chaosEventQueryTemplate,\n      chaos_verdict_query_template: dashboardData.chaosVerdictQueryTemplate,\n      application_metadata_map: getApplicationMetadataMap(),\n      panel_groups: getPanelGroups(),\n      end_time: `${Math.round(new Date().getTime() / 1000)}`,\n      start_time: `${\n        Math.round(new Date().getTime() / 1000) - DEFAULT_RELATIVE_TIME_RANGE\n      }`,\n      project_id: projectID,\n      cluster_id: dashboardData.agentID,\n      refresh_rate: DEFAULT_DASHBOARD_REFRESH_RATE_STRING,\n    };\n    createDashboard({\n      variables: { createDBInput: dashboardInput },\n    });\n  };\n\n  return (\n    <div>\n      <Modal open onClose={() => onClose()} width=\"45%\" height=\"fit-content\">\n        <div className={classes.modal}>\n          <Typography className={classes.modalHeading} align=\"left\">\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.heading'\n            )}\n          </Typography>\n          <InputField\n            label=\"Name\"\n            data-cy=\"copyDashboardName\"\n            width=\"82.5%\"\n            variant={validateTextEmpty(cloneName) ? 'error' : 'primary'}\n            onChange={(event: React.ChangeEvent<{ value: string }>) => {\n              setCloneName((event.target as HTMLInputElement).value);\n            }}\n            value={cloneName}\n          />\n          <div className={classes.flexButtons}>\n            <TextButton\n              onClick={() => onClose()}\n              className={classes.cancelButton}\n            >\n              <Typography className={classes.buttonText}>\n                {t(\n                  'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.cancel'\n                )}\n              </Typography>\n            </TextButton>\n            <ButtonFilled onClick={() => handleCreateMutation()}>\n              <Typography\n                className={`${classes.buttonText} ${classes.okButtonText}`}\n              >\n                {t(\n                  'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.ok'\n                )}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        </div>\n      </Modal>\n      <Snackbar\n        open={isAlertOpen}\n        autoHideDuration={6000}\n        onClose={() => setIsAlertOpen(false)}\n      >\n        <Alert onClose={() => setIsAlertOpen(false)} severity=\"error\">\n          {t(\n            'analyticsDashboard.monitoringDashboardPage.dashboardCloneModal.error'\n          )}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default DashboardCloneModal;\n"]},"metadata":{},"sourceType":"module"}