{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Typography}from'@material-ui/core';import{ButtonOutlined,Modal}from'litmus-ui';import React from'react';import{useTranslation}from'react-i18next';import useActions from'../../../../../../redux/actions';import*as DashboardActions from'../../../../../../redux/actions/dashboards';import DashboardCard from'./index';import useStyles from'./styles';import UploadJSON from'./UploadDashboard';var DashboardCards=function DashboardCards(_ref){var dashboards=_ref.dashboards,_handleClick=_ref.handleClick,generateAlert=_ref.generateAlert;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var dashboard=useActions(DashboardActions);// Function to fetch json\nvar fetchJson=function fetchJson(link){fetch(link).then(function(response){if(!response.ok){throw new Error(\"HTTP status \".concat(response.status));}response.text().then(function(jsonText){dashboard.selectDashboard({dashboardJSON:JSON.parse(jsonText)});_handleClick();});}).catch(function(err){console.error(err);generateAlert();});};var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),upload=_React$useState2[0],setUpload=_React$useState2[1];return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.root},dashboards&&dashboards.map(function(d){return/*#__PURE__*/React.createElement(\"div\",{key:d.dashboardTypeID,\"data-cy\":\"dashboardCard\"},/*#__PURE__*/React.createElement(DashboardCard,{key:d.dashboardTypeID,dashboardTypeID:d.dashboardTypeID,typeName:d.typeName,urlToIcon:d.urlToIcon,handleClick:function handleClick(){if(d.dashboardTypeID!=='custom'&&d.dashboardTypeID!=='upload'){var _d$urlToDashboard;fetchJson((_d$urlToDashboard=d.urlToDashboard)!==null&&_d$urlToDashboard!==void 0?_d$urlToDashboard:'');}else if(d.dashboardTypeID==='custom'){dashboard.selectDashboard({dashboardJSON:null});_handleClick();}else if(d.dashboardTypeID==='upload'){setUpload(true);}},information:d.information}));})),upload&&/*#__PURE__*/React.createElement(Modal,{open:true,onClose:function onClose(){setUpload(false);},modalActions:/*#__PURE__*/React.createElement(ButtonOutlined,{className:classes.closeButton,onClick:function onClick(){setUpload(false);}},\"\\u2715\"),width:\"50%\",height:\"fit-content\"},/*#__PURE__*/React.createElement(\"div\",{className:classes.modal},/*#__PURE__*/React.createElement(Typography,{className:classes.modalHeading,align:\"left\"},t('analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.heading')),/*#__PURE__*/React.createElement(UploadJSON,{successHandler:function successHandler(){return _handleClick();},errorHandler:function errorHandler(){generateAlert();}}))));};export default DashboardCards;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/ChooseADashboardType/Cards/DashBoardCards.tsx"],"names":["Typography","ButtonOutlined","Modal","React","useTranslation","useActions","DashboardActions","DashboardCard","useStyles","UploadJSON","DashboardCards","dashboards","handleClick","generateAlert","classes","t","dashboard","fetchJson","link","fetch","then","response","ok","Error","status","text","jsonText","selectDashboard","dashboardJSON","JSON","parse","catch","err","console","error","useState","upload","setUpload","root","map","d","dashboardTypeID","typeName","urlToIcon","urlToDashboard","information","closeButton","modal","modalHeading"],"mappings":"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","sourcesContent":["import { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardData } from '../../../../../../models/dashboardsData';\nimport useActions from '../../../../../../redux/actions';\nimport * as DashboardActions from '../../../../../../redux/actions/dashboards';\nimport DashboardCard from './index';\nimport useStyles from './styles';\nimport UploadJSON from './UploadDashboard';\n\ninterface DashboardCardsProps {\n  dashboards: DashboardData[];\n  handleClick: () => void;\n  generateAlert: () => void;\n}\n\nconst DashboardCards: React.FC<DashboardCardsProps> = ({\n  dashboards,\n  handleClick,\n  generateAlert,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const dashboard = useActions(DashboardActions);\n\n  // Function to fetch json\n\n  const fetchJson = (link: string) => {\n    fetch(link)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP status ${response.status}`);\n        }\n        response.text().then((jsonText) => {\n          dashboard.selectDashboard({\n            dashboardJSON: JSON.parse(jsonText),\n          });\n          handleClick();\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        generateAlert();\n      });\n  };\n\n  const [upload, setUpload] = React.useState(false);\n\n  return (\n    <div>\n      <div className={classes.root}>\n        {dashboards &&\n          dashboards.map((d: DashboardData) => (\n            <div key={d.dashboardTypeID} data-cy=\"dashboardCard\">\n              <DashboardCard\n                key={d.dashboardTypeID}\n                dashboardTypeID={d.dashboardTypeID}\n                typeName={d.typeName}\n                urlToIcon={d.urlToIcon}\n                handleClick={() => {\n                  if (\n                    d.dashboardTypeID !== 'custom' &&\n                    d.dashboardTypeID !== 'upload'\n                  ) {\n                    fetchJson(d.urlToDashboard ?? '');\n                  } else if (d.dashboardTypeID === 'custom') {\n                    dashboard.selectDashboard({\n                      dashboardJSON: null,\n                    });\n                    handleClick();\n                  } else if (d.dashboardTypeID === 'upload') {\n                    setUpload(true);\n                  }\n                }}\n                information={d.information}\n              />\n            </div>\n          ))}\n      </div>\n\n      {upload && (\n        <Modal\n          open\n          onClose={() => {\n            setUpload(false);\n          }}\n          modalActions={\n            <ButtonOutlined\n              className={classes.closeButton}\n              onClick={() => {\n                setUpload(false);\n              }}\n            >\n              &#x2715;\n            </ButtonOutlined>\n          }\n          width=\"50%\"\n          height=\"fit-content\"\n        >\n          <div className={classes.modal}>\n            <Typography className={classes.modalHeading} align=\"left\">\n              {t(\n                'analyticsDashboard.applicationDashboards.chooseADashboardType.uploadModal.heading'\n              )}\n            </Typography>\n            <UploadJSON\n              successHandler={() => handleClick()}\n              errorHandler={() => {\n                generateAlert();\n              }}\n            />\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardCards;\n"]},"metadata":{},"sourceType":"module"}