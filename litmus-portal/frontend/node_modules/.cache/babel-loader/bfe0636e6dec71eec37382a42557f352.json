{"ast":null,"code":"export var MyHubType;\n\n(function (MyHubType) {\n  MyHubType[\"basic\"] = \"basic\";\n  MyHubType[\"token\"] = \"token\";\n  MyHubType[\"ssh\"] = \"ssh\";\n  MyHubType[\"none\"] = \"none\";\n})(MyHubType || (MyHubType = {}));\n\nexport var Role;\n\n(function (Role) {\n  Role[\"viewer\"] = \"Viewer\";\n  Role[\"editor\"] = \"Editor\";\n  Role[\"owner\"] = \"Owner\";\n})(Role || (Role = {}));\n\nexport var UserRole;\n\n(function (UserRole) {\n  UserRole[\"admin\"] = \"admin\";\n  UserRole[\"user\"] = \"user\";\n})(UserRole || (UserRole = {}));\n\nexport var InvitationStatus;\n\n(function (InvitationStatus) {\n  InvitationStatus[\"PENDING\"] = \"Pending\";\n  InvitationStatus[\"ACCEPTED\"] = \"Accepted\";\n})(InvitationStatus || (InvitationStatus = {}));","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/models/graphql/user.ts"],"names":["MyHubType","Role","UserRole","InvitationStatus"],"mappings":"AAoGA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAmBZ,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAMZ,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAKZ,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["export interface Member {\n  user_id: string;\n  user_name: string;\n  role: string;\n  invitation: string;\n  name: string;\n  email: string;\n  joined_at: string;\n}\n\nexport interface Project {\n  members: Member[];\n  name: string;\n  id: string;\n}\n\nexport interface UserDetails {\n  username: string;\n  projects: Project[];\n  name: string;\n  email: string;\n  id: string;\n  company_name: string;\n  updated_at: string;\n  created_at: string;\n  removed_at: string;\n  is_email_verified: string;\n  state: string;\n  role: string;\n}\n\nexport interface MyHubDetail {\n  id: string;\n  HubName: string;\n  RepoBranch: string;\n  RepoURL: string;\n}\n\nexport interface CurrentUserDetails {\n  getUser: UserDetails;\n}\n\nexport interface CurrentUserDedtailsVars {\n  username: string;\n}\n\nexport interface CreateUserData {\n  username: string;\n  email: string;\n  name: string;\n  userID: string;\n  role: string;\n}\n\nexport interface UpdateUser {\n  user: {\n    id: string;\n    name: string;\n    email: string;\n  };\n}\n\nexport interface SSHKey {\n  privateKey: string;\n  publicKey: string;\n}\n\nexport interface SSHKeys {\n  generaterSSHKey: SSHKey;\n}\n\nexport interface MyHubInput {\n  id?: string;\n  HubName: string;\n  RepoURL: string;\n  RepoBranch: string;\n  IsPrivate: Boolean;\n  AuthType: MyHubType;\n  Token?: string;\n  UserName?: string;\n  Password?: string;\n  SSHPrivateKey?: string;\n  SSHPublicKey?: string;\n}\n\nexport interface MyHubData {\n  id: string;\n  RepoURL: string;\n  RepoBranch: string;\n  ProjectID: string;\n  HubName: string;\n  CreatedAt: string;\n  UpdatedAt: string;\n}\n\nexport interface CreateMyHub {\n  MyHubDetails: MyHubInput;\n  projectID: string;\n}\n\nexport enum MyHubType {\n  basic = 'basic',\n  token = 'token',\n  ssh = 'ssh',\n  none = 'none',\n}\n\nexport interface Projects {\n  listProjects: Project[];\n}\n\nexport interface ProjectDetail {\n  getProject: Project;\n}\n\nexport interface ProjectDetailVars {\n  projectID: string;\n}\n\nexport enum Role {\n  viewer = 'Viewer',\n  editor = 'Editor',\n  owner = 'Owner',\n}\n\nexport enum UserRole {\n  admin = 'admin',\n  user = 'user',\n}\n\nexport enum InvitationStatus {\n  PENDING = 'Pending',\n  ACCEPTED = 'Accepted',\n}\n"]},"metadata":{},"sourceType":"module"}