{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-unused-expressions */import{FormControlLabel,FormGroup,Typography}from'@material-ui/core';import React,{useEffect,useState}from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import{CheckBox}from'../../../../../../components/CheckBox';import useStyles from'./styles';var SelectTheMetricsForm=function SelectTheMetricsForm(_ref){var dashboardVars=_ref.dashboardVars,CallbackToSetVars=_ref.CallbackToSetVars,setDisabledNext=_ref.setDisabledNext,generateAlert=_ref.generateAlert;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var selectedDashboard=useSelector(function(state){return state.selectDashboard;});var _useState=useState({selectedPanelGroupMap:dashboardVars.selectedPanelGroupMap&&dashboardVars.selectedPanelGroupMap.length?dashboardVars.selectedPanelGroupMap:selectedDashboard.dashboardJSON&&selectedDashboard.dashboardJSON.panelGroupMap?selectedDashboard.dashboardJSON.panelGroupMap.map(function(panelGroup){return{groupName:panelGroup.groupName,panels:[]};}):[]}),_useState2=_slicedToArray(_useState,2),dashboardDetails=_useState2[0],setDashboardDetails=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),update=_useState4[0],setUpdate=_useState4[1];var handleMetricSelect=function handleMetricSelect(panel,index){var _dashboardDetails$sel;var selectedPanelGroupMapArray=(_dashboardDetails$sel=dashboardDetails.selectedPanelGroupMap)!==null&&_dashboardDetails$sel!==void 0?_dashboardDetails$sel:[];if(selectedPanelGroupMapArray[index].panels.includes(panel)){selectedPanelGroupMapArray[index].panels=selectedPanelGroupMapArray[index].panels.filter(function(selectedPanel){return selectedPanel!==panel;});}else{selectedPanelGroupMapArray[index].panels.push(panel);}setDashboardDetails({selectedPanelGroupMap:selectedPanelGroupMapArray});setUpdate(true);};useEffect(function(){var _dashboardDetails$sel2,_dashboardDetails$sel3;var selectedNumberOfMetrics=0;(_dashboardDetails$sel2=dashboardDetails.selectedPanelGroupMap)===null||_dashboardDetails$sel2===void 0?void 0:_dashboardDetails$sel2.forEach(function(panelGroup){selectedNumberOfMetrics+=panelGroup.panels.length;});if(!((_dashboardDetails$sel3=dashboardDetails.selectedPanelGroupMap)===null||_dashboardDetails$sel3===void 0?void 0:_dashboardDetails$sel3.length)||!selectedNumberOfMetrics){setDisabledNext(true);}else{setDisabledNext(false);}if(update===true){CallbackToSetVars(dashboardDetails);setUpdate(false);}},[update]);useEffect(function(){var _dashboardDetails$sel4;if(((_dashboardDetails$sel4=dashboardDetails.selectedPanelGroupMap)===null||_dashboardDetails$sel4===void 0?void 0:_dashboardDetails$sel4.length)===0){generateAlert();}},[dashboardDetails.selectedPanelGroupMap]);return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},selectedDashboard.dashboardJSON&&selectedDashboard.dashboardJSON.panelGroupMap?selectedDashboard.dashboardJSON.panelGroupMap.map(function(panelGroup,index){return/*#__PURE__*/React.createElement(\"div\",{key:\"\".concat(panelGroup.groupName,\"-applicationDashboard-form\"),className:classes.panelGroupMap},/*#__PURE__*/React.createElement(Typography,{align:\"left\",display:\"inline\",className:classes.panelGroupName},panelGroup.groupName),/*#__PURE__*/React.createElement(FormGroup,{key:\"metrics-group-\".concat(panelGroup.groupName),className:classes.formGroup},panelGroup.panels.map(function(panel){return/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(CheckBox,{checked:dashboardDetails.selectedPanelGroupMap?dashboardDetails.selectedPanelGroupMap[index].panels.includes(panel):false,onChange:function onChange(){return handleMetricSelect(panel,index);},name:panel}),label:/*#__PURE__*/React.createElement(Typography,{className:classes.formControlLabel},panel),key:\"metrics-group-\".concat(panelGroup.groupName,\"-label\")});})));}):/*#__PURE__*/React.createElement(Typography,{align:\"left\",display:\"inline\",className:classes.panelGroupName},t('analyticsDashboard.applicationDashboards.selectTheMetrics.errorMessage')));};export default SelectTheMetricsForm;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/SelectTheMetrics/Form/index.tsx"],"names":["FormControlLabel","FormGroup","Typography","React","useEffect","useState","useTranslation","useSelector","CheckBox","useStyles","SelectTheMetricsForm","dashboardVars","CallbackToSetVars","setDisabledNext","generateAlert","classes","t","selectedDashboard","state","selectDashboard","selectedPanelGroupMap","length","dashboardJSON","panelGroupMap","map","panelGroup","groupName","panels","dashboardDetails","setDashboardDetails","update","setUpdate","handleMetricSelect","panel","index","selectedPanelGroupMapArray","includes","filter","selectedPanel","push","selectedNumberOfMetrics","forEach","root","panelGroupName","formGroup","formControlLabel"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { FormControlLabel, FormGroup, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { CheckBox } from '../../../../../../components/CheckBox';\nimport {\n  DashboardDetails,\n  PanelGroupMap,\n} from '../../../../../../models/dashboardsData';\nimport { RootState } from '../../../../../../redux/reducers';\nimport useStyles from './styles';\n\ninterface SelectTheMetricsFormProps {\n  dashboardVars: DashboardDetails;\n  CallbackToSetVars: (vars: DashboardDetails) => void;\n  setDisabledNext: (next: boolean) => void;\n  generateAlert: () => void;\n}\n\nconst SelectTheMetricsForm: React.FC<SelectTheMetricsFormProps> = ({\n  dashboardVars,\n  CallbackToSetVars,\n  setDisabledNext,\n  generateAlert,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n\n  const [dashboardDetails, setDashboardDetails] = useState<DashboardDetails>({\n    selectedPanelGroupMap:\n      dashboardVars.selectedPanelGroupMap &&\n      dashboardVars.selectedPanelGroupMap.length\n        ? dashboardVars.selectedPanelGroupMap\n        : selectedDashboard.dashboardJSON &&\n          selectedDashboard.dashboardJSON.panelGroupMap\n        ? selectedDashboard.dashboardJSON.panelGroupMap.map(\n            (panelGroup: PanelGroupMap) => ({\n              groupName: panelGroup.groupName,\n              panels: [],\n            })\n          )\n        : [],\n  });\n\n  const [update, setUpdate] = useState(false);\n\n  const handleMetricSelect = (panel: string, index: number) => {\n    const selectedPanelGroupMapArray: PanelGroupMap[] =\n      dashboardDetails.selectedPanelGroupMap ?? [];\n    if (selectedPanelGroupMapArray[index].panels.includes(panel)) {\n      selectedPanelGroupMapArray[index].panels = selectedPanelGroupMapArray[\n        index\n      ].panels.filter((selectedPanel: string) => selectedPanel !== panel);\n    } else {\n      selectedPanelGroupMapArray[index].panels.push(panel);\n    }\n    setDashboardDetails({ selectedPanelGroupMap: selectedPanelGroupMapArray });\n    setUpdate(true);\n  };\n\n  useEffect(() => {\n    let selectedNumberOfMetrics = 0;\n    dashboardDetails.selectedPanelGroupMap?.forEach((panelGroup) => {\n      selectedNumberOfMetrics += panelGroup.panels.length;\n    });\n    if (\n      !dashboardDetails.selectedPanelGroupMap?.length ||\n      !selectedNumberOfMetrics\n    ) {\n      setDisabledNext(true);\n    } else {\n      setDisabledNext(false);\n    }\n    if (update === true) {\n      CallbackToSetVars(dashboardDetails);\n      setUpdate(false);\n    }\n  }, [update]);\n\n  useEffect(() => {\n    if (dashboardDetails.selectedPanelGroupMap?.length === 0) {\n      generateAlert();\n    }\n  }, [dashboardDetails.selectedPanelGroupMap]);\n\n  return (\n    <div className={classes.root}>\n      {selectedDashboard.dashboardJSON &&\n      selectedDashboard.dashboardJSON.panelGroupMap ? (\n        selectedDashboard.dashboardJSON.panelGroupMap.map(\n          (panelGroup: PanelGroupMap, index: number) => (\n            <div\n              key={`${panelGroup.groupName}-applicationDashboard-form`}\n              className={classes.panelGroupMap}\n            >\n              <Typography\n                align=\"left\"\n                display=\"inline\"\n                className={classes.panelGroupName}\n              >\n                {panelGroup.groupName}\n              </Typography>\n              <FormGroup\n                key={`metrics-group-${panelGroup.groupName}`}\n                className={classes.formGroup}\n              >\n                {panelGroup.panels.map((panel: string) => (\n                  <FormControlLabel\n                    control={\n                      <CheckBox\n                        checked={\n                          dashboardDetails.selectedPanelGroupMap\n                            ? dashboardDetails.selectedPanelGroupMap[\n                                index\n                              ].panels.includes(panel)\n                            : false\n                        }\n                        onChange={() => handleMetricSelect(panel, index)}\n                        name={panel}\n                      />\n                    }\n                    label={\n                      <Typography className={classes.formControlLabel}>\n                        {panel}\n                      </Typography>\n                    }\n                    key={`metrics-group-${panelGroup.groupName}-label`}\n                  />\n                ))}\n              </FormGroup>\n            </div>\n          )\n        )\n      ) : (\n        <Typography\n          align=\"left\"\n          display=\"inline\"\n          className={classes.panelGroupName}\n        >\n          {t(\n            'analyticsDashboard.applicationDashboards.selectTheMetrics.errorMessage'\n          )}\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport default SelectTheMetricsForm;\n"]},"metadata":{},"sourceType":"module"}