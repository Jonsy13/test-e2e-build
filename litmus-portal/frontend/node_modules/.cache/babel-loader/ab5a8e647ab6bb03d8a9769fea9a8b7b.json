{"ast":null,"code":"import _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/WorkflowPreview/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DagreGraph from '../../../../components/DagreGraph';\nimport { extractSteps } from '../ExtractSteps';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\nvar WorkflowPreview = function WorkflowPreview(_ref) {\n  var isCustomWorkflow = _ref.isCustomWorkflow,\n      SequenceSteps = _ref.SequenceSteps,\n      editSequenceLoader = _ref.editSequenceLoader;\n  var steps = [];\n  var updatedSteps = [];\n  var manifest = useSelector(function (state) {\n    return state.workflowManifest.manifest;\n  }); // Graph orientation\n\n  var horizontal = false;\n  var isSequence = SequenceSteps !== undefined;\n  var classes = useStyles({\n    horizontal: horizontal,\n    isSequence: isSequence\n  });\n\n  var _useState = useState({\n    nodes: [],\n    links: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1];\n\n  if (manifest !== '') {\n    steps = extractSteps(isCustomWorkflow, manifest);\n  }\n\n  if (SequenceSteps !== undefined) {\n    steps = Object.values(SequenceSteps);\n  }\n\n  useEffect(function () {\n    var data = {\n      nodes: [],\n      links: []\n    };\n\n    if (steps) {\n      /** Adding a Step Group after each node/index on the array\n          \n        Incoming Array : [\n          0: [Node 1]\n          1: [Node 2]      \n        ]\n        Outgoing Array: [\n          0: [Node 1]\n          1: [StepGroup]\n          2: [Node 2]\n          3: [StepGroup]\n        ]\n      */\n      for (var i = 0; i < steps.length; i++) {\n        if (steps[i].length !== 0) {\n          updatedSteps.push(steps[i]);\n\n          if (i !== steps.length - 1) {\n            updatedSteps.push([{\n              name: 'StepGroup',\n              template: 'StepGroup'\n            }]);\n          }\n        }\n      }\n\n      var k = 0; // temporary variable to store absolute index\n\n      for (var _i = 0; _i < updatedSteps.length; _i++) {\n        /**\n         * Traversing the updated array with StepGroups and adding the\n         * respective ids with the absolute index\n         * From 1 to n\n         */\n        if (updatedSteps[_i].length > 1) {\n          for (var j = 0; j < updatedSteps[_i].length; j++) {\n            data.nodes.push({\n              id: k.toString(),\n              class: 'succeeded'.concat(\" \", 'steps'),\n              label: createLabel({\n                label: updatedSteps[_i][j].name,\n                tooltip: updatedSteps[_i][j].name,\n                phase: 'succeeded',\n                horizontal: horizontal\n              }),\n              labelType: updatedSteps[_i][j].name !== 'StepGroup' ? 'svg' : 'string',\n              config: {\n                fullName: updatedSteps[_i][j].name\n              }\n            });\n            k++;\n          }\n        } else {\n          data.nodes.push({\n            id: k.toString(),\n            class: 'succeeded'.concat(\" \", 'steps'),\n            label: createLabel({\n              label: updatedSteps[_i][0].name,\n              tooltip: updatedSteps[_i][0].name,\n              phase: 'succeeded',\n              horizontal: horizontal\n            }),\n            labelType: updatedSteps[_i][0].name !== 'StepGroup' ? 'svg' : 'string',\n            config: {\n              fullName: updatedSteps[_i][0].name\n            }\n          });\n          k++;\n        }\n      }\n\n      var nodeID = 0; // temporary variable to keep track of the node id\n\n      for (var _i2 = 0; _i2 < updatedSteps.length - 1; _i2++) {\n        /**\n         * If the node at position i has a length equal to 1 and i+1 has\n         * more children -> for cases where\n         * the parent is a single node and the has two or more children\n         *\n         *      []  <- i (source)\n         *       |\n         *    []  []  <- i+1 (target)\n         */\n        if (updatedSteps[_i2].length === 1 && updatedSteps[_i2 + 1].length > 1) {\n          for (var _j = 0; _j < updatedSteps[_i2 + 1].length; _j++) {\n            data.links.push({\n              source: nodeID.toString(),\n              target: (nodeID + _j + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead: updatedSteps[_i2][0].name !== 'StepGroup' ? 'undirected' : 'vee'\n              }\n            });\n          }\n        } else if (updatedSteps[_i2].length > 1) {\n          /**\n           * If the current node's index is the child's then connect all the children\n           * to the next StepGroup.\n           *\n           *     []  []  []  <- i (source)\n           *       |   |\n           *         []      <- i+1 (target, StepGroup)\n           */\n          for (var _j2 = 0; _j2 < updatedSteps[_i2].length; _j2++) {\n            data.links.push({\n              source: (nodeID + _j2 + 1).toString(),\n              target: (nodeID + updatedSteps[_i2].length + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead: updatedSteps[_i2][0].name !== 'StepGroup' ? 'undirected' : 'vee'\n              }\n            });\n          }\n\n          nodeID = nodeID + updatedSteps[_i2].length + 1;\n        } else {\n          /**\n           * Else connect the parent node to the child node in a one-to-one mapping.\n           *\n           *       []   <- i (source)\n           *       |\n           *       []   <- i+i (target)\n           */\n          data.links.push({\n            source: nodeID.toString(),\n            target: (nodeID + 1).toString(),\n            class: 'succeeded',\n            config: {\n              arrowhead: updatedSteps[_i2][0].name !== 'StepGroup' ? 'undirected' : 'vee'\n            }\n          });\n          nodeID++;\n        }\n      }\n    }\n\n    setGraphData({\n      nodes: _toConsumableArray(data.nodes),\n      links: _toConsumableArray(data.links)\n    });\n  }, [manifest, SequenceSteps]);\n\n  if (graphData.nodes.length > 0) {\n    editSequenceLoader(false);\n  } else {\n    editSequenceLoader(true);\n  }\n\n  return graphData.nodes.length ? /*#__PURE__*/React.createElement(DagreGraph, {\n    className: classes.dagreGraph,\n    nodes: graphData.nodes,\n    links: graphData.links,\n    config: {\n      rankdir: horizontal ? 'LR' : 'TB',\n      // align: 'UR',\n      ranker: 'tight-tree'\n    },\n    animate: 1000,\n    shape: \"rect\",\n    fitBoundaries: true,\n    zoomable: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.load,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, \"Visualizing your Workflow\");\n};\n\nexport default WorkflowPreview;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/TuneWorkflow/WorkflowPreview/index.tsx"],"names":["React","useEffect","useState","useSelector","DagreGraph","extractSteps","createLabel","useStyles","WorkflowPreview","isCustomWorkflow","SequenceSteps","editSequenceLoader","steps","updatedSteps","manifest","state","workflowManifest","horizontal","isSequence","undefined","classes","nodes","links","graphData","setGraphData","Object","values","data","i","length","push","name","template","k","j","id","toString","class","label","tooltip","phase","labelType","config","fullName","nodeID","source","target","arrowhead","dagreGraph","rankdir","ranker","load"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DagreGraph, { d3Link, d3Node } from '../../../../components/DagreGraph';\nimport { Steps } from '../../../../models/redux/customyaml';\nimport { RootState } from '../../../../redux/reducers';\nimport { extractSteps } from '../ExtractSteps';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\ninterface GraphData {\n  nodes: d3Node[];\n  links: d3Link[];\n}\n\ninterface ManifestSteps {\n  name: string;\n  template: string;\n}\n\ninterface StepType {\n  [key: string]: ManifestSteps[];\n}\n\ninterface WorkflowPreviewProps {\n  isCustomWorkflow: boolean;\n  SequenceSteps?: StepType;\n  editSequenceLoader: (state: boolean) => void;\n}\n\nconst WorkflowPreview: React.FC<WorkflowPreviewProps> = ({\n  isCustomWorkflow,\n  SequenceSteps,\n  editSequenceLoader,\n}) => {\n  let steps: Steps[][] = [];\n  const updatedSteps: Steps[][] = [];\n\n  const manifest = useSelector(\n    (state: RootState) => state.workflowManifest.manifest\n  );\n\n  // Graph orientation\n  const horizontal = false;\n  const isSequence = SequenceSteps !== undefined;\n  const classes = useStyles({ horizontal, isSequence });\n\n  const [graphData, setGraphData] = useState<GraphData>({\n    nodes: [],\n    links: [],\n  });\n\n  if (manifest !== '') {\n    steps = extractSteps(isCustomWorkflow, manifest);\n  }\n  if (SequenceSteps !== undefined) {\n    steps = Object.values(SequenceSteps);\n  }\n\n  useEffect(() => {\n    const data: GraphData = {\n      nodes: [],\n      links: [],\n    };\n\n    if (steps) {\n      /** Adding a Step Group after each node/index on the array\n          \n        Incoming Array : [\n          0: [Node 1]\n          1: [Node 2]      \n        ]\n        Outgoing Array: [\n          0: [Node 1]\n          1: [StepGroup]\n          2: [Node 2]\n          3: [StepGroup]\n        ]\n      */\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].length !== 0) {\n          updatedSteps.push(steps[i]);\n          if (i !== steps.length - 1) {\n            updatedSteps.push([\n              {\n                name: 'StepGroup',\n                template: 'StepGroup',\n              },\n            ]);\n          }\n        }\n      }\n\n      let k = 0; // temporary variable to store absolute index\n      for (let i = 0; i < updatedSteps.length; i++) {\n        /**\n         * Traversing the updated array with StepGroups and adding the\n         * respective ids with the absolute index\n         * From 1 to n\n         */\n\n        if (updatedSteps[i].length > 1) {\n          for (let j = 0; j < updatedSteps[i].length; j++) {\n            data.nodes.push({\n              id: k.toString(),\n              class: `${'succeeded'} ${'steps'}`,\n              label: createLabel({\n                label: updatedSteps[i][j].name,\n                tooltip: updatedSteps[i][j].name,\n                phase: 'succeeded',\n                horizontal,\n              }),\n              labelType:\n                updatedSteps[i][j].name !== 'StepGroup' ? 'svg' : 'string',\n              config: { fullName: updatedSteps[i][j].name },\n            });\n            k++;\n          }\n        } else {\n          data.nodes.push({\n            id: k.toString(),\n            class: `${'succeeded'} ${'steps'}`,\n            label: createLabel({\n              label: updatedSteps[i][0].name,\n              tooltip: updatedSteps[i][0].name,\n              phase: 'succeeded',\n              horizontal,\n            }),\n            labelType:\n              updatedSteps[i][0].name !== 'StepGroup' ? 'svg' : 'string',\n            config: { fullName: updatedSteps[i][0].name },\n          });\n          k++;\n        }\n      }\n\n      let nodeID = 0; // temporary variable to keep track of the node id\n      for (let i = 0; i < updatedSteps.length - 1; i++) {\n        /**\n         * If the node at position i has a length equal to 1 and i+1 has\n         * more children -> for cases where\n         * the parent is a single node and the has two or more children\n         *\n         *      []  <- i (source)\n         *       |\n         *    []  []  <- i+1 (target)\n         */\n\n        if (updatedSteps[i].length === 1 && updatedSteps[i + 1].length > 1) {\n          for (let j = 0; j < updatedSteps[i + 1].length; j++) {\n            data.links.push({\n              source: nodeID.toString(),\n              target: (nodeID + j + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead:\n                  updatedSteps[i][0].name !== 'StepGroup'\n                    ? 'undirected'\n                    : 'vee',\n              },\n            });\n          }\n        } else if (updatedSteps[i].length > 1) {\n          /**\n           * If the current node's index is the child's then connect all the children\n           * to the next StepGroup.\n           *\n           *     []  []  []  <- i (source)\n           *       |   |\n           *         []      <- i+1 (target, StepGroup)\n           */\n          for (let j = 0; j < updatedSteps[i].length; j++) {\n            data.links.push({\n              source: (nodeID + j + 1).toString(),\n              target: (nodeID + updatedSteps[i].length + 1).toString(),\n              class: 'succeeded',\n              config: {\n                arrowhead:\n                  updatedSteps[i][0].name !== 'StepGroup'\n                    ? 'undirected'\n                    : 'vee',\n              },\n            });\n          }\n          nodeID = nodeID + updatedSteps[i].length + 1;\n        } else {\n          /**\n           * Else connect the parent node to the child node in a one-to-one mapping.\n           *\n           *       []   <- i (source)\n           *       |\n           *       []   <- i+i (target)\n           */\n          data.links.push({\n            source: nodeID.toString(),\n            target: (nodeID + 1).toString(),\n            class: 'succeeded',\n            config: {\n              arrowhead:\n                updatedSteps[i][0].name !== 'StepGroup' ? 'undirected' : 'vee',\n            },\n          });\n          nodeID++;\n        }\n      }\n    }\n\n    setGraphData({\n      nodes: [...data.nodes],\n      links: [...data.links],\n    });\n  }, [manifest, SequenceSteps]);\n\n  if (graphData.nodes.length > 0) {\n    editSequenceLoader(false);\n  } else {\n    editSequenceLoader(true);\n  }\n\n  return graphData.nodes.length ? (\n    <DagreGraph\n      className={classes.dagreGraph}\n      nodes={graphData.nodes}\n      links={graphData.links}\n      config={{\n        rankdir: horizontal ? 'LR' : 'TB',\n        // align: 'UR',\n        ranker: 'tight-tree',\n      }}\n      animate={1000}\n      shape=\"rect\"\n      fitBoundaries\n      zoomable\n    />\n  ) : (\n    <div className={classes.load}>Visualizing your Workflow</div>\n  );\n};\n\nexport default WorkflowPreview;\n"]},"metadata":{},"sourceType":"module"}