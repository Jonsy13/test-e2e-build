{"ast":null,"code":"import jwtDecode from 'jsonwebtoken';\nimport { history } from '../redux/configureStore';\nimport { getJWTToken, setCookie, setJWTToken } from './cookies';\n// Logs out the user and unsets the jwt token\nexport function logout() {\n  setCookie({\n    name: 'token',\n    value: '',\n    exhours: 1\n  });\n  window.location.reload();\n} // Returns the jwt token\n\nexport function getToken() {\n  var jwtToken = getJWTToken('token'); // Logout user if jwt is expired\n\n  if (jwtToken === '') {\n    history.push('/login');\n  }\n\n  return jwtToken;\n} // Sets the jwt token in the cookie\n\nexport function setUserDetails(token) {\n  setJWTToken({\n    token: token,\n    cookieName: 'token',\n    errorMessage: 'ERROR IN SETTING USER DETAILS: '\n  });\n} // Returns the details of a user from jwt token\n\nexport function getUserDetailsFromJwt() {\n  var jwtToken = getToken();\n  var userDetails = jwtDecode.decode(jwtToken);\n  return userDetails;\n} // Returns the username from jwt token\n\nexport function getUsername() {\n  if (getToken()) return getUserDetailsFromJwt().username;\n  return '';\n} // Returns userId from jwt token\n\nexport function getUserId() {\n  if (getToken()) return getUserDetailsFromJwt().uid;\n  return '';\n}\nexport function getUserRole() {\n  if (getToken()) return getUserDetailsFromJwt().role;\n  return '';\n}\nexport function getUserEmail() {\n  var _getUserDetailsFromJw;\n\n  if (getToken()) return (_getUserDetailsFromJw = getUserDetailsFromJwt().email) !== null && _getUserDetailsFromJw !== void 0 ? _getUserDetailsFromJw : '';\n  return '';\n}\nexport function getUserFullName() {\n  var _getUserDetailsFromJw2;\n\n  if (getToken()) return (_getUserDetailsFromJw2 = getUserDetailsFromJwt().name) !== null && _getUserDetailsFromJw2 !== void 0 ? _getUserDetailsFromJw2 : '';\n  return '';\n}","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/auth.ts"],"names":["jwtDecode","history","getJWTToken","setCookie","setJWTToken","logout","name","value","exhours","window","location","reload","getToken","jwtToken","push","setUserDetails","token","cookieName","errorMessage","getUserDetailsFromJwt","userDetails","decode","getUsername","username","getUserId","uid","getUserRole","role","getUserEmail","email","getUserFullName"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,WAApD;AAYA;AACA,OAAO,SAASC,MAAT,GAAkB;AACvBF,EAAAA,SAAS,CAAC;AAAEG,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE,EAAxB;AAA4BC,IAAAA,OAAO,EAAE;AAArC,GAAD,CAAT;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,C,CAED;;AACA,OAAO,SAASC,QAAT,GAA4B;AACjC,MAAMC,QAAQ,GAAGX,WAAW,CAAC,OAAD,CAA5B,CADiC,CAGjC;;AACA,MAAIW,QAAQ,KAAK,EAAjB,EAAqB;AACnBZ,IAAAA,OAAO,CAACa,IAAR,CAAa,QAAb;AACD;;AAED,SAAOD,QAAP;AACD,C,CAED;;AACA,OAAO,SAASE,cAAT,CAAwBC,KAAxB,EAAuC;AAC5CZ,EAAAA,WAAW,CAAC;AACVY,IAAAA,KAAK,EAALA,KADU;AAEVC,IAAAA,UAAU,EAAE,OAFF;AAGVC,IAAAA,YAAY,EAAE;AAHJ,GAAD,CAAX;AAKD,C,CAED;;AACA,OAAO,SAASC,qBAAT,GAA8C;AACnD,MAAMN,QAAQ,GAAGD,QAAQ,EAAzB;AACA,MAAMQ,WAAW,GAAGpB,SAAS,CAACqB,MAAV,CAAiBR,QAAjB,CAApB;AACA,SAAOO,WAAP;AACD,C,CAED;;AACA,OAAO,SAASE,WAAT,GAA+B;AACpC,MAAIV,QAAQ,EAAZ,EAAgB,OAAOO,qBAAqB,GAAGI,QAA/B;AAChB,SAAO,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,SAAT,GAA6B;AAClC,MAAIZ,QAAQ,EAAZ,EAAgB,OAAOO,qBAAqB,GAAGM,GAA/B;AAChB,SAAO,EAAP;AACD;AAED,OAAO,SAASC,WAAT,GAA+B;AACpC,MAAId,QAAQ,EAAZ,EAAgB,OAAOO,qBAAqB,GAAGQ,IAA/B;AAChB,SAAO,EAAP;AACD;AAED,OAAO,SAASC,YAAT,GAAgC;AAAA;;AACrC,MAAIhB,QAAQ,EAAZ,EAAgB,gCAAOO,qBAAqB,GAAGU,KAA/B,yEAAwC,EAAxC;AAChB,SAAO,EAAP;AACD;AAED,OAAO,SAASC,eAAT,GAAmC;AAAA;;AACxC,MAAIlB,QAAQ,EAAZ,EAAgB,iCAAOO,qBAAqB,GAAGb,IAA/B,2EAAuC,EAAvC;AAChB,SAAO,EAAP;AACD","sourcesContent":["import jwtDecode from 'jsonwebtoken';\nimport { history } from '../redux/configureStore';\nimport { getJWTToken, setCookie, setJWTToken } from './cookies';\n\ninterface UserDetails {\n  role: string;\n  uid: string;\n  username: string;\n  name?: string;\n  email?: string;\n  exp: Date;\n  iat: Date;\n}\n\n// Logs out the user and unsets the jwt token\nexport function logout() {\n  setCookie({ name: 'token', value: '', exhours: 1 });\n  window.location.reload();\n}\n\n// Returns the jwt token\nexport function getToken(): string {\n  const jwtToken = getJWTToken('token');\n\n  // Logout user if jwt is expired\n  if (jwtToken === '') {\n    history.push('/login');\n  }\n\n  return jwtToken;\n}\n\n// Sets the jwt token in the cookie\nexport function setUserDetails(token: string) {\n  setJWTToken({\n    token,\n    cookieName: 'token',\n    errorMessage: 'ERROR IN SETTING USER DETAILS: ',\n  });\n}\n\n// Returns the details of a user from jwt token\nexport function getUserDetailsFromJwt(): UserDetails {\n  const jwtToken = getToken();\n  const userDetails = jwtDecode.decode(jwtToken) as UserDetails;\n  return userDetails;\n}\n\n// Returns the username from jwt token\nexport function getUsername(): string {\n  if (getToken()) return getUserDetailsFromJwt().username;\n  return '';\n}\n\n// Returns userId from jwt token\nexport function getUserId(): string {\n  if (getToken()) return getUserDetailsFromJwt().uid;\n  return '';\n}\n\nexport function getUserRole(): string {\n  if (getToken()) return getUserDetailsFromJwt().role;\n  return '';\n}\n\nexport function getUserEmail(): string {\n  if (getToken()) return getUserDetailsFromJwt().email ?? '';\n  return '';\n}\n\nexport function getUserFullName(): string {\n  if (getToken()) return getUserDetailsFromJwt().name ?? '';\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}