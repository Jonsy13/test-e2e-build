{"ast":null,"code":"import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{FormControlLabel,FormGroup,Typography}from'@material-ui/core';import Icon from'@material-ui/core/Icon';import React from'react';import{useTranslation}from'react-i18next';import{CheckBox}from'../../../../components/CheckBox';import useStyles from'./styles';var InfoDropdown=function InfoDropdown(_ref){var dashboardConfigurationDetails=_ref.dashboardConfigurationDetails,metricsToBeShown=_ref.metricsToBeShown,applicationsToBeShown=_ref.applicationsToBeShown,postPanelSelectionRoutine=_ref.postPanelSelectionRoutine,postApplicationSelectionRoutine=_ref.postApplicationSelectionRoutine;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var _React$useState=React.useState(applicationsToBeShown),_React$useState2=_slicedToArray(_React$useState,2),selectedApplications=_React$useState2[0],setSelectedApplications=_React$useState2[1];var _React$useState3=React.useState(metricsToBeShown.map(function(metric){return metric.id;})),_React$useState4=_slicedToArray(_React$useState3,2),selectedMetrics=_React$useState4[0],setSelectedMetrics=_React$useState4[1];var handleApplicationSelect=function handleApplicationSelect(selectedApplication){var newSelectedApps=(selectedApplications===null||selectedApplications===void 0?void 0:selectedApplications.includes(selectedApplication))?selectedApplications===null||selectedApplications===void 0?void 0:selectedApplications.filter(function(name){return name!==selectedApplication;}):[].concat(_toConsumableArray(selectedApplications!==null&&selectedApplications!==void 0?selectedApplications:[]),[selectedApplication]);setSelectedApplications(newSelectedApps);postApplicationSelectionRoutine(newSelectedApps);};var handleMetricSelect=function handleMetricSelect(selectedMetric){var newSelectedMetrics=(selectedMetrics===null||selectedMetrics===void 0?void 0:selectedMetrics.includes(selectedMetric))?selectedMetrics===null||selectedMetrics===void 0?void 0:selectedMetrics.filter(function(id){return id!==selectedMetric;}):[].concat(_toConsumableArray(selectedMetrics!==null&&selectedMetrics!==void 0?selectedMetrics:[]),[selectedMetric]);setSelectedMetrics(newSelectedMetrics);postPanelSelectionRoutine(newSelectedMetrics);};return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(\"div\",{className:classes.header},/*#__PURE__*/React.createElement(Typography,{className:classes.headerText},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.header'))),/*#__PURE__*/React.createElement(\"div\",{className:classes.body},/*#__PURE__*/React.createElement(\"div\",{className:classes.infoSectionElement},/*#__PURE__*/React.createElement(Typography,{className:classes.sectionHeader},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading1')),/*#__PURE__*/React.createElement(\"div\",{className:classes.dashboardMetaDataItem},/*#__PURE__*/React.createElement(Typography,{className:classes.infoKey},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData1')),/*#__PURE__*/React.createElement(Typography,{className:classes.infoValue},dashboardConfigurationDetails.name)),/*#__PURE__*/React.createElement(\"div\",{className:classes.dashboardMetaDataItem},/*#__PURE__*/React.createElement(Typography,{className:classes.infoKey},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData2')),/*#__PURE__*/React.createElement(\"div\",{className:classes.iconWithTextDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/\".concat(dashboardConfigurationDetails.typeID,\"_dashboard.svg\"),alt:\"dashboard Icon\",className:classes.inlineIcon}),/*#__PURE__*/React.createElement(Typography,{className:classes.infoValue},dashboardConfigurationDetails.typeID))),/*#__PURE__*/React.createElement(\"div\",{className:classes.dashboardMetaDataItem},/*#__PURE__*/React.createElement(Typography,{className:classes.infoKey},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData3')),/*#__PURE__*/React.createElement(\"div\",{className:classes.iconWithTextDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/prometheus.svg\",alt:\"data source Icon\",className:classes.inlineIcon}),/*#__PURE__*/React.createElement(Typography,{className:classes.infoValue},dashboardConfigurationDetails.dataSourceName),/*#__PURE__*/React.createElement(Icon,{onClick:function onClick(){window.open(dashboardConfigurationDetails.dataSourceURL);}},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/externalLink.svg\",alt:\"external link\",className:classes.linkIcon})))),/*#__PURE__*/React.createElement(\"div\",{className:classes.dashboardMetaDataItem},/*#__PURE__*/React.createElement(Typography,{className:classes.infoKey},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData4')),/*#__PURE__*/React.createElement(Typography,{className:classes.infoValue},dashboardConfigurationDetails.agentName))),/*#__PURE__*/React.createElement(\"div\",{className:classes.infoSectionElement},/*#__PURE__*/React.createElement(Typography,{className:classes.sectionHeader},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading2')),/*#__PURE__*/React.createElement(\"div\",{className:classes.checkBoxesContainer},/*#__PURE__*/React.createElement(FormGroup,{key:\"application-group\"},applicationsToBeShown.map(function(application){return/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(CheckBox,{checked:selectedApplications.includes(application),onChange:function onChange(){return handleApplicationSelect(application);},name:application}),label:/*#__PURE__*/React.createElement(Typography,{className:classes.formControlLabel},application),key:\"\".concat(application,\"-application-label\")});})))),/*#__PURE__*/React.createElement(\"div\",{className:classes.infoSectionElement},/*#__PURE__*/React.createElement(Typography,{className:classes.sectionHeader},t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading3')),/*#__PURE__*/React.createElement(\"div\",{className:classes.checkBoxesContainer},/*#__PURE__*/React.createElement(FormGroup,{key:\"metric-group\"},metricsToBeShown.map(function(metric){return/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(CheckBox,{checked:selectedMetrics.includes(metric.id),onChange:function onChange(){return handleMetricSelect(metric.id);},name:metric.name}),label:/*#__PURE__*/React.createElement(Typography,{className:classes.formControlLabel},metric.name),key:\"\".concat(metric,\"-metric-label\")});}))))));};export default InfoDropdown;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/InfoDropdown/index.tsx"],"names":["FormControlLabel","FormGroup","Typography","Icon","React","useTranslation","CheckBox","useStyles","InfoDropdown","dashboardConfigurationDetails","metricsToBeShown","applicationsToBeShown","postPanelSelectionRoutine","postApplicationSelectionRoutine","classes","t","useState","selectedApplications","setSelectedApplications","map","metric","id","selectedMetrics","setSelectedMetrics","handleApplicationSelect","selectedApplication","newSelectedApps","includes","filter","name","handleMetricSelect","selectedMetric","newSelectedMetrics","root","header","headerText","body","infoSectionElement","sectionHeader","dashboardMetaDataItem","infoKey","infoValue","iconWithTextDiv","typeID","inlineIcon","dataSourceName","window","open","dataSourceURL","linkIcon","agentName","checkBoxesContainer","application","formControlLabel"],"mappings":"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","sourcesContent":["import { FormControlLabel, FormGroup, Typography } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CheckBox } from '../../../../components/CheckBox';\nimport {\n  DashboardConfigurationDetails,\n  PanelNameAndID,\n} from '../../../../models/dashboardsData';\nimport useStyles from './styles';\n\ninterface InfoDropdownProps {\n  dashboardConfigurationDetails: DashboardConfigurationDetails;\n  metricsToBeShown: PanelNameAndID[];\n  applicationsToBeShown: string[];\n  postPanelSelectionRoutine: (selectedPanelList: string[]) => void;\n  postApplicationSelectionRoutine: (selectedApplicationList: string[]) => void;\n}\n\nconst InfoDropdown: React.FC<InfoDropdownProps> = ({\n  dashboardConfigurationDetails,\n  metricsToBeShown,\n  applicationsToBeShown,\n  postPanelSelectionRoutine,\n  postApplicationSelectionRoutine,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const [selectedApplications, setSelectedApplications] = React.useState<\n    string[]\n  >(applicationsToBeShown);\n\n  const [selectedMetrics, setSelectedMetrics] = React.useState<string[]>(\n    metricsToBeShown.map((metric) => metric.id)\n  );\n\n  const handleApplicationSelect = (selectedApplication: string) => {\n    const newSelectedApps = selectedApplications?.includes(selectedApplication)\n      ? selectedApplications?.filter((name) => name !== selectedApplication)\n      : [...(selectedApplications ?? []), selectedApplication];\n    setSelectedApplications(newSelectedApps);\n    postApplicationSelectionRoutine(newSelectedApps);\n  };\n\n  const handleMetricSelect = (selectedMetric: string) => {\n    const newSelectedMetrics = selectedMetrics?.includes(selectedMetric)\n      ? selectedMetrics?.filter((id) => id !== selectedMetric)\n      : [...(selectedMetrics ?? []), selectedMetric];\n    setSelectedMetrics(newSelectedMetrics);\n    postPanelSelectionRoutine(newSelectedMetrics);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography className={classes.headerText}>\n          {t('analyticsDashboard.monitoringDashboardPage.infoDropdown.header')}\n        </Typography>\n      </div>\n      <div className={classes.body}>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading1'\n            )}\n          </Typography>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData1'\n              )}\n            </Typography>\n            <Typography className={classes.infoValue}>\n              {dashboardConfigurationDetails.name}\n            </Typography>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData2'\n              )}\n            </Typography>\n            <div className={classes.iconWithTextDiv}>\n              <img\n                src={`/icons/${dashboardConfigurationDetails.typeID}_dashboard.svg`}\n                alt=\"dashboard Icon\"\n                className={classes.inlineIcon}\n              />\n              <Typography className={classes.infoValue}>\n                {dashboardConfigurationDetails.typeID}\n              </Typography>\n            </div>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData3'\n              )}\n            </Typography>\n            <div className={classes.iconWithTextDiv}>\n              <img\n                src=\"/icons/prometheus.svg\"\n                alt=\"data source Icon\"\n                className={classes.inlineIcon}\n              />\n              <Typography className={classes.infoValue}>\n                {dashboardConfigurationDetails.dataSourceName}\n              </Typography>\n              <Icon\n                onClick={() => {\n                  window.open(dashboardConfigurationDetails.dataSourceURL);\n                }}\n              >\n                <img\n                  src=\"/icons/externalLink.svg\"\n                  alt=\"external link\"\n                  className={classes.linkIcon}\n                />\n              </Icon>\n            </div>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData4'\n              )}\n            </Typography>\n            <Typography className={classes.infoValue}>\n              {dashboardConfigurationDetails.agentName}\n            </Typography>\n          </div>\n        </div>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading2'\n            )}\n          </Typography>\n          <div className={classes.checkBoxesContainer}>\n            <FormGroup key=\"application-group\">\n              {applicationsToBeShown.map((application: string) => (\n                <FormControlLabel\n                  control={\n                    <CheckBox\n                      checked={selectedApplications.includes(application)}\n                      onChange={() => handleApplicationSelect(application)}\n                      name={application}\n                    />\n                  }\n                  label={\n                    <Typography className={classes.formControlLabel}>\n                      {application}\n                    </Typography>\n                  }\n                  key={`${application}-application-label`}\n                />\n              ))}\n            </FormGroup>\n          </div>\n        </div>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading3'\n            )}\n          </Typography>\n          <div className={classes.checkBoxesContainer}>\n            <FormGroup key=\"metric-group\">\n              {metricsToBeShown.map((metric: PanelNameAndID) => (\n                <FormControlLabel\n                  control={\n                    <CheckBox\n                      checked={selectedMetrics.includes(metric.id)}\n                      onChange={() => handleMetricSelect(metric.id)}\n                      name={metric.name}\n                    />\n                  }\n                  label={\n                    <Typography className={classes.formControlLabel}>\n                      {metric.name}\n                    </Typography>\n                  }\n                  key={`${metric}-metric-label`}\n                />\n              ))}\n            </FormGroup>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoDropdown;\n"]},"metadata":{},"sourceType":"module"}