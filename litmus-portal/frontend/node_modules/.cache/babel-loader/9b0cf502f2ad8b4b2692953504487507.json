{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowStatus/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RUNNING, SUCCEEDED, PENDING, FAILED, ERROR, SKIPPED, OMITTED } from '../workflowConstants';\nimport useStyles from './styles';\n\nvar WorkflowStatus = function WorkflowStatus(_ref) {\n  var phase = _ref.phase;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  function getStatus(phase) {\n    switch (phase) {\n      case SUCCEEDED:\n        return \"\".concat(classes.textBold, \" \").concat(classes.succeeded);\n\n      case RUNNING:\n        return \"\".concat(classes.textBold, \" \").concat(classes.running);\n\n      case FAILED:\n        return \"\".concat(classes.textBold, \" \").concat(classes.failed);\n\n      case PENDING:\n        return \"\".concat(classes.textBold, \" \").concat(classes.pending);\n\n      case OMITTED:\n        return \"\".concat(classes.textBold, \" \").concat(classes.omitted);\n\n      case SKIPPED:\n        return \"\".concat(classes.textBold, \" \").concat(classes.skipped);\n\n      case ERROR:\n        return \"\".concat(classes.textBold, \" \").concat(classes.error);\n\n      default:\n        return \"\".concat(classes.textBold, \" \").concat(classes.pending);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.status,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: phase === RUNNING ? classes.runningSmallIcon : '',\n    src: \"/icons/\".concat(phase.toLowerCase(), \".svg\"),\n    alt: \"status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: getStatus(phase),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, phase === SUCCEEDED ? \"\".concat(t('workflowDetailsView.workflowInfo.Completed')) : phase)));\n};\n\nexport default WorkflowStatus;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowStatus/index.tsx"],"names":["Typography","React","useTranslation","RUNNING","SUCCEEDED","PENDING","FAILED","ERROR","SKIPPED","OMITTED","useStyles","WorkflowStatus","phase","classes","t","getStatus","textBold","succeeded","running","failed","pending","omitted","skipped","error","status","icon","runningSmallIcon","toLowerCase"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SACEC,OADF,EAEEC,SAFF,EAGEC,OAHF,EAIEC,MAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,OAPF,QAQO,sBARP;AASA,OAAOC,SAAP,MAAsB,UAAtB;;AAMA,IAAMC,cAA6C,GAAG,SAAhDA,cAAgD,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACnE,MAAMC,OAAO,GAAGH,SAAS,EAAzB;;AAEA,wBAAcR,cAAc,EAA5B;AAAA,MAAQY,CAAR,mBAAQA,CAAR;;AACA,WAASC,SAAT,CAAmBH,KAAnB,EAAkC;AAChC,YAAQA,KAAR;AACE,WAAKR,SAAL;AACE,yBAAUS,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACI,SAAtC;;AACF,WAAKd,OAAL;AACE,yBAAUU,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACK,OAAtC;;AACF,WAAKZ,MAAL;AACE,yBAAUO,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACM,MAAtC;;AACF,WAAKd,OAAL;AACE,yBAAUQ,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACO,OAAtC;;AACF,WAAKX,OAAL;AACE,yBAAUI,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACQ,OAAtC;;AACF,WAAKb,OAAL;AACE,yBAAUK,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACS,OAAtC;;AACF,WAAKf,KAAL;AACE,yBAAUM,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACU,KAAtC;;AACF;AACE,yBAAUV,OAAO,CAACG,QAAlB,cAA8BH,OAAO,CAACO,OAAtC;AAhBJ;AAkBD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACW,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAEX,OAAO,CAACY,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAEb,KAAK,KAAKT,OAAV,GAAoBU,OAAO,CAACa,gBAA5B,GAA+C,EAD5D;AAEE,IAAA,GAAG,mBAAYd,KAAK,CAACe,WAAN,EAAZ,SAFL;AAGE,IAAA,GAAG,EAAC,QAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAQE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAEZ,SAAS,CAACH,KAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,KAAKR,SAAV,aACMU,CAAC,CAAC,4CAAD,CADP,IAEGF,KAHN,CADF,CARF,CADF;AAkBD,CA3CD;;AA6CA,eAAeD,cAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  RUNNING,\n  SUCCEEDED,\n  PENDING,\n  FAILED,\n  ERROR,\n  SKIPPED,\n  OMITTED,\n} from '../workflowConstants';\nimport useStyles from './styles';\n\ninterface WorkflowStatusProps {\n  phase: string;\n}\n\nconst WorkflowStatus: React.FC<WorkflowStatusProps> = ({ phase }) => {\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n  function getStatus(phase: string) {\n    switch (phase) {\n      case SUCCEEDED:\n        return `${classes.textBold} ${classes.succeeded}`;\n      case RUNNING:\n        return `${classes.textBold} ${classes.running}`;\n      case FAILED:\n        return `${classes.textBold} ${classes.failed}`;\n      case PENDING:\n        return `${classes.textBold} ${classes.pending}`;\n      case OMITTED:\n        return `${classes.textBold} ${classes.omitted}`;\n      case SKIPPED:\n        return `${classes.textBold} ${classes.skipped}`;\n      case ERROR:\n        return `${classes.textBold} ${classes.error}`;\n      default:\n        return `${classes.textBold} ${classes.pending}`;\n    }\n  }\n\n  return (\n    <div className={classes.status}>\n      <span className={classes.icon}>\n        <img\n          className={phase === RUNNING ? classes.runningSmallIcon : ''}\n          src={`/icons/${phase.toLowerCase()}.svg`}\n          alt=\"status\"\n        />\n      </span>\n      <Typography>\n        <span className={getStatus(phase)}>\n          {phase === SUCCEEDED\n            ? `${t('workflowDetailsView.workflowInfo.Completed')}`\n            : phase}\n        </span>\n      </Typography>\n    </div>\n  );\n};\n\nexport default WorkflowStatus;\n"]},"metadata":{},"sourceType":"module"}