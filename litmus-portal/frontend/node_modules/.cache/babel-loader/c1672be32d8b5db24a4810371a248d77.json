{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,FormControl,IconButton,InputAdornment,InputBase,InputLabel,MenuItem,OutlinedInput,Select,Typography}from'@material-ui/core';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import SearchIcon from'@material-ui/icons/Search';import React,{useRef,useState}from'react';import DateRangeSelector from'../../../../components/DateRangeSelector';import useStyles,{useOutlinedInputStyles}from'./styles';var TableToolBar=function TableToolBar(_ref){var handleSearch=_ref.handleSearch,searchToken=_ref.searchToken,tests=_ref.tests,testResults=_ref.testResults,callbackToSetTest=_ref.callbackToSetTest,callbackToSetRange=_ref.callbackToSetRange,callbackToSetResult=_ref.callbackToSetResult;var classes=useStyles();var outlinedInputClasses=useOutlinedInputStyles();var _React$useState=React.useState('All'),_React$useState2=_slicedToArray(_React$useState,2),test=_React$useState2[0],setTest=_React$useState2[1];var _React$useState3=React.useState('All'),_React$useState4=_slicedToArray(_React$useState3,2),testResult=_React$useState4[0],setTestResult=_React$useState4[1];var dateRangeSelectorRef=useRef(null);var _React$useState5=React.useState({startDate:' ',endDate:' '}),_React$useState6=_slicedToArray(_React$useState5,2),range=_React$useState6[0],setRange=_React$useState6[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDateRangeSelectorPopoverOpen=_useState2[0],setDateRangeSelectorPopoverOpen=_useState2[1];var handleTestChange=function handleTestChange(event){setTest(event.target.value);callbackToSetTest(event.target.value);};var handleTestResultChange=function handleTestResultChange(event){setTestResult(event.target.value);callbackToSetResult(event.target.value);};var CallbackFromRangeSelector=function CallbackFromRangeSelector(selectedStartDate,selectedEndDate){setRange({startDate:selectedStartDate,endDate:selectedEndDate});callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2],\" \").concat(selectedStartDate.split(' ')[1],\" \").concat(selectedStartDate.split(' ')[3])),\"\".concat(\"\".concat(selectedEndDate.split(' ')[2],\" \").concat(selectedEndDate.split(' ')[1],\" \").concat(selectedEndDate.split(' ')[3])));};return/*#__PURE__*/React.createElement(\"div\",{className:classes.headerSection},/*#__PURE__*/React.createElement(InputBase,{id:\"input-with-icon-adornment\",placeholder:\"Search\",className:classes.search,value:searchToken,onChange:handleSearch,startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))}),/*#__PURE__*/React.createElement(Button,{className:classes.selectDate,onClick:function onClick(){return setDateRangeSelectorPopoverOpen(true);},ref:dateRangeSelectorRef,\"aria-label\":\"time range\",\"aria-haspopup\":\"true\"},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},range.startDate===' '?'Select Period':\"\".concat(range.startDate.split(' ')[2],\" \").concat(range.startDate.split(' ')[1],\" \").concat(range.startDate.split(' ')[3],\" - \").concat(range.endDate.split(' ')[2],\" \").concat(range.endDate.split(' ')[1],\" \").concat(range.endDate.split(' ')[3]),/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorIcon},isDateRangeSelectorPopoverOpen?/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null):/*#__PURE__*/React.createElement(ChevronRightIcon,null)))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.testResultForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\" Test Result \"),/*#__PURE__*/React.createElement(Select,{label:\"Test Result\",value:testResult,onChange:handleTestResultChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),testResults.map(function(testResult){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(testResult,\"-litmusDashboard-workflowRunDetails\"),value:testResult},testResult);}))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.testForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\" Test Name \"),/*#__PURE__*/React.createElement(Select,{label:\"Test Name\",value:test,onChange:handleTestChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),tests.map(function(testName){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(testName,\"-workflowRunDetailsTable\"),value:testName},testName);}))),/*#__PURE__*/React.createElement(DateRangeSelector,{anchorEl:dateRangeSelectorRef.current,isOpen:isDateRangeSelectorPopoverOpen,onClose:function onClose(){setDateRangeSelectorPopoverOpen(false);},callbackToSetRange:CallbackFromRangeSelector}));};export default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowRunDetailsTable/TableToolbar.tsx"],"names":["Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","OutlinedInput","Select","Typography","ChevronRightIcon","KeyboardArrowDownIcon","SearchIcon","React","useRef","useState","DateRangeSelector","useStyles","useOutlinedInputStyles","TableToolBar","handleSearch","searchToken","tests","testResults","callbackToSetTest","callbackToSetRange","callbackToSetResult","classes","outlinedInputClasses","test","setTest","testResult","setTestResult","dateRangeSelectorRef","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","handleTestChange","event","target","value","handleTestResultChange","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","headerSection","search","selectDate","displayDate","rangeSelectorIcon","formControl","testResultForm","selectText","map","testForm","testName","current"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { ChangeEvent, useRef, useState } from 'react';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface TestCallBackType {\n  (clusterName: string): void;\n}\n\ninterface TestResultCallBackType {\n  (testResult: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface TableToolBarProps {\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  tests: string[];\n  testResults: string[];\n  callbackToSetTest: TestCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToSetResult: TestResultCallBackType;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  handleSearch,\n  searchToken,\n  tests,\n  testResults,\n  callbackToSetTest,\n  callbackToSetRange,\n  callbackToSetResult,\n}) => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const [test, setTest] = React.useState<String>('All');\n  const [testResult, setTestResult] = React.useState<String>('All');\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n\n  const handleTestChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTest(event.target.value as String);\n    callbackToSetTest(event.target.value as string);\n  };\n\n  const handleTestResultChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setTestResult(event.target.value as String);\n    callbackToSetResult(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  return (\n    <div className={classes.headerSection}>\n      <InputBase\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Search\"\n        className={classes.search}\n        value={searchToken}\n        onChange={handleSearch}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n      />\n\n      <Button\n        className={classes.selectDate}\n        onClick={() => setDateRangeSelectorPopoverOpen(true)}\n        ref={dateRangeSelectorRef}\n        aria-label=\"time range\"\n        aria-haspopup=\"true\"\n      >\n        <Typography className={classes.displayDate}>\n          {range.startDate === ' '\n            ? 'Select Period'\n            : `${range.startDate.split(' ')[2]} ${\n                range.startDate.split(' ')[1]\n              } ${range.startDate.split(' ')[3]} - ${\n                range.endDate.split(' ')[2]\n              } ${range.endDate.split(' ')[1]} ${range.endDate.split(' ')[3]}`}\n\n          <IconButton className={classes.rangeSelectorIcon}>\n            {isDateRangeSelectorPopoverOpen ? (\n              <KeyboardArrowDownIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </Typography>\n      </Button>\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.testResultForm}`}\n      >\n        <InputLabel className={classes.selectText}> Test Result </InputLabel>\n        <Select\n          label=\"Test Result\"\n          value={testResult}\n          onChange={handleTestResultChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {testResults.map((testResult: string) => (\n            <MenuItem\n              key={`${testResult}-litmusDashboard-workflowRunDetails`}\n              value={testResult}\n            >\n              {testResult}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.testForm}`}\n      >\n        <InputLabel className={classes.selectText}> Test Name </InputLabel>\n        <Select\n          label=\"Test Name\"\n          value={test}\n          onChange={handleTestChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {tests.map((testName: string) => (\n            <MenuItem\n              key={`${testName}-workflowRunDetailsTable`}\n              value={testName}\n            >\n              {testName}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <DateRangeSelector\n        anchorEl={dateRangeSelectorRef.current as HTMLElement}\n        isOpen={isDateRangeSelectorPopoverOpen}\n        onClose={() => {\n          setDateRangeSelectorPopoverOpen(false);\n        }}\n        callbackToSetRange={CallbackFromRangeSelector}\n      />\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}