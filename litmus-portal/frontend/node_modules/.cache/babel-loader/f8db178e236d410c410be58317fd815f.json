{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/ProgressBar/AnalyticsLinearProgressBar/index.tsx\";\n\nimport React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport useStyle from './styles';\n\nvar AnalyticsLinearProgressBar = function AnalyticsLinearProgressBar(_ref) {\n  var value = _ref.value,\n      maxValue = _ref.maxValue,\n      isInTable = _ref.isInTable;\n  var resultValue = value / maxValue * 100;\n  var classes = useStyle();\n  return /*#__PURE__*/React.createElement(LinearProgress, {\n    variant: \"determinate\",\n    value: resultValue,\n    style: {\n      height: '0.2rem'\n    },\n    classes: {\n      colorPrimary: isInTable ? resultValue > 60 ? classes.greenColorSecondary : resultValue > 30 ? classes.yellowColorSecondary : classes.redColorSecondary : classes.greenColorSecondary,\n      barColorPrimary: isInTable ? resultValue > 60 ? classes.greenColorPrimary : resultValue > 30 ? classes.yellowColorPrimary : classes.redColorPrimary : classes.greenColorSecondary\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default AnalyticsLinearProgressBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/components/ProgressBar/AnalyticsLinearProgressBar/index.tsx"],"names":["React","LinearProgress","useStyle","AnalyticsLinearProgressBar","value","maxValue","isInTable","resultValue","classes","height","colorPrimary","greenColorSecondary","yellowColorSecondary","redColorSecondary","barColorPrimary","greenColorPrimary","yellowColorPrimary","redColorPrimary"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAQA,IAAMC,0BAA4D,GAAG,SAA/DA,0BAA+D,OAI/D;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,SACI,QADJA,SACI;AACJ,MAAMC,WAAW,GAAKH,KAAD,GAAqBC,QAAtB,GAA6C,GAAjE;AAEA,MAAMG,OAAO,GAAGN,QAAQ,EAAxB;AAEA,sBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAC,aADV;AAEE,IAAA,KAAK,EAAEK,WAFT;AAGE,IAAA,KAAK,EAAE;AACLE,MAAAA,MAAM,EAAE;AADH,KAHT;AAME,IAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAEJ,SAAS,GACnBC,WAAW,GAAG,EAAd,GACEC,OAAO,CAACG,mBADV,GAEEJ,WAAW,GAAG,EAAd,GACAC,OAAO,CAACI,oBADR,GAEAJ,OAAO,CAACK,iBALS,GAMnBL,OAAO,CAACG,mBAPL;AAQPG,MAAAA,eAAe,EAAER,SAAS,GACtBC,WAAW,GAAG,EAAd,GACEC,OAAO,CAACO,iBADV,GAEER,WAAW,GAAG,EAAd,GACAC,OAAO,CAACQ,kBADR,GAEAR,OAAO,CAACS,eALY,GAMtBT,OAAO,CAACG;AAdL,KANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAyBD,CAlCD;;AAoCA,eAAeR,0BAAf","sourcesContent":["import React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport useStyle from './styles';\n\ninterface LinearProgressBarProps {\n  value: number;\n  maxValue: number;\n  isInTable: boolean;\n}\n\nconst AnalyticsLinearProgressBar: React.FC<LinearProgressBarProps> = ({\n  value,\n  maxValue,\n  isInTable,\n}) => {\n  const resultValue = ((value as number) / (maxValue as number)) * 100;\n\n  const classes = useStyle();\n\n  return (\n    <LinearProgress\n      variant=\"determinate\"\n      value={resultValue}\n      style={{\n        height: '0.2rem',\n      }}\n      classes={{\n        colorPrimary: isInTable\n          ? resultValue > 60\n            ? classes.greenColorSecondary\n            : resultValue > 30\n            ? classes.yellowColorSecondary\n            : classes.redColorSecondary\n          : classes.greenColorSecondary,\n        barColorPrimary: isInTable\n          ? resultValue > 60\n            ? classes.greenColorPrimary\n            : resultValue > 30\n            ? classes.yellowColorPrimary\n            : classes.redColorPrimary\n          : classes.greenColorSecondary,\n      }}\n    />\n  );\n};\n\nexport default AnalyticsLinearProgressBar;\n"]},"metadata":{},"sourceType":"module"}