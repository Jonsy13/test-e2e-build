{"ast":null,"code":"import{Typography}from'@material-ui/core';import React from'react';import{useTranslation}from'react-i18next';import{RUNNING,SUCCEEDED,PENDING,FAILED,ERROR,SKIPPED,OMITTED}from'../workflowConstants';import useStyles from'./styles';var WorkflowStatus=function WorkflowStatus(_ref){var phase=_ref.phase;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;function getStatus(phase){switch(phase){case SUCCEEDED:return\"\".concat(classes.textBold,\" \").concat(classes.succeeded);case RUNNING:return\"\".concat(classes.textBold,\" \").concat(classes.running);case FAILED:return\"\".concat(classes.textBold,\" \").concat(classes.failed);case PENDING:return\"\".concat(classes.textBold,\" \").concat(classes.pending);case OMITTED:return\"\".concat(classes.textBold,\" \").concat(classes.omitted);case SKIPPED:return\"\".concat(classes.textBold,\" \").concat(classes.skipped);case ERROR:return\"\".concat(classes.textBold,\" \").concat(classes.error);default:return\"\".concat(classes.textBold,\" \").concat(classes.pending);}}return/*#__PURE__*/React.createElement(\"div\",{className:classes.status},/*#__PURE__*/React.createElement(\"span\",{className:classes.icon},/*#__PURE__*/React.createElement(\"img\",{className:phase===RUNNING?classes.runningSmallIcon:'',src:\"/icons/\".concat(phase.toLowerCase(),\".svg\"),alt:\"status\"})),/*#__PURE__*/React.createElement(Typography,null,/*#__PURE__*/React.createElement(\"span\",{className:getStatus(phase)},phase===SUCCEEDED?\"\".concat(t('workflowDetailsView.workflowInfo.Completed')):phase)));};export default WorkflowStatus;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/WorkflowStatus/index.tsx"],"names":["Typography","React","useTranslation","RUNNING","SUCCEEDED","PENDING","FAILED","ERROR","SKIPPED","OMITTED","useStyles","WorkflowStatus","phase","classes","t","getStatus","textBold","succeeded","running","failed","pending","omitted","skipped","error","status","icon","runningSmallIcon","toLowerCase"],"mappings":"AAAA,OAASA,UAAT,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OACEC,OADF,CAEEC,SAFF,CAGEC,OAHF,CAIEC,MAJF,CAKEC,KALF,CAMEC,OANF,CAOEC,OAPF,KAQO,sBARP,CASA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAMA,GAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CACnE,GAAMC,CAAAA,OAAO,CAAGH,SAAS,EAAzB,CAEA,oBAAcR,cAAc,EAA5B,CAAQY,CAAR,iBAAQA,CAAR,CACA,QAASC,CAAAA,SAAT,CAAmBH,KAAnB,CAAkC,CAChC,OAAQA,KAAR,EACE,IAAKR,CAAAA,SAAL,CACE,gBAAUS,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACI,SAAtC,EACF,IAAKd,CAAAA,OAAL,CACE,gBAAUU,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACK,OAAtC,EACF,IAAKZ,CAAAA,MAAL,CACE,gBAAUO,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACM,MAAtC,EACF,IAAKd,CAAAA,OAAL,CACE,gBAAUQ,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACO,OAAtC,EACF,IAAKX,CAAAA,OAAL,CACE,gBAAUI,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACQ,OAAtC,EACF,IAAKb,CAAAA,OAAL,CACE,gBAAUK,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACS,OAAtC,EACF,IAAKf,CAAAA,KAAL,CACE,gBAAUM,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACU,KAAtC,EACF,QACE,gBAAUV,OAAO,CAACG,QAAlB,aAA8BH,OAAO,CAACO,OAAtC,EAhBJ,CAkBD,CAED,mBACE,2BAAK,SAAS,CAAEP,OAAO,CAACW,MAAxB,eACE,4BAAM,SAAS,CAAEX,OAAO,CAACY,IAAzB,eACE,2BACE,SAAS,CAAEb,KAAK,GAAKT,OAAV,CAAoBU,OAAO,CAACa,gBAA5B,CAA+C,EAD5D,CAEE,GAAG,kBAAYd,KAAK,CAACe,WAAN,EAAZ,QAFL,CAGE,GAAG,CAAC,QAHN,EADF,CADF,cAQE,oBAAC,UAAD,mBACE,4BAAM,SAAS,CAAEZ,SAAS,CAACH,KAAD,CAA1B,EACGA,KAAK,GAAKR,SAAV,WACMU,CAAC,CAAC,4CAAD,CADP,EAEGF,KAHN,CADF,CARF,CADF,CAkBD,CA3CD,CA6CA,cAAeD,CAAAA,cAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  RUNNING,\n  SUCCEEDED,\n  PENDING,\n  FAILED,\n  ERROR,\n  SKIPPED,\n  OMITTED,\n} from '../workflowConstants';\nimport useStyles from './styles';\n\ninterface WorkflowStatusProps {\n  phase: string;\n}\n\nconst WorkflowStatus: React.FC<WorkflowStatusProps> = ({ phase }) => {\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n  function getStatus(phase: string) {\n    switch (phase) {\n      case SUCCEEDED:\n        return `${classes.textBold} ${classes.succeeded}`;\n      case RUNNING:\n        return `${classes.textBold} ${classes.running}`;\n      case FAILED:\n        return `${classes.textBold} ${classes.failed}`;\n      case PENDING:\n        return `${classes.textBold} ${classes.pending}`;\n      case OMITTED:\n        return `${classes.textBold} ${classes.omitted}`;\n      case SKIPPED:\n        return `${classes.textBold} ${classes.skipped}`;\n      case ERROR:\n        return `${classes.textBold} ${classes.error}`;\n      default:\n        return `${classes.textBold} ${classes.pending}`;\n    }\n  }\n\n  return (\n    <div className={classes.status}>\n      <span className={classes.icon}>\n        <img\n          className={phase === RUNNING ? classes.runningSmallIcon : ''}\n          src={`/icons/${phase.toLowerCase()}.svg`}\n          alt=\"status\"\n        />\n      </span>\n      <Typography>\n        <span className={getStatus(phase)}>\n          {phase === SUCCEEDED\n            ? `${t('workflowDetailsView.workflowInfo.Completed')}`\n            : phase}\n        </span>\n      </Typography>\n    </div>\n  );\n};\n\nexport default WorkflowStatus;\n"]},"metadata":{},"sourceType":"module"}