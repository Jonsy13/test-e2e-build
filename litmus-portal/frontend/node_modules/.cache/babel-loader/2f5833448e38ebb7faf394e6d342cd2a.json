{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChooseAndConfigureDashboards/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport useActions from '../../redux/actions';\nimport * as AlertActions from '../../redux/actions/alert';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport DashboardStepper from '../../views/Analytics/ApplicationDashboards/Stepper';\n\nvar ChooseAndConfigureDashboards = function ChooseAndConfigureDashboards(_ref) {\n  var _dataSourceList$ListD2;\n\n  var configure = _ref.configure;\n  var projectID = getProjectID();\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n  var alert = useActions(AlertActions);\n  alert.changeAlertState(false); // Apollo query to get the data source data\n\n  var _useQuery = useQuery(LIST_DATASOURCE, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      dataSourceList = _useQuery.data; // Apollo query to get the dashboard data\n\n\n  var _useQuery2 = useQuery(LIST_DASHBOARD, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      dashboardList = _useQuery2.data;\n\n  var _React$useState = React.useState({\n    id: '',\n    name: '',\n    dashboardTypeID: '',\n    dashboardTypeName: '',\n    dataSourceType: '',\n    dataSourceID: '',\n    dataSourceURL: '',\n    chaosEventQueryTemplate: '',\n    chaosVerdictQueryTemplate: '',\n    agentID: '',\n    information: '',\n    panelGroupMap: [],\n    panelGroups: [],\n    selectedPanelGroupMap: [],\n    applicationMetadataMap: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dashboardVars = _React$useState2[0],\n      setDashboardVars = _React$useState2[1];\n\n  var getExistingPanelGroups = function getExistingPanelGroups(panelGroupsInput) {\n    var panelGroups = [];\n\n    if (panelGroupsInput === null || panelGroupsInput === void 0 ? void 0 : panelGroupsInput.length) {\n      panelGroupsInput.forEach(function (panelGroup) {\n        var panels = [];\n        panelGroup.panels.forEach(function (panel) {\n          var promQueries = [];\n          panel.prom_queries.forEach(function (promQuery) {\n            promQueries.push({\n              queryid: promQuery.queryid,\n              prom_query_name: promQuery.prom_query_name,\n              legend: promQuery.legend,\n              resolution: promQuery.resolution,\n              minstep: promQuery.minstep,\n              line: promQuery.line,\n              close_area: promQuery.close_area\n            });\n          });\n          var panelOption = {\n            points: panel.panel_options.points,\n            grids: panel.panel_options.grids,\n            left_axis: panel.panel_options.left_axis\n          };\n          panels.push({\n            panel_name: panel.panel_name,\n            y_axis_left: panel.y_axis_left,\n            y_axis_right: panel.y_axis_right,\n            x_axis_down: panel.x_axis_down,\n            unit: panel.unit,\n            panel_options: panelOption,\n            prom_queries: promQueries,\n            panel_id: panel.panel_id,\n            created_at: panel.created_at,\n            panel_group_id: panelGroup.panel_group_id,\n            panel_group_name: panelGroup.panel_group_name\n          });\n        });\n        panelGroups.push({\n          panel_group_id: panelGroup.panel_group_id,\n          panel_group_name: panelGroup.panel_group_name,\n          panels: panels\n        });\n      });\n    }\n\n    return panelGroups;\n  };\n\n  var getExistingPanelGroupMap = function getExistingPanelGroupMap(panelGroupsInput) {\n    var panelGroupMap = [];\n\n    if (panelGroupsInput === null || panelGroupsInput === void 0 ? void 0 : panelGroupsInput.length) {\n      panelGroupsInput.forEach(function (panelGroup) {\n        panelGroupMap.push({\n          panel_group_id: panelGroup.panel_group_id,\n          panel_group_name: panelGroup.panel_group_name,\n          panels: panelGroup.panels\n        });\n      });\n    }\n\n    return panelGroupMap;\n  };\n\n  var getApplicationMetadataMap = function getApplicationMetadataMap(applicationMetadataMapResponse) {\n    var applicationMetadataMap = [];\n    applicationMetadataMapResponse === null || applicationMetadataMapResponse === void 0 ? void 0 : applicationMetadataMapResponse.forEach(function (applicationMetadata) {\n      var applications = [];\n      applicationMetadata.applications.forEach(function (application) {\n        applications.push({\n          kind: application.kind,\n          names: application.names\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications: applications\n      });\n    });\n    return applicationMetadataMap;\n  };\n\n  var getSelectedDsURL = function getSelectedDsURL(selectedDsID) {\n    var _dataSourceList$ListD;\n\n    var dsList = (_dataSourceList$ListD = dataSourceList === null || dataSourceList === void 0 ? void 0 : dataSourceList.ListDataSource) !== null && _dataSourceList$ListD !== void 0 ? _dataSourceList$ListD : [];\n    var selectedDsURL = '';\n    dsList.forEach(function (ds) {\n      if (ds.ds_id === selectedDsID) {\n        selectedDsURL = ds.ds_url;\n      }\n    });\n    return selectedDsURL;\n  };\n\n  useEffect(function () {\n    if (configure === true) {\n      var _dashboardList$ListDa;\n\n      dashboardList === null || dashboardList === void 0 ? void 0 : (_dashboardList$ListDa = dashboardList.ListDashboard) === null || _dashboardList$ListDa === void 0 ? void 0 : _dashboardList$ListDa.forEach(function (dashboardDetail) {\n        if (dashboardDetail.db_id === selectedDashboard.selectedDashboardID) {\n          setDashboardVars(_objectSpread(_objectSpread({}, dashboardVars), {}, {\n            id: selectedDashboard.selectedDashboardID,\n            name: dashboardDetail.db_name,\n            dataSourceType: dashboardDetail.ds_type,\n            dashboardTypeID: dashboardDetail.db_type_id,\n            dashboardTypeName: dashboardDetail.db_type_name,\n            dataSourceID: dashboardDetail.ds_id,\n            dataSourceURL: getSelectedDsURL(dashboardDetail.ds_id),\n            agentID: dashboardDetail.cluster_id,\n            information: dashboardDetail.db_information,\n            panelGroupMap: getExistingPanelGroupMap(dashboardDetail.panel_groups),\n            panelGroups: getExistingPanelGroups(dashboardDetail.panel_groups),\n            chaosEventQueryTemplate: dashboardDetail.chaos_event_query_template,\n            chaosVerdictQueryTemplate: dashboardDetail.chaos_verdict_query_template,\n            applicationMetadataMap: getApplicationMetadataMap(dashboardDetail.application_metadata_map)\n          }));\n        }\n      });\n    }\n  }, [dashboardList, dataSourceList]);\n  return /*#__PURE__*/React.createElement(Scaffold, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(DashboardStepper, {\n    configure: configure,\n    activePanelID: selectedDashboard.activePanelID,\n    existingDashboardVars: dashboardVars,\n    dataSourceList: (_dataSourceList$ListD2 = dataSourceList === null || dataSourceList === void 0 ? void 0 : dataSourceList.ListDataSource) !== null && _dataSourceList$ListD2 !== void 0 ? _dataSourceList$ListD2 : [],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default ChooseAndConfigureDashboards;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChooseAndConfigureDashboards/index.tsx"],"names":["useQuery","React","useEffect","useSelector","BackButton","Scaffold","LIST_DASHBOARD","LIST_DATASOURCE","useActions","AlertActions","getProjectID","DashboardStepper","ChooseAndConfigureDashboards","configure","projectID","selectedDashboard","state","selectDashboard","alert","changeAlertState","variables","fetchPolicy","dataSourceList","data","dashboardList","useState","id","name","dashboardTypeID","dashboardTypeName","dataSourceType","dataSourceID","dataSourceURL","chaosEventQueryTemplate","chaosVerdictQueryTemplate","agentID","information","panelGroupMap","panelGroups","selectedPanelGroupMap","applicationMetadataMap","dashboardVars","setDashboardVars","getExistingPanelGroups","panelGroupsInput","length","forEach","panelGroup","panels","panel","promQueries","prom_queries","promQuery","push","queryid","prom_query_name","legend","resolution","minstep","line","close_area","panelOption","points","panel_options","grids","left_axis","panel_name","y_axis_left","y_axis_right","x_axis_down","unit","panel_id","created_at","panel_group_id","panel_group_name","getExistingPanelGroupMap","getApplicationMetadataMap","applicationMetadataMapResponse","applicationMetadata","applications","application","kind","names","namespace","getSelectedDsURL","selectedDsID","dsList","ListDataSource","selectedDsURL","ds","ds_id","ds_url","ListDashboard","dashboardDetail","db_id","selectedDashboardID","db_name","ds_type","db_type_id","db_type_name","cluster_id","db_information","panel_groups","chaos_event_query_template","chaos_verdict_query_template","application_metadata_map","activePanelID"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport {\n  DashboardDetails,\n  PanelDetails,\n  PanelGroupDetails,\n  PromQueryDetails,\n} from '../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  ApplicationMetadataResponse,\n  DashboardList,\n  ListDashboardResponse,\n  ListDashboardVars,\n  PanelGroupResponse,\n  PanelOption,\n  PanelResponse,\n  Resource,\n  updatePanelGroupInput,\n} from '../../models/graphql/dashboardsDetails';\nimport {\n  DataSourceList,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../models/graphql/dataSourceDetails';\nimport useActions from '../../redux/actions';\nimport * as AlertActions from '../../redux/actions/alert';\nimport { RootState } from '../../redux/reducers';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport DashboardStepper from '../../views/Analytics/ApplicationDashboards/Stepper';\n\ninterface ChooseAndConfigureDashboardsProps {\n  configure: boolean;\n}\n\nconst ChooseAndConfigureDashboards: React.FC<ChooseAndConfigureDashboardsProps> =\n  ({ configure }) => {\n    const projectID = getProjectID();\n    const selectedDashboard = useSelector(\n      (state: RootState) => state.selectDashboard\n    );\n    const alert = useActions(AlertActions);\n    alert.changeAlertState(false);\n\n    // Apollo query to get the data source data\n    const { data: dataSourceList } = useQuery<\n      DataSourceList,\n      ListDataSourceVars\n    >(LIST_DATASOURCE, {\n      variables: { projectID },\n      fetchPolicy: 'cache-and-network',\n    });\n\n    // Apollo query to get the dashboard data\n    const { data: dashboardList } = useQuery<DashboardList, ListDashboardVars>(\n      LIST_DASHBOARD,\n      {\n        variables: { projectID },\n        fetchPolicy: 'cache-and-network',\n      }\n    );\n\n    const [dashboardVars, setDashboardVars] = React.useState<DashboardDetails>({\n      id: '',\n      name: '',\n      dashboardTypeID: '',\n      dashboardTypeName: '',\n      dataSourceType: '',\n      dataSourceID: '',\n      dataSourceURL: '',\n      chaosEventQueryTemplate: '',\n      chaosVerdictQueryTemplate: '',\n      agentID: '',\n      information: '',\n      panelGroupMap: [],\n      panelGroups: [],\n      selectedPanelGroupMap: [],\n      applicationMetadataMap: [],\n    });\n\n    const getExistingPanelGroups = (panelGroupsInput: PanelGroupResponse[]) => {\n      const panelGroups: PanelGroupDetails[] = [];\n      if (panelGroupsInput?.length) {\n        panelGroupsInput.forEach((panelGroup: PanelGroupResponse) => {\n          const panels: PanelDetails[] = [];\n          panelGroup.panels.forEach((panel: PanelResponse) => {\n            const promQueries: PromQueryDetails[] = [];\n            panel.prom_queries.forEach((promQuery) => {\n              promQueries.push({\n                queryid: promQuery.queryid,\n                prom_query_name: promQuery.prom_query_name,\n                legend: promQuery.legend,\n                resolution: promQuery.resolution,\n                minstep: promQuery.minstep,\n                line: promQuery.line,\n                close_area: promQuery.close_area,\n              });\n            });\n            const panelOption: PanelOption = {\n              points: panel.panel_options.points,\n              grids: panel.panel_options.grids,\n              left_axis: panel.panel_options.left_axis,\n            };\n            panels.push({\n              panel_name: panel.panel_name,\n              y_axis_left: panel.y_axis_left,\n              y_axis_right: panel.y_axis_right,\n              x_axis_down: panel.x_axis_down,\n              unit: panel.unit,\n              panel_options: panelOption,\n              prom_queries: promQueries,\n              panel_id: panel.panel_id,\n              created_at: panel.created_at,\n              panel_group_id: panelGroup.panel_group_id,\n              panel_group_name: panelGroup.panel_group_name,\n            });\n          });\n          panelGroups.push({\n            panel_group_id: panelGroup.panel_group_id,\n            panel_group_name: panelGroup.panel_group_name,\n            panels,\n          });\n        });\n      }\n      return panelGroups;\n    };\n\n    const getExistingPanelGroupMap = (\n      panelGroupsInput: PanelGroupResponse[]\n    ) => {\n      const panelGroupMap: updatePanelGroupInput[] = [];\n      if (panelGroupsInput?.length) {\n        panelGroupsInput.forEach((panelGroup: PanelGroupResponse) => {\n          panelGroupMap.push({\n            panel_group_id: panelGroup.panel_group_id,\n            panel_group_name: panelGroup.panel_group_name,\n            panels: panelGroup.panels,\n          });\n        });\n      }\n      return panelGroupMap;\n    };\n\n    const getApplicationMetadataMap = (\n      applicationMetadataMapResponse: ApplicationMetadataResponse[]\n    ) => {\n      const applicationMetadataMap: ApplicationMetadata[] = [];\n      applicationMetadataMapResponse?.forEach((applicationMetadata) => {\n        const applications: Resource[] = [];\n        applicationMetadata.applications.forEach((application) => {\n          applications.push({\n            kind: application.kind,\n            names: application.names,\n          });\n        });\n        applicationMetadataMap.push({\n          namespace: applicationMetadata.namespace,\n          applications,\n        });\n      });\n      return applicationMetadataMap;\n    };\n\n    const getSelectedDsURL = (selectedDsID: string) => {\n      const dsList: ListDataSourceResponse[] =\n        dataSourceList?.ListDataSource ?? [];\n      let selectedDsURL: string = '';\n      dsList.forEach((ds) => {\n        if (ds.ds_id === selectedDsID) {\n          selectedDsURL = ds.ds_url;\n        }\n      });\n      return selectedDsURL;\n    };\n\n    useEffect(() => {\n      if (configure === true) {\n        dashboardList?.ListDashboard?.forEach(\n          (dashboardDetail: ListDashboardResponse) => {\n            if (\n              dashboardDetail.db_id === selectedDashboard.selectedDashboardID\n            ) {\n              setDashboardVars({\n                ...dashboardVars,\n                id: selectedDashboard.selectedDashboardID,\n                name: dashboardDetail.db_name,\n                dataSourceType: dashboardDetail.ds_type,\n                dashboardTypeID: dashboardDetail.db_type_id,\n                dashboardTypeName: dashboardDetail.db_type_name,\n                dataSourceID: dashboardDetail.ds_id,\n                dataSourceURL: getSelectedDsURL(dashboardDetail.ds_id),\n                agentID: dashboardDetail.cluster_id,\n                information: dashboardDetail.db_information,\n                panelGroupMap: getExistingPanelGroupMap(\n                  dashboardDetail.panel_groups\n                ),\n                panelGroups: getExistingPanelGroups(\n                  dashboardDetail.panel_groups\n                ),\n                chaosEventQueryTemplate:\n                  dashboardDetail.chaos_event_query_template,\n                chaosVerdictQueryTemplate:\n                  dashboardDetail.chaos_verdict_query_template,\n                applicationMetadataMap: getApplicationMetadataMap(\n                  dashboardDetail.application_metadata_map\n                ),\n              });\n            }\n          }\n        );\n      }\n    }, [dashboardList, dataSourceList]);\n\n    return (\n      <Scaffold>\n        <BackButton />\n        <DashboardStepper\n          configure={configure}\n          activePanelID={selectedDashboard.activePanelID}\n          existingDashboardVars={dashboardVars}\n          dataSourceList={dataSourceList?.ListDataSource ?? []}\n        />\n      </Scaffold>\n    );\n  };\n\nexport default ChooseAndConfigureDashboards;\n"]},"metadata":{},"sourceType":"module"}