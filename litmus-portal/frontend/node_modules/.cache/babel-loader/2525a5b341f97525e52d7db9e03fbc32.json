{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useTranslation}from'react-i18next';import DagreGraph from'../../../components/DagreGraph';import useActions from'../../../redux/actions';import*as NodeSelectionActions from'../../../redux/actions/nodeSelection';import{createLabel}from'./createLabel';import useStyles from'./styles';var ArgoWorkflow=function ArgoWorkflow(_ref){var nodes=_ref.nodes,setIsInfoToggled=_ref.setIsInfoToggled;var _useTranslation=useTranslation(),t=_useTranslation.t;// Graph orientation\nvar horizontal=true;var classes=useStyles({horizontal:horizontal});// Redux action call for updating selected node\nvar nodeSelection=useActions(NodeSelectionActions);var _useState=useState({nodes:[],links:[]}),_useState2=_slicedToArray(_useState,2),graphData=_useState2[0],setGraphData=_useState2[1];// Get the selected Node\nvar _useState3=useState(Object.keys(nodes)[0]),_useState4=_slicedToArray(_useState3,2),selectedNodeID=_useState4[0],setSelectedNodeID=_useState4[1];useEffect(function(){var data={nodes:[],links:[]};var _loop=function _loop(){var key=_Object$keys[_i];var node=nodes[key];data.nodes.push({id:key,class:node.type==='StepGroup'?'StepGroup':\"\".concat(node.phase,\" \").concat(node.type),label:node.type!=='StepGroup'?createLabel({currentNodeID:key,selectedNodeID:selectedNodeID,label:node.name,tooltip:node.name,phase:node.phase.toLowerCase(),horizontal:horizontal}):'',labelType:node.type!=='StepGroup'?'svg':'string',config:{fullName:node.name}});if(node.children){node.children.map(function(child){return data.links.push({source:key,target:child,class:'link',config:{arrowhead:nodes[child].type==='StepGroup'?'undirected':'vee'}});});}};for(var _i=0,_Object$keys=Object.keys(nodes);_i<_Object$keys.length;_i++){_loop();}setGraphData({nodes:_toConsumableArray(data.nodes),links:_toConsumableArray(data.links)});},[nodes,horizontal]);useEffect(function(){nodeSelection.selectNode(_objectSpread(_objectSpread({},nodes[selectedNodeID]),{},{pod_name:selectedNodeID}));},[selectedNodeID]);return graphData.nodes.length?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(DagreGraph,{className:classes.dagreGraph,nodes:graphData.nodes,links:graphData.links,config:{rankdir:horizontal?'LR':'TB',// align: 'UR',\nranker:'tight-tree'},animate:1000,shape:\"rect\",fitBoundaries:true,zoomable:true,onNodeClick:function onNodeClick(_ref2){var original=_ref2.original;var nodeID=Object.keys(nodes).filter(function(key){return key===(original===null||original===void 0?void 0:original.id);})[0];setIsInfoToggled(true);setSelectedNodeID(nodeID);}})):/*#__PURE__*/React.createElement(\"div\",null,t('workflowDetailsView.argoWorkflow.loading'));};export default ArgoWorkflow;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/ArgoWorkflow/index.tsx"],"names":["React","useEffect","useState","useTranslation","DagreGraph","useActions","NodeSelectionActions","createLabel","useStyles","ArgoWorkflow","nodes","setIsInfoToggled","t","horizontal","classes","nodeSelection","links","graphData","setGraphData","Object","keys","selectedNodeID","setSelectedNodeID","data","key","node","push","id","class","type","phase","label","currentNodeID","name","tooltip","toLowerCase","labelType","config","fullName","children","map","child","source","target","arrowhead","selectNode","pod_name","length","dagreGraph","rankdir","ranker","original","nodeID","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DagreGraph, { d3Link, d3Node } from '../../../components/DagreGraph';\nimport { Nodes } from '../../../models/graphql/workflowData';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\ninterface GraphData {\n  nodes: d3Node[];\n  links: d3Link[];\n}\ninterface ArgoWorkflowProps {\n  nodes: Nodes;\n  setIsInfoToggled: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst ArgoWorkflow: React.FC<ArgoWorkflowProps> = ({\n  nodes,\n  setIsInfoToggled,\n}) => {\n  const { t } = useTranslation();\n\n  // Graph orientation\n  const horizontal = true;\n\n  const classes = useStyles({ horizontal });\n  // Redux action call for updating selected node\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  const [graphData, setGraphData] = useState<GraphData>({\n    nodes: [],\n    links: [],\n  });\n\n  // Get the selected Node\n  const [selectedNodeID, setSelectedNodeID] = useState<string>(\n    Object.keys(nodes)[0]\n  );\n\n  useEffect(() => {\n    const data: GraphData = {\n      nodes: [],\n      links: [],\n    };\n\n    for (const key of Object.keys(nodes)) {\n      const node = nodes[key];\n\n      data.nodes.push({\n        id: key,\n        class:\n          node.type === 'StepGroup'\n            ? 'StepGroup'\n            : `${node.phase} ${node.type}`,\n        label:\n          node.type !== 'StepGroup'\n            ? createLabel({\n                currentNodeID: key,\n                selectedNodeID,\n                label: node.name,\n                tooltip: node.name,\n                phase: node.phase.toLowerCase(),\n                horizontal,\n              })\n            : '',\n        labelType: node.type !== 'StepGroup' ? 'svg' : 'string',\n        config: { fullName: node.name },\n      });\n\n      if (node.children) {\n        node.children.map((child) =>\n          data.links.push({\n            source: key,\n            target: child,\n            class: 'link',\n            config: {\n              arrowhead:\n                nodes[child].type === 'StepGroup' ? 'undirected' : 'vee',\n            },\n          })\n        );\n      }\n    }\n\n    setGraphData({\n      nodes: [...data.nodes],\n      links: [...data.links],\n    });\n  }, [nodes, horizontal]);\n\n  useEffect(() => {\n    nodeSelection.selectNode({\n      ...nodes[selectedNodeID],\n      pod_name: selectedNodeID,\n    });\n  }, [selectedNodeID]);\n\n  return graphData.nodes.length ? (\n    <>\n      <DagreGraph\n        className={classes.dagreGraph}\n        nodes={graphData.nodes}\n        links={graphData.links}\n        config={{\n          rankdir: horizontal ? 'LR' : 'TB',\n          // align: 'UR',\n          ranker: 'tight-tree',\n        }}\n        animate={1000}\n        shape=\"rect\"\n        fitBoundaries\n        zoomable\n        onNodeClick={({ original }) => {\n          const nodeID = Object.keys(nodes).filter(\n            (key) => key === original?.id\n          )[0];\n\n          setIsInfoToggled(true);\n          setSelectedNodeID(nodeID);\n        }}\n      />\n    </>\n  ) : (\n    <div>{t('workflowDetailsView.argoWorkflow.loading')}</div>\n  );\n};\n\nexport default ArgoWorkflow;\n"]},"metadata":{},"sourceType":"module"}