{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ScheduleWorkflow/index.tsx\";\n\nimport { Divider, FormControl, FormControlLabel, Radio, RadioGroup, Select, Typography } from '@material-ui/core';\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport CustomDate from '../../../components/DateTime/CustomDate/index';\nimport CustomTime from '../../../components/DateTime/CustomTime/index';\nimport { constants } from '../../../constants';\nimport useActions from '../../../redux/actions';\nimport * as TemplateSelectionActions from '../../../redux/actions/template';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { cronWorkflow, workflowOnce } from '../../../utils/workflowTemplate';\nimport { fetchWorkflowNameFromManifest } from '../../../utils/yamlUtils';\nimport SetTime from './SetTime/index';\nimport useStyles from './styles';\nvar ScheduleWorkflow = forwardRef(function (_, ref) {\n  // Initial Cron State\n  var _useState = useState({\n    minute: '*',\n    hour: '*',\n    day_month: '*',\n    month: '*',\n    day_week: '*'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cronValue = _useState2[0],\n      setCronValue = _useState2[1];\n\n  var manifest = useSelector(function (state) {\n    return state.workflowManifest.manifest;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.workflowData;\n  }),\n      namespace = _useSelector.namespace; // Redux States for Schedule\n\n\n  var workflowData = useSelector(function (state) {\n    return state.workflowData;\n  });\n  var workflow = useActions(WorkflowActions);\n  var template = useActions(TemplateSelectionActions);\n  var scheduleOnce = workflowOnce;\n  var scheduleMore = cronWorkflow; // Controls Radio Buttons\n\n  var _React$useState = React.useState(workflowData.scheduleType.scheduleOnce),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var handleChange = function handleChange(event) {\n    setValue(event.target.value);\n  }; // Controls inner radio buttons of Recurring Schedule\n\n\n  var _React$useState3 = React.useState(workflowData.scheduleType.recurringSchedule),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      valueDef = _React$useState4[0],\n      setValueDef = _React$useState4[1];\n\n  var handleChangeInstance = function handleChangeInstance(event) {\n    setValueDef(event.target.value);\n  }; // UseEffect to update the cron syntax with changes\n\n\n  useEffect(function () {\n    var cronSyntax = \"\".concat(cronValue.minute, \" \").concat(cronValue.hour, \" \").concat(cronValue.day_month, \" \").concat(cronValue.month, \" \").concat(cronValue.day_week);\n    if (value === 'now') workflow.setWorkflowDetails({\n      cronSyntax: ''\n    });else workflow.setWorkflowDetails({\n      cronSyntax: cronSyntax\n    });\n  }, [cronValue]);\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Sets individual minutes\n\n\n  var _React$useState5 = React.useState(workflowData.scheduleInput.hour_interval),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      minute = _React$useState6[0],\n      setMinute = _React$useState6[1]; // Sets Weekdays\n\n\n  var _React$useState7 = React.useState(workflowData.scheduleInput.weekday),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      days = _React$useState8[0],\n      setDays = _React$useState8[1]; // Sets Day in number\n\n\n  var _React$useState9 = React.useState(workflowData.scheduleInput.day),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      dates = _React$useState10[0],\n      setDates = _React$useState10[1]; // Sets Time\n\n\n  var _React$useState11 = React.useState(new Date(workflowData.scheduleInput.time)),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      selectedTime = _React$useState12[0],\n      setSelectedTime = _React$useState12[1]; // Sets Date\n\n\n  var _React$useState13 = React.useState(new Date(workflowData.scheduleInput.date)),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      selectedDate = _React$useState14[0],\n      setSelectedDate = _React$useState14[1]; // Function to validate the date and time for \"Specific Time\" radio button\n\n\n  var validateTime = function validateTime(time, date) {\n    if (value === 'specificTime' && (time === null || time === void 0 ? void 0 : time.setSeconds(0)) <= new Date().setSeconds(0) && (date === null || date === void 0 ? void 0 : date.getTime()) <= new Date().getTime()) {\n      var _ref;\n\n      var newTime = new Date();\n      newTime.setMinutes(newTime.getMinutes() + 5);\n      setSelectedTime(newTime);\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          date: date,\n          time: newTime\n        })\n      });\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        minute: newTime.getMinutes().toString(),\n        hour: newTime.getHours().toString(),\n        day_month: date === null || date === void 0 ? void 0 : date.getDate().toString(),\n        month: (_ref = date && date.getMonth() + 1) === null || _ref === void 0 ? void 0 : _ref.toString()\n      }));\n    } else {\n      var _ref2;\n\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          date: date,\n          time: time\n        })\n      });\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        minute: time === null || time === void 0 ? void 0 : time.getMinutes().toString(),\n        hour: time === null || time === void 0 ? void 0 : time.getHours().toString(),\n        day_month: date === null || date === void 0 ? void 0 : date.getDate().toString(),\n        month: (_ref2 = date && date.getMonth() + 1) === null || _ref2 === void 0 ? void 0 : _ref2.toString()\n      }));\n    }\n  };\n\n  var handleTimeChange = function handleTimeChange(time) {\n    setSelectedTime(time);\n    validateTime(time, selectedDate);\n  };\n\n  var _handleDateChange = function handleDateChange(date) {\n    setSelectedDate(date);\n    validateTime(selectedTime, date);\n  };\n\n  function EditYaml() {\n    var oldParsedYaml = YAML.parse(manifest);\n    var NewYaml;\n\n    if (oldParsedYaml.kind === 'Workflow' && workflowData.scheduleType.scheduleOnce !== 'now') {\n      var _oldParsedYaml = YAML.parse(manifest);\n\n      var newParsedYaml = YAML.parse(scheduleMore);\n      delete newParsedYaml.spec.workflowSpec;\n      newParsedYaml.spec.schedule = workflowData.cronSyntax;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id\n      };\n      newParsedYaml.spec.workflowSpec = _oldParsedYaml.spec;\n      var tz = {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC'\n      };\n      Object.entries(tz).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        newParsedYaml.spec[key] = value;\n      });\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml\n      });\n    }\n\n    if (oldParsedYaml.kind === 'CronWorkflow' && workflowData.scheduleType.scheduleOnce === 'now') {\n      var _oldParsedYaml2 = YAML.parse(manifest);\n\n      var _newParsedYaml = YAML.parse(scheduleOnce);\n\n      delete _newParsedYaml.spec;\n      delete _newParsedYaml.metadata.generateName;\n      _newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      _newParsedYaml.metadata.namespace = namespace;\n      _newParsedYaml.spec = _oldParsedYaml2.spec.workflowSpec;\n      _newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id\n      };\n      NewYaml = YAML.stringify(_newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml\n      });\n    }\n\n    if (oldParsedYaml.kind === 'CronWorkflow' && workflowData.scheduleType.scheduleOnce !== 'now' //   && !isDisabled\n    ) {\n        var _newParsedYaml2 = YAML.parse(manifest);\n\n        _newParsedYaml2.spec.schedule = workflowData.cronSyntax; //   newParsedYaml.spec.suspend = false;\n\n        delete _newParsedYaml2.metadata.generateName;\n        _newParsedYaml2.metadata.name = fetchWorkflowNameFromManifest(manifest);\n        _newParsedYaml2.metadata.namespace = namespace;\n        _newParsedYaml2.metadata.labels = {\n          workflow_id: workflowData.workflow_id\n        };\n        var _tz = {\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC'\n        };\n        Object.entries(_tz).forEach(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              key = _ref6[0],\n              value = _ref6[1];\n\n          _newParsedYaml2.spec[key] = value;\n        });\n        NewYaml = YAML.stringify(_newParsedYaml2);\n        workflow.setWorkflowManifest({\n          manifest: NewYaml\n        });\n      }\n  } // Function for recurring date change\n\n\n  var reccuringDateChange = function reccuringDateChange(date) {\n    setSelectedTime(date);\n    setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n      minute: date === null || date === void 0 ? void 0 : date.getMinutes().toString(),\n      hour: date === null || date === void 0 ? void 0 : date.getHours().toString()\n    }));\n    workflow.setWorkflowDetails({\n      scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n        time: date\n      })\n    });\n  }; // Stores dates in an array\n\n\n  var names = [1];\n\n  for (var i = 1; i <= 30; i += 1) {\n    names[i] = i + 1;\n  }\n\n  var mins = [0];\n\n  for (var _i = 0; _i <= 59; _i += 1) {\n    mins[_i] = _i;\n  } // Day names\n\n\n  var weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; // UseEffect to update the values of CronSyntax on radio button change\n\n  useEffect(function () {\n    if (value === 'now') {\n      setValueDef('');\n      setCronValue({\n        minute: '',\n        hour: '',\n        day_month: '',\n        month: '',\n        day_week: ''\n      });\n    }\n\n    if (value === 'specificTime') {\n      var _ref7;\n\n      setValueDef('');\n      setCronValue({\n        minute: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getMinutes().toString(),\n        hour: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getHours().toString(),\n        day_month: selectedDate === null || selectedDate === void 0 ? void 0 : selectedDate.getDate().toString(),\n        month: (_ref7 = selectedDate && selectedDate.getMonth() + 1) === null || _ref7 === void 0 ? void 0 : _ref7.toString(),\n        day_week: '*'\n      });\n\n      if (workflowData.scheduleInput.time <= new Date()) {\n        var _ref8;\n\n        var newTime = new Date();\n        newTime.setMinutes(newTime.getMinutes() + 5);\n        setSelectedTime(newTime);\n        setCronValue({\n          minute: newTime.getMinutes().toString(),\n          hour: newTime.getHours().toString(),\n          day_month: selectedDate === null || selectedDate === void 0 ? void 0 : selectedDate.getDate().toString(),\n          month: (_ref8 = selectedDate && selectedDate.getMonth() + 1) === null || _ref8 === void 0 ? void 0 : _ref8.toString(),\n          day_week: '*'\n        });\n        workflow.setWorkflowDetails({\n          scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n            time: newTime\n          })\n        });\n      }\n    }\n\n    if (valueDef === constants.recurringEveryHour) {\n      setCronValue({\n        minute: minute.toString(),\n        hour: '0-23',\n        day_month: '*',\n        month: '*',\n        day_week: '*'\n      });\n    }\n\n    if (valueDef === constants.recurringEveryDay) {\n      setCronValue({\n        minute: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getMinutes().toString(),\n        hour: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: '0-6'\n      });\n    }\n\n    if (valueDef === constants.recurringEveryWeek) {\n      setCronValue({\n        minute: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getMinutes().toString(),\n        hour: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: days.slice(0, 3)\n      });\n    }\n\n    if (valueDef === constants.recurringEveryMonth) {\n      setCronValue({\n        minute: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getMinutes().toString(),\n        hour: selectedTime === null || selectedTime === void 0 ? void 0 : selectedTime.getHours().toString(),\n        day_month: dates.toString(),\n        month: '*',\n        day_week: '*'\n      });\n    }\n\n    if (value === 'recurringSchedule' && valueDef === '') {\n      template.selectTemplate({\n        isDisable: true\n      });\n    } else {\n      template.selectTemplate({\n        isDisable: false\n      });\n    }\n\n    workflow.setWorkflowDetails({\n      scheduleType: {\n        scheduleOnce: value,\n        recurringSchedule: valueDef\n      }\n    });\n  }, [valueDef, value]);\n\n  function onNext() {\n    EditYaml();\n    return true;\n  }\n\n  useImperativeHandle(ref, function () {\n    return {\n      onNext: onNext\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scSegments,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.scheduleWorkflow.header'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.schBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    className: classes.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 15\n    }\n  }, t('createWorkflow.scheduleWorkflow.info')))), /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/calendarWorkflowIcon.svg\",\n    alt: \"calendar\",\n    className: classes.calIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scFormControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    \"data-cy\": \"ScheduleOptions\",\n    \"aria-label\": \"schedule\",\n    name: \"schedule\",\n    value: value,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"now\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 19\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.radioText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 19\n      }\n    }, t('createWorkflow.scheduleWorkflow.radio.now')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 15\n    }\n  }), value === 'specificTime' && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.schLater,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.captionText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.scheduleWorkflow.radio.future')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerSpecific,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CustomDate, {\n    selectedDate: selectedDate,\n    handleDateChange: function handleDateChange(event) {\n      _handleDateChange(event);\n    },\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(CustomTime, {\n    handleDateChange: function handleDateChange(event) {\n      handleTimeChange(event);\n    },\n    value: selectedTime,\n    ampm: true,\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: \"recurringSchedule\",\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 19\n      }\n    }),\n    label: /*#__PURE__*/React.createElement(Typography, {\n      className: classes.radioText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 19\n      }\n    }, t('createWorkflow.scheduleWorkflow.radio.recurr')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 15\n    }\n  }), value === 'recurringSchedule' && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.schLater,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.captionText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 19\n    }\n  }, t('createWorkflow.scheduleWorkflow.radio.rightRecurr')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerRecurring,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    component: \"fieldset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    \"aria-label\": \"instanceDef\",\n    name: \"instanceDef\",\n    value: valueDef,\n    onChange: function onChange(event) {\n      handleChangeInstance(event);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: constants.recurringEveryHour,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 29\n      }\n    }),\n    label: t('createWorkflow.scheduleWorkflow.every.hr'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 25\n    }\n  }), valueDef === constants.recurringEveryHour && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scRandom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.at')), /*#__PURE__*/React.createElement(SetTime, {\n    data: mins,\n    handleChange: function handleChange(event) {\n      setMinute(event.target.value);\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        minute: event.target.value.toString(),\n        hour: '0-23'\n      }));\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          hour_interval: event.target.value\n        })\n      });\n    },\n    value: minute,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 31\n    }\n  }), minute === 0 || minute === 1 ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 33\n    }\n  }, t('createWorkflow.scheduleWorkflow.min')) : /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 33\n    }\n  }, t('createWorkflow.scheduleWorkflow.mins')))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: constants.recurringEveryDay,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 29\n      }\n    }),\n    label: t('createWorkflow.scheduleWorkflow.every.day'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 25\n    }\n  }), valueDef === constants.recurringEveryDay && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scRandom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.at')), /*#__PURE__*/React.createElement(CustomTime, {\n    handleDateChange: function handleDateChange(date) {\n      setSelectedTime(date);\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        minute: date === null || date === void 0 ? void 0 : date.getMinutes().toString(),\n        hour: date === null || date === void 0 ? void 0 : date.getHours().toString(),\n        day_week: '0-6'\n      }));\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          time: date\n        })\n      });\n    },\n    value: selectedTime,\n    ampm: true,\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 31\n    }\n  }))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: constants.recurringEveryWeek,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 29\n      }\n    }),\n    label: t('createWorkflow.scheduleWorkflow.every.week'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 25\n    }\n  }), valueDef === constants.recurringEveryWeek && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scRandom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.on')), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControlDT,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: classes.select,\n    disableUnderline: true,\n    value: days,\n    onChange: function onChange(e) {\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        month: '*',\n        day_week: e.target.value.slice(0, 3)\n      }));\n      setDays(e.target.value);\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          weekday: e.target.value\n        })\n      });\n    },\n    label: \"days\",\n    inputProps: {\n      name: 'days',\n      style: {\n        fontSize: '0.75rem',\n        height: 7\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 33\n    }\n  }, weekdays.map(function (day) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: day,\n      className: classes.opt,\n      value: day,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 37\n      }\n    }, day);\n  }))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.at')), /*#__PURE__*/React.createElement(CustomTime, {\n    handleDateChange: function handleDateChange(date) {\n      reccuringDateChange(date);\n    },\n    value: selectedTime,\n    ampm: true,\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 31\n    }\n  }))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: constants.recurringEveryMonth,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      classes: {\n        root: classes.radio,\n        checked: classes.checked\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 29\n      }\n    }),\n    label: t('createWorkflow.scheduleWorkflow.every.month'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 25\n    }\n  }), valueDef === constants.recurringEveryMonth && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.scRandom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.on')), /*#__PURE__*/React.createElement(SetTime, {\n    data: names,\n    handleChange: function handleChange(event) {\n      setCronValue(_objectSpread(_objectSpread({}, cronValue), {}, {\n        day_month: event.target.value.toString()\n      }));\n      setDates(event.target.value);\n      workflow.setWorkflowDetails({\n        scheduleInput: _objectSpread(_objectSpread({}, workflowData.scheduleInput), {}, {\n          day: event.target.value\n        })\n      });\n    },\n    value: dates,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.scRandsub1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 31\n    }\n  }, t('createWorkflow.scheduleWorkflow.at')), /*#__PURE__*/React.createElement(CustomTime, {\n    handleDateChange: function handleDateChange(date) {\n      reccuringDateChange(date);\n    },\n    value: selectedTime,\n    ampm: true,\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 31\n    }\n  }))))))))))));\n});\nexport default ScheduleWorkflow;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ScheduleWorkflow/index.tsx"],"names":["Divider","FormControl","FormControlLabel","Radio","RadioGroup","Select","Typography","React","forwardRef","useEffect","useImperativeHandle","useState","useTranslation","useSelector","YAML","CustomDate","CustomTime","constants","useActions","TemplateSelectionActions","WorkflowActions","cronWorkflow","workflowOnce","fetchWorkflowNameFromManifest","SetTime","useStyles","ScheduleWorkflow","_","ref","minute","hour","day_month","month","day_week","cronValue","setCronValue","manifest","state","workflowManifest","workflowData","namespace","workflow","template","scheduleOnce","scheduleMore","scheduleType","value","setValue","handleChange","event","target","recurringSchedule","valueDef","setValueDef","handleChangeInstance","cronSyntax","setWorkflowDetails","classes","t","scheduleInput","hour_interval","setMinute","weekday","days","setDays","day","dates","setDates","Date","time","selectedTime","setSelectedTime","date","selectedDate","setSelectedDate","validateTime","setSeconds","getTime","newTime","setMinutes","getMinutes","toString","getHours","getDate","getMonth","handleTimeChange","handleDateChange","EditYaml","oldParsedYaml","parse","NewYaml","kind","newParsedYaml","spec","workflowSpec","schedule","metadata","generateName","name","labels","workflow_id","tz","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","Object","entries","forEach","key","stringify","setWorkflowManifest","reccuringDateChange","names","i","mins","weekdays","recurringEveryHour","recurringEveryDay","recurringEveryWeek","slice","recurringEveryMonth","selectTemplate","isDisable","onNext","root","innerContainer","scSegments","headerText","schBody","description","calIcon","scFormControl","formControl","radio","checked","radioText","schLater","captionText","innerSpecific","innerRecurring","scRandom","scRandsub1","formControlDT","select","e","style","fontSize","height","map","opt"],"mappings":"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","sourcesContent":["import {\n  Divider,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport CustomDate from '../../../components/DateTime/CustomDate/index';\nimport CustomTime from '../../../components/DateTime/CustomTime/index';\nimport { constants } from '../../../constants';\nimport { WorkflowData } from '../../../models/redux/workflow';\nimport useActions from '../../../redux/actions';\nimport * as TemplateSelectionActions from '../../../redux/actions/template';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { cronWorkflow, workflowOnce } from '../../../utils/workflowTemplate';\nimport { fetchWorkflowNameFromManifest } from '../../../utils/yamlUtils';\nimport SetTime from './SetTime/index';\nimport useStyles from './styles';\n\ninterface ScheduleSyntax {\n  minute: string | undefined;\n  hour: string | undefined;\n  day_month: string | undefined;\n  month: string | undefined;\n  day_week: string;\n}\n\nconst ScheduleWorkflow = forwardRef((_, ref) => {\n  // Initial Cron State\n  const [cronValue, setCronValue] = useState<ScheduleSyntax>({\n    minute: '*',\n    hour: '*',\n    day_month: '*',\n    month: '*',\n    day_week: '*',\n  });\n\n  const manifest = useSelector(\n    (state: RootState) => state.workflowManifest.manifest\n  );\n  const { namespace } = useSelector((state: RootState) => state.workflowData);\n  // Redux States for Schedule\n  const workflowData: WorkflowData = useSelector(\n    (state: RootState) => state.workflowData\n  );\n  const workflow = useActions(WorkflowActions);\n  const template = useActions(TemplateSelectionActions);\n\n  const scheduleOnce = workflowOnce;\n  const scheduleMore = cronWorkflow;\n\n  // Controls Radio Buttons\n  const [value, setValue] = React.useState(\n    workflowData.scheduleType.scheduleOnce\n  );\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  // Controls inner radio buttons of Recurring Schedule\n  const [valueDef, setValueDef] = React.useState(\n    workflowData.scheduleType.recurringSchedule\n  );\n  const handleChangeInstance = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValueDef(event.target.value);\n  };\n\n  // UseEffect to update the cron syntax with changes\n  useEffect(() => {\n    const cronSyntax = `${cronValue.minute} ${cronValue.hour} ${cronValue.day_month} ${cronValue.month} ${cronValue.day_week}`;\n    if (value === 'now')\n      workflow.setWorkflowDetails({\n        cronSyntax: '',\n      });\n    else\n      workflow.setWorkflowDetails({\n        cronSyntax,\n      });\n  }, [cronValue]);\n\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  // Sets individual minutes\n  const [minute, setMinute] = React.useState(\n    workflowData.scheduleInput.hour_interval\n  );\n\n  // Sets Weekdays\n  const [days, setDays] = React.useState(workflowData.scheduleInput.weekday);\n\n  // Sets Day in number\n  const [dates, setDates] = React.useState(workflowData.scheduleInput.day);\n\n  // Sets Time\n  const [selectedTime, setSelectedTime] = React.useState<Date | null>(\n    new Date(workflowData.scheduleInput.time)\n  );\n\n  // Sets Date\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n    new Date(workflowData.scheduleInput.date)\n  );\n\n  // Function to validate the date and time for \"Specific Time\" radio button\n  const validateTime = (time: Date | null, date: Date | null) => {\n    if (\n      value === 'specificTime' &&\n      (time?.setSeconds(0) as number) <= new Date().setSeconds(0) &&\n      (date?.getTime() as number) <= new Date().getTime()\n    ) {\n      const newTime = new Date();\n      newTime.setMinutes(newTime.getMinutes() + 5);\n      setSelectedTime(newTime);\n      workflow.setWorkflowDetails({\n        scheduleInput: {\n          ...workflowData.scheduleInput,\n          date,\n          time: newTime,\n        },\n      });\n      setCronValue({\n        ...cronValue,\n        minute: newTime.getMinutes().toString(),\n        hour: newTime.getHours().toString(),\n        day_month: date?.getDate().toString(),\n        month: (date && date.getMonth() + 1)?.toString(),\n      });\n    } else {\n      workflow.setWorkflowDetails({\n        scheduleInput: {\n          ...workflowData.scheduleInput,\n          date,\n          time,\n        },\n      });\n      setCronValue({\n        ...cronValue,\n        minute: time?.getMinutes().toString(),\n        hour: time?.getHours().toString(),\n        day_month: date?.getDate().toString(),\n        month: (date && date.getMonth() + 1)?.toString(),\n      });\n    }\n  };\n\n  const handleTimeChange = (time: Date | null) => {\n    setSelectedTime(time);\n    validateTime(time, selectedDate);\n  };\n\n  const handleDateChange = (date: Date | null) => {\n    setSelectedDate(date);\n    validateTime(selectedTime, date);\n  };\n\n  function EditYaml() {\n    const oldParsedYaml = YAML.parse(manifest);\n    let NewYaml: string;\n    if (\n      oldParsedYaml.kind === 'Workflow' &&\n      workflowData.scheduleType.scheduleOnce !== 'now'\n    ) {\n      const oldParsedYaml = YAML.parse(manifest);\n      const newParsedYaml = YAML.parse(scheduleMore);\n      delete newParsedYaml.spec.workflowSpec;\n      newParsedYaml.spec.schedule = workflowData.cronSyntax;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id,\n      };\n      newParsedYaml.spec.workflowSpec = oldParsedYaml.spec;\n      const tz = {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC',\n      };\n      Object.entries(tz).forEach(([key, value]) => {\n        newParsedYaml.spec[key] = value;\n      });\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n    if (\n      oldParsedYaml.kind === 'CronWorkflow' &&\n      workflowData.scheduleType.scheduleOnce === 'now'\n    ) {\n      const oldParsedYaml = YAML.parse(manifest);\n      const newParsedYaml = YAML.parse(scheduleOnce);\n      delete newParsedYaml.spec;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.spec = oldParsedYaml.spec.workflowSpec;\n      newParsedYaml.metadata.labels = {\n        workflow_id: workflowData.workflow_id,\n      };\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n    if (\n      oldParsedYaml.kind === 'CronWorkflow' &&\n      workflowData.scheduleType.scheduleOnce !== 'now'\n      //   && !isDisabled\n    ) {\n      const newParsedYaml = YAML.parse(manifest);\n      newParsedYaml.spec.schedule = workflowData.cronSyntax;\n      //   newParsedYaml.spec.suspend = false;\n      delete newParsedYaml.metadata.generateName;\n      newParsedYaml.metadata.name = fetchWorkflowNameFromManifest(manifest);\n      newParsedYaml.metadata.namespace = namespace;\n      newParsedYaml.metadata.labels = { workflow_id: workflowData.workflow_id };\n      const tz = {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC',\n      };\n      Object.entries(tz).forEach(([key, value]) => {\n        newParsedYaml.spec[key] = value;\n      });\n      NewYaml = YAML.stringify(newParsedYaml);\n      workflow.setWorkflowManifest({\n        manifest: NewYaml,\n      });\n    }\n  }\n\n  // Function for recurring date change\n  const reccuringDateChange = (date: Date | null) => {\n    setSelectedTime(date);\n    setCronValue({\n      ...cronValue,\n      minute: date?.getMinutes().toString(),\n      hour: date?.getHours().toString(),\n    });\n    workflow.setWorkflowDetails({\n      scheduleInput: {\n        ...workflowData.scheduleInput,\n        time: date,\n      },\n    });\n  };\n\n  // Stores dates in an array\n  const names: number[] = [1];\n  for (let i = 1; i <= 30; i += 1) {\n    names[i] = i + 1;\n  }\n  const mins: number[] = [0];\n  for (let i = 0; i <= 59; i += 1) {\n    mins[i] = i;\n  }\n  // Day names\n  const weekdays: string[] = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n  ];\n\n  // UseEffect to update the values of CronSyntax on radio button change\n  useEffect(() => {\n    if (value === 'now') {\n      setValueDef('');\n      setCronValue({\n        minute: '',\n        hour: '',\n        day_month: '',\n        month: '',\n        day_week: '',\n      });\n    }\n    if (value === 'specificTime') {\n      setValueDef('');\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: selectedDate?.getDate().toString(),\n        month: (selectedDate && selectedDate.getMonth() + 1)?.toString(),\n        day_week: '*',\n      });\n      if (workflowData.scheduleInput.time <= new Date()) {\n        const newTime = new Date();\n        newTime.setMinutes(newTime.getMinutes() + 5);\n        setSelectedTime(newTime);\n        setCronValue({\n          minute: newTime.getMinutes().toString(),\n          hour: newTime.getHours().toString(),\n          day_month: selectedDate?.getDate().toString(),\n          month: (selectedDate && selectedDate.getMonth() + 1)?.toString(),\n          day_week: '*',\n        });\n        workflow.setWorkflowDetails({\n          scheduleInput: {\n            ...workflowData.scheduleInput,\n            time: newTime,\n          },\n        });\n      }\n    }\n    if (valueDef === constants.recurringEveryHour) {\n      setCronValue({\n        minute: minute.toString(),\n        hour: '0-23',\n        day_month: '*',\n        month: '*',\n        day_week: '*',\n      });\n    }\n    if (valueDef === constants.recurringEveryDay) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: '0-6',\n      });\n    }\n    if (valueDef === constants.recurringEveryWeek) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: '*',\n        month: '*',\n        day_week: days.slice(0, 3),\n      });\n    }\n    if (valueDef === constants.recurringEveryMonth) {\n      setCronValue({\n        minute: selectedTime?.getMinutes().toString(),\n        hour: selectedTime?.getHours().toString(),\n        day_month: dates.toString(),\n        month: '*',\n        day_week: '*',\n      });\n    }\n    if (value === 'recurringSchedule' && valueDef === '') {\n      template.selectTemplate({ isDisable: true });\n    } else {\n      template.selectTemplate({ isDisable: false });\n    }\n    workflow.setWorkflowDetails({\n      scheduleType: {\n        scheduleOnce: value,\n        recurringSchedule: valueDef,\n      },\n    });\n  }, [valueDef, value]);\n\n  function onNext() {\n    EditYaml();\n    return true;\n  }\n\n  useImperativeHandle(ref, () => ({\n    onNext,\n  }));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.innerContainer}>\n        {/* Upper segment */}\n        <div className={classes.scSegments}>\n          <div>\n            <Typography className={classes.headerText}>\n              <strong>{t('createWorkflow.scheduleWorkflow.header')}</strong>\n            </Typography>\n\n            <div className={classes.schBody}>\n              <Typography align=\"left\" className={classes.description}>\n                {t('createWorkflow.scheduleWorkflow.info')}\n              </Typography>\n            </div>\n          </div>\n          <img\n            src=\"/icons/calendarWorkflowIcon.svg\"\n            alt=\"calendar\"\n            className={classes.calIcon}\n          />\n        </div>\n        <Divider />\n\n        {/* Lower segment */}\n        <div className={classes.scFormControl}>\n          <FormControl component=\"fieldset\" className={classes.formControl}>\n            <RadioGroup\n              data-cy=\"ScheduleOptions\"\n              aria-label=\"schedule\"\n              name=\"schedule\"\n              value={value}\n              onChange={handleChange}\n            >\n              {/* options to choose schedule */}\n              <FormControlLabel\n                value=\"now\"\n                control={\n                  <Radio\n                    classes={{\n                      root: classes.radio,\n                      checked: classes.checked,\n                    }}\n                  />\n                }\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.now')}\n                  </Typography>\n                }\n              />\n              {value === 'specificTime' && (\n                <div className={classes.schLater}>\n                  <Typography className={classes.captionText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.future')}\n                  </Typography>\n                  <div className={classes.innerSpecific}>\n                    <CustomDate\n                      selectedDate={selectedDate}\n                      handleDateChange={(event) => {\n                        handleDateChange(event);\n                      }}\n                      disabled={false}\n                    />\n                    <CustomTime\n                      handleDateChange={(event) => {\n                        handleTimeChange(event);\n                      }}\n                      value={selectedTime}\n                      ampm\n                      disabled={false}\n                    />\n                  </div>\n                </div>\n              )}\n              <FormControlLabel\n                value=\"recurringSchedule\"\n                control={\n                  <Radio\n                    classes={{ root: classes.radio, checked: classes.checked }}\n                  />\n                }\n                label={\n                  <Typography className={classes.radioText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.recurr')}\n                  </Typography>\n                }\n              />\n              {value === 'recurringSchedule' && (\n                <div className={classes.schLater}>\n                  <Typography className={classes.captionText}>\n                    {t('createWorkflow.scheduleWorkflow.radio.rightRecurr')}\n                  </Typography>\n\n                  {/* options to select time of recurring schedule */}\n                  <div className={classes.innerRecurring}>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"instanceDef\"\n                        name=\"instanceDef\"\n                        value={valueDef}\n                        onChange={(event) => {\n                          handleChangeInstance(event);\n                        }}\n                      >\n                        <FormControlLabel\n                          value={constants.recurringEveryHour}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t('createWorkflow.scheduleWorkflow.every.hr')}\n                        />\n                        {valueDef === constants.recurringEveryHour && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <SetTime\n                                data={mins}\n                                handleChange={(event) => {\n                                  setMinute(event.target.value as number);\n                                  setCronValue({\n                                    ...cronValue,\n                                    minute: (\n                                      event.target.value as number\n                                    ).toString(),\n                                    hour: '0-23',\n                                  });\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      hour_interval: event.target\n                                        .value as number,\n                                    },\n                                  });\n                                }}\n                                value={minute}\n                              />\n                              {minute === 0 || minute === 1 ? (\n                                <Typography>\n                                  {t('createWorkflow.scheduleWorkflow.min')}\n                                </Typography>\n                              ) : (\n                                <Typography>\n                                  {t('createWorkflow.scheduleWorkflow.mins')}\n                                </Typography>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryDay}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t('createWorkflow.scheduleWorkflow.every.day')}\n                        />\n                        {valueDef === constants.recurringEveryDay && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  setSelectedTime(date);\n                                  setCronValue({\n                                    ...cronValue,\n                                    minute: date?.getMinutes().toString(),\n                                    hour: date?.getHours().toString(),\n                                    day_week: '0-6',\n                                  });\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      time: date,\n                                    },\n                                  });\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryWeek}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t(\n                            'createWorkflow.scheduleWorkflow.every.week'\n                          )}\n                        />\n                        {valueDef === constants.recurringEveryWeek && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.on')}\n                              </Typography>\n                              <FormControl className={classes.formControlDT}>\n                                <Select\n                                  className={classes.select}\n                                  disableUnderline\n                                  value={days}\n                                  onChange={(e) => {\n                                    setCronValue({\n                                      ...cronValue,\n                                      month: '*',\n                                      day_week: (\n                                        e.target.value as unknown as string\n                                      ).slice(0, 3),\n                                    });\n                                    setDays(\n                                      e.target.value as unknown as string\n                                    );\n                                    workflow.setWorkflowDetails({\n                                      scheduleInput: {\n                                        ...workflowData.scheduleInput,\n                                        weekday: e.target\n                                          .value as unknown as string,\n                                      },\n                                    });\n                                  }}\n                                  label=\"days\"\n                                  inputProps={{\n                                    name: 'days',\n                                    style: {\n                                      fontSize: '0.75rem',\n                                      height: 7,\n                                    },\n                                  }}\n                                >\n                                  {weekdays.map((day) => (\n                                    <option\n                                      key={day}\n                                      className={classes.opt}\n                                      value={day}\n                                    >\n                                      {day}\n                                    </option>\n                                  ))}\n                                </Select>\n                              </FormControl>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  reccuringDateChange(date);\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                        <FormControlLabel\n                          value={constants.recurringEveryMonth}\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                            />\n                          }\n                          label={t(\n                            'createWorkflow.scheduleWorkflow.every.month'\n                          )}\n                        />\n                        {valueDef === constants.recurringEveryMonth && (\n                          <div>\n                            <div className={classes.scRandom}>\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.on')}\n                              </Typography>\n                              <SetTime\n                                data={names}\n                                handleChange={(event) => {\n                                  setCronValue({\n                                    ...cronValue,\n                                    day_month: (\n                                      event.target.value as number\n                                    ).toString(),\n                                  });\n                                  setDates(event.target.value as number);\n                                  workflow.setWorkflowDetails({\n                                    scheduleInput: {\n                                      ...workflowData.scheduleInput,\n                                      day: event.target.value as number,\n                                    },\n                                  });\n                                }}\n                                value={dates}\n                              />\n                              <Typography className={classes.scRandsub1}>\n                                {t('createWorkflow.scheduleWorkflow.at')}\n                              </Typography>\n                              <CustomTime\n                                handleDateChange={(date: Date | null) => {\n                                  reccuringDateChange(date);\n                                }}\n                                value={selectedTime}\n                                ampm\n                                disabled={false}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </RadioGroup>\n                    </FormControl>\n                  </div>\n                </div>\n              )}\n            </RadioGroup>\n          </FormControl>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default ScheduleWorkflow;\n"]},"metadata":{},"sourceType":"module"}