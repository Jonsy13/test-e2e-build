{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Table/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useQuery } from '@apollo/client';\nimport { Paper, Snackbar, Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { TextButton } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../../components/Loader';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../../../graphql/queries';\nimport useActions from '../../../../redux/actions';\nimport * as TabActions from '../../../../redux/actions/tabs';\nimport { history } from '../../../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport { sortAlphaAsc, sortAlphaDesc, sortNumAsc, sortNumDesc } from '../../../../utils/sort';\nimport useStyles from './styles';\nimport TableData from './TableData';\nimport TableHeader from './TableHeader';\nimport TableToolBar from './TableToolbar';\n\nvar DashboardTable = function DashboardTable() {\n  var _data$ListDashboard, _data$ListDashboard2, _data$ListDashboard3;\n\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState({\n    range: {\n      startDate: 'all',\n      endDate: 'all'\n    },\n    selectedDataSourceType: 'All',\n    selectedDashboardType: 'All',\n    sortData: {\n      name: {\n        sort: false,\n        ascending: true\n      },\n      lastViewed: {\n        sort: true,\n        ascending: false\n      }\n    },\n    selectedAgentName: 'All',\n    searchTokens: ['']\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      filter = _React$useState2[0],\n      setFilter = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(5),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      rowsPerPage = _React$useState6[0],\n      setRowsPerPage = _React$useState6[1];\n\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var tabs = useActions(TabActions);\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      isAlertOpen = _React$useState8[0],\n      setIsAlertOpen = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      success = _React$useState10[0],\n      setSuccess = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      activeDataSourceAvailable = _React$useState12[0],\n      setActiveDataSourceAvailable = _React$useState12[1]; // Apollo query to get the dashboard data\n\n\n  var _useQuery = useQuery(LIST_DASHBOARD, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch; // Apollo query to get the data source data\n\n\n  var _useQuery2 = useQuery(LIST_DATASOURCE, {\n    variables: {\n      projectID: projectID\n    },\n    fetchPolicy: 'cache-and-network'\n  }),\n      dataSourceList = _useQuery2.data,\n      loadingDataSources = _useQuery2.loading;\n\n  var alertStateHandler = function alertStateHandler(successState) {\n    setSuccess(successState);\n    setIsAlertOpen(true);\n\n    if (successState) {\n      refetch();\n    }\n  };\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  var getDataSourceType = function getDataSourceType(searchingData) {\n    var uniqueList = [];\n    searchingData.forEach(function (data) {\n      if (!uniqueList.includes(data.ds_type)) {\n        uniqueList.push(data.ds_type);\n      }\n    });\n    return uniqueList;\n  };\n\n  var getDashboardType = function getDashboardType(searchingData) {\n    var uniqueList = [];\n    searchingData.forEach(function (data) {\n      if (!uniqueList.includes(data.db_type_name)) {\n        uniqueList.push(data.db_type_name);\n      }\n    });\n    return uniqueList;\n  };\n\n  var getAgentName = function getAgentName(searchingData) {\n    var uniqueList = [];\n    searchingData.forEach(function (data) {\n      if (!uniqueList.includes(data.cluster_name)) {\n        uniqueList.push(data.cluster_name);\n      }\n    });\n    return uniqueList;\n  };\n\n  var payload = data ? !data.ListDashboard ? [] : data.ListDashboard.filter(function (db) {\n    return filter.searchTokens.every(function (s) {\n      return db.db_name.toLowerCase().includes(s);\n    });\n  }).filter(function (data) {\n    return filter.selectedDataSourceType === 'All' ? true : data.ds_type === filter.selectedDataSourceType;\n  }).filter(function (data) {\n    return filter.selectedDashboardType === 'All' ? true : data.db_type_name === filter.selectedDashboardType;\n  }).filter(function (data) {\n    return filter.selectedAgentName === 'All' ? true : data.cluster_name === filter.selectedAgentName;\n  }).filter(function (data) {\n    return filter.range.startDate === 'all' || filter.range.startDate && filter.range.endDate === undefined ? true : parseInt(data.updated_at, 10) * 1000 >= new Date(moment(filter.range.startDate).format()).getTime() && parseInt(data.updated_at, 10) * 1000 <= new Date(new Date(moment(filter.range.endDate).format()).setHours(23, 59, 59)).getTime();\n  }).sort(function (a, b) {\n    // Sorting based on unique fields\n    if (filter.sortData.name.sort) {\n      var x = a.db_name;\n      var y = b.db_name;\n      return filter.sortData.name.ascending ? sortAlphaAsc(x, y) : sortAlphaDesc(x, y);\n    }\n\n    if (filter.sortData.lastViewed.sort) {\n      var _x = parseInt(a.updated_at, 10);\n\n      var _y = parseInt(b.updated_at, 10);\n\n      return filter.sortData.lastViewed.ascending ? sortNumAsc(_y, _x) : sortNumDesc(_y, _x);\n    }\n\n    return 0;\n  }) : [];\n  useEffect(function () {\n    if (dataSourceList && dataSourceList.ListDataSource) {\n      var _dataSourceList$ListD;\n\n      var activeDataSources = (_dataSourceList$ListD = dataSourceList.ListDataSource.filter(function (dataSource) {\n        return dataSource.health_status === 'Active';\n      })) !== null && _dataSourceList$ListD !== void 0 ? _dataSourceList$ListD : [];\n\n      if (activeDataSources.length) {\n        setActiveDataSourceAvailable(true);\n      }\n    }\n  }, [dataSourceList]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }\n  }, !activeDataSourceAvailable && !loadingDataSources && /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: classes.warningBlock,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.warningText,\n    align: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, (dataSourceList === null || dataSourceList === void 0 ? void 0 : dataSourceList.ListDataSource.length) ? t('analyticsDashboard.applicationDashboardTable.warning.noActiveDataSource') : t('analyticsDashboard.applicationDashboardTable.warning.noAvailableDataSource')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.warningActions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, dataSourceList && dataSourceList.ListDataSource.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextButton, {\n    onClick: function onClick() {\n      return tabs.changeAnalyticsDashboardTabs(3);\n    },\n    variant: \"highlight\",\n    className: classes.warningButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    style: {\n      fontWeight: 500\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 19\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.warning.configureExisting'))), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.orText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.warning.or'))), /*#__PURE__*/React.createElement(TextButton, {\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/analytics/datasource/create',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    variant: \"highlight\",\n    className: classes.warningButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    style: {\n      fontWeight: 500\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.warning.addNew'))))), /*#__PURE__*/React.createElement(Paper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"Heading section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableToolBar, {\n    searchToken: filter.searchTokens[0],\n    handleSearch: function handleSearch(event, token) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        searchTokens: (event !== undefined ? event.target.value : token || '').toLowerCase().split(' ').filter(function (s) {\n          return s !== '';\n        })\n      }));\n    },\n    dataSourceTypes: getDataSourceType((_data$ListDashboard = data === null || data === void 0 ? void 0 : data.ListDashboard) !== null && _data$ListDashboard !== void 0 ? _data$ListDashboard : []),\n    dashboardTypes: getDashboardType((_data$ListDashboard2 = data === null || data === void 0 ? void 0 : data.ListDashboard) !== null && _data$ListDashboard2 !== void 0 ? _data$ListDashboard2 : []),\n    agentNames: getAgentName((_data$ListDashboard3 = data === null || data === void 0 ? void 0 : data.ListDashboard) !== null && _data$ListDashboard3 !== void 0 ? _data$ListDashboard3 : []),\n    callbackToSetDataSourceType: function callbackToSetDataSourceType(dataSourceType) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        selectedDataSourceType: dataSourceType\n      }));\n    },\n    callbackToSetDashboardType: function callbackToSetDashboardType(dashboardType) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        selectedDashboardType: dashboardType\n      }));\n    },\n    callbackToSetAgentName: function callbackToSetAgentName(agentName) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        selectedAgentName: agentName\n      }));\n    },\n    callbackToSetRange: function callbackToSetRange(selectedStartDate, selectedEndDate) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        range: {\n          startDate: selectedStartDate,\n          endDate: selectedEndDate\n        }\n      }));\n    },\n    createButtonDisabled: !activeDataSourceAvailable && !loadingDataSources,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Paper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"table section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"\".concat(classes.tableMain, \" \").concat(!payload.length || loading ? classes.minHeight : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    \"aria-label\": \"simple table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    callBackToSort: function callBackToSort(sortConfigurations) {\n      return setFilter(_objectSpread(_objectSpread({}, filter), {}, {\n        sortData: sortConfigurations\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TableBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 15\n    }\n  }, error ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.error')))) : loading ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(classes.noRecords, \" \").concat(classes.loading),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 25\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.loading'))))) : !payload.length ? /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noRecords,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/dashboardUnavailable.svg\",\n    className: classes.unavailableIcon,\n    alt: \"Dashboard\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.noRecordsText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 25\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.noRecords'))))) : payload.length > 0 ? payload.slice(0).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (data) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      tabIndex: -1,\n      key: data.db_id,\n      className: classes.tableRow,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TableData, {\n      data: data,\n      alertStateHandler: alertStateHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 27\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(TableRow, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 23\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.noRecords'))))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25, 50],\n    component: \"div\",\n    count: payload.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    className: classes.tablePagination,\n    SelectProps: {\n      MenuProps: {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        getContentAnchorEl: null,\n        classes: {\n          paper: classes.menuList\n        }\n      }\n    },\n    classes: {\n      menuItem: classes.menuListItem\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 11\n    }\n  }))), isAlertOpen && /*#__PURE__*/React.createElement(Snackbar, {\n    open: isAlertOpen,\n    autoHideDuration: 3000,\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: function onClose() {\n      return setIsAlertOpen(false);\n    },\n    severity: success ? 'success' : 'error',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 11\n    }\n  }, success ? t('analyticsDashboard.applicationDashboardTable.deletionSuccess') : t('analyticsDashboard.applicationDashboardTable.deletionError'))));\n};\n\nexport default DashboardTable;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Table/index.tsx"],"names":["useQuery","Paper","Snackbar","Table","TableBody","TableCell","TableContainer","TablePagination","TableRow","Typography","Alert","TextButton","moment","React","useEffect","useTranslation","Loader","LIST_DASHBOARD","LIST_DATASOURCE","useActions","TabActions","history","getProjectID","getProjectRole","sortAlphaAsc","sortAlphaDesc","sortNumAsc","sortNumDesc","useStyles","TableData","TableHeader","TableToolBar","DashboardTable","classes","t","useState","range","startDate","endDate","selectedDataSourceType","selectedDashboardType","sortData","name","sort","ascending","lastViewed","selectedAgentName","searchTokens","filter","setFilter","page","setPage","rowsPerPage","setRowsPerPage","projectID","projectRole","tabs","isAlertOpen","setIsAlertOpen","success","setSuccess","activeDataSourceAvailable","setActiveDataSourceAvailable","variables","fetchPolicy","data","loading","error","refetch","dataSourceList","loadingDataSources","alertStateHandler","successState","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","getDataSourceType","searchingData","uniqueList","forEach","includes","ds_type","push","getDashboardType","db_type_name","getAgentName","cluster_name","payload","ListDashboard","db","every","s","db_name","toLowerCase","undefined","updated_at","Date","format","getTime","setHours","a","b","x","y","ListDataSource","activeDataSources","dataSource","health_status","length","root","warningBlock","warningText","warningActions","changeAnalyticsDashboardTabs","warningButton","buttonText","fontWeight","orText","pathname","search","token","split","dataSourceType","dashboardType","agentName","selectedStartDate","selectedEndDate","tableMain","minHeight","sortConfigurations","noRecords","unavailableIcon","noRecordsText","slice","map","db_id","tableRow","tablePagination","MenuProps","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","paper","menuList","menuItem","menuListItem"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useQuery } from '@apollo/client';\nimport {\n  Paper,\n  Snackbar,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { TextButton } from 'litmus-ui';\nimport moment from 'moment';\nimport React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Loader from '../../../../components/Loader';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../../../graphql/queries';\nimport {\n  DashboardList,\n  ListDashboardResponse,\n  ListDashboardVars,\n} from '../../../../models/graphql/dashboardsDetails';\nimport {\n  DataSourceList,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../../../models/graphql/dataSourceDetails';\nimport useActions from '../../../../redux/actions';\nimport * as TabActions from '../../../../redux/actions/tabs';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport {\n  sortAlphaAsc,\n  sortAlphaDesc,\n  sortNumAsc,\n  sortNumDesc,\n} from '../../../../utils/sort';\nimport useStyles from './styles';\nimport TableData from './TableData';\nimport TableHeader from './TableHeader';\nimport TableToolBar from './TableToolbar';\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\ninterface SortData {\n  lastViewed: { sort: boolean; ascending: boolean };\n  name: { sort: boolean; ascending: boolean };\n}\n\ninterface Filter {\n  range: RangeType;\n  selectedDataSourceType: string;\n  selectedDashboardType: string;\n  sortData: SortData;\n  selectedAgentName: string;\n  searchTokens: string[];\n}\n\nconst DashboardTable: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [filter, setFilter] = React.useState<Filter>({\n    range: { startDate: 'all', endDate: 'all' },\n    selectedDataSourceType: 'All',\n    selectedDashboardType: 'All',\n    sortData: {\n      name: { sort: false, ascending: true },\n      lastViewed: { sort: true, ascending: false },\n    },\n    selectedAgentName: 'All',\n    searchTokens: [''],\n  });\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const tabs = useActions(TabActions);\n  const [isAlertOpen, setIsAlertOpen] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [activeDataSourceAvailable, setActiveDataSourceAvailable] =\n    React.useState(false);\n\n  // Apollo query to get the dashboard data\n  const { data, loading, error, refetch } = useQuery<\n    DashboardList,\n    ListDashboardVars\n  >(LIST_DASHBOARD, {\n    variables: { projectID },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  // Apollo query to get the data source data\n  const { data: dataSourceList, loading: loadingDataSources } = useQuery<\n    DataSourceList,\n    ListDataSourceVars\n  >(LIST_DATASOURCE, {\n    variables: { projectID },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const alertStateHandler = (successState: boolean) => {\n    setSuccess(successState);\n    setIsAlertOpen(true);\n    if (successState) {\n      refetch();\n    }\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const getDataSourceType = (searchingData: ListDashboardResponse[]) => {\n    const uniqueList: string[] = [];\n    searchingData.forEach((data) => {\n      if (!uniqueList.includes(data.ds_type)) {\n        uniqueList.push(data.ds_type);\n      }\n    });\n    return uniqueList;\n  };\n\n  const getDashboardType = (searchingData: ListDashboardResponse[]) => {\n    const uniqueList: string[] = [];\n    searchingData.forEach((data) => {\n      if (!uniqueList.includes(data.db_type_name)) {\n        uniqueList.push(data.db_type_name);\n      }\n    });\n    return uniqueList;\n  };\n\n  const getAgentName = (searchingData: ListDashboardResponse[]) => {\n    const uniqueList: string[] = [];\n    searchingData.forEach((data) => {\n      if (!uniqueList.includes(data.cluster_name)) {\n        uniqueList.push(data.cluster_name);\n      }\n    });\n    return uniqueList;\n  };\n\n  const payload: ListDashboardResponse[] = data\n    ? !data.ListDashboard\n      ? []\n      : data.ListDashboard.filter((db: ListDashboardResponse) => {\n          return filter.searchTokens.every((s: string) =>\n            db.db_name.toLowerCase().includes(s)\n          );\n        })\n          .filter((data) => {\n            return filter.selectedDataSourceType === 'All'\n              ? true\n              : data.ds_type === filter.selectedDataSourceType;\n          })\n          .filter((data) => {\n            return filter.selectedDashboardType === 'All'\n              ? true\n              : data.db_type_name === filter.selectedDashboardType;\n          })\n          .filter((data) => {\n            return filter.selectedAgentName === 'All'\n              ? true\n              : data.cluster_name === filter.selectedAgentName;\n          })\n          .filter((data) => {\n            return filter.range.startDate === 'all' ||\n              (filter.range.startDate && filter.range.endDate === undefined)\n              ? true\n              : parseInt(data.updated_at, 10) * 1000 >=\n                  new Date(moment(filter.range.startDate).format()).getTime() &&\n                  parseInt(data.updated_at, 10) * 1000 <=\n                    new Date(\n                      new Date(moment(filter.range.endDate).format()).setHours(\n                        23,\n                        59,\n                        59\n                      )\n                    ).getTime();\n          })\n          .sort((a: ListDashboardResponse, b: ListDashboardResponse) => {\n            // Sorting based on unique fields\n            if (filter.sortData.name.sort) {\n              const x = a.db_name;\n              const y = b.db_name;\n              return filter.sortData.name.ascending\n                ? sortAlphaAsc(x, y)\n                : sortAlphaDesc(x, y);\n            }\n            if (filter.sortData.lastViewed.sort) {\n              const x = parseInt(a.updated_at, 10);\n              const y = parseInt(b.updated_at, 10);\n              return filter.sortData.lastViewed.ascending\n                ? sortNumAsc(y, x)\n                : sortNumDesc(y, x);\n            }\n            return 0;\n          })\n    : [];\n\n  useEffect(() => {\n    if (dataSourceList && dataSourceList.ListDataSource) {\n      const activeDataSources: ListDataSourceResponse[] =\n        dataSourceList.ListDataSource.filter(\n          (dataSource) => dataSource.health_status === 'Active'\n        ) ?? [];\n      if (activeDataSources.length) {\n        setActiveDataSourceAvailable(true);\n      }\n    }\n  }, [dataSourceList]);\n\n  return (\n    <div className={classes.root}>\n      {!activeDataSourceAvailable && !loadingDataSources && (\n        <blockquote className={classes.warningBlock}>\n          <Typography className={classes.warningText} align=\"left\">\n            {dataSourceList?.ListDataSource.length\n              ? t(\n                  'analyticsDashboard.applicationDashboardTable.warning.noActiveDataSource'\n                )\n              : t(\n                  'analyticsDashboard.applicationDashboardTable.warning.noAvailableDataSource'\n                )}\n          </Typography>\n          <div className={classes.warningActions}>\n            {dataSourceList && dataSourceList.ListDataSource.length > 0 && (\n              <>\n                <TextButton\n                  onClick={() => tabs.changeAnalyticsDashboardTabs(3)}\n                  variant=\"highlight\"\n                  className={classes.warningButton}\n                >\n                  <Typography\n                    className={classes.buttonText}\n                    style={{ fontWeight: 500 }}\n                  >\n                    {t(\n                      'analyticsDashboard.applicationDashboardTable.warning.configureExisting'\n                    )}\n                  </Typography>\n                </TextButton>\n                <Typography className={classes.orText}>\n                  {t('analyticsDashboard.applicationDashboardTable.warning.or')}\n                </Typography>\n              </>\n            )}\n            <TextButton\n              onClick={() =>\n                history.push({\n                  pathname: '/analytics/datasource/create',\n                  search: `?projectID=${projectID}&projectRole=${projectRole}`,\n                })\n              }\n              variant=\"highlight\"\n              className={classes.warningButton}\n            >\n              <Typography\n                className={classes.buttonText}\n                style={{ fontWeight: 500 }}\n              >\n                {t(\n                  'analyticsDashboard.applicationDashboardTable.warning.addNew'\n                )}\n              </Typography>\n            </TextButton>\n          </div>\n        </blockquote>\n      )}\n      <Paper>\n        <section className=\"Heading section\">\n          <TableToolBar\n            searchToken={filter.searchTokens[0]}\n            handleSearch={(\n              event: React.ChangeEvent<{ value: unknown }> | undefined,\n              token: string | undefined\n            ) =>\n              setFilter({\n                ...filter,\n                searchTokens: (event !== undefined\n                  ? ((event.target as HTMLInputElement).value as string)\n                  : token || ''\n                )\n                  .toLowerCase()\n                  .split(' ')\n                  .filter((s) => s !== ''),\n              })\n            }\n            dataSourceTypes={getDataSourceType(data?.ListDashboard ?? [])}\n            dashboardTypes={getDashboardType(data?.ListDashboard ?? [])}\n            agentNames={getAgentName(data?.ListDashboard ?? [])}\n            callbackToSetDataSourceType={(dataSourceType: string) =>\n              setFilter({\n                ...filter,\n                selectedDataSourceType: dataSourceType,\n              })\n            }\n            callbackToSetDashboardType={(dashboardType: string) =>\n              setFilter({\n                ...filter,\n                selectedDashboardType: dashboardType,\n              })\n            }\n            callbackToSetAgentName={(agentName: string) =>\n              setFilter({\n                ...filter,\n                selectedAgentName: agentName,\n              })\n            }\n            callbackToSetRange={(\n              selectedStartDate: string,\n              selectedEndDate: string\n            ) =>\n              setFilter({\n                ...filter,\n                range: {\n                  startDate: selectedStartDate,\n                  endDate: selectedEndDate,\n                },\n              })\n            }\n            createButtonDisabled={\n              !activeDataSourceAvailable && !loadingDataSources\n            }\n          />\n        </section>\n      </Paper>\n      <Paper>\n        <section className=\"table section\">\n          <TableContainer\n            className={`${classes.tableMain} ${\n              !payload.length || loading ? classes.minHeight : ''\n            }`}\n          >\n            <Table aria-label=\"simple table\">\n              <TableHeader\n                callBackToSort={(sortConfigurations: SortData) =>\n                  setFilter({\n                    ...filter,\n                    sortData: sortConfigurations,\n                  })\n                }\n              />\n              <TableBody>\n                {error ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <Typography align=\"center\">\n                        {t(\n                          'analyticsDashboard.applicationDashboardTable.error'\n                        )}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                ) : loading ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <div\n                        className={`${classes.noRecords} ${classes.loading}`}\n                      >\n                        <Loader />\n                        <Typography align=\"center\">\n                          {t(\n                            'analyticsDashboard.applicationDashboardTable.loading'\n                          )}\n                        </Typography>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : !payload.length ? (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <div className={classes.noRecords}>\n                        <img\n                          src=\"/icons/dashboardUnavailable.svg\"\n                          className={classes.unavailableIcon}\n                          alt=\"Dashboard\"\n                        />\n                        <Typography className={classes.noRecordsText}>\n                          {t(\n                            'analyticsDashboard.applicationDashboardTable.noRecords'\n                          )}\n                        </Typography>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ) : payload.length > 0 ? (\n                  payload\n                    .slice(0)\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((data: ListDashboardResponse) => {\n                      return (\n                        <TableRow\n                          hover\n                          tabIndex={-1}\n                          key={data.db_id}\n                          className={classes.tableRow}\n                        >\n                          <TableData\n                            data={data}\n                            alertStateHandler={alertStateHandler}\n                          />\n                        </TableRow>\n                      );\n                    })\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6}>\n                      <Typography align=\"center\">\n                        {t(\n                          'analyticsDashboard.applicationDashboardTable.noRecords'\n                        )}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25, 50]}\n            component=\"div\"\n            count={payload.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            className={classes.tablePagination}\n            SelectProps={{\n              MenuProps: {\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n                },\n                getContentAnchorEl: null,\n                classes: { paper: classes.menuList },\n              },\n            }}\n            classes={{ menuItem: classes.menuListItem }}\n          />\n        </section>\n      </Paper>\n      {isAlertOpen && (\n        <Snackbar\n          open={isAlertOpen}\n          autoHideDuration={3000}\n          onClose={() => setIsAlertOpen(false)}\n        >\n          <Alert\n            onClose={() => setIsAlertOpen(false)}\n            severity={success ? 'success' : 'error'}\n          >\n            {success\n              ? t(\n                  'analyticsDashboard.applicationDashboardTable.deletionSuccess'\n                )\n              : t('analyticsDashboard.applicationDashboardTable.deletionError')}\n          </Alert>\n        </Snackbar>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardTable;\n"]},"metadata":{},"sourceType":"module"}