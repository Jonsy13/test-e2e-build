{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-unused-expressions */ /* eslint-disable no-useless-escape */ /* eslint-disable no-param-reassign */import{DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,PROMETHEUS_QUERY_RESOLUTION_LIMIT}from'../pages/ApplicationDashboard/constants';var labelMatchOperators=['==','!=','<=','<','>=','>','=~','!~','='];export var getPromQueryInput=function getPromQueryInput(prom_queries,timeRangeDiff,withEvents){var promQueries=[];prom_queries.forEach(function(query){promQueries.push({queryid:query.queryid,query:query.prom_query_name,legend:query.legend,resolution:query.resolution,minstep:Math.floor(timeRangeDiff/parseInt(query.minstep,10))*prom_queries.length<PROMETHEUS_QUERY_RESOLUTION_LIMIT-1?parseInt(query.minstep,10):Math.floor(timeRangeDiff*prom_queries.length/(PROMETHEUS_QUERY_RESOLUTION_LIMIT+1))});});if(withEvents){promQueries.push({queryid:'chaos-interval',query:'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}',legend:'{{chaosengine_name}}',resolution:DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,minstep:timeRangeDiff<PROMETHEUS_QUERY_RESOLUTION_LIMIT-1?1:Math.floor(timeRangeDiff/(PROMETHEUS_QUERY_RESOLUTION_LIMIT+1))});// promQueries.push({\n//   queryid: 'chaos-verdict',\n//   query: 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}',\n//   legend: '{{chaosengine_name}}',\n//   resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n//   minstep:\n//     timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n//       ? 1\n//       : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n// });\n}return promQueries;};export var DataParserForPrometheus=function DataParserForPrometheus(prometheusData,lineGraph,areaGraph,closedAreaQueryIDs){var _prometheusData$GetPr,_prometheusData$GetPr2;var parsedPrometheusData={seriesData:[],closedAreaData:[],chaosData:[]};(_prometheusData$GetPr=prometheusData.GetPromQuery.annotationsResponse)===null||_prometheusData$GetPr===void 0?void 0:_prometheusData$GetPr.forEach(function(queryResponse,mainIndex){if(queryResponse&&queryResponse.legends&&queryResponse.tsvs){var _parsedPrometheusData;(_parsedPrometheusData=parsedPrometheusData.chaosData).push.apply(_parsedPrometheusData,_toConsumableArray(queryResponse.legends.map(function(elem,index){return{metricName:elem,data:queryResponse.tsvs[index].map(function(dataPoint){return _objectSpread({},dataPoint);}),baseColor:areaGraph[(mainIndex+index%areaGraph.length)%areaGraph.length],subData:[]};})));}});(_prometheusData$GetPr2=prometheusData.GetPromQuery.metricsResponse)===null||_prometheusData$GetPr2===void 0?void 0:_prometheusData$GetPr2.forEach(function(queryResponse,mainIndex){if(queryResponse&&queryResponse.legends&&queryResponse.tsvs){if(closedAreaQueryIDs.includes(queryResponse.queryid)){var _parsedPrometheusData2;(_parsedPrometheusData2=parsedPrometheusData.closedAreaData).push.apply(_parsedPrometheusData2,_toConsumableArray(queryResponse.legends.map(function(elem,index){return{metricName:elem,data:queryResponse.tsvs[index].map(function(dataPoint){return _objectSpread({},dataPoint);}),baseColor:areaGraph[(mainIndex+index%areaGraph.length)%areaGraph.length]};})));}else{var _parsedPrometheusData3;(_parsedPrometheusData3=parsedPrometheusData.seriesData).push.apply(_parsedPrometheusData3,_toConsumableArray(queryResponse.legends.map(function(elem,index){return{metricName:elem,data:queryResponse.tsvs[index].map(function(dataPoint){return _objectSpread({},dataPoint);}),baseColor:lineGraph[(mainIndex+index%lineGraph.length)%lineGraph.length]};})));}}});return parsedPrometheusData;};export var replaceBetween=function replaceBetween(origin,startIndex,endIndex,insertion){return\"\".concat(origin.substring(0,startIndex)).concat(insertion).concat(origin.substring(endIndex));};export var getLabelsAndValues=function getLabelsAndValues(queryString){var labelValuesList=[];var re=/\\{(.*?)\\}/g;var arr=queryString.match(re);if(arr){var tempLabelValueList=arr[0].split(',');tempLabelValueList.forEach(function(labelValue,index){var adjustedLabelValue=labelValue;if(index===0){adjustedLabelValue=adjustedLabelValue.substring(1,labelValue.length);}if(index===tempLabelValueList.length-1){adjustedLabelValue=adjustedLabelValue.substring(0,labelValue.length-2);}var splitOperator='';labelMatchOperators.some(function(val){var ret=adjustedLabelValue.indexOf(val)!==-1;if(ret){splitOperator=val;}return ret;});var labelAndValue=adjustedLabelValue.trim().split(splitOperator);var re1=/\\\"(.*?)\\\"/g;if(labelAndValue.length>0&&labelAndValue[1]){var arr1=labelAndValue[1].match(re1);if(arr1&&arr1.length>0){var updateStatus=false;labelValuesList.forEach(function(labVal){if(labVal.label===labelAndValue[0]){labVal.value=labVal.value.concat(arr1[0].substring(1,arr1[0].length-1).split('|'));updateStatus=true;}});if(!updateStatus){labelValuesList.push({label:labelAndValue[0],value:arr1[0].substring(1,arr1[0].length-1).split('|')});}}}});}return labelValuesList;};export var setLabelsAndValues=function setLabelsAndValues(baseQueryString,queryString,labelValuesList){var existingQueryString=queryString;labelValuesList.forEach(function(labVal){var matchBracketIndex=existingQueryString.indexOf('{');var matchLabelIndex=-1;if(matchBracketIndex!==-1){matchLabelIndex=existingQueryString.indexOf(labVal.label,matchBracketIndex);}if(matchLabelIndex===-1){if(matchBracketIndex===-1){var baseConcatIndex=queryString.indexOf(baseQueryString)+baseQueryString.length-1;existingQueryString=\"\".concat(existingQueryString.slice(0,baseConcatIndex+1),\"{\").concat(labVal.label,\"=~\\\"\").concat(labVal.value.join('|'),\"\\\"}\").concat(existingQueryString.slice(baseConcatIndex+1));}else{existingQueryString=\"\".concat(existingQueryString.slice(0,matchBracketIndex+1)).concat(labVal.label,\"=~\\\"\").concat(labVal.value.join('|'),\"\\\",\").concat(existingQueryString.slice(matchBracketIndex+1));}}else{var lastIndexOfOpr=existingQueryString.indexOf(\"\\\"\",matchLabelIndex);var lastIndexOfVal=existingQueryString.indexOf(\"\\\"\",lastIndexOfOpr+1);var subStrToReplace=existingQueryString.substring(lastIndexOfOpr,lastIndexOfVal+1);if(lastIndexOfOpr!==-1&&lastIndexOfVal!==-1){if(labVal.value.length){existingQueryString=existingQueryString.replace(subStrToReplace,\"\\\"\".concat(labVal.value.join('|'),\"\\\"\"));existingQueryString=replaceBetween(existingQueryString,matchLabelIndex+labVal.label.length,lastIndexOfOpr,'=~');}else{var graceIndexForBrackets=(existingQueryString[lastIndexOfVal+1]==='}'||existingQueryString[lastIndexOfVal+2]==='}')&&existingQueryString[matchLabelIndex-1]==='{'?1:0;existingQueryString=existingQueryString.replace(existingQueryString.substring(matchLabelIndex-graceIndexForBrackets,existingQueryString[lastIndexOfVal+1]===','?lastIndexOfVal+2+graceIndexForBrackets:lastIndexOfVal+1+graceIndexForBrackets),\"\");}}}});return existingQueryString;};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/promUtils.ts"],"names":["DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION","PROMETHEUS_QUERY_RESOLUTION_LIMIT","labelMatchOperators","getPromQueryInput","prom_queries","timeRangeDiff","withEvents","promQueries","forEach","query","push","queryid","prom_query_name","legend","resolution","minstep","Math","floor","parseInt","length","DataParserForPrometheus","prometheusData","lineGraph","areaGraph","closedAreaQueryIDs","parsedPrometheusData","seriesData","closedAreaData","chaosData","GetPromQuery","annotationsResponse","queryResponse","mainIndex","legends","tsvs","map","elem","index","metricName","data","dataPoint","baseColor","subData","metricsResponse","includes","replaceBetween","origin","startIndex","endIndex","insertion","substring","getLabelsAndValues","queryString","labelValuesList","re","arr","match","tempLabelValueList","split","labelValue","adjustedLabelValue","splitOperator","some","val","ret","indexOf","labelAndValue","trim","re1","arr1","updateStatus","labVal","label","value","concat","setLabelsAndValues","baseQueryString","existingQueryString","matchBracketIndex","matchLabelIndex","baseConcatIndex","slice","join","lastIndexOfOpr","lastIndexOfVal","subStrToReplace","replace","graceIndexForBrackets"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-param-reassign */\nimport {\n  ParsedPrometheusData,\n  PromQueryDetails,\n  QueryLabelValue,\n} from '../models/dashboardsData';\nimport {\n  PrometheusResponse,\n  promQueryInput,\n} from '../models/graphql/prometheus';\nimport {\n  DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n  PROMETHEUS_QUERY_RESOLUTION_LIMIT,\n} from '../pages/ApplicationDashboard/constants';\n\nconst labelMatchOperators = ['==', '!=', '<=', '<', '>=', '>', '=~', '!~', '='];\n\nexport const getPromQueryInput = (\n  prom_queries: PromQueryDetails[],\n  timeRangeDiff: number,\n  withEvents: Boolean\n) => {\n  const promQueries: promQueryInput[] = [];\n  prom_queries.forEach((query: PromQueryDetails) => {\n    promQueries.push({\n      queryid: query.queryid,\n      query: query.prom_query_name,\n      legend: query.legend,\n      resolution: query.resolution,\n      minstep:\n        Math.floor(timeRangeDiff / parseInt(query.minstep, 10)) *\n          prom_queries.length <\n        PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n          ? parseInt(query.minstep, 10)\n          : Math.floor(\n              (timeRangeDiff * prom_queries.length) /\n                (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)\n            ),\n    });\n  });\n  if (withEvents) {\n    promQueries.push({\n      queryid: 'chaos-interval',\n      query: 'litmuschaos_awaited_experiments{job=\"chaos-exporter\"}',\n      legend: '{{chaosengine_name}}',\n      resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n      minstep:\n        timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n          ? 1\n          : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n    });\n    // promQueries.push({\n    //   queryid: 'chaos-verdict',\n    //   query: 'litmuschaos_experiment_verdict{job=\"chaos-exporter\"}',\n    //   legend: '{{chaosengine_name}}',\n    //   resolution: DEFAULT_CHAOS_EVENT_PROMETHEUS_QUERY_RESOLUTION,\n    //   minstep:\n    //     timeRangeDiff < PROMETHEUS_QUERY_RESOLUTION_LIMIT - 1\n    //       ? 1\n    //       : Math.floor(timeRangeDiff / (PROMETHEUS_QUERY_RESOLUTION_LIMIT + 1)),\n    // });\n  }\n  return promQueries;\n};\n\nexport const DataParserForPrometheus = (\n  prometheusData: PrometheusResponse,\n  lineGraph: string[],\n  areaGraph: string[],\n  closedAreaQueryIDs: string[]\n) => {\n  const parsedPrometheusData: ParsedPrometheusData = {\n    seriesData: [],\n    closedAreaData: [],\n    chaosData: [],\n  };\n  prometheusData.GetPromQuery.annotationsResponse?.forEach(\n    (queryResponse, mainIndex) => {\n      if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n        parsedPrometheusData.chaosData.push(\n          ...queryResponse.legends.map((elem, index) => ({\n            metricName: elem,\n            data: queryResponse.tsvs[index].map((dataPoint) => ({\n              ...dataPoint,\n            })),\n            baseColor:\n              areaGraph[\n                (mainIndex + (index % areaGraph.length)) % areaGraph.length\n              ],\n            subData: [],\n          }))\n        );\n      }\n    }\n  );\n  prometheusData.GetPromQuery.metricsResponse?.forEach(\n    (queryResponse, mainIndex) => {\n      if (queryResponse && queryResponse.legends && queryResponse.tsvs) {\n        if (closedAreaQueryIDs.includes(queryResponse.queryid)) {\n          parsedPrometheusData.closedAreaData.push(\n            ...queryResponse.legends.map((elem, index) => ({\n              metricName: elem,\n              data: queryResponse.tsvs[index].map((dataPoint) => ({\n                ...dataPoint,\n              })),\n              baseColor:\n                areaGraph[\n                  (mainIndex + (index % areaGraph.length)) % areaGraph.length\n                ],\n            }))\n          );\n        } else {\n          parsedPrometheusData.seriesData.push(\n            ...queryResponse.legends.map((elem, index) => ({\n              metricName: elem,\n              data: queryResponse.tsvs[index].map((dataPoint) => ({\n                ...dataPoint,\n              })),\n              baseColor:\n                lineGraph[\n                  (mainIndex + (index % lineGraph.length)) % lineGraph.length\n                ],\n            }))\n          );\n        }\n      }\n    }\n  );\n  return parsedPrometheusData;\n};\n\nexport const replaceBetween = (\n  origin: string,\n  startIndex: number,\n  endIndex: number,\n  insertion: string\n) =>\n  `${origin.substring(0, startIndex)}${insertion}${origin.substring(endIndex)}`;\n\nexport const getLabelsAndValues = (queryString: string) => {\n  const labelValuesList: QueryLabelValue[] = [];\n  const re = /\\{(.*?)\\}/g;\n  const arr: string[] = queryString.match(re) as string[];\n  if (arr) {\n    const tempLabelValueList = arr[0].split(',');\n    tempLabelValueList.forEach((labelValue, index) => {\n      let adjustedLabelValue = labelValue;\n      if (index === 0) {\n        adjustedLabelValue = adjustedLabelValue.substring(1, labelValue.length);\n      }\n      if (index === tempLabelValueList.length - 1) {\n        adjustedLabelValue = adjustedLabelValue.substring(\n          0,\n          labelValue.length - 2\n        );\n      }\n      let splitOperator = '';\n      labelMatchOperators.some((val) => {\n        const ret = adjustedLabelValue.indexOf(val) !== -1;\n        if (ret) {\n          splitOperator = val;\n        }\n        return ret;\n      });\n      const labelAndValue = adjustedLabelValue.trim().split(splitOperator);\n      const re1 = /\\\"(.*?)\\\"/g;\n      if (labelAndValue.length > 0 && labelAndValue[1]) {\n        const arr1: string[] = labelAndValue[1].match(re1) as string[];\n        if (arr1 && arr1.length > 0) {\n          let updateStatus = false;\n          labelValuesList.forEach((labVal) => {\n            if (labVal.label === labelAndValue[0]) {\n              labVal.value = labVal.value.concat(\n                arr1[0].substring(1, arr1[0].length - 1).split('|')\n              );\n              updateStatus = true;\n            }\n          });\n          if (!updateStatus) {\n            labelValuesList.push({\n              label: labelAndValue[0],\n              value: arr1[0].substring(1, arr1[0].length - 1).split('|'),\n            });\n          }\n        }\n      }\n    });\n  }\n  return labelValuesList;\n};\n\nexport const setLabelsAndValues = (\n  baseQueryString: string,\n  queryString: string,\n  labelValuesList: QueryLabelValue[]\n) => {\n  let existingQueryString: string = queryString;\n  labelValuesList.forEach((labVal) => {\n    const matchBracketIndex = existingQueryString.indexOf('{');\n    let matchLabelIndex = -1;\n    if (matchBracketIndex !== -1) {\n      matchLabelIndex = existingQueryString.indexOf(\n        labVal.label,\n        matchBracketIndex\n      );\n    }\n    if (matchLabelIndex === -1) {\n      if (matchBracketIndex === -1) {\n        const baseConcatIndex =\n          queryString.indexOf(baseQueryString) + baseQueryString.length - 1;\n        existingQueryString = `${existingQueryString.slice(\n          0,\n          baseConcatIndex + 1\n        )}{${labVal.label}=~\"${labVal.value.join(\n          '|'\n        )}\"}${existingQueryString.slice(baseConcatIndex + 1)}`;\n      } else {\n        existingQueryString = `${existingQueryString.slice(\n          0,\n          matchBracketIndex + 1\n        )}${labVal.label}=~\"${labVal.value.join(\n          '|'\n        )}\",${existingQueryString.slice(matchBracketIndex + 1)}`;\n      }\n    } else {\n      const lastIndexOfOpr = existingQueryString.indexOf(`\"`, matchLabelIndex);\n      const lastIndexOfVal = existingQueryString.indexOf(\n        `\"`,\n        lastIndexOfOpr + 1\n      );\n      const subStrToReplace = existingQueryString.substring(\n        lastIndexOfOpr,\n        lastIndexOfVal + 1\n      );\n      if (lastIndexOfOpr !== -1 && lastIndexOfVal !== -1) {\n        if (labVal.value.length) {\n          existingQueryString = existingQueryString.replace(\n            subStrToReplace,\n            `\"${labVal.value.join('|')}\"`\n          );\n          existingQueryString = replaceBetween(\n            existingQueryString,\n            matchLabelIndex + labVal.label.length,\n            lastIndexOfOpr,\n            '=~'\n          );\n        } else {\n          const graceIndexForBrackets =\n            (existingQueryString[lastIndexOfVal + 1] === '}' ||\n              existingQueryString[lastIndexOfVal + 2] === '}') &&\n            existingQueryString[matchLabelIndex - 1] === '{'\n              ? 1\n              : 0;\n          existingQueryString = existingQueryString.replace(\n            existingQueryString.substring(\n              matchLabelIndex - graceIndexForBrackets,\n              existingQueryString[lastIndexOfVal + 1] === ','\n                ? lastIndexOfVal + 2 + graceIndexForBrackets\n                : lastIndexOfVal + 1 + graceIndexForBrackets\n            ),\n            ``\n          );\n        }\n      }\n    }\n  });\n  return existingQueryString;\n};\n"]},"metadata":{},"sourceType":"module"}