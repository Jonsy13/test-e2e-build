{"ast":null,"code":"/* eslint-disable no-useless-escape */\nexport var validateTextEmpty = function validateTextEmpty(value) {\n  if (value.trim() === '') return true;\n  return false;\n};\nexport var validateStartEmptySpacing = function validateStartEmptySpacing(value) {\n  if ((value === null || value === void 0 ? void 0 : value.charAt(0)) === ' ') return true;\n  return false;\n};\nexport var validateEmail = function validateEmail(value) {\n  var emailValid = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if ((value === null || value === void 0 ? void 0 : value.length) > 0) {\n    if (value.match(emailValid)) return false;\n    return true;\n  }\n\n  return false;\n};\nexport var validateSubject = function validateSubject(value) {\n  var subjectValid = /(^[a-z0-9A-Z-._]{0,63}$)/;\n\n  if ((value === null || value === void 0 ? void 0 : value.length) > 0) {\n    if (value.match(subjectValid)) return false;\n    return true;\n  }\n\n  return false;\n};\nexport var validateWorkflowName = function validateWorkflowName(value) {\n  /**\n   * Workflow name is 54 chars max + generated timestamp is 10 chars\n   * => Total 54 + 10 = 64 chars maximum\n   * */\n  var workflowValid = /(^[a-z0-9-]{0,54}$)/;\n\n  if (value.length > 0) {\n    if (value.match(workflowValid)) return false;\n    return true;\n  }\n\n  return false;\n};\nexport var validateProbeName = function validateProbeName(allProbe, probeName) {\n  if (allProbe.length) {\n    var filteredProbes = allProbe.filter(function (probe) {\n      return probe.name.toLowerCase() === probeName;\n    });\n\n    if (filteredProbes.length) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport var validatePassword = function validatePassword(value) {\n  var passValid = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/;\n\n  if (value.length > 0) {\n    if (value.match(passValid)) return false;\n    return true;\n  }\n\n  return false;\n};\nexport var validateConfirmPassword = function validateConfirmPassword(password, confirmPassword) {\n  if (password.length > 0 && confirmPassword.length > 0) {\n    if (confirmPassword === password) return false;\n    return true;\n  }\n\n  return false;\n};\nexport var validateOnlyAlphabet = function validateOnlyAlphabet(value) {\n  var onlyAplhaValid = /^[a-zA-Z]+$/;\n  if (value.match(onlyAplhaValid)) return false;\n  return true;\n};\nexport var validateLength = function validateLength(value) {\n  if (value.length > 0) return false;\n  return true;\n};\nexport var isValidWebUrl = function isValidWebUrl(value) {\n  var regEx = /^(http|https):\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/gm;\n  var regExLocal = /^http:\\/\\/localhost:([0-9]){1,4}$/g;\n  var regExIpv4 = /^http:\\/\\/(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]){1,4}$/g;\n  var regExIpv6 = /^http:\\/\\/((([0-9a-fA-F]){1,4})\\\\:){7}([0-9a-fA-F]){1,4}:([0-9]){1,4}$/g;\n  var sshRegEx = /^([A-Za-z0-9]+@|http(|s)\\:\\/\\/)([-a-zA-Z0-9@:%._\\+~#=]+(:\\d+)?)(?::|\\/)([\\d\\/\\w.-]+?)(\\.git)?$/i;\n  if (value.match(regEx) || value.match(regExLocal) || value.match(regExIpv4) || value.match(regExIpv6) || value.match(sshRegEx)) return true;\n  return false;\n};\nexport var validateTimeInSeconds = function validateTimeInSeconds(value) {\n  var timeInSecondsValid = /^[0-9]+s$/g;\n\n  if (value.length > 1) {\n    if (value.match(timeInSecondsValid)) return true;\n    return false;\n  }\n\n  return false;\n};\nexport var validateWorkflowParameter = function validateWorkflowParameter(value) {\n  var workflowParameterValid = /^{[a-zA-Z0-9]+}$/g;\n\n  if (value.length > 0) {\n    if (value.match(workflowParameterValid)) return false;\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/utils/validate.ts"],"names":["validateTextEmpty","value","trim","validateStartEmptySpacing","charAt","validateEmail","emailValid","length","match","validateSubject","subjectValid","validateWorkflowName","workflowValid","validateProbeName","allProbe","probeName","filteredProbes","filter","probe","name","toLowerCase","validatePassword","passValid","validateConfirmPassword","password","confirmPassword","validateOnlyAlphabet","onlyAplhaValid","validateLength","isValidWebUrl","regEx","regExLocal","regExIpv4","regExIpv6","sshRegEx","validateTimeInSeconds","timeInSecondsValid","validateWorkflowParameter","workflowParameterValid"],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-escape */\n\nexport const validateTextEmpty = (value: string) => {\n  if (value.trim() === '') return true;\n  return false;\n};\n\nexport const validateStartEmptySpacing = (value: string) => {\n  if (value?.charAt(0) === ' ') return true;\n  return false;\n};\n\nexport const validateEmail = (value: string) => {\n  const emailValid =\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (value?.length > 0) {\n    if (value.match(emailValid)) return false;\n    return true;\n  }\n  return false;\n};\n\nexport const validateSubject = (value: string) => {\n  const subjectValid = /(^[a-z0-9A-Z-._]{0,63}$)/;\n  if (value?.length > 0) {\n    if (value.match(subjectValid)) return false;\n    return true;\n  }\n  return false;\n};\n\nexport const validateWorkflowName = (value: string) => {\n  /**\n   * Workflow name is 54 chars max + generated timestamp is 10 chars\n   * => Total 54 + 10 = 64 chars maximum\n   * */\n  const workflowValid = /(^[a-z0-9-]{0,54}$)/;\n  if (value.length > 0) {\n    if (value.match(workflowValid)) return false;\n    return true;\n  }\n  return false;\n};\n\nexport const validateProbeName = (allProbe: any, probeName: string) => {\n  if (allProbe.length) {\n    const filteredProbes = allProbe.filter(\n      (probe: any) => probe.name.toLowerCase() === probeName\n    );\n    if (filteredProbes.length) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const validatePassword = (value: string) => {\n  const passValid = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/;\n  if (value.length > 0) {\n    if (value.match(passValid)) return false;\n    return true;\n  }\n  return false;\n};\n\nexport const validateConfirmPassword = (\n  password: string,\n  confirmPassword: string\n) => {\n  if (password.length > 0 && confirmPassword.length > 0) {\n    if (confirmPassword === password) return false;\n    return true;\n  }\n  return false;\n};\n\nexport const validateOnlyAlphabet = (value: string) => {\n  const onlyAplhaValid = /^[a-zA-Z]+$/;\n  if (value.match(onlyAplhaValid)) return false;\n  return true;\n};\n\nexport const validateLength = (value: string) => {\n  if (value.length > 0) return false;\n  return true;\n};\n\nexport const isValidWebUrl = (value: string) => {\n  const regEx =\n    /^(http|https):\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/gm;\n  const regExLocal = /^http:\\/\\/localhost:([0-9]){1,4}$/g;\n  const regExIpv4 =\n    /^http:\\/\\/(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([0-9]){1,4}$/g;\n  const regExIpv6 =\n    /^http:\\/\\/((([0-9a-fA-F]){1,4})\\\\:){7}([0-9a-fA-F]){1,4}:([0-9]){1,4}$/g;\n  const sshRegEx =\n    /^([A-Za-z0-9]+@|http(|s)\\:\\/\\/)([-a-zA-Z0-9@:%._\\+~#=]+(:\\d+)?)(?::|\\/)([\\d\\/\\w.-]+?)(\\.git)?$/i;\n  if (\n    value.match(regEx) ||\n    value.match(regExLocal) ||\n    value.match(regExIpv4) ||\n    value.match(regExIpv6) ||\n    value.match(sshRegEx)\n  )\n    return true;\n  return false;\n};\n\nexport const validateTimeInSeconds = (value: string) => {\n  const timeInSecondsValid = /^[0-9]+s$/g;\n  if (value.length > 1) {\n    if (value.match(timeInSecondsValid)) return true;\n    return false;\n  }\n  return false;\n};\n\nexport const validateWorkflowParameter = (value: string) => {\n  const workflowParameterValid = /^{[a-zA-Z0-9]+}$/g;\n  if (value.length > 0) {\n    if (value.match(workflowParameterValid)) return false;\n    return true;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}