{"ast":null,"code":"import React from'react';import{useSelector}from'react-redux';import{ComposableMap,Geographies,Geography,Marker,ZoomableGroup}from'react-simple-maps';import datageo from'./geo.json';import useStyles from'./styles';var geoUrl=datageo;/* City geo Map is used for location of users with \nlat and lng wise to present it on map */var CityMap=function CityMap(){var classes=useStyles();var _useSelector=useSelector(function(state){return state.communityData;}),communityData=_useSelector.communityData;var geoCity=communityData.google.geoCity;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ComposableMap,{projection:\"geoMercator\",className:classes.cityMapComposableMap},/*#__PURE__*/React.createElement(ZoomableGroup,{center:[0,-675],zoom:0.85},/*#__PURE__*/React.createElement(Geographies,{geography:geoUrl},function(_ref){var geographies=_ref.geographies;return geographies.map(function(geo){return/*#__PURE__*/React.createElement(Geography,{className:classes.cityMapGeography,key:geo.rsmKey,geography:geo});});}),geoCity&&geoCity.map(function(_ref2){var name=_ref2.name,latitude=_ref2.latitude,longitude=_ref2.longitude;return name!=='(not set)'&&/*#__PURE__*/React.createElement(Marker,{className:classes.cityMapMarkerStyles,key:\"\".concat(name,\"_\").concat(latitude,\"_\").concat(longitude),coordinates:[parseFloat(longitude)-4,parseFloat(latitude)+4]},/*#__PURE__*/React.createElement(\"circle\",null));}))));};export default CityMap;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Community/GeoMap/CityMap.tsx"],"names":["React","useSelector","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","datageo","useStyles","geoUrl","CityMap","classes","state","communityData","geoCity","google","cityMapComposableMap","geographies","map","geo","cityMapGeography","rsmKey","name","latitude","longitude","cityMapMarkerStyles","parseFloat"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OACEC,aADF,CAEEC,WAFF,CAGEC,SAHF,CAIEC,MAJF,CAKEC,aALF,KAMO,mBANP,CAQA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAEA,GAAMC,CAAAA,MAAM,CAAGF,OAAf,CAEA;AACA,wCACA,GAAMG,CAAAA,OAAiB,CAAG,QAApBA,CAAAA,OAAoB,EAAM,CAC9B,GAAMC,CAAAA,OAAO,CAAGH,SAAS,EAAzB,CAEA,iBAA0BP,WAAW,CACnC,SAACW,KAAD,QAAsBA,CAAAA,KAAK,CAACC,aAA5B,EADmC,CAArC,CAAQA,aAAR,cAAQA,aAAR,CAGA,GAAQC,CAAAA,OAAR,CAAoBD,aAAa,CAACE,MAAlC,CAAQD,OAAR,CACA,mBACE,4CACE,oBAAC,aAAD,EACE,UAAU,CAAC,aADb,CAEE,SAAS,CAAEH,OAAO,CAACK,oBAFrB,eAIE,oBAAC,aAAD,EAAe,MAAM,CAAE,CAAC,CAAD,CAAI,CAAC,GAAL,CAAvB,CAAkC,IAAI,CAAE,IAAxC,eACE,oBAAC,WAAD,EAAa,SAAS,CAAEP,MAAxB,EACG,kBAAGQ,CAAAA,WAAH,MAAGA,WAAH,OACCA,CAAAA,WAAW,CAACC,GAAZ,CAAgB,SAACC,GAAD,qBACd,oBAAC,SAAD,EACE,SAAS,CAAER,OAAO,CAACS,gBADrB,CAEE,GAAG,CAAED,GAAG,CAACE,MAFX,CAGE,SAAS,CAAEF,GAHb,EADc,EAAhB,CADD,EADH,CADF,CAYGL,OAAO,EACNA,OAAO,CAACI,GAAR,CACE,mBAAGI,CAAAA,IAAH,OAAGA,IAAH,CAASC,QAAT,OAASA,QAAT,CAAmBC,SAAnB,OAAmBA,SAAnB,OACEF,CAAAA,IAAI,GAAK,WAAT,eACE,oBAAC,MAAD,EACE,SAAS,CAAEX,OAAO,CAACc,mBADrB,CAEE,GAAG,WAAKH,IAAL,aAAaC,QAAb,aAAyBC,SAAzB,CAFL,CAGE,WAAW,CAAE,CACXE,UAAU,CAACF,SAAD,CAAV,CAAwB,CADb,CAEXE,UAAU,CAACH,QAAD,CAAV,CAAuB,CAFZ,CAHf,eAQE,kCARF,CAFJ,EADF,CAbJ,CAJF,CADF,CADF,CAsCD,CA7CD,CA+CA,cAAeb,CAAAA,OAAf","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup,\n} from 'react-simple-maps';\nimport { RootState } from '../../../redux/reducers';\nimport datageo from './geo.json';\nimport useStyles from './styles';\n\nconst geoUrl = datageo;\n\n/* City geo Map is used for location of users with \nlat and lng wise to present it on map */\nconst CityMap: React.FC = () => {\n  const classes = useStyles();\n\n  const { communityData } = useSelector(\n    (state: RootState) => state.communityData\n  );\n  const { geoCity } = communityData.google;\n  return (\n    <div>\n      <ComposableMap\n        projection=\"geoMercator\"\n        className={classes.cityMapComposableMap}\n      >\n        <ZoomableGroup center={[0, -675]} zoom={0.85}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  className={classes.cityMapGeography}\n                  key={geo.rsmKey}\n                  geography={geo}\n                />\n              ))\n            }\n          </Geographies>\n          {geoCity &&\n            geoCity.map(\n              ({ name, latitude, longitude }) =>\n                name !== '(not set)' && (\n                  <Marker\n                    className={classes.cityMapMarkerStyles}\n                    key={`${name}_${latitude}_${longitude}`}\n                    coordinates={[\n                      parseFloat(longitude) - 4,\n                      parseFloat(latitude) + 4,\n                    ]}\n                  >\n                    <circle />\n                  </Marker>\n                )\n            )}\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default CityMap;\n"]},"metadata":{},"sourceType":"module"}