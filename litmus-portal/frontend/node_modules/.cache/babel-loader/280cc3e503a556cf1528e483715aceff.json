{"ast":null,"code":"import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,FormControl,IconButton,InputAdornment,InputBase,InputLabel,MenuItem,OutlinedInput,Select,Typography}from'@material-ui/core';import ChevronRightIcon from'@material-ui/icons/ChevronRight';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import SearchIcon from'@material-ui/icons/Search';import{ButtonFilled}from'litmus-ui';import React,{useRef,useState}from'react';import{useTranslation}from'react-i18next';import DateRangeSelector from'../../../../components/DateRangeSelector';import{history}from'../../../../redux/configureStore';import{getProjectID,getProjectRole}from'../../../../utils/getSearchParams';import useStyles,{useOutlinedInputStyles}from'./styles';var TableToolBar=function TableToolBar(_ref){var handleSearch=_ref.handleSearch,searchToken=_ref.searchToken,dataSourceTypes=_ref.dataSourceTypes,dashboardTypes=_ref.dashboardTypes,agentNames=_ref.agentNames,callbackToSetRange=_ref.callbackToSetRange,callbackToSetDataSourceType=_ref.callbackToSetDataSourceType,callbackToSetDashboardType=_ref.callbackToSetDashboardType,callbackToSetAgentName=_ref.callbackToSetAgentName;var classes=useStyles();var outlinedInputClasses=useOutlinedInputStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var projectID=getProjectID();var projectRole=getProjectRole();var _React$useState=React.useState('All'),_React$useState2=_slicedToArray(_React$useState,2),dataSourceType=_React$useState2[0],setDataSourceType=_React$useState2[1];var _React$useState3=React.useState('All'),_React$useState4=_slicedToArray(_React$useState3,2),dashboardType=_React$useState4[0],setDashboardType=_React$useState4[1];var _React$useState5=React.useState('All'),_React$useState6=_slicedToArray(_React$useState5,2),agentName=_React$useState6[0],setAgentName=_React$useState6[1];var dateRangeSelectorRef=useRef(null);var _React$useState7=React.useState({startDate:' ',endDate:' '}),_React$useState8=_slicedToArray(_React$useState7,2),range=_React$useState8[0],setRange=_React$useState8[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDateRangeSelectorPopoverOpen=_useState2[0],setDateRangeSelectorPopoverOpen=_useState2[1];var handleDataSourceTypeChange=function handleDataSourceTypeChange(event){setDataSourceType(event.target.value);callbackToSetDataSourceType(event.target.value);};var handleDashboardTypeChange=function handleDashboardTypeChange(event){setDashboardType(event.target.value);callbackToSetDashboardType(event.target.value);};var handleAgentNameChange=function handleAgentNameChange(event){setAgentName(event.target.value);callbackToSetAgentName(event.target.value);};var CallbackFromRangeSelector=function CallbackFromRangeSelector(selectedStartDate,selectedEndDate){setRange({startDate:selectedStartDate,endDate:selectedEndDate});callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2],\" \").concat(selectedStartDate.split(' ')[1],\" \").concat(selectedStartDate.split(' ')[3])),\"\".concat(\"\".concat(selectedEndDate.split(' ')[2],\" \").concat(selectedEndDate.split(' ')[1],\" \").concat(selectedEndDate.split(' ')[3])));};return/*#__PURE__*/React.createElement(\"div\",{className:classes.headerSection},/*#__PURE__*/React.createElement(InputBase,{id:\"input-with-icon-adornment\",placeholder:\"Search\",className:classes.search,value:searchToken,onChange:handleSearch,classes:{input:classes.input},startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))}),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.dashboardTypeForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\" Agent Name \"),/*#__PURE__*/React.createElement(Select,{label:\"Agent Name\",value:agentName,onChange:handleAgentNameChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),agentNames.map(function(agentName){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(agentName,\"-kubernetesDashboard-Toolbar\"),value:agentName},agentName);}))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.dashboardTypeForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},\" Dashboard Type \"),/*#__PURE__*/React.createElement(Select,{label:\"Dashboard Type\",value:dashboardType,onChange:handleDashboardTypeChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),dashboardTypes.map(function(dashboardType){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(dashboardType,\"-kubernetesDashboard-toolbar\"),value:dashboardType},dashboardType);}))),/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",className:\"\".concat(classes.formControl,\" \").concat(classes.dataSourceTypeForm)},/*#__PURE__*/React.createElement(InputLabel,{className:classes.selectText},' ',\"Data Source Type\",' '),/*#__PURE__*/React.createElement(Select,{label:\"Data Source Type\",value:dataSourceType,onChange:handleDataSourceTypeChange,className:classes.selectText,input:/*#__PURE__*/React.createElement(OutlinedInput,{classes:outlinedInputClasses})},/*#__PURE__*/React.createElement(MenuItem,{value:\"All\"},\"All\"),dataSourceTypes.map(function(dataSourceType){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(dataSourceType,\"-KubernetesDashboard-TableToolbar\"),value:dataSourceType},dataSourceType);}))),/*#__PURE__*/React.createElement(Button,{className:classes.selectDate,onClick:function onClick(){return setDateRangeSelectorPopoverOpen(true);},ref:dateRangeSelectorRef,\"aria-label\":\"time range\",\"aria-haspopup\":\"true\"},/*#__PURE__*/React.createElement(Typography,{className:classes.displayDate},range.startDate===' '?'Select Period':\"\".concat(range.startDate.split(' ')[2],\" \").concat(range.startDate.split(' ')[1],\" \").concat(range.startDate.split(' ')[3],\" - \").concat(range.endDate.split(' ')[2],\" \").concat(range.endDate.split(' ')[1],\" \").concat(range.endDate.split(' ')[3]),/*#__PURE__*/React.createElement(IconButton,{className:classes.rangeSelectorIcon},isDateRangeSelectorPopoverOpen?/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,null):/*#__PURE__*/React.createElement(ChevronRightIcon,null)))),/*#__PURE__*/React.createElement(\"div\",{className:classes.addButton},/*#__PURE__*/React.createElement(ButtonFilled,{onClick:function onClick(){history.push({pathname:'/analytics/dashboard/create',search:\"?projectID=\".concat(projectID,\"&projectRole=\").concat(projectRole)});}},/*#__PURE__*/React.createElement(Typography,{className:classes.dateRangeDefault},t('analyticsDashboard.dashboardTable.addDashboard')))),/*#__PURE__*/React.createElement(DateRangeSelector,{anchorEl:dateRangeSelectorRef.current,isOpen:isDateRangeSelectorPopoverOpen,onClose:function onClose(){setDateRangeSelectorPopoverOpen(false);},callbackToSetRange:CallbackFromRangeSelector}));};export default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Table/TableToolbar.tsx"],"names":["Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","OutlinedInput","Select","Typography","ChevronRightIcon","KeyboardArrowDownIcon","SearchIcon","ButtonFilled","React","useRef","useState","useTranslation","DateRangeSelector","history","getProjectID","getProjectRole","useStyles","useOutlinedInputStyles","TableToolBar","handleSearch","searchToken","dataSourceTypes","dashboardTypes","agentNames","callbackToSetRange","callbackToSetDataSourceType","callbackToSetDashboardType","callbackToSetAgentName","classes","outlinedInputClasses","t","projectID","projectRole","dataSourceType","setDataSourceType","dashboardType","setDashboardType","agentName","setAgentName","dateRangeSelectorRef","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","handleDataSourceTypeChange","event","target","value","handleDashboardTypeChange","handleAgentNameChange","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","headerSection","search","input","formControl","dashboardTypeForm","selectText","map","dataSourceTypeForm","selectDate","displayDate","rangeSelectorIcon","addButton","push","pathname","dateRangeDefault","current"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { ButtonFilled } from 'litmus-ui';\nimport React, { ChangeEvent, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface DataSourceTypeCallBackType {\n  (DataSourceType: string): void;\n}\n\ninterface AgentNameCallBackType {\n  (AgentName: string): void;\n}\n\ninterface DashboardTypeCallBackType {\n  (testResult: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface TableToolBarProps {\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  dataSourceTypes: string[];\n  dashboardTypes: string[];\n  agentNames: string[];\n  callbackToSetDataSourceType: DataSourceTypeCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToSetDashboardType: DashboardTypeCallBackType;\n  callbackToSetAgentName: AgentNameCallBackType;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  handleSearch,\n  searchToken,\n  dataSourceTypes,\n  dashboardTypes,\n  agentNames,\n  callbackToSetRange,\n  callbackToSetDataSourceType,\n  callbackToSetDashboardType,\n  callbackToSetAgentName,\n}) => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const [dataSourceType, setDataSourceType] = React.useState<String>('All');\n  const [dashboardType, setDashboardType] = React.useState<String>('All');\n  const [agentName, setAgentName] = React.useState<String>('All');\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n\n  const handleDataSourceTypeChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setDataSourceType(event.target.value as String);\n    callbackToSetDataSourceType(event.target.value as string);\n  };\n\n  const handleDashboardTypeChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setDashboardType(event.target.value as String);\n    callbackToSetDashboardType(event.target.value as string);\n  };\n\n  const handleAgentNameChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setAgentName(event.target.value as String);\n    callbackToSetAgentName(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  return (\n    <div className={classes.headerSection}>\n      <InputBase\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Search\"\n        className={classes.search}\n        value={searchToken}\n        onChange={handleSearch}\n        classes={{\n          input: classes.input,\n        }}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n      />\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.dashboardTypeForm}`}\n      >\n        <InputLabel className={classes.selectText}> Agent Name </InputLabel>\n        <Select\n          label=\"Agent Name\"\n          value={agentName}\n          onChange={handleAgentNameChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {agentNames.map((agentName: string) => (\n            <MenuItem\n              key={`${agentName}-kubernetesDashboard-Toolbar`}\n              value={agentName}\n            >\n              {agentName}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.dashboardTypeForm}`}\n      >\n        <InputLabel className={classes.selectText}> Dashboard Type </InputLabel>\n        <Select\n          label=\"Dashboard Type\"\n          value={dashboardType}\n          onChange={handleDashboardTypeChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {dashboardTypes.map((dashboardType: string) => (\n            <MenuItem\n              key={`${dashboardType}-kubernetesDashboard-toolbar`}\n              value={dashboardType}\n            >\n              {dashboardType}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <FormControl\n        variant=\"outlined\"\n        className={`${classes.formControl} ${classes.dataSourceTypeForm}`}\n      >\n        <InputLabel className={classes.selectText}>\n          {' '}\n          Data Source Type{' '}\n        </InputLabel>\n        <Select\n          label=\"Data Source Type\"\n          value={dataSourceType}\n          onChange={handleDataSourceTypeChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {dataSourceTypes.map((dataSourceType: string) => (\n            <MenuItem\n              key={`${dataSourceType}-KubernetesDashboard-TableToolbar`}\n              value={dataSourceType}\n            >\n              {dataSourceType}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <Button\n        className={classes.selectDate}\n        onClick={() => setDateRangeSelectorPopoverOpen(true)}\n        ref={dateRangeSelectorRef}\n        aria-label=\"time range\"\n        aria-haspopup=\"true\"\n      >\n        <Typography className={classes.displayDate}>\n          {range.startDate === ' '\n            ? 'Select Period'\n            : `${range.startDate.split(' ')[2]} ${\n                range.startDate.split(' ')[1]\n              } ${range.startDate.split(' ')[3]} - ${\n                range.endDate.split(' ')[2]\n              } ${range.endDate.split(' ')[1]} ${range.endDate.split(' ')[3]}`}\n\n          <IconButton className={classes.rangeSelectorIcon}>\n            {isDateRangeSelectorPopoverOpen ? (\n              <KeyboardArrowDownIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </Typography>\n      </Button>\n\n      <div className={classes.addButton}>\n        <ButtonFilled\n          onClick={() => {\n            history.push({\n              pathname: '/analytics/dashboard/create',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          }}\n        >\n          <Typography className={classes.dateRangeDefault}>\n            {t('analyticsDashboard.dashboardTable.addDashboard')}\n          </Typography>\n        </ButtonFilled>\n      </div>\n      <DateRangeSelector\n        anchorEl={dateRangeSelectorRef.current as HTMLElement}\n        isOpen={isDateRangeSelectorPopoverOpen}\n        onClose={() => {\n          setDateRangeSelectorPopoverOpen(false);\n        }}\n        callbackToSetRange={CallbackFromRangeSelector}\n      />\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}