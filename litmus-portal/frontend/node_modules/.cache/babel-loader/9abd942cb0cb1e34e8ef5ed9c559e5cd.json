{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-unused-expressions */import{useQuery}from'@apollo/client';import React,{useEffect}from'react';import{useSelector}from'react-redux';import BackButton from'../../components/Button/BackButton';import Scaffold from'../../containers/layouts/Scaffold';import{LIST_DASHBOARD,LIST_DATASOURCE}from'../../graphql';import useActions from'../../redux/actions';import*as AlertActions from'../../redux/actions/alert';import{getProjectID}from'../../utils/getSearchParams';import DashboardStepper from'../../views/Analytics/ApplicationDashboards/Stepper';var ChooseAndConfigureDashboards=function ChooseAndConfigureDashboards(_ref){var _dataSourceList$ListD2;var configure=_ref.configure;var projectID=getProjectID();var selectedDashboard=useSelector(function(state){return state.selectDashboard;});var alert=useActions(AlertActions);alert.changeAlertState(false);// Apollo query to get the data source data\nvar _useQuery=useQuery(LIST_DATASOURCE,{variables:{projectID:projectID},fetchPolicy:'cache-and-network'}),dataSourceList=_useQuery.data;// Apollo query to get the dashboard data\nvar _useQuery2=useQuery(LIST_DASHBOARD,{variables:{projectID:projectID},fetchPolicy:'cache-and-network'}),dashboardList=_useQuery2.data;var _React$useState=React.useState({id:'',name:'',dashboardTypeID:'',dashboardTypeName:'',dataSourceType:'',dataSourceID:'',dataSourceURL:'',chaosEventQueryTemplate:'',chaosVerdictQueryTemplate:'',agentID:'',information:'',panelGroupMap:[],panelGroups:[],selectedPanelGroupMap:[],applicationMetadataMap:[]}),_React$useState2=_slicedToArray(_React$useState,2),dashboardVars=_React$useState2[0],setDashboardVars=_React$useState2[1];var getExistingPanelGroups=function getExistingPanelGroups(panelGroupsInput){var panelGroups=[];if(panelGroupsInput===null||panelGroupsInput===void 0?void 0:panelGroupsInput.length){panelGroupsInput.forEach(function(panelGroup){var panels=[];panelGroup.panels.forEach(function(panel){var promQueries=[];panel.prom_queries.forEach(function(promQuery){promQueries.push(_objectSpread({},promQuery));});var panelOption={points:panel.panel_options.points,grids:panel.panel_options.grids,left_axis:panel.panel_options.left_axis};panels.push(_objectSpread(_objectSpread({},panel),{},{panel_options:panelOption,prom_queries:promQueries,panel_id:panel.panel_id,created_at:panel.created_at,panel_group_id:panelGroup.panel_group_id,panel_group_name:panelGroup.panel_group_name}));});panelGroups.push({panel_group_id:panelGroup.panel_group_id,panel_group_name:panelGroup.panel_group_name,panels:panels});});}return panelGroups;};var getExistingPanelGroupMap=function getExistingPanelGroupMap(panelGroupsInput){var panelGroupMap=[];if(panelGroupsInput===null||panelGroupsInput===void 0?void 0:panelGroupsInput.length){panelGroupsInput.forEach(function(panelGroup){panelGroupMap.push({panel_group_id:panelGroup.panel_group_id,panel_group_name:panelGroup.panel_group_name,panels:panelGroup.panels});});}return panelGroupMap;};var getApplicationMetadataMap=function getApplicationMetadataMap(applicationMetadataMapResponse){var applicationMetadataMap=[];applicationMetadataMapResponse===null||applicationMetadataMapResponse===void 0?void 0:applicationMetadataMapResponse.forEach(function(applicationMetadata){var applications=[];applicationMetadata.applications.forEach(function(application){applications.push({kind:application.kind,names:application.names});});applicationMetadataMap.push({namespace:applicationMetadata.namespace,applications:applications});});return applicationMetadataMap;};var getSelectedDsURL=function getSelectedDsURL(selectedDsID){var _dataSourceList$ListD;var dsList=(_dataSourceList$ListD=dataSourceList===null||dataSourceList===void 0?void 0:dataSourceList.ListDataSource)!==null&&_dataSourceList$ListD!==void 0?_dataSourceList$ListD:[];var selectedDsURL='';dsList.forEach(function(ds){if(ds.ds_id===selectedDsID){selectedDsURL=ds.ds_url;}});return selectedDsURL;};useEffect(function(){if(configure===true){var _dashboardList$ListDa;dashboardList===null||dashboardList===void 0?void 0:(_dashboardList$ListDa=dashboardList.ListDashboard)===null||_dashboardList$ListDa===void 0?void 0:_dashboardList$ListDa.forEach(function(dashboardDetail){if(dashboardDetail.db_id===selectedDashboard.selectedDashboardID){setDashboardVars(_objectSpread(_objectSpread({},dashboardVars),{},{id:selectedDashboard.selectedDashboardID,name:dashboardDetail.db_name,dataSourceType:dashboardDetail.ds_type,dashboardTypeID:dashboardDetail.db_type_id,dashboardTypeName:dashboardDetail.db_type_name,dataSourceID:dashboardDetail.ds_id,dataSourceURL:getSelectedDsURL(dashboardDetail.ds_id),agentID:dashboardDetail.cluster_id,information:dashboardDetail.db_information,panelGroupMap:getExistingPanelGroupMap(dashboardDetail.panel_groups),panelGroups:getExistingPanelGroups(dashboardDetail.panel_groups),chaosEventQueryTemplate:dashboardDetail.chaos_event_query_template,chaosVerdictQueryTemplate:dashboardDetail.chaos_verdict_query_template,applicationMetadataMap:getApplicationMetadataMap(dashboardDetail.application_metadata_map)}));}});}},[dashboardList,dataSourceList]);return/*#__PURE__*/React.createElement(Scaffold,null,/*#__PURE__*/React.createElement(BackButton,null),/*#__PURE__*/React.createElement(DashboardStepper,{configure:configure,activePanelID:selectedDashboard.activePanelID,existingDashboardVars:dashboardVars,dataSourceList:(_dataSourceList$ListD2=dataSourceList===null||dataSourceList===void 0?void 0:dataSourceList.ListDataSource)!==null&&_dataSourceList$ListD2!==void 0?_dataSourceList$ListD2:[]}));};export default ChooseAndConfigureDashboards;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ChooseAndConfigureDashboards/index.tsx"],"names":["useQuery","React","useEffect","useSelector","BackButton","Scaffold","LIST_DASHBOARD","LIST_DATASOURCE","useActions","AlertActions","getProjectID","DashboardStepper","ChooseAndConfigureDashboards","configure","projectID","selectedDashboard","state","selectDashboard","alert","changeAlertState","variables","fetchPolicy","dataSourceList","data","dashboardList","useState","id","name","dashboardTypeID","dashboardTypeName","dataSourceType","dataSourceID","dataSourceURL","chaosEventQueryTemplate","chaosVerdictQueryTemplate","agentID","information","panelGroupMap","panelGroups","selectedPanelGroupMap","applicationMetadataMap","dashboardVars","setDashboardVars","getExistingPanelGroups","panelGroupsInput","length","forEach","panelGroup","panels","panel","promQueries","prom_queries","promQuery","push","panelOption","points","panel_options","grids","left_axis","panel_id","created_at","panel_group_id","panel_group_name","getExistingPanelGroupMap","getApplicationMetadataMap","applicationMetadataMapResponse","applicationMetadata","applications","application","kind","names","namespace","getSelectedDsURL","selectedDsID","dsList","ListDataSource","selectedDsURL","ds","ds_id","ds_url","ListDashboard","dashboardDetail","db_id","selectedDashboardID","db_name","ds_type","db_type_id","db_type_name","cluster_id","db_information","panel_groups","chaos_event_query_template","chaos_verdict_query_template","application_metadata_map","activePanelID"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport {\n  DashboardDetails,\n  PanelDetails,\n  PanelGroupDetails,\n  PromQueryDetails,\n} from '../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  ApplicationMetadataResponse,\n  DashboardList,\n  ListDashboardResponse,\n  ListDashboardVars,\n  PanelGroupResponse,\n  PanelOption,\n  PanelResponse,\n  Resource,\n  updatePanelGroupInput,\n} from '../../models/graphql/dashboardsDetails';\nimport {\n  DataSourceList,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../models/graphql/dataSourceDetails';\nimport useActions from '../../redux/actions';\nimport * as AlertActions from '../../redux/actions/alert';\nimport { RootState } from '../../redux/reducers';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport DashboardStepper from '../../views/Analytics/ApplicationDashboards/Stepper';\n\ninterface ChooseAndConfigureDashboardsProps {\n  configure: boolean;\n}\n\nconst ChooseAndConfigureDashboards: React.FC<ChooseAndConfigureDashboardsProps> =\n  ({ configure }) => {\n    const projectID = getProjectID();\n    const selectedDashboard = useSelector(\n      (state: RootState) => state.selectDashboard\n    );\n    const alert = useActions(AlertActions);\n    alert.changeAlertState(false);\n\n    // Apollo query to get the data source data\n    const { data: dataSourceList } = useQuery<\n      DataSourceList,\n      ListDataSourceVars\n    >(LIST_DATASOURCE, {\n      variables: { projectID },\n      fetchPolicy: 'cache-and-network',\n    });\n\n    // Apollo query to get the dashboard data\n    const { data: dashboardList } = useQuery<DashboardList, ListDashboardVars>(\n      LIST_DASHBOARD,\n      {\n        variables: { projectID },\n        fetchPolicy: 'cache-and-network',\n      }\n    );\n\n    const [dashboardVars, setDashboardVars] = React.useState<DashboardDetails>({\n      id: '',\n      name: '',\n      dashboardTypeID: '',\n      dashboardTypeName: '',\n      dataSourceType: '',\n      dataSourceID: '',\n      dataSourceURL: '',\n      chaosEventQueryTemplate: '',\n      chaosVerdictQueryTemplate: '',\n      agentID: '',\n      information: '',\n      panelGroupMap: [],\n      panelGroups: [],\n      selectedPanelGroupMap: [],\n      applicationMetadataMap: [],\n    });\n\n    const getExistingPanelGroups = (panelGroupsInput: PanelGroupResponse[]) => {\n      const panelGroups: PanelGroupDetails[] = [];\n      if (panelGroupsInput?.length) {\n        panelGroupsInput.forEach((panelGroup: PanelGroupResponse) => {\n          const panels: PanelDetails[] = [];\n          panelGroup.panels.forEach((panel: PanelResponse) => {\n            const promQueries: PromQueryDetails[] = [];\n            panel.prom_queries.forEach((promQuery) => {\n              promQueries.push({\n                ...promQuery,\n              });\n            });\n            const panelOption: PanelOption = {\n              points: panel.panel_options.points,\n              grids: panel.panel_options.grids,\n              left_axis: panel.panel_options.left_axis,\n            };\n            panels.push({\n              ...panel,\n              panel_options: panelOption,\n              prom_queries: promQueries,\n              panel_id: panel.panel_id,\n              created_at: panel.created_at,\n              panel_group_id: panelGroup.panel_group_id,\n              panel_group_name: panelGroup.panel_group_name,\n            });\n          });\n          panelGroups.push({\n            panel_group_id: panelGroup.panel_group_id,\n            panel_group_name: panelGroup.panel_group_name,\n            panels,\n          });\n        });\n      }\n      return panelGroups;\n    };\n\n    const getExistingPanelGroupMap = (\n      panelGroupsInput: PanelGroupResponse[]\n    ) => {\n      const panelGroupMap: updatePanelGroupInput[] = [];\n      if (panelGroupsInput?.length) {\n        panelGroupsInput.forEach((panelGroup: PanelGroupResponse) => {\n          panelGroupMap.push({\n            panel_group_id: panelGroup.panel_group_id,\n            panel_group_name: panelGroup.panel_group_name,\n            panels: panelGroup.panels,\n          });\n        });\n      }\n      return panelGroupMap;\n    };\n\n    const getApplicationMetadataMap = (\n      applicationMetadataMapResponse: ApplicationMetadataResponse[]\n    ) => {\n      const applicationMetadataMap: ApplicationMetadata[] = [];\n      applicationMetadataMapResponse?.forEach((applicationMetadata) => {\n        const applications: Resource[] = [];\n        applicationMetadata.applications.forEach((application) => {\n          applications.push({\n            kind: application.kind,\n            names: application.names,\n          });\n        });\n        applicationMetadataMap.push({\n          namespace: applicationMetadata.namespace,\n          applications,\n        });\n      });\n      return applicationMetadataMap;\n    };\n\n    const getSelectedDsURL = (selectedDsID: string) => {\n      const dsList: ListDataSourceResponse[] =\n        dataSourceList?.ListDataSource ?? [];\n      let selectedDsURL: string = '';\n      dsList.forEach((ds) => {\n        if (ds.ds_id === selectedDsID) {\n          selectedDsURL = ds.ds_url;\n        }\n      });\n      return selectedDsURL;\n    };\n\n    useEffect(() => {\n      if (configure === true) {\n        dashboardList?.ListDashboard?.forEach(\n          (dashboardDetail: ListDashboardResponse) => {\n            if (\n              dashboardDetail.db_id === selectedDashboard.selectedDashboardID\n            ) {\n              setDashboardVars({\n                ...dashboardVars,\n                id: selectedDashboard.selectedDashboardID,\n                name: dashboardDetail.db_name,\n                dataSourceType: dashboardDetail.ds_type,\n                dashboardTypeID: dashboardDetail.db_type_id,\n                dashboardTypeName: dashboardDetail.db_type_name,\n                dataSourceID: dashboardDetail.ds_id,\n                dataSourceURL: getSelectedDsURL(dashboardDetail.ds_id),\n                agentID: dashboardDetail.cluster_id,\n                information: dashboardDetail.db_information,\n                panelGroupMap: getExistingPanelGroupMap(\n                  dashboardDetail.panel_groups\n                ),\n                panelGroups: getExistingPanelGroups(\n                  dashboardDetail.panel_groups\n                ),\n                chaosEventQueryTemplate:\n                  dashboardDetail.chaos_event_query_template,\n                chaosVerdictQueryTemplate:\n                  dashboardDetail.chaos_verdict_query_template,\n                applicationMetadataMap: getApplicationMetadataMap(\n                  dashboardDetail.application_metadata_map\n                ),\n              });\n            }\n          }\n        );\n      }\n    }, [dashboardList, dataSourceList]);\n\n    return (\n      <Scaffold>\n        <BackButton />\n        <DashboardStepper\n          configure={configure}\n          activePanelID={selectedDashboard.activePanelID}\n          existingDashboardVars={dashboardVars}\n          dataSourceList={dataSourceList?.ListDataSource ?? []}\n        />\n      </Scaffold>\n    );\n  };\n\nexport default ChooseAndConfigureDashboards;\n"]},"metadata":{},"sourceType":"module"}