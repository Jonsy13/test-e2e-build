{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Targets/TargetCopy/index.tsx\";\n\nimport { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useStyles from './styles';\n\nvar TargetCopy = function TargetCopy() {\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      copying = _useState2[0],\n      setCopying = _useState2[1];\n\n  function fallbackCopyTextToClipboard(text) {\n    // eslint-disable-next-line no-alert\n    window.prompt('Copy to clipboard: Ctrl+C, Enter', text);\n  }\n\n  function copyTextToClipboard(text) {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n      return;\n    }\n\n    setCopying(true);\n    navigator.clipboard.writeText(text).catch(function (err) {\n      return console.error('Async: Could not copy text: ', err);\n    });\n    setTimeout(function () {\n      return setCopying(false);\n    }, 3000);\n  }\n\n  var command = 'litmusctl agent connect';\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, copying && /*#__PURE__*/React.createElement(Typography, {\n    className: classes.copiedDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, t('targets.copy.copying')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.commandContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.command,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"$ \", command), /*#__PURE__*/React.createElement(ButtonOutlined, {\n    startIcon: !copying ? /*#__PURE__*/React.createElement(\"img\", {\n      className: classes.copyIcon,\n      src: \"/icons/copy.svg\",\n      alt: \"copy\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(Done, {\n      className: classes.copyIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }),\n    onClick: function onClick() {\n      return copyTextToClipboard(command);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, copying ? /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, t('targets.copy.copied')) : /*#__PURE__*/React.createElement(Typography, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, t('targets.copy.copy')))));\n};\n\nexport default TargetCopy;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Targets/TargetCopy/index.tsx"],"names":["Typography","Done","ButtonOutlined","React","useState","useTranslation","useStyles","TargetCopy","classes","t","copying","setCopying","fallbackCopyTextToClipboard","text","window","prompt","copyTextToClipboard","navigator","clipboard","writeText","catch","err","console","error","setTimeout","command","root","copiedDiv","commandContainer","copyIcon"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAEA,IAAMC,UAAoB,GAAG,SAAvBA,UAAuB,GAAM;AACjC,MAAMC,OAAO,GAAGF,SAAS,EAAzB;;AACA,wBAAcD,cAAc,EAA5B;AAAA,MAAQI,CAAR,mBAAQA,CAAR;;AAEA,kBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,WAASC,2BAAT,CAAqCC,IAArC,EAAmD;AACjD;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,kCAAd,EAAkDF,IAAlD;AACD;;AAED,WAASG,mBAAT,CAA6BH,IAA7B,EAA2C;AACzC,QAAI,CAACI,SAAS,CAACC,SAAf,EAA0B;AACxBN,MAAAA,2BAA2B,CAACC,IAAD,CAA3B;AACA;AACD;;AACDF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,SAAS,CAACC,SAAV,CACGC,SADH,CACaN,IADb,EAEGO,KAFH,CAES,UAACC,GAAD;AAAA,aAASC,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,GAA9C,CAAT;AAAA,KAFT;AAIAG,IAAAA,UAAU,CAAC;AAAA,aAAMb,UAAU,CAAC,KAAD,CAAhB;AAAA,KAAD,EAA0B,IAA1B,CAAV;AACD;;AAED,MAAMc,OAAO,GAAG,yBAAhB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEjB,OAAO,CAACkB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,OAAO,iBACN,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEF,OAAO,CAACmB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,CAAC,CAAC,sBAAD,CADJ,CAFJ,eAME;AAAK,IAAA,SAAS,EAAED,OAAO,CAACoB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEpB,OAAO,CAACiB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2CA,OAA3C,CADF,eAEE,oBAAC,cAAD;AACE,IAAA,SAAS,EACP,CAACf,OAAD,gBACE;AACE,MAAA,SAAS,EAAEF,OAAO,CAACqB,QADrB;AAEE,MAAA,GAAG,EAAC,iBAFN;AAGE,MAAA,GAAG,EAAC,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAOE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAErB,OAAO,CAACqB,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATN;AAYE,IAAA,OAAO,EAAE;AAAA,aAAMb,mBAAmB,CAACS,OAAD,CAAzB;AAAA,KAZX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGf,OAAO,gBACN,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaD,CAAC,CAAC,qBAAD,CAAd,CADM,gBAGN,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaA,CAAC,CAAC,mBAAD,CAAd,CAjBJ,CAFF,CANF,CADF;AAgCD,CA1DD;;AA4DA,eAAeF,UAAf","sourcesContent":["import { Typography } from '@material-ui/core';\nimport Done from '@material-ui/icons/DoneAllTwoTone';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useStyles from './styles';\n\nconst TargetCopy: React.FC = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const [copying, setCopying] = useState(false);\n\n  function fallbackCopyTextToClipboard(text: string) {\n    // eslint-disable-next-line no-alert\n    window.prompt('Copy to clipboard: Ctrl+C, Enter', text);\n  }\n\n  function copyTextToClipboard(text: string) {\n    if (!navigator.clipboard) {\n      fallbackCopyTextToClipboard(text);\n      return;\n    }\n    setCopying(true);\n    navigator.clipboard\n      .writeText(text)\n      .catch((err) => console.error('Async: Could not copy text: ', err));\n\n    setTimeout(() => setCopying(false), 3000);\n  }\n\n  const command = 'litmusctl agent connect';\n\n  return (\n    <div className={classes.root}>\n      {copying && (\n        <Typography className={classes.copiedDiv}>\n          {t('targets.copy.copying')}\n        </Typography>\n      )}\n      <div className={classes.commandContainer}>\n        <Typography className={classes.command}>$ {command}</Typography>\n        <ButtonOutlined\n          startIcon={\n            !copying ? (\n              <img\n                className={classes.copyIcon}\n                src=\"/icons/copy.svg\"\n                alt=\"copy\"\n              />\n            ) : (\n              <Done className={classes.copyIcon} />\n            )\n          }\n          onClick={() => copyTextToClipboard(command)}\n        >\n          {copying ? (\n            <Typography>{t('targets.copy.copied')}</Typography>\n          ) : (\n            <Typography>{t('targets.copy.copy')}</Typography>\n          )}\n        </ButtonOutlined>\n      </div>\n    </div>\n  );\n};\n\nexport default TargetCopy;\n"]},"metadata":{},"sourceType":"module"}