{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"value\", \"index\"];\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { useLazyQuery } from '@apollo/client';\nimport { AppBar, Tabs, useTheme } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledTab } from '../../../../../../components/Tabs';\nimport { PROM_SERIES_LIST } from '../../../../../../graphql';\nimport QueryEditingWizard from './QueryEditingWizard';\nimport useStyles from './styles';\n\nvar TabPanel = function TabPanel(props) {\n  var children = props.children,\n      value = props.value,\n      index = props.index,\n      other = _objectWithoutProperties(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: \"scrollable-auto-tabpanel-\".concat(index),\n    \"aria-labelledby\": \"scrollable-auto-tab-\".concat(index)\n  }, other, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), value === index && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }\n  }, children));\n};\n\nvar a11yProps = function a11yProps(index) {\n  return {\n    id: \"scrollable-auto-tab-\".concat(index),\n    'aria-controls': \"scrollable-auto-tabpanel-\".concat(index)\n  };\n};\n\nvar EditPanelsWizard = function EditPanelsWizard(_ref) {\n  var _dashboardVars$dataSo, _dashboardDetails$sel9, _dashboardDetails$sel10, _dashboardDetails$sel11;\n\n  var configure = _ref.configure,\n      activeEditPanelID = _ref.activeEditPanelID,\n      dashboardVars = _ref.dashboardVars,\n      CallbackToSetPanels = _ref.CallbackToSetPanels;\n  var classes = useStyles();\n  var theme = useTheme();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      seriesList = _useState2[0],\n      setSeriesList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      panelGroupsList = _useState4[0],\n      setPanelGroupsList = _useState4[1];\n\n  var _useLazyQuery = useLazyQuery(PROM_SERIES_LIST, {\n    variables: {\n      prometheusDSInput: {\n        url: (_dashboardVars$dataSo = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo !== void 0 ? _dashboardVars$dataSo : '',\n        start: \"\".concat(new Date(moment.unix(Math.round(new Date().getTime() / 1000) - 900).format()).getTime() / 1000),\n        end: \"\".concat(new Date(moment.unix(Math.round(new Date().getTime() / 1000)).format()).getTime() / 1000)\n      }\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: function onCompleted(prometheusSeriesData) {\n      if (prometheusSeriesData) {\n        var _prometheusSeriesData;\n\n        var seriesValues = [];\n        (_prometheusSeriesData = prometheusSeriesData.GetPromSeriesList.seriesList) === null || _prometheusSeriesData === void 0 ? void 0 : _prometheusSeriesData.forEach(function (series) {\n          seriesValues.push({\n            name: series\n          });\n        });\n        setSeriesList(seriesValues);\n      }\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      getSeriesList = _useLazyQuery2[0];\n\n  var selectedDashboard = useSelector(function (state) {\n    return state.selectDashboard;\n  });\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tabValue = _React$useState2[0],\n      setTabValue = _React$useState2[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      update = _useState6[0],\n      setUpdate = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reload = _useState8[0],\n      setReload = _useState8[1];\n\n  var getPanelsByGroup = function getPanelsByGroup(name) {\n    var _dashboardVars$select;\n\n    var preSelectedPanels = [];\n    (_dashboardVars$select = dashboardVars.selectedPanelGroupMap) === null || _dashboardVars$select === void 0 ? void 0 : _dashboardVars$select.forEach(function (panelGroup) {\n      if (name === panelGroup.groupName) {\n        panelGroup.panels.forEach(function (panel) {\n          preSelectedPanels.push(panel);\n        });\n      }\n    });\n    return preSelectedPanels;\n  };\n\n  var getSelectedPanelGroups = function getSelectedPanelGroups() {\n    var _dashboardVars$select2;\n\n    var preSelectedPanelGroups = [];\n    (_dashboardVars$select2 = dashboardVars.selectedPanelGroupMap) === null || _dashboardVars$select2 === void 0 ? void 0 : _dashboardVars$select2.forEach(function (panelGroup) {\n      preSelectedPanelGroups.push(panelGroup.groupName);\n    });\n    var selectedPanelGroups = [];\n    selectedDashboard.dashboardJSON.panelGroups.forEach(function (panelGroup) {\n      if (preSelectedPanelGroups.includes(panelGroup.panel_group_name)) {\n        var selectedPanels = [];\n        var preSelectedPanels = getPanelsByGroup(panelGroup.panel_group_name);\n        panelGroup.panels.forEach(function (panel) {\n          if (preSelectedPanels.includes(panel.panel_name)) {\n            var _dashboardVars$dataSo2;\n\n            var promQueryList = [];\n            panel.prom_queries.forEach(function (promQuery) {\n              promQueryList.push({\n                hidden: false,\n                queryid: uuidv4(),\n                prom_query_name: promQuery.prom_query_name,\n                legend: promQuery.legend,\n                resolution: promQuery.resolution,\n                minstep: promQuery.minstep,\n                line: promQuery.line,\n                close_area: promQuery.close_area\n              });\n            });\n            selectedPanels.push({\n              panel_group_name: panelGroup.panel_group_name,\n              ds_url: (_dashboardVars$dataSo2 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo2 !== void 0 ? _dashboardVars$dataSo2 : '',\n              prom_queries: promQueryList,\n              panel_options: panel.panel_options,\n              panel_name: panel.panel_name,\n              y_axis_left: panel.y_axis_left,\n              y_axis_right: panel.y_axis_right,\n              x_axis_down: panel.x_axis_down,\n              unit: panel.unit\n            });\n          }\n        });\n        selectedPanelGroups.push({\n          panel_group_name: panelGroup.panel_group_name,\n          panels: selectedPanels\n        });\n      }\n    });\n    return selectedPanelGroups;\n  };\n\n  var _useState9 = useState({\n    panelGroups: dashboardVars.panelGroups && dashboardVars.panelGroups.length && configure ? dashboardVars.panelGroups : !configure && selectedDashboard.dashboardJSON ? getSelectedPanelGroups() : [],\n    selectedPanels: []\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dashboardDetails = _useState10[0],\n      setDashboardDetails = _useState10[1];\n\n  var generatePanelGroupsList = function generatePanelGroupsList(updatedSelectedPanels) {\n    var newPanelGroups = [];\n    var newPanelGroupOptions = [];\n    updatedSelectedPanels.forEach(function (panel) {\n      if (panel.panel_group_name && !newPanelGroups.includes(panel.panel_group_name)) {\n        newPanelGroups.push(panel.panel_group_name);\n        newPanelGroupOptions.push({\n          name: panel.panel_group_name\n        });\n      }\n    });\n    setPanelGroupsList(newPanelGroupOptions);\n  };\n\n  var getNewPanel = function getNewPanel() {\n    var _dashboardVars$dataSo3;\n\n    var newPanel = {\n      panel_id: '',\n      panel_group_id: '',\n      created_at: '',\n      panel_group_name: 'Untitled Group name',\n      ds_url: (_dashboardVars$dataSo3 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo3 !== void 0 ? _dashboardVars$dataSo3 : '',\n      prom_queries: [{\n        hidden: false,\n        queryid: uuidv4(),\n        prom_query_name: '',\n        legend: '',\n        resolution: '1/2',\n        minstep: '5',\n        line: true,\n        close_area: false\n      }],\n      panel_options: {\n        points: false,\n        grids: true,\n        left_axis: true\n      },\n      panel_name: 'Untitled Metric',\n      y_axis_left: '',\n      y_axis_right: '',\n      x_axis_down: '',\n      unit: ''\n    };\n    return newPanel;\n  };\n\n  var handleCreatePanel = function handleCreatePanel() {\n    var _dashboardDetails$sel;\n\n    var existingPanels = (_dashboardDetails$sel = dashboardDetails.selectedPanels) !== null && _dashboardDetails$sel !== void 0 ? _dashboardDetails$sel : [];\n    var newPanel = getNewPanel();\n    existingPanels.push(newPanel);\n    setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n      selectedPanels: existingPanels\n    }));\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  var handleChange = function handleChange(event, newValue) {\n    var _dashboardDetails$sel2;\n\n    if (newValue === ((_dashboardDetails$sel2 = dashboardDetails.selectedPanels) === null || _dashboardDetails$sel2 === void 0 ? void 0 : _dashboardDetails$sel2.length)) {\n      handleCreatePanel();\n    }\n\n    setTabValue(newValue);\n  };\n\n  var getAllSelectedPanels = function getAllSelectedPanels() {\n    var _dashboardDetails$pan;\n\n    var allSelectedPanelsWithActiveIndex = {\n      panels: [],\n      activeIndex: 0\n    };\n    var count = 0;\n    (_dashboardDetails$pan = dashboardDetails.panelGroups) === null || _dashboardDetails$pan === void 0 ? void 0 : _dashboardDetails$pan.forEach(function (panelGroup) {\n      panelGroup.panels.forEach(function (panel) {\n        var _panel$panel_id, _panel$panel_group_id, _panel$created_at, _panel$panel_group_na, _dashboardVars$dataSo4;\n\n        if (configure && panel.panel_id && activeEditPanelID !== '' && panel.panel_id === activeEditPanelID) {\n          allSelectedPanelsWithActiveIndex.activeIndex = count;\n        }\n\n        allSelectedPanelsWithActiveIndex.panels.push({\n          panel_id: (_panel$panel_id = panel.panel_id) !== null && _panel$panel_id !== void 0 ? _panel$panel_id : '',\n          panel_group_id: (_panel$panel_group_id = panel.panel_group_id) !== null && _panel$panel_group_id !== void 0 ? _panel$panel_group_id : '',\n          created_at: (_panel$created_at = panel.created_at) !== null && _panel$created_at !== void 0 ? _panel$created_at : '',\n          panel_group_name: (_panel$panel_group_na = panel.panel_group_name) !== null && _panel$panel_group_na !== void 0 ? _panel$panel_group_na : '',\n          ds_url: (_dashboardVars$dataSo4 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo4 !== void 0 ? _dashboardVars$dataSo4 : '',\n          prom_queries: panel.prom_queries,\n          panel_options: panel.panel_options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit\n        });\n        count += 1;\n      });\n    });\n    return allSelectedPanelsWithActiveIndex;\n  };\n\n  useEffect(function () {\n    var panelsWithActiveIndex = getAllSelectedPanels();\n    setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n      selectedPanels: panelsWithActiveIndex.panels\n    }));\n    generatePanelGroupsList(panelsWithActiveIndex.panels);\n    setTabValue(panelsWithActiveIndex.activeIndex);\n    getSeriesList();\n\n    if (dashboardVars.dashboardTypeID === 'custom' && !configure) {\n      handleCreatePanel();\n    } else {\n      setUpdate(true);\n    }\n  }, [dashboardDetails.panelGroups]);\n  useEffect(function () {\n    if (update) {\n      var _dashboardDetails$sel3;\n\n      CallbackToSetPanels((_dashboardDetails$sel3 = dashboardDetails.selectedPanels) !== null && _dashboardDetails$sel3 !== void 0 ? _dashboardDetails$sel3 : []);\n      setUpdate(false);\n    }\n\n    if (reload) {\n      setReload(false);\n    }\n  }, [update]);\n\n  var handleUpdatePanel = function handleUpdatePanel(panelVars, index) {\n    var _dashboardDetails$sel4;\n\n    var existingPanels = (_dashboardDetails$sel4 = dashboardDetails.selectedPanels) !== null && _dashboardDetails$sel4 !== void 0 ? _dashboardDetails$sel4 : [];\n    existingPanels[index] = panelVars;\n    setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n      selectedPanels: existingPanels\n    }));\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  var handleDeletePanel = function handleDeletePanel(index) {\n    var _dashboardDetails$sel5, _dashboardDetails$sel6;\n\n    var numberOfPanels = (_dashboardDetails$sel5 = (_dashboardDetails$sel6 = dashboardDetails.selectedPanels) === null || _dashboardDetails$sel6 === void 0 ? void 0 : _dashboardDetails$sel6.length) !== null && _dashboardDetails$sel5 !== void 0 ? _dashboardDetails$sel5 : 0;\n\n    if (index !== 0 || numberOfPanels > 1) {\n      var _dashboardDetails$sel7;\n\n      var existingPanels = (_dashboardDetails$sel7 = dashboardDetails.selectedPanels) !== null && _dashboardDetails$sel7 !== void 0 ? _dashboardDetails$sel7 : [];\n      existingPanels.splice(index, 1);\n      setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n        selectedPanels: existingPanels\n      }));\n      generatePanelGroupsList(existingPanels);\n\n      if (index > 0) {\n        setTabValue(index - 1);\n      } else {\n        setReload(true);\n      }\n\n      setUpdate(true);\n    }\n  };\n\n  var handleDiscardChanges = function handleDiscardChanges(index) {\n    var _dashboardDetails$sel8;\n\n    setReload(true);\n    var existingPanels = (_dashboardDetails$sel8 = dashboardDetails.selectedPanels) !== null && _dashboardDetails$sel8 !== void 0 ? _dashboardDetails$sel8 : [];\n    var panelGroupList = [];\n\n    if (configure) {\n      var _dashboardVars$panelG;\n\n      panelGroupList = (_dashboardVars$panelG = dashboardVars.panelGroupMap) !== null && _dashboardVars$panelG !== void 0 ? _dashboardVars$panelG : [];\n    } else {\n      panelGroupList = dashboardVars.dashboardTypeID !== 'custom' ? selectedDashboard.dashboardJSON.panelGroups : [];\n    }\n\n    panelGroupList.forEach(function (panelGroup) {\n      panelGroup.panels.forEach(function (selectedPanel) {\n        if (configure && selectedPanel.panel_id === existingPanels[index].panel_id) {\n          var _selectedPanel$panel_, _panelGroup$panel_gro, _selectedPanel$create, _dashboardVars$dataSo5;\n\n          var existingPromQueries = [];\n          selectedPanel.prom_queries.forEach(function (promQuery) {\n            existingPromQueries.push({\n              hidden: false,\n              queryid: promQuery.queryid,\n              prom_query_name: promQuery.prom_query_name,\n              legend: promQuery.legend,\n              resolution: promQuery.resolution,\n              minstep: promQuery.minstep,\n              line: promQuery.line,\n              close_area: promQuery.close_area\n            });\n          });\n          var existingPanelOptions = {\n            points: selectedPanel.panel_options.points,\n            grids: selectedPanel.panel_options.grids,\n            left_axis: selectedPanel.panel_options.left_axis\n          };\n          existingPanels[index] = {\n            panel_id: (_selectedPanel$panel_ = selectedPanel.panel_id) !== null && _selectedPanel$panel_ !== void 0 ? _selectedPanel$panel_ : '',\n            panel_group_id: (_panelGroup$panel_gro = panelGroup.panel_group_id) !== null && _panelGroup$panel_gro !== void 0 ? _panelGroup$panel_gro : '',\n            created_at: (_selectedPanel$create = selectedPanel.created_at) !== null && _selectedPanel$create !== void 0 ? _selectedPanel$create : '',\n            panel_group_name: panelGroup.panel_group_name,\n            ds_url: (_dashboardVars$dataSo5 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo5 !== void 0 ? _dashboardVars$dataSo5 : '',\n            prom_queries: existingPromQueries,\n            panel_options: existingPanelOptions,\n            panel_name: selectedPanel.panel_name,\n            y_axis_left: selectedPanel.y_axis_left,\n            y_axis_right: selectedPanel.y_axis_right,\n            x_axis_down: selectedPanel.x_axis_down,\n            unit: selectedPanel.unit\n          };\n        } else if (!configure && selectedPanel.panel_name === existingPanels[index].panel_name) {\n          var _dashboardVars$dataSo6;\n\n          var initialPromQueries = [];\n          selectedPanel.prom_queries.forEach(function (prom_query) {\n            initialPromQueries.push({\n              hidden: false,\n              queryid: uuidv4(),\n              prom_query_name: prom_query.prom_query_name,\n              legend: prom_query.legend,\n              resolution: prom_query.resolution,\n              minstep: prom_query.minstep,\n              line: prom_query.line,\n              close_area: prom_query.close_area\n            });\n          });\n          existingPanels[index] = {\n            ds_url: (_dashboardVars$dataSo6 = dashboardVars.dataSourceURL) !== null && _dashboardVars$dataSo6 !== void 0 ? _dashboardVars$dataSo6 : '',\n            prom_queries: initialPromQueries,\n            panel_group_name: panelGroup.panel_group_name,\n            panel_options: selectedPanel.panel_options,\n            panel_name: selectedPanel.panel_name,\n            y_axis_left: selectedPanel.y_axis_left,\n            y_axis_right: selectedPanel.y_axis_right,\n            x_axis_down: selectedPanel.x_axis_down,\n            unit: selectedPanel.unit\n          };\n        }\n      });\n    });\n\n    if (!configure && dashboardVars.dashboardTypeID === 'custom') {\n      existingPanels[index] = getNewPanel();\n    }\n\n    setDashboardDetails(_objectSpread(_objectSpread({}, dashboardDetails), {}, {\n      selectedPanels: existingPanels\n    }));\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  useEffect(function () {\n    var _dashboardDetails$pan2;\n\n    if (configure && selectedDashboard.activePanelID !== '' && ((_dashboardDetails$pan2 = dashboardDetails.panelGroups) === null || _dashboardDetails$pan2 === void 0 ? void 0 : _dashboardDetails$pan2.length) === 0 && dashboardVars.panelGroups && dashboardVars.panelGroups.length !== 0) {\n      setDashboardDetails({\n        panelGroups: dashboardVars.panelGroups,\n        selectedPanels: []\n      });\n    }\n  }, [dashboardVars]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    color: \"default\",\n    className: classes.appBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: tabValue,\n    onChange: handleChange,\n    TabIndicatorProps: {\n      style: {\n        backgroundColor: theme.palette.primary.main\n      }\n    },\n    variant: \"scrollable\",\n    scrollButtons: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 9\n    }\n  }, (_dashboardDetails$sel9 = dashboardDetails.selectedPanels) === null || _dashboardDetails$sel9 === void 0 ? void 0 : _dashboardDetails$sel9.map(function (panel, index) {\n    return /*#__PURE__*/React.createElement(StyledTab, Object.assign({\n      label: panel.panel_name\n    }, a11yProps(index), {\n      key: \"tab-\".concat(panel.panel_group_name, \"-\").concat(panel.panel_name),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 13\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(StyledTab, Object.assign({\n    label: t('analyticsDashboard.applicationDashboards.tuneTheQueries.addMetric')\n  }, a11yProps((_dashboardDetails$sel10 = dashboardDetails.selectedPanels) === null || _dashboardDetails$sel10 === void 0 ? void 0 : _dashboardDetails$sel10.length), {\n    key: \"tab-addMetric\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 11\n    }\n  })))), !reload && ((_dashboardDetails$sel11 = dashboardDetails.selectedPanels) === null || _dashboardDetails$sel11 === void 0 ? void 0 : _dashboardDetails$sel11.map(function (panel, index) {\n    var _dashboardVars$applic;\n\n    return /*#__PURE__*/React.createElement(TabPanel, {\n      value: tabValue,\n      index: index,\n      key: \"tab-panel-\".concat(panel.panel_name),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(QueryEditingWizard, {\n      panelVars: panel,\n      selectedApps: (_dashboardVars$applic = dashboardVars.applicationMetadataMap) !== null && _dashboardVars$applic !== void 0 ? _dashboardVars$applic : [],\n      seriesList: seriesList,\n      panelGroupsList: panelGroupsList,\n      index: index,\n      handleUpdatePanel: handleUpdatePanel,\n      handleDeletePanel: handleDeletePanel,\n      handleDiscardChanges: handleDiscardChanges,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 13\n      }\n    }));\n  })));\n};\n\nexport default EditPanelsWizard;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboards/Steps/TuneTheQueries/EditPanelsWizard/index.tsx"],"names":["useLazyQuery","AppBar","Tabs","useTheme","moment","React","useEffect","useState","useTranslation","useSelector","v4","uuidv4","StyledTab","PROM_SERIES_LIST","QueryEditingWizard","useStyles","TabPanel","props","children","value","index","other","a11yProps","id","EditPanelsWizard","configure","activeEditPanelID","dashboardVars","CallbackToSetPanels","classes","theme","t","seriesList","setSeriesList","panelGroupsList","setPanelGroupsList","variables","prometheusDSInput","url","dataSourceURL","start","Date","unix","Math","round","getTime","format","end","fetchPolicy","onCompleted","prometheusSeriesData","seriesValues","GetPromSeriesList","forEach","series","push","name","getSeriesList","selectedDashboard","state","selectDashboard","tabValue","setTabValue","update","setUpdate","reload","setReload","getPanelsByGroup","preSelectedPanels","selectedPanelGroupMap","panelGroup","groupName","panels","panel","getSelectedPanelGroups","preSelectedPanelGroups","selectedPanelGroups","dashboardJSON","panelGroups","includes","panel_group_name","selectedPanels","panel_name","promQueryList","prom_queries","promQuery","hidden","queryid","prom_query_name","legend","resolution","minstep","line","close_area","ds_url","panel_options","y_axis_left","y_axis_right","x_axis_down","unit","length","dashboardDetails","setDashboardDetails","generatePanelGroupsList","updatedSelectedPanels","newPanelGroups","newPanelGroupOptions","getNewPanel","newPanel","panel_id","panel_group_id","created_at","points","grids","left_axis","handleCreatePanel","existingPanels","handleChange","event","newValue","getAllSelectedPanels","allSelectedPanelsWithActiveIndex","activeIndex","count","panelsWithActiveIndex","dashboardTypeID","handleUpdatePanel","panelVars","handleDeletePanel","numberOfPanels","splice","handleDiscardChanges","panelGroupList","panelGroupMap","selectedPanel","existingPromQueries","existingPanelOptions","initialPromQueries","prom_query","activePanelID","appBar","style","backgroundColor","palette","primary","main","map","applicationMetadataMap"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { useLazyQuery } from '@apollo/client';\nimport { AppBar, Tabs, useTheme } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledTab } from '../../../../../../components/Tabs';\nimport { PROM_SERIES_LIST } from '../../../../../../graphql';\nimport {\n  DashboardDetails,\n  PanelDetails,\n  PanelGroupDetails,\n  PromQueryDetails,\n} from '../../../../../../models/dashboardsData';\nimport { PanelOption } from '../../../../../../models/graphql/dashboardsDetails';\nimport {\n  PrometheusSeriesListQueryVars,\n  PrometheusSeriesListResponse,\n} from '../../../../../../models/graphql/prometheus';\nimport { RootState } from '../../../../../../redux/reducers';\nimport QueryEditingWizard from './QueryEditingWizard';\nimport useStyles from './styles';\n\ninterface TabPanelProps {\n  children: React.ReactNode;\n  index: any;\n  value: any;\n}\n\ninterface Option {\n  name: string;\n  [index: string]: any;\n}\n\ninterface EditPanelsWizardProps {\n  configure: boolean;\n  activeEditPanelID: string;\n  dashboardVars: DashboardDetails;\n  CallbackToSetPanels: (panels: PanelDetails[]) => void;\n}\n\ninterface SelectedPanelsWithActiveIndex {\n  panels: PanelDetails[];\n  activeIndex: number;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <div>{children}</div>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst EditPanelsWizard: React.FC<EditPanelsWizardProps> = ({\n  configure,\n  activeEditPanelID,\n  dashboardVars,\n  CallbackToSetPanels,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { t } = useTranslation();\n  const [seriesList, setSeriesList] = useState<Array<Option>>([]);\n  const [panelGroupsList, setPanelGroupsList] = useState<Array<Option>>([]);\n  const [getSeriesList] = useLazyQuery<\n    PrometheusSeriesListResponse,\n    PrometheusSeriesListQueryVars\n  >(PROM_SERIES_LIST, {\n    variables: {\n      prometheusDSInput: {\n        url: dashboardVars.dataSourceURL ?? '',\n        start: `${\n          new Date(\n            moment.unix(Math.round(new Date().getTime() / 1000) - 900).format()\n          ).getTime() / 1000\n        }`,\n        end: `${\n          new Date(\n            moment.unix(Math.round(new Date().getTime() / 1000)).format()\n          ).getTime() / 1000\n        }`,\n      },\n    },\n    fetchPolicy: 'network-only',\n    onCompleted: (prometheusSeriesData) => {\n      if (prometheusSeriesData) {\n        const seriesValues: Array<Option> = [];\n        prometheusSeriesData.GetPromSeriesList.seriesList?.forEach((series) => {\n          seriesValues.push({ name: series });\n        });\n        setSeriesList(seriesValues);\n      }\n    },\n  });\n\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n  const [tabValue, setTabValue] = React.useState<number>(0);\n  const [update, setUpdate] = useState(false);\n  const [reload, setReload] = useState(false);\n\n  const getPanelsByGroup = (name: string) => {\n    const preSelectedPanels: string[] = [];\n    dashboardVars.selectedPanelGroupMap?.forEach((panelGroup) => {\n      if (name === panelGroup.groupName) {\n        panelGroup.panels.forEach((panel) => {\n          preSelectedPanels.push(panel);\n        });\n      }\n    });\n    return preSelectedPanels;\n  };\n\n  const getSelectedPanelGroups = () => {\n    const preSelectedPanelGroups: string[] = [];\n    dashboardVars.selectedPanelGroupMap?.forEach((panelGroup) => {\n      preSelectedPanelGroups.push(panelGroup.groupName);\n    });\n    const selectedPanelGroups: PanelGroupDetails[] = [];\n    selectedDashboard.dashboardJSON.panelGroups.forEach(\n      (panelGroup: PanelGroupDetails) => {\n        if (preSelectedPanelGroups.includes(panelGroup.panel_group_name)) {\n          const selectedPanels: PanelDetails[] = [];\n          const preSelectedPanels: string[] = getPanelsByGroup(\n            panelGroup.panel_group_name\n          );\n          panelGroup.panels.forEach((panel: PanelDetails) => {\n            if (preSelectedPanels.includes(panel.panel_name)) {\n              const promQueryList: PromQueryDetails[] = [];\n              panel.prom_queries.forEach((promQuery) => {\n                promQueryList.push({\n                  hidden: false,\n                  queryid: uuidv4(),\n                  prom_query_name: promQuery.prom_query_name,\n                  legend: promQuery.legend,\n                  resolution: promQuery.resolution,\n                  minstep: promQuery.minstep,\n                  line: promQuery.line,\n                  close_area: promQuery.close_area,\n                });\n              });\n              selectedPanels.push({\n                panel_group_name: panelGroup.panel_group_name,\n                ds_url: dashboardVars.dataSourceURL ?? '',\n                prom_queries: promQueryList,\n                panel_options: panel.panel_options,\n                panel_name: panel.panel_name,\n                y_axis_left: panel.y_axis_left,\n                y_axis_right: panel.y_axis_right,\n                x_axis_down: panel.x_axis_down,\n                unit: panel.unit,\n              });\n            }\n          });\n          selectedPanelGroups.push({\n            panel_group_name: panelGroup.panel_group_name,\n            panels: selectedPanels,\n          });\n        }\n      }\n    );\n    return selectedPanelGroups;\n  };\n\n  const [dashboardDetails, setDashboardDetails] = useState<DashboardDetails>({\n    panelGroups:\n      dashboardVars.panelGroups && dashboardVars.panelGroups.length && configure\n        ? dashboardVars.panelGroups\n        : !configure && selectedDashboard.dashboardJSON\n        ? getSelectedPanelGroups()\n        : [],\n    selectedPanels: [],\n  });\n\n  const generatePanelGroupsList = (updatedSelectedPanels: PanelDetails[]) => {\n    const newPanelGroups: string[] = [];\n    const newPanelGroupOptions: Array<Option> = [];\n    updatedSelectedPanels.forEach((panel) => {\n      if (\n        panel.panel_group_name &&\n        !newPanelGroups.includes(panel.panel_group_name)\n      ) {\n        newPanelGroups.push(panel.panel_group_name);\n        newPanelGroupOptions.push({ name: panel.panel_group_name });\n      }\n    });\n    setPanelGroupsList(newPanelGroupOptions);\n  };\n\n  const getNewPanel = () => {\n    const newPanel: PanelDetails = {\n      panel_id: '',\n      panel_group_id: '',\n      created_at: '',\n      panel_group_name: 'Untitled Group name',\n      ds_url: dashboardVars.dataSourceURL ?? '',\n      prom_queries: [\n        {\n          hidden: false,\n          queryid: uuidv4(),\n          prom_query_name: '',\n          legend: '',\n          resolution: '1/2',\n          minstep: '5',\n          line: true,\n          close_area: false,\n        },\n      ],\n      panel_options: {\n        points: false,\n        grids: true,\n        left_axis: true,\n      },\n      panel_name: 'Untitled Metric',\n      y_axis_left: '',\n      y_axis_right: '',\n      x_axis_down: '',\n      unit: '',\n    };\n\n    return newPanel;\n  };\n\n  const handleCreatePanel = () => {\n    const existingPanels: PanelDetails[] =\n      dashboardDetails.selectedPanels ?? [];\n    const newPanel = getNewPanel();\n    existingPanels.push(newPanel);\n    setDashboardDetails({\n      ...dashboardDetails,\n      selectedPanels: existingPanels,\n    });\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    if (newValue === dashboardDetails.selectedPanels?.length) {\n      handleCreatePanel();\n    }\n    setTabValue(newValue);\n  };\n\n  const getAllSelectedPanels = () => {\n    const allSelectedPanelsWithActiveIndex: SelectedPanelsWithActiveIndex = {\n      panels: [],\n      activeIndex: 0,\n    };\n    let count = 0;\n    dashboardDetails.panelGroups?.forEach((panelGroup) => {\n      panelGroup.panels.forEach((panel) => {\n        if (\n          configure &&\n          panel.panel_id &&\n          activeEditPanelID !== '' &&\n          panel.panel_id === activeEditPanelID\n        ) {\n          allSelectedPanelsWithActiveIndex.activeIndex = count;\n        }\n        allSelectedPanelsWithActiveIndex.panels.push({\n          panel_id: panel.panel_id ?? '',\n          panel_group_id: panel.panel_group_id ?? '',\n          created_at: panel.created_at ?? '',\n          panel_group_name: panel.panel_group_name ?? '',\n          ds_url: dashboardVars.dataSourceURL ?? '',\n          prom_queries: panel.prom_queries,\n          panel_options: panel.panel_options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        });\n        count += 1;\n      });\n    });\n    return allSelectedPanelsWithActiveIndex;\n  };\n\n  useEffect(() => {\n    const panelsWithActiveIndex = getAllSelectedPanels();\n    setDashboardDetails({\n      ...dashboardDetails,\n      selectedPanels: panelsWithActiveIndex.panels,\n    });\n    generatePanelGroupsList(panelsWithActiveIndex.panels);\n    setTabValue(panelsWithActiveIndex.activeIndex);\n    getSeriesList();\n    if (dashboardVars.dashboardTypeID === 'custom' && !configure) {\n      handleCreatePanel();\n    } else {\n      setUpdate(true);\n    }\n  }, [dashboardDetails.panelGroups]);\n\n  useEffect(() => {\n    if (update) {\n      CallbackToSetPanels(dashboardDetails.selectedPanels ?? []);\n      setUpdate(false);\n    }\n    if (reload) {\n      setReload(false);\n    }\n  }, [update]);\n\n  const handleUpdatePanel = (panelVars: PanelDetails, index: number) => {\n    const existingPanels: PanelDetails[] =\n      dashboardDetails.selectedPanels ?? [];\n    existingPanels[index] = panelVars;\n    setDashboardDetails({\n      ...dashboardDetails,\n      selectedPanels: existingPanels,\n    });\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  const handleDeletePanel = (index: number) => {\n    const numberOfPanels: number = dashboardDetails.selectedPanels?.length ?? 0;\n    if (index !== 0 || numberOfPanels > 1) {\n      const existingPanels: PanelDetails[] =\n        dashboardDetails.selectedPanels ?? [];\n      existingPanels.splice(index, 1);\n      setDashboardDetails({\n        ...dashboardDetails,\n        selectedPanels: existingPanels,\n      });\n      generatePanelGroupsList(existingPanels);\n      if (index > 0) {\n        setTabValue(index - 1);\n      } else {\n        setReload(true);\n      }\n      setUpdate(true);\n    }\n  };\n\n  const handleDiscardChanges = (index: number) => {\n    setReload(true);\n    const existingPanels: PanelDetails[] =\n      dashboardDetails.selectedPanels ?? [];\n    let panelGroupList: PanelGroupDetails[] = [];\n    if (configure) {\n      panelGroupList = dashboardVars.panelGroupMap ?? [];\n    } else {\n      panelGroupList =\n        dashboardVars.dashboardTypeID !== 'custom'\n          ? selectedDashboard.dashboardJSON.panelGroups\n          : [];\n    }\n    panelGroupList.forEach((panelGroup) => {\n      panelGroup.panels.forEach((selectedPanel) => {\n        if (\n          configure &&\n          selectedPanel.panel_id === existingPanels[index].panel_id\n        ) {\n          const existingPromQueries: PromQueryDetails[] = [];\n          selectedPanel.prom_queries.forEach((promQuery) => {\n            existingPromQueries.push({\n              hidden: false,\n              queryid: promQuery.queryid,\n              prom_query_name: promQuery.prom_query_name,\n              legend: promQuery.legend,\n              resolution: promQuery.resolution,\n              minstep: promQuery.minstep,\n              line: promQuery.line,\n              close_area: promQuery.close_area,\n            });\n          });\n          const existingPanelOptions: PanelOption = {\n            points: selectedPanel.panel_options.points,\n            grids: selectedPanel.panel_options.grids,\n            left_axis: selectedPanel.panel_options.left_axis,\n          };\n          existingPanels[index] = {\n            panel_id: selectedPanel.panel_id ?? '',\n            panel_group_id: panelGroup.panel_group_id ?? '',\n            created_at: selectedPanel.created_at ?? '',\n            panel_group_name: panelGroup.panel_group_name,\n            ds_url: dashboardVars.dataSourceURL ?? '',\n            prom_queries: existingPromQueries,\n            panel_options: existingPanelOptions,\n            panel_name: selectedPanel.panel_name,\n            y_axis_left: selectedPanel.y_axis_left,\n            y_axis_right: selectedPanel.y_axis_right,\n            x_axis_down: selectedPanel.x_axis_down,\n            unit: selectedPanel.unit,\n          };\n        } else if (\n          !configure &&\n          selectedPanel.panel_name === existingPanels[index].panel_name\n        ) {\n          const initialPromQueries: PromQueryDetails[] = [];\n          selectedPanel.prom_queries.forEach((prom_query) => {\n            initialPromQueries.push({\n              hidden: false,\n              queryid: uuidv4(),\n              prom_query_name: prom_query.prom_query_name,\n              legend: prom_query.legend,\n              resolution: prom_query.resolution,\n              minstep: prom_query.minstep,\n              line: prom_query.line,\n              close_area: prom_query.close_area,\n            });\n          });\n          existingPanels[index] = {\n            ds_url: dashboardVars.dataSourceURL ?? '',\n            prom_queries: initialPromQueries,\n            panel_group_name: panelGroup.panel_group_name,\n            panel_options: selectedPanel.panel_options,\n            panel_name: selectedPanel.panel_name,\n            y_axis_left: selectedPanel.y_axis_left,\n            y_axis_right: selectedPanel.y_axis_right,\n            x_axis_down: selectedPanel.x_axis_down,\n            unit: selectedPanel.unit,\n          };\n        }\n      });\n    });\n    if (!configure && dashboardVars.dashboardTypeID === 'custom') {\n      existingPanels[index] = getNewPanel();\n    }\n    setDashboardDetails({\n      ...dashboardDetails,\n      selectedPanels: existingPanels,\n    });\n    generatePanelGroupsList(existingPanels);\n    setUpdate(true);\n  };\n\n  useEffect(() => {\n    if (\n      configure &&\n      selectedDashboard.activePanelID !== '' &&\n      dashboardDetails.panelGroups?.length === 0 &&\n      dashboardVars.panelGroups &&\n      dashboardVars.panelGroups.length !== 0\n    ) {\n      setDashboardDetails({\n        panelGroups: dashboardVars.panelGroups,\n        selectedPanels: [],\n      });\n    }\n  }, [dashboardVars]);\n\n  return (\n    <div>\n      <AppBar position=\"static\" color=\"default\" className={classes.appBar}>\n        <Tabs\n          value={tabValue}\n          onChange={handleChange}\n          TabIndicatorProps={{\n            style: {\n              backgroundColor: theme.palette.primary.main,\n            },\n          }}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          {dashboardDetails.selectedPanels?.map((panel, index) => (\n            <StyledTab\n              label={panel.panel_name}\n              {...a11yProps(index)}\n              key={`tab-${panel.panel_group_name}-${panel.panel_name}`}\n            />\n          ))}\n          <StyledTab\n            label={t(\n              'analyticsDashboard.applicationDashboards.tuneTheQueries.addMetric'\n            )}\n            {...a11yProps(dashboardDetails.selectedPanels?.length)}\n            key=\"tab-addMetric\"\n          />\n        </Tabs>\n      </AppBar>\n\n      {!reload &&\n        dashboardDetails.selectedPanels?.map((panel, index) => (\n          <TabPanel\n            value={tabValue}\n            index={index}\n            key={`tab-panel-${panel.panel_name}`}\n          >\n            <QueryEditingWizard\n              panelVars={panel}\n              selectedApps={dashboardVars.applicationMetadataMap ?? []}\n              seriesList={seriesList}\n              panelGroupsList={panelGroupsList}\n              index={index}\n              handleUpdatePanel={handleUpdatePanel}\n              handleDeletePanel={handleDeletePanel}\n              handleDiscardChanges={handleDiscardChanges}\n            />\n          </TabPanel>\n        ))}\n    </div>\n  );\n};\nexport default EditPanelsWizard;\n"]},"metadata":{},"sourceType":"module"}