{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonTable/TableToolbar.tsx\";\n\nimport { Avatar, Button, FormControl, IconButton, InputAdornment, InputBase, InputLabel, MenuItem, OutlinedInput, Select, Typography } from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\nvar TableToolBar = function TableToolBar(_ref) {\n  var numSelected = _ref.numSelected,\n      handleSearch = _ref.handleSearch,\n      searchToken = _ref.searchToken,\n      clusters = _ref.clusters,\n      callbackToSetCluster = _ref.callbackToSetCluster,\n      callbackToSetRange = _ref.callbackToSetRange,\n      callbackToCompare = _ref.callbackToCompare,\n      callbackToExport = _ref.callbackToExport,\n      comparisonState = _ref.comparisonState,\n      reInitialize = _ref.reInitialize;\n  var classes = useStyles();\n  var outlinedInputClasses = useOutlinedInputStyles();\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState('All'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cluster = _React$useState2[0],\n      setCluster = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      compare = _React$useState4[0],\n      setCompare = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    startDate: ' ',\n    endDate: ' '\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      range = _React$useState6[0],\n      setRange = _React$useState6[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDateRangeSelectorPopoverOpen = _useState2[0],\n      setDateRangeSelectorPopoverOpen = _useState2[1];\n\n  var dateRangeSelectorRef = useRef(null);\n\n  var handleClusterChange = function handleClusterChange(event) {\n    setCluster(event.target.value);\n    callbackToSetCluster(event.target.value);\n  };\n\n  var CallbackFromRangeSelector = function CallbackFromRangeSelector(selectedStartDate, selectedEndDate) {\n    setRange({\n      startDate: selectedStartDate,\n      endDate: selectedEndDate\n    });\n    callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2], \" \").concat(selectedStartDate.split(' ')[1], \" \").concat(selectedStartDate.split(' ')[3])), \"\".concat(\"\".concat(selectedEndDate.split(' ')[2], \" \").concat(selectedEndDate.split(' ')[1], \" \").concat(selectedEndDate.split(' ')[3])));\n  };\n\n  var handleClick = function handleClick() {\n    setCompare(true);\n    callbackToCompare(true);\n  };\n\n  var handleExport = function handleExport() {\n    callbackToExport(true);\n  };\n\n  var reInitializer = function reInitializer() {\n    setRange({\n      startDate: ' ',\n      endDate: ' '\n    });\n    setCluster('All');\n  };\n\n  useEffect(function () {\n    if (comparisonState === false || reInitialize === true) {\n      reInitializer();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputBase, {\n    id: \"input-with-icon-adornment\",\n    placeholder: \"Search\",\n    className: classes.search,\n    value: searchToken,\n    onChange: handleSearch,\n    classes: {\n      input: classes.input\n    },\n    startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"start\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    })),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), numSelected > 0 && comparisonState === false ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.markStyleCorrect,\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"\\u2713\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"div\",\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"\\xA0 \", numSelected, ' ', numSelected === 1 ? t('analytics.workflowSelected') : t('analytics.workflowsSelected'), ' ', \"\\xA0 \\u2003\"))) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classes.selectDate,\n    onClick: function onClick() {\n      return setDateRangeSelectorPopoverOpen(true);\n    },\n    ref: dateRangeSelectorRef,\n    \"aria-label\": \"time range\",\n    \"aria-haspopup\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.displayDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, range.startDate === ' ' ? 'Select Period' : \"\".concat(range.startDate.split(' ')[2], \" \").concat(range.startDate.split(' ')[1], \" \").concat(range.startDate.split(' ')[3], \" - \").concat(range.endDate.split(' ')[2], \" \").concat(range.endDate.split(' ')[1], \" \").concat(range.endDate.split(' ')[3]), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.rangeSelectorIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, isDateRangeSelectorPopoverOpen ? /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(ChevronRightIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, t('analytics.targetCluster')), /*#__PURE__*/React.createElement(Select, {\n    label: \"Target cluster\",\n    value: cluster,\n    onChange: handleClusterChange,\n    className: classes.selectText,\n    input: /*#__PURE__*/React.createElement(OutlinedInput, {\n      classes: outlinedInputClasses,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 18\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"All\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }, \"All\"), clusters.map(function (cluster) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(cluster, \"-litmusDashboard-workflowComparison-toolBar\"),\n      value: cluster,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, cluster);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.featureButtons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, compare === false || comparisonState === false ? /*#__PURE__*/React.createElement(ButtonOutlined, {\n    disabled: !(numSelected > 1),\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.dateRangeDefault,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, t('analytics.compareWorkflows'))) : /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: handleExport,\n    disabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.export,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.exportIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DescriptionOutlinedIcon, {\n    htmlColor: palette.primary.main,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.dateRangeDefault,\n    display: \"inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }, t('analytics.exportPDF'))))), /*#__PURE__*/React.createElement(DateRangeSelector, {\n    anchorEl: dateRangeSelectorRef.current,\n    isOpen: isDateRangeSelectorPopoverOpen,\n    onClose: function onClose() {\n      setDateRangeSelectorPopoverOpen(false);\n    },\n    callbackToSetRange: CallbackFromRangeSelector,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonTable/TableToolbar.tsx"],"names":["Avatar","Button","FormControl","IconButton","InputAdornment","InputBase","InputLabel","MenuItem","OutlinedInput","Select","Typography","useTheme","ChevronRightIcon","DescriptionOutlinedIcon","KeyboardArrowDownIcon","SearchIcon","ButtonOutlined","React","useEffect","useRef","useState","useTranslation","DateRangeSelector","useStyles","useOutlinedInputStyles","TableToolBar","numSelected","handleSearch","searchToken","clusters","callbackToSetCluster","callbackToSetRange","callbackToCompare","callbackToExport","comparisonState","reInitialize","classes","outlinedInputClasses","palette","t","cluster","setCluster","compare","setCompare","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","dateRangeSelectorRef","handleClusterChange","event","target","value","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","handleClick","handleExport","reInitializer","headerSection","search","input","markStyleCorrect","selectDate","displayDate","rangeSelectorIcon","formControl","selectText","map","featureButtons","dateRangeDefault","export","exportIcon","primary","main","current"],"mappings":"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","sourcesContent":["import {\n  Avatar,\n  Button,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { ButtonOutlined } from 'litmus-ui';\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface ClusterCallBackType {\n  (clusterName: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface CompareCallBackType {\n  (compareWorkflows: boolean): void;\n}\n\ninterface ExportCallBackType {\n  (exportAnalytics: boolean): void;\n}\n\ninterface TableToolBarProps {\n  numSelected: number;\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  clusters: string[];\n  callbackToSetCluster: ClusterCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToCompare: CompareCallBackType;\n  callbackToExport: ExportCallBackType;\n  comparisonState: Boolean;\n  reInitialize: Boolean;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  numSelected,\n  handleSearch,\n  searchToken,\n  clusters,\n  callbackToSetCluster,\n  callbackToSetRange,\n  callbackToCompare,\n  callbackToExport,\n  comparisonState,\n  reInitialize,\n}) => {\n  const classes = useStyles();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { palette } = useTheme();\n  const { t } = useTranslation();\n  const [cluster, setCluster] = React.useState<String>('All');\n  const [compare, setCompare] = React.useState<Boolean>(false);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n\n  const handleClusterChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setCluster(event.target.value as String);\n    callbackToSetCluster(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  const handleClick = () => {\n    setCompare(true);\n    callbackToCompare(true);\n  };\n\n  const handleExport = () => {\n    callbackToExport(true);\n  };\n\n  const reInitializer = () => {\n    setRange({\n      startDate: ' ',\n      endDate: ' ',\n    });\n    setCluster('All');\n  };\n\n  useEffect(() => {\n    if (comparisonState === false || reInitialize === true) {\n      reInitializer();\n    }\n  }, []);\n\n  return (\n    <div className={classes.headerSection}>\n      <InputBase\n        id=\"input-with-icon-adornment\"\n        placeholder=\"Search\"\n        className={classes.search}\n        value={searchToken}\n        onChange={handleSearch}\n        classes={{\n          input: classes.input,\n        }}\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        }\n      />\n\n      {numSelected > 0 && comparisonState === false ? (\n        <span>\n          <Typography\n            variant=\"h6\"\n            className={classes.markStyleCorrect}\n            display=\"inline\"\n          >\n            {'\\u2713'}\n          </Typography>\n          <Typography variant=\"h6\" component=\"div\" display=\"inline\">\n            <strong>\n              &nbsp; {numSelected}{' '}\n              {numSelected === 1\n                ? t('analytics.workflowSelected')\n                : t('analytics.workflowsSelected')}{' '}\n              &nbsp; &emsp;\n            </strong>\n          </Typography>\n        </span>\n      ) : (\n        <span />\n      )}\n\n      <Button\n        className={classes.selectDate}\n        onClick={() => setDateRangeSelectorPopoverOpen(true)}\n        ref={dateRangeSelectorRef}\n        aria-label=\"time range\"\n        aria-haspopup=\"true\"\n      >\n        <Typography className={classes.displayDate}>\n          {range.startDate === ' '\n            ? 'Select Period'\n            : `${range.startDate.split(' ')[2]} ${\n                range.startDate.split(' ')[1]\n              } ${range.startDate.split(' ')[3]} - ${\n                range.endDate.split(' ')[2]\n              } ${range.endDate.split(' ')[1]} ${range.endDate.split(' ')[3]}`}\n\n          <IconButton className={classes.rangeSelectorIcon}>\n            {isDateRangeSelectorPopoverOpen ? (\n              <KeyboardArrowDownIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </Typography>\n      </Button>\n\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel className={classes.selectText}>\n          {t('analytics.targetCluster')}\n        </InputLabel>\n        <Select\n          label=\"Target cluster\"\n          value={cluster}\n          onChange={handleClusterChange}\n          className={classes.selectText}\n          input={<OutlinedInput classes={outlinedInputClasses} />}\n        >\n          <MenuItem value=\"All\">All</MenuItem>\n          {clusters.map((cluster: string) => (\n            <MenuItem\n              key={`${cluster}-litmusDashboard-workflowComparison-toolBar`}\n              value={cluster}\n            >\n              {cluster}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <div className={classes.featureButtons}>\n        {compare === false || comparisonState === false ? (\n          <ButtonOutlined disabled={!(numSelected > 1)} onClick={handleClick}>\n            <Typography className={classes.dateRangeDefault}>\n              {t('analytics.compareWorkflows')}\n            </Typography>\n          </ButtonOutlined>\n        ) : (\n          <ButtonOutlined onClick={handleExport} disabled={false}>\n            <div className={classes.export}>\n              <Avatar className={classes.exportIcon}>\n                <DescriptionOutlinedIcon htmlColor={palette.primary.main} />\n              </Avatar>\n              <Typography className={classes.dateRangeDefault} display=\"inline\">\n                {t('analytics.exportPDF')}\n              </Typography>\n            </div>\n          </ButtonOutlined>\n        )}\n      </div>\n      <DateRangeSelector\n        anchorEl={dateRangeSelectorRef.current as HTMLElement}\n        isOpen={isDateRangeSelectorPopoverOpen}\n        onClose={() => {\n          setDateRangeSelectorPopoverOpen(false);\n        }}\n        callbackToSetRange={CallbackFromRangeSelector}\n      />\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}