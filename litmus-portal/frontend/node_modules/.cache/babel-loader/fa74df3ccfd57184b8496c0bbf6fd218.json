{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable no-unused-expressions */import{MenuItem,Typography}from'@material-ui/core';import{ButtonFilled,ButtonOutlined}from'litmus-ui';import React from'react';import{useTranslation}from'react-i18next';import{StyledMenu}from'../../../../components/StyledMenu';import useActions from'../../../../redux/actions';import*as DashboardActions from'../../../../redux/actions/dashboards';import{history}from'../../../../redux/configureStore';import{getProjectID,getProjectRole}from'../../../../utils/getSearchParams';import DashboardCloneModal from'../DashboardCloneModal';import useStyles from'./styles';var TopNavButtons=function TopNavButtons(_ref){var isInfoToggledState=_ref.isInfoToggledState,switchIsInfoToggled=_ref.switchIsInfoToggled,dashboardData=_ref.dashboardData,dashboardTypeID=_ref.dashboardTypeID;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var projectID=getProjectID();var projectRole=getProjectRole();var dashboard=useActions(DashboardActions);var _React$useState=React.useState({isInfoToggled:isInfoToggledState,isOptionsToggled:false}),_React$useState2=_slicedToArray(_React$useState,2),navButtonStates=_React$useState2[0],setNavButtonStates=_React$useState2[1];var _React$useState3=React.useState(null),_React$useState4=_slicedToArray(_React$useState3,2),anchorEl=_React$useState4[0],setAnchorEl=_React$useState4[1];var anchorRef=React.useRef(null);var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),cloneModalOpen=_React$useState6[0],setCloneModalOpen=_React$useState6[1];var getDashboard=function getDashboard(){var _dashboardData$applic;var panelGroupMap=[];var panelGroups=[];dashboardData.metaData[0].panel_groups.forEach(function(panelGroup){panelGroupMap.push({groupName:panelGroup.panel_group_name,panels:[]});var len=panelGroupMap.length;var selectedPanels=[];panelGroup.panels.forEach(function(panel){panelGroupMap[len-1].panels.push(panel.panel_name);var queries=[];panel.prom_queries.forEach(function(query){queries.push({prom_query_name:query.prom_query_name,legend:query.legend,resolution:query.resolution,minstep:query.minstep,line:query.line,close_area:query.close_area});});var options={points:panel.panel_options.points,grids:panel.panel_options.grids,left_axis:panel.panel_options.left_axis};var selectedPanel={prom_queries:queries,panel_options:options,panel_name:panel.panel_name,y_axis_left:panel.y_axis_left,y_axis_right:panel.y_axis_right,x_axis_down:panel.x_axis_down,unit:panel.unit};selectedPanels.push(selectedPanel);});panelGroups.push({panel_group_name:panelGroup.panel_group_name,panels:selectedPanels});});var applicationMetadataMap=[];(_dashboardData$applic=dashboardData.applicationMetadataMap)===null||_dashboardData$applic===void 0?void 0:_dashboardData$applic.forEach(function(applicationMetadata){var applications=[];applicationMetadata.applications.forEach(function(application){applications.push({kind:application.kind,names:application.names});});applicationMetadataMap.push({namespace:applicationMetadata.namespace,applications:applications});});var exportedDashboard={dashboardID:dashboardTypeID,name:dashboardData.name,information:dashboardData.information,chaosEventQueryTemplate:dashboardData.chaosEventQueryTemplate,chaosVerdictQueryTemplate:dashboardData.chaosVerdictQueryTemplate,applicationMetadataMap:applicationMetadataMap,panelGroupMap:panelGroupMap,panelGroups:panelGroups};return exportedDashboard;};// Function to download the JSON\nvar downloadJSON=function downloadJSON(){var element=document.createElement('a');var file=new Blob([JSON.stringify(getDashboard(),null,2)],{type:'text/json'});element.href=URL.createObjectURL(file);element.download=\"\".concat(dashboardData.name,\".json\");document.body.appendChild(element);element.click();};return/*#__PURE__*/React.createElement(\"div\",{className:classes.button},navButtonStates.isInfoToggled?/*#__PURE__*/React.createElement(ButtonFilled,{onClick:function onClick(){setNavButtonStates(_objectSpread(_objectSpread({},navButtonStates),{},{isInfoToggled:false}));switchIsInfoToggled(false);}},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/infoWhite.svg\",alt:\"Info icon\",className:classes.icon}),/*#__PURE__*/React.createElement(Typography,{className:classes.infoText},t('analyticsDashboard.monitoringDashboardPage.infoButtonText'))):/*#__PURE__*/React.createElement(ButtonOutlined,{onClick:function onClick(){setNavButtonStates(_objectSpread(_objectSpread({},navButtonStates),{},{isInfoToggled:true}));switchIsInfoToggled(true);}},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/info.svg\",alt:\"Info icon\",className:classes.icon}),/*#__PURE__*/React.createElement(Typography,{className:classes.infoText},t('analyticsDashboard.monitoringDashboardPage.infoButtonText'))),/*#__PURE__*/React.createElement(\"div\",{ref:anchorRef},navButtonStates.isOptionsToggled?/*#__PURE__*/React.createElement(ButtonFilled,{onClick:function onClick(){setAnchorEl(null);setNavButtonStates(_objectSpread(_objectSpread({},navButtonStates),{},{isOptionsToggled:false}));},className:classes.optionsButton},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/menu-active.svg\",alt:\"Options icon\",className:classes.menuIcon})):/*#__PURE__*/React.createElement(ButtonOutlined,{onClick:function onClick(event){setAnchorEl(event.currentTarget);setNavButtonStates(_objectSpread(_objectSpread({},navButtonStates),{},{isOptionsToggled:true}));},className:classes.optionsButton},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/menu.svg\",alt:\"Options icon\",className:classes.menuIcon}))),/*#__PURE__*/React.createElement(StyledMenu,{id:\"long-menu\",anchorEl:anchorRef.current,elevation:0,getContentAnchorEl:null,keepMounted:true,open:Boolean(anchorEl),onClose:function onClose(){setAnchorEl(null);setNavButtonStates(_objectSpread(_objectSpread({},navButtonStates),{},{isOptionsToggled:false}));},anchorOrigin:{vertical:'bottom',horizontal:'left'},transformOrigin:{vertical:'top',horizontal:'center'},className:classes.menuList},/*#__PURE__*/React.createElement(MenuItem,{value:\"Configure\",onClick:function onClick(){dashboard.selectDashboard({selectedDashboardID:dashboardData.id,activePanelID:''});history.push({pathname:'/analytics/dashboard/configure',search:\"?projectID=\".concat(projectID,\"&projectRole=\").concat(projectRole)});},className:classes.menuItem},/*#__PURE__*/React.createElement(\"div\",{className:classes.expDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/cogwheel.svg\",alt:\"Configure\",className:classes.btnImg}),/*#__PURE__*/React.createElement(Typography,{\"data-cy\":\"optionsConfigureDashboard\",className:classes.btnText},t('analyticsDashboardViews.kubernetesDashboard.table.configure')))),/*#__PURE__*/React.createElement(MenuItem,{value:\"Make a copy\",onClick:function onClick(){setCloneModalOpen(true);},className:classes.menuItem},/*#__PURE__*/React.createElement(\"div\",{className:classes.expDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/copy-dashboard.svg\",alt:\"Make a copy\",className:classes.btnImg}),/*#__PURE__*/React.createElement(Typography,{\"data-cy\":\"optionsCopyDashboard\",className:classes.btnText},t('analyticsDashboard.monitoringDashboardPage.options.clone')))),/*#__PURE__*/React.createElement(MenuItem,{value:\"Download json\",onClick:function onClick(){return downloadJSON();},className:classes.menuItem},/*#__PURE__*/React.createElement(\"div\",{className:classes.expDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/download-dashboard.svg\",alt:\"Download json\",className:classes.btnImg}),/*#__PURE__*/React.createElement(Typography,{\"data-cy\":\"optionsDownloadDashboard\",className:classes.btnText},t('analyticsDashboard.monitoringDashboardPage.options.json')))),/*#__PURE__*/React.createElement(MenuItem,{value:\"Export pdf\",onClick:function onClick(){},className:classes.menuItem,disabled:true},/*#__PURE__*/React.createElement(\"div\",{className:classes.expDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/export-dashboard.svg\",alt:\"Export pdf\",className:classes.btnImg}),/*#__PURE__*/React.createElement(Typography,{\"data-cy\":\"optionsExportDashboard\",className:classes.btnText},t('analyticsDashboard.monitoringDashboardPage.options.pdf'))))),cloneModalOpen?/*#__PURE__*/React.createElement(DashboardCloneModal,{dashboardData:dashboardData,onClose:function onClose(){setCloneModalOpen(false);}}):/*#__PURE__*/React.createElement(\"div\",null));};export default TopNavButtons;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/TopNavButtons/index.tsx"],"names":["MenuItem","Typography","ButtonFilled","ButtonOutlined","React","useTranslation","StyledMenu","useActions","DashboardActions","history","getProjectID","getProjectRole","DashboardCloneModal","useStyles","TopNavButtons","isInfoToggledState","switchIsInfoToggled","dashboardData","dashboardTypeID","classes","t","projectID","projectRole","dashboard","useState","isInfoToggled","isOptionsToggled","navButtonStates","setNavButtonStates","anchorEl","setAnchorEl","anchorRef","useRef","cloneModalOpen","setCloneModalOpen","getDashboard","panelGroupMap","panelGroups","metaData","panel_groups","forEach","panelGroup","push","groupName","panel_group_name","panels","len","length","selectedPanels","panel","panel_name","queries","prom_queries","query","prom_query_name","legend","resolution","minstep","line","close_area","options","points","panel_options","grids","left_axis","selectedPanel","y_axis_left","y_axis_right","x_axis_down","unit","applicationMetadataMap","applicationMetadata","applications","application","kind","names","namespace","exportedDashboard","dashboardID","name","information","chaosEventQueryTemplate","chaosVerdictQueryTemplate","downloadJSON","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","button","icon","infoText","optionsButton","menuIcon","event","currentTarget","current","Boolean","vertical","horizontal","menuList","selectDashboard","selectedDashboardID","id","activePanelID","pathname","search","menuItem","expDiv","btnImg","btnText"],"mappings":"qWAAA,0CACA,OAASA,QAAT,CAAmBC,UAAnB,KAAqC,mBAArC,CACA,OAASC,YAAT,CAAuBC,cAAvB,KAA6C,WAA7C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,UAAT,KAA2B,mCAA3B,CAcA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CACA,MAAO,GAAKC,CAAAA,gBAAZ,KAAkC,sCAAlC,CACA,OAASC,OAAT,KAAwB,kCAAxB,CACA,OACEC,YADF,CAEEC,cAFF,KAGO,mCAHP,CAIA,MAAOC,CAAAA,mBAAP,KAAgC,wBAAhC,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAcA,GAAMC,CAAAA,aAA2C,CAAG,QAA9CA,CAAAA,aAA8C,MAK9C,IAJJC,CAAAA,kBAII,MAJJA,kBAII,CAHJC,mBAGI,MAHJA,mBAGI,CAFJC,aAEI,MAFJA,aAEI,CADJC,eACI,MADJA,eACI,CACJ,GAAMC,CAAAA,OAAO,CAAGN,SAAS,EAAzB,CACA,oBAAcR,cAAc,EAA5B,CAAQe,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,SAAS,CAAGX,YAAY,EAA9B,CACA,GAAMY,CAAAA,WAAW,CAAGX,cAAc,EAAlC,CACA,GAAMY,CAAAA,SAAS,CAAGhB,UAAU,CAACC,gBAAD,CAA5B,CAEA,oBAA8CJ,KAAK,CAACoB,QAAN,CAC5C,CACEC,aAAa,CAAEV,kBADjB,CAEEW,gBAAgB,CAAE,KAFpB,CAD4C,CAA9C,oDAAOC,eAAP,qBAAwBC,kBAAxB,qBAMA,qBAAgCxB,KAAK,CAACoB,QAAN,CAAmC,IAAnC,CAAhC,qDAAOK,QAAP,qBAAiBC,WAAjB,qBACA,GAAMC,CAAAA,SAAS,CAAG3B,KAAK,CAAC4B,MAAN,CAA6B,IAA7B,CAAlB,CACA,qBAA4C5B,KAAK,CAACoB,QAAN,CAAwB,KAAxB,CAA5C,qDAAOS,cAAP,qBAAuBC,iBAAvB,qBAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,2BACzB,GAAMC,CAAAA,aAA8B,CAAG,EAAvC,CACA,GAAMC,CAAAA,WAA+B,CAAG,EAAxC,CACApB,aAAa,CAACqB,QAAd,CAAuB,CAAvB,EAA0BC,YAA1B,CAAuCC,OAAvC,CAA+C,SAACC,UAAD,CAAgB,CAC7DL,aAAa,CAACM,IAAd,CAAmB,CACjBC,SAAS,CAAEF,UAAU,CAACG,gBADL,CAEjBC,MAAM,CAAE,EAFS,CAAnB,EAIA,GAAMC,CAAAA,GAAW,CAAGV,aAAa,CAACW,MAAlC,CACA,GAAMC,CAAAA,cAA6B,CAAG,EAAtC,CACAP,UAAU,CAACI,MAAX,CAAkBL,OAAlB,CAA0B,SAACS,KAAD,CAAW,CACnCb,aAAa,CAACU,GAAG,CAAG,CAAP,CAAb,CAAuBD,MAAvB,CAA8BH,IAA9B,CAAmCO,KAAK,CAACC,UAAzC,EACA,GAAMC,CAAAA,OAA0B,CAAG,EAAnC,CACAF,KAAK,CAACG,YAAN,CAAmBZ,OAAnB,CAA2B,SAACa,KAAD,CAAW,CACpCF,OAAO,CAACT,IAAR,CAAa,CACXY,eAAe,CAAED,KAAK,CAACC,eADZ,CAEXC,MAAM,CAAEF,KAAK,CAACE,MAFH,CAGXC,UAAU,CAAEH,KAAK,CAACG,UAHP,CAIXC,OAAO,CAAEJ,KAAK,CAACI,OAJJ,CAKXC,IAAI,CAAEL,KAAK,CAACK,IALD,CAMXC,UAAU,CAAEN,KAAK,CAACM,UANP,CAAb,EAQD,CATD,EAUA,GAAMC,CAAAA,OAAoB,CAAG,CAC3BC,MAAM,CAAEZ,KAAK,CAACa,aAAN,CAAoBD,MADD,CAE3BE,KAAK,CAAEd,KAAK,CAACa,aAAN,CAAoBC,KAFA,CAG3BC,SAAS,CAAEf,KAAK,CAACa,aAAN,CAAoBE,SAHJ,CAA7B,CAKA,GAAMC,CAAAA,aAA0B,CAAG,CACjCb,YAAY,CAAED,OADmB,CAEjCW,aAAa,CAAEF,OAFkB,CAGjCV,UAAU,CAAED,KAAK,CAACC,UAHe,CAIjCgB,WAAW,CAAEjB,KAAK,CAACiB,WAJc,CAKjCC,YAAY,CAAElB,KAAK,CAACkB,YALa,CAMjCC,WAAW,CAAEnB,KAAK,CAACmB,WANc,CAOjCC,IAAI,CAAEpB,KAAK,CAACoB,IAPqB,CAAnC,CASArB,cAAc,CAACN,IAAf,CAAoBuB,aAApB,EACD,CA5BD,EA6BA5B,WAAW,CAACK,IAAZ,CAAiB,CACfE,gBAAgB,CAAEH,UAAU,CAACG,gBADd,CAEfC,MAAM,CAAEG,cAFO,CAAjB,EAID,CAxCD,EA0CA,GAAMsB,CAAAA,sBAA6C,CAAG,EAAtD,CAEA,uBAAArD,aAAa,CAACqD,sBAAd,sEAAsC9B,OAAtC,CAA8C,SAAC+B,mBAAD,CAAyB,CACrE,GAAMC,CAAAA,YAAwB,CAAG,EAAjC,CAEAD,mBAAmB,CAACC,YAApB,CAAiChC,OAAjC,CAAyC,SAACiC,WAAD,CAAiB,CACxDD,YAAY,CAAC9B,IAAb,CAAkB,CAChBgC,IAAI,CAAED,WAAW,CAACC,IADF,CAEhBC,KAAK,CAAEF,WAAW,CAACE,KAFH,CAAlB,EAID,CALD,EAMAL,sBAAsB,CAAC5B,IAAvB,CAA4B,CAC1BkC,SAAS,CAAEL,mBAAmB,CAACK,SADL,CAE1BJ,YAAY,CAAZA,YAF0B,CAA5B,EAID,CAbD,EAeA,GAAMK,CAAAA,iBAAkC,CAAG,CACzCC,WAAW,CAAE5D,eAD4B,CAEzC6D,IAAI,CAAE9D,aAAa,CAAC8D,IAFqB,CAGzCC,WAAW,CAAE/D,aAAa,CAAC+D,WAHc,CAIzCC,uBAAuB,CAAEhE,aAAa,CAACgE,uBAJE,CAKzCC,yBAAyB,CAAEjE,aAAa,CAACiE,yBALA,CAMzCZ,sBAAsB,CAAtBA,sBANyC,CAOzClC,aAAa,CAAbA,aAPyC,CAQzCC,WAAW,CAAXA,WARyC,CAA3C,CAWA,MAAOwC,CAAAA,iBAAP,CACD,CA1ED,CA4EA;AACA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,OAAO,CAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAhB,CACA,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAAS,CAACC,IAAI,CAACC,SAAL,CAAevD,YAAY,EAA3B,CAA+B,IAA/B,CAAqC,CAArC,CAAD,CAAT,CAAoD,CAC/DwD,IAAI,CAAE,WADyD,CAApD,CAAb,CAGAP,OAAO,CAACQ,IAAR,CAAeC,GAAG,CAACC,eAAJ,CAAoBP,IAApB,CAAf,CACAH,OAAO,CAACW,QAAR,WAAsB9E,aAAa,CAAC8D,IAApC,UACAM,QAAQ,CAACW,IAAT,CAAcC,WAAd,CAA0Bb,OAA1B,EACAA,OAAO,CAACc,KAAR,GACD,CATD,CAWA,mBACE,2BAAK,SAAS,CAAE/E,OAAO,CAACgF,MAAxB,EACGxE,eAAe,CAACF,aAAhB,cACC,oBAAC,YAAD,EACE,OAAO,CAAE,kBAAM,CACbG,kBAAkB,gCAAMD,eAAN,MAAuBF,aAAa,CAAE,KAAtC,GAAlB,CACAT,mBAAmB,CAAC,KAAD,CAAnB,CACD,CAJH,eAME,2BACE,GAAG,CAAC,sBADN,CAEE,GAAG,CAAC,WAFN,CAGE,SAAS,CAAEG,OAAO,CAACiF,IAHrB,EANF,cAWE,oBAAC,UAAD,EAAY,SAAS,CAAEjF,OAAO,CAACkF,QAA/B,EACGjF,CAAC,CAAC,2DAAD,CADJ,CAXF,CADD,cAiBC,oBAAC,cAAD,EACE,OAAO,CAAE,kBAAM,CACbQ,kBAAkB,gCAAMD,eAAN,MAAuBF,aAAa,CAAE,IAAtC,GAAlB,CACAT,mBAAmB,CAAC,IAAD,CAAnB,CACD,CAJH,eAME,2BAAK,GAAG,CAAC,iBAAT,CAA2B,GAAG,CAAC,WAA/B,CAA2C,SAAS,CAAEG,OAAO,CAACiF,IAA9D,EANF,cAOE,oBAAC,UAAD,EAAY,SAAS,CAAEjF,OAAO,CAACkF,QAA/B,EACGjF,CAAC,CAAC,2DAAD,CADJ,CAPF,CAlBJ,cA8BE,2BAAK,GAAG,CAAEW,SAAV,EACGJ,eAAe,CAACD,gBAAhB,cACC,oBAAC,YAAD,EACE,OAAO,CAAE,kBAAM,CACbI,WAAW,CAAC,IAAD,CAAX,CACAF,kBAAkB,gCACbD,eADa,MAEhBD,gBAAgB,CAAE,KAFF,GAAlB,CAID,CAPH,CAQE,SAAS,CAAEP,OAAO,CAACmF,aARrB,eAUE,2BACE,GAAG,CAAC,wBADN,CAEE,GAAG,CAAC,cAFN,CAGE,SAAS,CAAEnF,OAAO,CAACoF,QAHrB,EAVF,CADD,cAkBC,oBAAC,cAAD,EACE,OAAO,CAAE,iBAACC,KAAD,CAA0C,CACjD1E,WAAW,CAAC0E,KAAK,CAACC,aAAP,CAAX,CACA7E,kBAAkB,gCACbD,eADa,MAEhBD,gBAAgB,CAAE,IAFF,GAAlB,CAID,CAPH,CAQE,SAAS,CAAEP,OAAO,CAACmF,aARrB,eAUE,2BACE,GAAG,CAAC,iBADN,CAEE,GAAG,CAAC,cAFN,CAGE,SAAS,CAAEnF,OAAO,CAACoF,QAHrB,EAVF,CAnBJ,CA9BF,cAmEE,oBAAC,UAAD,EACE,EAAE,CAAC,WADL,CAEE,QAAQ,CAAExE,SAAS,CAAC2E,OAFtB,CAGE,SAAS,CAAE,CAHb,CAIE,kBAAkB,CAAE,IAJtB,CAKE,WAAW,KALb,CAME,IAAI,CAAEC,OAAO,CAAC9E,QAAD,CANf,CAOE,OAAO,CAAE,kBAAM,CACbC,WAAW,CAAC,IAAD,CAAX,CACAF,kBAAkB,gCAAMD,eAAN,MAAuBD,gBAAgB,CAAE,KAAzC,GAAlB,CACD,CAVH,CAWE,YAAY,CAAE,CACZkF,QAAQ,CAAE,QADE,CAEZC,UAAU,CAAE,MAFA,CAXhB,CAeE,eAAe,CAAE,CACfD,QAAQ,CAAE,KADK,CAEfC,UAAU,CAAE,QAFG,CAfnB,CAmBE,SAAS,CAAE1F,OAAO,CAAC2F,QAnBrB,eAqBE,oBAAC,QAAD,EACE,KAAK,CAAC,WADR,CAEE,OAAO,CAAE,kBAAM,CACbvF,SAAS,CAACwF,eAAV,CAA0B,CACxBC,mBAAmB,CAAE/F,aAAa,CAACgG,EADX,CAExBC,aAAa,CAAE,EAFS,CAA1B,EAIAzG,OAAO,CAACiC,IAAR,CAAa,CACXyE,QAAQ,CAAE,gCADC,CAEXC,MAAM,sBAAgB/F,SAAhB,yBAAyCC,WAAzC,CAFK,CAAb,EAID,CAXH,CAYE,SAAS,CAAEH,OAAO,CAACkG,QAZrB,eAcE,2BAAK,SAAS,CAAElG,OAAO,CAACmG,MAAxB,eACE,2BACE,GAAG,CAAC,qBADN,CAEE,GAAG,CAAC,WAFN,CAGE,SAAS,CAAEnG,OAAO,CAACoG,MAHrB,EADF,cAME,oBAAC,UAAD,EACE,UAAQ,2BADV,CAEE,SAAS,CAAEpG,OAAO,CAACqG,OAFrB,EAIGpG,CAAC,CAAC,6DAAD,CAJJ,CANF,CAdF,CArBF,cAkDE,oBAAC,QAAD,EACE,KAAK,CAAC,aADR,CAEE,OAAO,CAAE,kBAAM,CACbc,iBAAiB,CAAC,IAAD,CAAjB,CACD,CAJH,CAKE,SAAS,CAAEf,OAAO,CAACkG,QALrB,eAOE,2BAAK,SAAS,CAAElG,OAAO,CAACmG,MAAxB,eACE,2BACE,GAAG,CAAC,2BADN,CAEE,GAAG,CAAC,aAFN,CAGE,SAAS,CAAEnG,OAAO,CAACoG,MAHrB,EADF,cAME,oBAAC,UAAD,EACE,UAAQ,sBADV,CAEE,SAAS,CAAEpG,OAAO,CAACqG,OAFrB,EAIGpG,CAAC,CAAC,0DAAD,CAJJ,CANF,CAPF,CAlDF,cAwEE,oBAAC,QAAD,EACE,KAAK,CAAC,eADR,CAEE,OAAO,CAAE,yBAAM+D,CAAAA,YAAY,EAAlB,EAFX,CAGE,SAAS,CAAEhE,OAAO,CAACkG,QAHrB,eAKE,2BAAK,SAAS,CAAElG,OAAO,CAACmG,MAAxB,eACE,2BACE,GAAG,CAAC,+BADN,CAEE,GAAG,CAAC,eAFN,CAGE,SAAS,CAAEnG,OAAO,CAACoG,MAHrB,EADF,cAME,oBAAC,UAAD,EACE,UAAQ,0BADV,CAEE,SAAS,CAAEpG,OAAO,CAACqG,OAFrB,EAIGpG,CAAC,CAAC,yDAAD,CAJJ,CANF,CALF,CAxEF,cA4FE,oBAAC,QAAD,EACE,KAAK,CAAC,YADR,CAEE,OAAO,CAAE,kBAAM,CAAE,CAFnB,CAGE,SAAS,CAAED,OAAO,CAACkG,QAHrB,CAIE,QAAQ,KAJV,eAME,2BAAK,SAAS,CAAElG,OAAO,CAACmG,MAAxB,eACE,2BACE,GAAG,CAAC,6BADN,CAEE,GAAG,CAAC,YAFN,CAGE,SAAS,CAAEnG,OAAO,CAACoG,MAHrB,EADF,cAME,oBAAC,UAAD,EACE,UAAQ,wBADV,CAEE,SAAS,CAAEpG,OAAO,CAACqG,OAFrB,EAIGpG,CAAC,CAAC,wDAAD,CAJJ,CANF,CANF,CA5FF,CAnEF,CAoLGa,cAAc,cACb,oBAAC,mBAAD,EACE,aAAa,CAAEhB,aADjB,CAEE,OAAO,CAAE,kBAAM,CACbiB,iBAAiB,CAAC,KAAD,CAAjB,CACD,CAJH,EADa,cAQb,+BA5LJ,CADF,CAiMD,CA/SD,CAiTA,cAAepB,CAAAA,aAAf","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { MenuItem, Typography } from '@material-ui/core';\nimport { ButtonFilled, ButtonOutlined } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StyledMenu } from '../../../../components/StyledMenu';\nimport {\n  DashboardExport,\n  PanelExport,\n  PanelGroupExport,\n  PanelGroupMap,\n  PromQueryExport,\n  SelectedDashboardInformation,\n} from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  PanelOption,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport DashboardCloneModal from '../DashboardCloneModal';\nimport useStyles from './styles';\n\ninterface TopNavButtonsProps {\n  isInfoToggledState: Boolean;\n  switchIsInfoToggled: (toggleState: Boolean) => void;\n  dashboardData: SelectedDashboardInformation;\n  dashboardTypeID: string;\n}\n\ninterface NavButtonStates {\n  isInfoToggled: Boolean;\n  isOptionsToggled: Boolean;\n}\n\nconst TopNavButtons: React.FC<TopNavButtonsProps> = ({\n  isInfoToggledState,\n  switchIsInfoToggled,\n  dashboardData,\n  dashboardTypeID,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const dashboard = useActions(DashboardActions);\n\n  const [navButtonStates, setNavButtonStates] = React.useState<NavButtonStates>(\n    {\n      isInfoToggled: isInfoToggledState,\n      isOptionsToggled: false,\n    }\n  );\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const anchorRef = React.useRef<HTMLDivElement>(null);\n  const [cloneModalOpen, setCloneModalOpen] = React.useState<Boolean>(false);\n\n  const getDashboard = () => {\n    const panelGroupMap: PanelGroupMap[] = [];\n    const panelGroups: PanelGroupExport[] = [];\n    dashboardData.metaData[0].panel_groups.forEach((panelGroup) => {\n      panelGroupMap.push({\n        groupName: panelGroup.panel_group_name,\n        panels: [],\n      });\n      const len: number = panelGroupMap.length;\n      const selectedPanels: PanelExport[] = [];\n      panelGroup.panels.forEach((panel) => {\n        panelGroupMap[len - 1].panels.push(panel.panel_name);\n        const queries: PromQueryExport[] = [];\n        panel.prom_queries.forEach((query) => {\n          queries.push({\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const options: PanelOption = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis,\n        };\n        const selectedPanel: PanelExport = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels,\n      });\n    });\n\n    const applicationMetadataMap: ApplicationMetadata[] = [];\n\n    dashboardData.applicationMetadataMap?.forEach((applicationMetadata) => {\n      const applications: Resource[] = [];\n\n      applicationMetadata.applications.forEach((application) => {\n        applications.push({\n          kind: application.kind,\n          names: application.names,\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications,\n      });\n    });\n\n    const exportedDashboard: DashboardExport = {\n      dashboardID: dashboardTypeID,\n      name: dashboardData.name,\n      information: dashboardData.information,\n      chaosEventQueryTemplate: dashboardData.chaosEventQueryTemplate,\n      chaosVerdictQueryTemplate: dashboardData.chaosVerdictQueryTemplate,\n      applicationMetadataMap,\n      panelGroupMap,\n      panelGroups,\n    };\n\n    return exportedDashboard;\n  };\n\n  // Function to download the JSON\n  const downloadJSON = () => {\n    const element = document.createElement('a');\n    const file = new Blob([JSON.stringify(getDashboard(), null, 2)], {\n      type: 'text/json',\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${dashboardData.name}.json`;\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return (\n    <div className={classes.button}>\n      {navButtonStates.isInfoToggled ? (\n        <ButtonFilled\n          onClick={() => {\n            setNavButtonStates({ ...navButtonStates, isInfoToggled: false });\n            switchIsInfoToggled(false);\n          }}\n        >\n          <img\n            src=\"/icons/infoWhite.svg\"\n            alt=\"Info icon\"\n            className={classes.icon}\n          />\n          <Typography className={classes.infoText}>\n            {t('analyticsDashboard.monitoringDashboardPage.infoButtonText')}\n          </Typography>\n        </ButtonFilled>\n      ) : (\n        <ButtonOutlined\n          onClick={() => {\n            setNavButtonStates({ ...navButtonStates, isInfoToggled: true });\n            switchIsInfoToggled(true);\n          }}\n        >\n          <img src=\"/icons/info.svg\" alt=\"Info icon\" className={classes.icon} />\n          <Typography className={classes.infoText}>\n            {t('analyticsDashboard.monitoringDashboardPage.infoButtonText')}\n          </Typography>\n        </ButtonOutlined>\n      )}\n      <div ref={anchorRef}>\n        {navButtonStates.isOptionsToggled ? (\n          <ButtonFilled\n            onClick={() => {\n              setAnchorEl(null);\n              setNavButtonStates({\n                ...navButtonStates,\n                isOptionsToggled: false,\n              });\n            }}\n            className={classes.optionsButton}\n          >\n            <img\n              src=\"/icons/menu-active.svg\"\n              alt=\"Options icon\"\n              className={classes.menuIcon}\n            />\n          </ButtonFilled>\n        ) : (\n          <ButtonOutlined\n            onClick={(event: React.MouseEvent<HTMLElement>) => {\n              setAnchorEl(event.currentTarget);\n              setNavButtonStates({\n                ...navButtonStates,\n                isOptionsToggled: true,\n              });\n            }}\n            className={classes.optionsButton}\n          >\n            <img\n              src=\"/icons/menu.svg\"\n              alt=\"Options icon\"\n              className={classes.menuIcon}\n            />\n          </ButtonOutlined>\n        )}\n      </div>\n      <StyledMenu\n        id=\"long-menu\"\n        anchorEl={anchorRef.current}\n        elevation={0}\n        getContentAnchorEl={null}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={() => {\n          setAnchorEl(null);\n          setNavButtonStates({ ...navButtonStates, isOptionsToggled: false });\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        className={classes.menuList}\n      >\n        <MenuItem\n          value=\"Configure\"\n          onClick={() => {\n            dashboard.selectDashboard({\n              selectedDashboardID: dashboardData.id,\n              activePanelID: '',\n            });\n            history.push({\n              pathname: '/analytics/dashboard/configure',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          }}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/cogwheel.svg\"\n              alt=\"Configure\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsConfigureDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboardViews.kubernetesDashboard.table.configure')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Make a copy\"\n          onClick={() => {\n            setCloneModalOpen(true);\n          }}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/copy-dashboard.svg\"\n              alt=\"Make a copy\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsCopyDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.clone')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Download json\"\n          onClick={() => downloadJSON()}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/download-dashboard.svg\"\n              alt=\"Download json\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsDownloadDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.json')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Export pdf\"\n          onClick={() => {}}\n          className={classes.menuItem}\n          disabled\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/export-dashboard.svg\"\n              alt=\"Export pdf\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsExportDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.pdf')}\n            </Typography>\n          </div>\n        </MenuItem>\n      </StyledMenu>\n      {cloneModalOpen ? (\n        <DashboardCloneModal\n          dashboardData={dashboardData}\n          onClose={() => {\n            setCloneModalOpen(false);\n          }}\n        />\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nexport default TopNavButtons;\n"]},"metadata":{},"sourceType":"module"}