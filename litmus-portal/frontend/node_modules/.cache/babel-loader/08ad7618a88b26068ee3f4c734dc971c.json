{"ast":null,"code":"import _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonPlot/index.tsx\";\n\n/* eslint-disable max-len */\nimport { FormControl, InputLabel, MenuItem, OutlinedInput, Select } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport Plotly from 'plotly.js';\nimport React, { useEffect } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { selectorOptions } from '../../../../utils/selectorOptions';\nimport Score from './Score';\nimport useStyles, { useOutlinedInputStyles } from './style';\nvar Plot = createPlotlyComponent(Plotly);\n\nvar ResilienceScoreComparisonPlot = function ResilienceScoreComparisonPlot(_ref) {\n  var xData = _ref.xData,\n      yData = _ref.yData,\n      labels = _ref.labels,\n      colors = _ref.colors;\n  var classes = useStyles();\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var outlinedInputClasses = useOutlinedInputStyles();\n\n  var _React$useState = React.useState({\n    name: 'Daily'\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      currentGranularity = _React$useState2[0],\n      setCurrentGranularity = _React$useState2[1];\n\n  var handleChangeInGranularity = function handleChangeInGranularity(event) {\n    var name = event.target.name;\n\n    if (name !== currentGranularity.name) {\n      setCurrentGranularity(_objectSpread(_objectSpread({}, currentGranularity), {}, _defineProperty({}, name, event.target.value)));\n    }\n  };\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      plotData = _React$useState4[0],\n      setPlotData = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    highScore: 0,\n    lowScore: 0,\n    highColor: '',\n    lowColor: '',\n    highName: '',\n    lowName: ''\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      edgeData = _React$useState6[0],\n      setEdgeData = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      plotLayout = _React$useState8[0],\n      setPlotLayout = _React$useState8[1]; // Function to convert UNIX time in format of DD MMM YYY\n\n\n  var formatDate = function formatDate(date, dateFormat) {\n    var updated = new Date(parseInt(date, 10) * 1000).toString();\n    var resDate = moment(updated).format(dateFormat);\n    return resDate;\n  }; // Function to calculate average of resilience scores based on all dates with range as edge dates\n\n\n  var avgWorkflowsAll = function avgWorkflowsAll() {\n    var averageDateWiseResilienceScores = {\n      Hourly: {\n        dates: [],\n        avgResilienceScores: []\n      },\n      Daily: {\n        dates: [],\n        avgResilienceScores: []\n      },\n      Monthly: {\n        dates: [],\n        avgResilienceScores: []\n      }\n    };\n\n    for (var i = 0; i < xData.Hourly.length; i += 1) {\n      for (var j = 0; j < xData.Hourly[i].length; j += 1) {\n        var date = xData.Hourly[i][j];\n        var sum = 0;\n        var count = 0;\n\n        for (var k = 0; k < xData.Hourly.length; k += 1) {\n          if (xData.Hourly[k].includes(date) && !averageDateWiseResilienceScores.Hourly.dates.includes(date)) {\n            sum += yData.Hourly[k][xData.Hourly[k].indexOf(date)];\n            count += 1;\n          }\n        }\n\n        if (count !== 0) {\n          averageDateWiseResilienceScores.Hourly.dates.push(date);\n          averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(parseFloat((sum / count).toFixed(2)));\n        }\n      }\n    }\n\n    for (var _i = 0; _i < xData.Daily.length; _i += 1) {\n      for (var _j = 0; _j < xData.Daily[_i].length; _j += 1) {\n        var _date = xData.Daily[_i][_j];\n        var _sum = 0;\n        var _count = 0;\n\n        for (var _k = 0; _k < xData.Daily.length; _k += 1) {\n          if (xData.Daily[_k].includes(_date) && !averageDateWiseResilienceScores.Daily.dates.includes(_date)) {\n            _sum += yData.Daily[_k][xData.Daily[_k].indexOf(_date)];\n            _count += 1;\n          }\n        }\n\n        if (_count !== 0) {\n          averageDateWiseResilienceScores.Daily.dates.push(_date);\n          averageDateWiseResilienceScores.Daily.avgResilienceScores.push(parseFloat((_sum / _count).toFixed(2)));\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < xData.Monthly.length; _i2 += 1) {\n      for (var _j2 = 0; _j2 < xData.Monthly[_i2].length; _j2 += 1) {\n        var _date2 = xData.Monthly[_i2][_j2];\n        var _sum2 = 0;\n        var _count2 = 0;\n\n        for (var _k2 = 0; _k2 < xData.Monthly.length; _k2 += 1) {\n          if (xData.Monthly[_k2].includes(_date2) && !averageDateWiseResilienceScores.Monthly.dates.includes(_date2)) {\n            _sum2 += yData.Monthly[_k2][xData.Monthly[_k2].indexOf(_date2)];\n            _count2 += 1;\n          }\n        }\n\n        if (_count2 !== 0) {\n          averageDateWiseResilienceScores.Monthly.dates.push(_date2);\n          averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(parseFloat((_sum2 / _count2).toFixed(2)));\n        }\n      }\n    }\n\n    return averageDateWiseResilienceScores;\n  };\n\n  var argSort = function argSort(arr1, arr2) {\n    return arr1.map(function (item, index) {\n      return [arr2[index], item];\n    }) // add the args to sort by\n    .sort(function (_ref2, _ref3) {\n      var _ref4 = _slicedToArray(_ref2, 1),\n          arg1 = _ref4[0];\n\n      var _ref5 = _slicedToArray(_ref3, 1),\n          arg2 = _ref5[0];\n\n      return arg2 - arg1;\n    }) // sort by the args\n    .map(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          item = _ref7[1];\n\n      return item;\n    });\n  }; // extract the sorted items\n\n\n  var processData = function processData() {\n    var calculatedAverageAll = avgWorkflowsAll();\n    var dataX = [['']];\n    var dataY = [[0]];\n    var xAvg = [];\n    var yAvg = [];\n    var avgDateFormat = '';\n\n    if (currentGranularity.name === 'Hourly') {\n      dataX = xData.Hourly;\n      dataY = yData.Hourly;\n      xAvg = calculatedAverageAll.Hourly.dates;\n      yAvg = calculatedAverageAll.Hourly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (currentGranularity.name === 'Daily') {\n      dataX = xData.Daily;\n      dataY = yData.Daily;\n      xAvg = calculatedAverageAll.Daily.dates;\n      yAvg = calculatedAverageAll.Daily.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM-DD';\n    }\n\n    if (currentGranularity.name === 'Monthly') {\n      dataX = xData.Monthly;\n      dataY = yData.Monthly;\n      xAvg = calculatedAverageAll.Monthly.dates;\n      yAvg = calculatedAverageAll.Monthly.avgResilienceScores;\n      avgDateFormat = 'YYYY-MM';\n    }\n\n    var lineSize = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(3);\n    var data = [];\n    var series = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n    var lengths = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n\n    for (var i = 0; i < dataX.length; i += 1) {\n      var result = {\n        x: dataX[i],\n        y: dataY[i],\n        type: 'scatter',\n        mode: 'lines + text',\n        line: {\n          shape: 'spline',\n          color: colors[i],\n          width: lineSize[i]\n        },\n        name: labels ? labels[i] : ''\n      };\n      data.push(result);\n\n      for (var j = 0; j < dataY[i].length; j += 1) {\n        series[i] += dataY[i][j];\n      }\n\n      lengths[i] = dataY[i].length;\n    }\n\n    var unixTimeArray = [];\n    xAvg.forEach(function (x) {\n      unixTimeArray.push(parseInt(moment(x).format('X'), 10));\n    });\n    var argSortResultY = argSort(yAvg, unixTimeArray).reverse();\n    var sortedResultX = unixTimeArray.sort(function difference(a, b) {\n      return a - b;\n    });\n    var datesX = [];\n    sortedResultX.forEach(function (date) {\n      datesX.push(formatDate(date.toString(), avgDateFormat));\n    });\n    var avgResult = {\n      x: datesX,\n      y: argSortResultY,\n      type: 'scatter',\n      mode: 'lines',\n      line: {\n        shape: 'spline',\n        dash: 'dash',\n        color: palette.primary.main,\n        width: 3\n      },\n      name: 'Average Workflows'\n    };\n    data.push(avgResult);\n    var normalized = Array(labels === null || labels === void 0 ? void 0 : labels.length).fill(0);\n\n    for (var k = 0; k < lengths.length; k += 1) {\n      normalized[k] = series[k] / lengths[k];\n    }\n\n    var max = Math.max.apply(Math, _toConsumableArray(normalized));\n    var maxID = normalized.indexOf(max);\n    var min = Math.min.apply(Math, _toConsumableArray(normalized));\n    var minID = normalized.indexOf(min);\n    setEdgeData({\n      highScore: parseFloat(max.toFixed(2)),\n      lowScore: parseFloat(min.toFixed(2)),\n      highColor: colors[maxID],\n      lowColor: colors[minID],\n      highName: labels ? labels[maxID] : '',\n      lowName: labels ? labels[minID] : ''\n    });\n    setPlotData(data);\n  };\n\n  var processLayout = function processLayout() {\n    var layout = {\n      xaxis: {\n        showgrid: true,\n        gridcolor: palette.border.main,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.border.main,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.border.main,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.text.hint\n        },\n        mirror: true,\n        rangeselector: selectorOptions,\n        rangeslider: {\n          visible: true\n        }\n      },\n      yaxis: {\n        showgrid: true,\n        gridcolor: palette.border.main,\n        zeroline: false,\n        showline: false,\n        showticklabels: true,\n        linecolor: palette.border.main,\n        linewidth: 0.5,\n        ticks: 'outside',\n        tickcolor: palette.border.main,\n        tickwidth: 2,\n        ticklen: 5,\n        tickfont: {\n          family: 'Ubuntu',\n          color: palette.text.hint\n        },\n        mirror: true,\n        tickmode: 'array',\n        tickvals: [0, 20, 40, 60, 80, 100],\n        ticktext: ['0', '20', '40', '60', '80', '100'],\n        range: [-10, 110]\n      },\n      cliponaxis: true,\n      layer: 'below_traces',\n      autosize: true,\n      margin: {\n        autoexpand: false,\n        l: 60,\n        r: 50,\n        t: 30,\n        b: 130\n      },\n      font: {\n        family: 'Ubuntu, monospace',\n        color: palette.text.hint\n      },\n      showlegend: true,\n      legend: {\n        orientation: 'h',\n        y: -0.5\n      },\n      modebar: {\n        bgcolor: palette.background.paper\n      },\n      paper_bgcolor: palette.background.paper,\n      plot_bgcolor: palette.background.paper\n    };\n    setPlotLayout(layout);\n  };\n\n  useEffect(function () {\n    processData();\n    processLayout();\n  }, [currentGranularity]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      alignContent: 'center',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.flexDisplay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.adjust,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Score, {\n    score: edgeData.highScore,\n    high: true,\n    color: edgeData.highColor,\n    name: edgeData.highName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Score, {\n    score: edgeData.lowScore,\n    high: false,\n    color: edgeData.lowColor,\n    name: edgeData.lowName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    color: \"primary\",\n    focused: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"outlined-selection-granularity\",\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }, \"Granularity\"), /*#__PURE__*/React.createElement(Select, {\n    value: currentGranularity.name,\n    onChange: handleChangeInGranularity,\n    label: \"Granularity\",\n    inputProps: {\n      name: 'name',\n      id: 'outlined-selection-granularity'\n    },\n    className: classes.selectText,\n    input: /*#__PURE__*/React.createElement(OutlinedInput, {\n      classes: outlinedInputClasses,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 22\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Hourly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 15\n    }\n  }, \"Hourly\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Daily\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 15\n    }\n  }, \"Daily\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Monthly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 15\n    }\n  }, \"Monthly\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.plot,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Plot, {\n    data: plotData,\n    layout: plotLayout,\n    useResizeHandler: true,\n    style: {\n      width: '166.55%',\n      height: 720,\n      margin: 'auto'\n    },\n    config: {\n      displaylogo: false,\n      autosizable: true,\n      responsive: true,\n      frameMargins: 0.2,\n      showAxisDragHandles: true,\n      showAxisRangeEntryBoxes: true,\n      showTips: true,\n      displayModeBar: true,\n      toImageButtonOptions: {\n        format: 'png',\n        filename: 'ResilienceScores_Comparison',\n        width: 1920,\n        height: 1080,\n        scale: 2\n      }\n    },\n    onInitialized: function onInitialized() {\n      try {\n        var nodeStyle = document.getElementsByClassName('modebar')[0].style;\n        nodeStyle.left = '39%';\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default ResilienceScoreComparisonPlot;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/WorkflowDashboard/WorkflowComparisonPlot/index.tsx"],"names":["FormControl","InputLabel","MenuItem","OutlinedInput","Select","useTheme","moment","Plotly","React","useEffect","createPlotlyComponent","selectorOptions","Score","useStyles","useOutlinedInputStyles","Plot","ResilienceScoreComparisonPlot","xData","yData","labels","colors","classes","palette","outlinedInputClasses","useState","name","currentGranularity","setCurrentGranularity","handleChangeInGranularity","event","target","value","plotData","setPlotData","highScore","lowScore","highColor","lowColor","highName","lowName","edgeData","setEdgeData","plotLayout","setPlotLayout","formatDate","date","dateFormat","updated","Date","parseInt","toString","resDate","format","avgWorkflowsAll","averageDateWiseResilienceScores","Hourly","dates","avgResilienceScores","Daily","Monthly","i","length","j","sum","count","k","includes","indexOf","push","parseFloat","toFixed","argSort","arr1","arr2","map","item","index","sort","arg1","arg2","processData","calculatedAverageAll","dataX","dataY","xAvg","yAvg","avgDateFormat","lineSize","Array","fill","data","series","lengths","result","x","y","type","mode","line","shape","color","width","unixTimeArray","forEach","argSortResultY","reverse","sortedResultX","difference","a","b","datesX","avgResult","dash","primary","main","normalized","max","Math","maxID","min","minID","processLayout","layout","xaxis","showgrid","gridcolor","border","showline","showticklabels","linecolor","linewidth","ticks","tickcolor","tickwidth","ticklen","tickfont","family","text","hint","mirror","rangeselector","rangeslider","visible","yaxis","zeroline","tickmode","tickvals","ticktext","range","cliponaxis","layer","autosize","margin","autoexpand","l","r","t","font","showlegend","legend","orientation","modebar","bgcolor","background","paper","paper_bgcolor","plot_bgcolor","alignContent","flexDisplay","adjust","formControl","selectText","id","plot","height","displaylogo","autosizable","responsive","frameMargins","showAxisDragHandles","showAxisRangeEntryBoxes","showTips","displayModeBar","toImageButtonOptions","filename","scale","nodeStyle","document","getElementsByClassName","style","left","err","console","error"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n} from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport Plotly from 'plotly.js';\nimport React, { useEffect } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { selectorOptions } from '../../../../utils/selectorOptions';\nimport Score from './Score';\nimport useStyles, { useOutlinedInputStyles } from './style';\n\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface ResilienceScoreComparisonPlotProps {\n  xData: { Hourly: string[][]; Daily: string[][]; Monthly: string[][] };\n  yData: { Hourly: number[][]; Daily: number[][]; Monthly: number[][] };\n  labels: string[];\n  colors: string[];\n}\n\ninterface AverageDateWiseResilienceScores {\n  Hourly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Daily: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n  Monthly: {\n    dates: string[];\n    avgResilienceScores: number[];\n  };\n}\n\nconst ResilienceScoreComparisonPlot: React.FC<ResilienceScoreComparisonPlotProps> =\n  ({ xData, yData, labels, colors }) => {\n    const classes = useStyles();\n    const { palette } = useTheme();\n    const outlinedInputClasses = useOutlinedInputStyles();\n    const [currentGranularity, setCurrentGranularity] = React.useState<{\n      name: string;\n    }>({\n      name: 'Daily',\n    });\n\n    const handleChangeInGranularity = (\n      event: React.ChangeEvent<{ name?: string; value: unknown }>\n    ) => {\n      const name = event.target.name as keyof typeof currentGranularity;\n      if (name !== currentGranularity.name) {\n        setCurrentGranularity({\n          ...currentGranularity,\n          [name]: event.target.value as string,\n        });\n      }\n    };\n\n    const [plotData, setPlotData] = React.useState<any[]>([]);\n\n    const [edgeData, setEdgeData] = React.useState({\n      highScore: 0,\n      lowScore: 0,\n      highColor: '',\n      lowColor: '',\n      highName: '',\n      lowName: '',\n    });\n\n    const [plotLayout, setPlotLayout] = React.useState<any>({});\n\n    // Function to convert UNIX time in format of DD MMM YYY\n    const formatDate = (date: string, dateFormat: string) => {\n      const updated = new Date(parseInt(date, 10) * 1000).toString();\n      const resDate = moment(updated).format(dateFormat);\n      return resDate;\n    };\n\n    // Function to calculate average of resilience scores based on all dates with range as edge dates\n    const avgWorkflowsAll = () => {\n      const averageDateWiseResilienceScores: AverageDateWiseResilienceScores = {\n        Hourly: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n        Daily: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n        Monthly: {\n          dates: [],\n          avgResilienceScores: [],\n        },\n      };\n\n      for (let i = 0; i < xData.Hourly.length; i += 1) {\n        for (let j = 0; j < xData.Hourly[i].length; j += 1) {\n          const date: string = xData.Hourly[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Hourly.length; k += 1) {\n            if (\n              xData.Hourly[k].includes(date) &&\n              !averageDateWiseResilienceScores.Hourly.dates.includes(date)\n            ) {\n              sum += yData.Hourly[k][xData.Hourly[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Hourly.dates.push(date);\n            averageDateWiseResilienceScores.Hourly.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n\n      for (let i = 0; i < xData.Daily.length; i += 1) {\n        for (let j = 0; j < xData.Daily[i].length; j += 1) {\n          const date: string = xData.Daily[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Daily.length; k += 1) {\n            if (\n              xData.Daily[k].includes(date) &&\n              !averageDateWiseResilienceScores.Daily.dates.includes(date)\n            ) {\n              sum += yData.Daily[k][xData.Daily[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Daily.dates.push(date);\n            averageDateWiseResilienceScores.Daily.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n\n      for (let i = 0; i < xData.Monthly.length; i += 1) {\n        for (let j = 0; j < xData.Monthly[i].length; j += 1) {\n          const date: string = xData.Monthly[i][j];\n          let sum: number = 0;\n          let count: number = 0;\n          for (let k = 0; k < xData.Monthly.length; k += 1) {\n            if (\n              xData.Monthly[k].includes(date) &&\n              !averageDateWiseResilienceScores.Monthly.dates.includes(date)\n            ) {\n              sum += yData.Monthly[k][xData.Monthly[k].indexOf(date)];\n              count += 1;\n            }\n          }\n          if (count !== 0) {\n            averageDateWiseResilienceScores.Monthly.dates.push(date);\n            averageDateWiseResilienceScores.Monthly.avgResilienceScores.push(\n              parseFloat((sum / count).toFixed(2))\n            );\n          }\n        }\n      }\n      return averageDateWiseResilienceScores;\n    };\n\n    const argSort = (arr1: number[], arr2: number[]) =>\n      arr1\n        .map((item: any, index: number) => [arr2[index], item]) // add the args to sort by\n        .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\n        .map(([, item]) => item); // extract the sorted items\n\n    const processData = () => {\n      const calculatedAverageAll: AverageDateWiseResilienceScores =\n        avgWorkflowsAll();\n      let dataX = [['']];\n      let dataY = [[0]];\n      let xAvg: string[] = [];\n      let yAvg: number[] = [];\n      let avgDateFormat: string = '';\n      if (currentGranularity.name === 'Hourly') {\n        dataX = xData.Hourly;\n        dataY = yData.Hourly;\n        xAvg = calculatedAverageAll.Hourly.dates;\n        yAvg = calculatedAverageAll.Hourly.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM-DD HH:mm:ss';\n      }\n      if (currentGranularity.name === 'Daily') {\n        dataX = xData.Daily;\n        dataY = yData.Daily;\n        xAvg = calculatedAverageAll.Daily.dates;\n        yAvg = calculatedAverageAll.Daily.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM-DD';\n      }\n      if (currentGranularity.name === 'Monthly') {\n        dataX = xData.Monthly;\n        dataY = yData.Monthly;\n        xAvg = calculatedAverageAll.Monthly.dates;\n        yAvg = calculatedAverageAll.Monthly.avgResilienceScores;\n        avgDateFormat = 'YYYY-MM';\n      }\n      const lineSize: number[] = Array(labels?.length).fill(3);\n      const data = [];\n      const series: number[] = Array(labels?.length).fill(0);\n      const lengths: number[] = Array(labels?.length).fill(0);\n\n      for (let i = 0; i < dataX.length; i += 1) {\n        const result = {\n          x: dataX[i],\n          y: dataY[i],\n          type: 'scatter',\n          mode: 'lines + text',\n          line: {\n            shape: 'spline',\n            color: colors[i],\n            width: lineSize[i],\n          },\n          name: labels ? labels[i] : '',\n        };\n        data.push(result);\n        for (let j = 0; j < dataY[i].length; j += 1) {\n          series[i] += dataY[i][j];\n        }\n        lengths[i] = dataY[i].length;\n      }\n\n      const unixTimeArray: number[] = [];\n      xAvg.forEach((x) => {\n        unixTimeArray.push(parseInt(moment(x).format('X'), 10));\n      });\n      const argSortResultY = argSort(yAvg, unixTimeArray).reverse();\n      const sortedResultX = unixTimeArray.sort(function difference(a, b) {\n        return a - b;\n      });\n      const datesX: string[] = [];\n      sortedResultX.forEach((date) => {\n        datesX.push(formatDate(date.toString(), avgDateFormat));\n      });\n\n      const avgResult = {\n        x: datesX,\n        y: argSortResultY,\n        type: 'scatter',\n        mode: 'lines',\n        line: {\n          shape: 'spline',\n          dash: 'dash',\n          color: palette.primary.main,\n          width: 3,\n        },\n        name: 'Average Workflows',\n      };\n      data.push(avgResult);\n      const normalized = Array(labels?.length).fill(0);\n      for (let k = 0; k < lengths.length; k += 1) {\n        normalized[k] = series[k] / lengths[k];\n      }\n      const max = Math.max(...normalized);\n      const maxID = normalized.indexOf(max);\n      const min = Math.min(...normalized);\n      const minID = normalized.indexOf(min);\n      setEdgeData({\n        highScore: parseFloat(max.toFixed(2)),\n        lowScore: parseFloat(min.toFixed(2)),\n        highColor: colors[maxID],\n        lowColor: colors[minID],\n        highName: labels ? labels[maxID] : '',\n        lowName: labels ? labels[minID] : '',\n      });\n      setPlotData(data);\n    };\n\n    const processLayout = () => {\n      const layout = {\n        xaxis: {\n          showgrid: true,\n          gridcolor: palette.border.main,\n          showline: false,\n          showticklabels: true,\n          linecolor: palette.border.main,\n          linewidth: 0.5,\n          ticks: 'outside',\n          tickcolor: palette.border.main,\n          tickwidth: 2,\n          ticklen: 5,\n          tickfont: {\n            family: 'Ubuntu',\n            color: palette.text.hint,\n          },\n          mirror: true,\n          rangeselector: selectorOptions as any,\n          rangeslider: { visible: true },\n        },\n        yaxis: {\n          showgrid: true,\n          gridcolor: palette.border.main,\n          zeroline: false,\n          showline: false,\n          showticklabels: true,\n          linecolor: palette.border.main,\n          linewidth: 0.5,\n          ticks: 'outside',\n          tickcolor: palette.border.main,\n          tickwidth: 2,\n          ticklen: 5,\n          tickfont: {\n            family: 'Ubuntu',\n            color: palette.text.hint,\n          },\n          mirror: true,\n          tickmode: 'array',\n          tickvals: [0, 20, 40, 60, 80, 100],\n          ticktext: ['0', '20', '40', '60', '80', '100'],\n          range: [-10, 110],\n        },\n        cliponaxis: true,\n        layer: 'below_traces',\n        autosize: true,\n        margin: {\n          autoexpand: false,\n          l: 60,\n          r: 50,\n          t: 30,\n          b: 130,\n        },\n        font: {\n          family: 'Ubuntu, monospace',\n          color: palette.text.hint,\n        },\n        showlegend: true,\n        legend: { orientation: 'h', y: -0.5 },\n        modebar: {\n          bgcolor: palette.background.paper,\n        },\n        paper_bgcolor: palette.background.paper,\n        plot_bgcolor: palette.background.paper,\n      };\n      setPlotLayout(layout);\n    };\n\n    useEffect(() => {\n      processData();\n      processLayout();\n    }, [currentGranularity]);\n\n    return (\n      <div style={{ alignContent: 'center', width: '100%' }}>\n        <div className={classes.flexDisplay}>\n          <div className={classes.adjust}>\n            <Score\n              score={edgeData.highScore}\n              high\n              color={edgeData.highColor}\n              name={edgeData.highName}\n            />\n          </div>\n          <Score\n            score={edgeData.lowScore}\n            high={false}\n            color={edgeData.lowColor}\n            name={edgeData.lowName}\n          />\n          <FormControl\n            variant=\"outlined\"\n            className={classes.formControl}\n            color=\"primary\"\n            focused\n          >\n            <InputLabel\n              htmlFor=\"outlined-selection-granularity\"\n              className={classes.selectText}\n            >\n              Granularity\n            </InputLabel>\n            <Select\n              value={currentGranularity.name}\n              onChange={handleChangeInGranularity}\n              label=\"Granularity\"\n              inputProps={{\n                name: 'name',\n                id: 'outlined-selection-granularity',\n              }}\n              className={classes.selectText}\n              input={<OutlinedInput classes={outlinedInputClasses} />}\n            >\n              <MenuItem value=\"Hourly\">Hourly</MenuItem>\n              <MenuItem value=\"Daily\">Daily</MenuItem>\n              <MenuItem value=\"Monthly\">Monthly</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n        <div className={classes.plot}>\n          <Plot\n            data={plotData}\n            layout={plotLayout}\n            useResizeHandler\n            style={{\n              width: '166.55%',\n              height: 720,\n              margin: 'auto',\n            }}\n            config={{\n              displaylogo: false,\n              autosizable: true,\n              responsive: true,\n              frameMargins: 0.2,\n              showAxisDragHandles: true,\n              showAxisRangeEntryBoxes: true,\n              showTips: true,\n              displayModeBar: true,\n              toImageButtonOptions: {\n                format: 'png',\n                filename: 'ResilienceScores_Comparison',\n                width: 1920,\n                height: 1080,\n                scale: 2,\n              },\n            }}\n            onInitialized={() => {\n              try {\n                const nodeStyle = (\n                  document.getElementsByClassName('modebar')[0] as HTMLElement\n                ).style;\n                nodeStyle.left = '39%';\n              } catch (err) {\n                console.error(err);\n              }\n            }}\n          />\n        </div>\n      </div>\n    );\n  };\n\nexport default ResilienceScoreComparisonPlot;\n"]},"metadata":{},"sourceType":"module"}