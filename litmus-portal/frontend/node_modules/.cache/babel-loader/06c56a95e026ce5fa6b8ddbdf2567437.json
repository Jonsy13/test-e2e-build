{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/TopNavButtons/index.tsx\";\n\n/* eslint-disable no-unused-expressions */\nimport { MenuItem, Typography } from '@material-ui/core';\nimport { ButtonFilled, ButtonOutlined } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StyledMenu } from '../../../../components/StyledMenu';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport DashboardCloneModal from '../DashboardCloneModal';\nimport useStyles from './styles';\n\nvar TopNavButtons = function TopNavButtons(_ref) {\n  var isInfoToggledState = _ref.isInfoToggledState,\n      switchIsInfoToggled = _ref.switchIsInfoToggled,\n      dashboardData = _ref.dashboardData,\n      dashboardTypeID = _ref.dashboardTypeID;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var dashboard = useActions(DashboardActions);\n\n  var _React$useState = React.useState({\n    isInfoToggled: isInfoToggledState,\n    isOptionsToggled: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      navButtonStates = _React$useState2[0],\n      setNavButtonStates = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      anchorEl = _React$useState4[0],\n      setAnchorEl = _React$useState4[1];\n\n  var anchorRef = React.useRef(null);\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      cloneModalOpen = _React$useState6[0],\n      setCloneModalOpen = _React$useState6[1];\n\n  var getDashboard = function getDashboard() {\n    var _dashboardData$applic;\n\n    var panelGroupMap = [];\n    var panelGroups = [];\n    dashboardData.metaData[0].panel_groups.forEach(function (panelGroup) {\n      panelGroupMap.push({\n        groupName: panelGroup.panel_group_name,\n        panels: []\n      });\n      var len = panelGroupMap.length;\n      var selectedPanels = [];\n      panelGroup.panels.forEach(function (panel) {\n        panelGroupMap[len - 1].panels.push(panel.panel_name);\n        var queries = [];\n        panel.prom_queries.forEach(function (query) {\n          queries.push({\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area\n          });\n        });\n        var options = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis\n        };\n        var selectedPanel = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels\n      });\n    });\n    var applicationMetadataMap = [];\n    (_dashboardData$applic = dashboardData.applicationMetadataMap) === null || _dashboardData$applic === void 0 ? void 0 : _dashboardData$applic.forEach(function (applicationMetadata) {\n      var applications = [];\n      applicationMetadata.applications.forEach(function (application) {\n        applications.push({\n          kind: application.kind,\n          names: application.names\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications: applications\n      });\n    });\n    var exportedDashboard = {\n      dashboardID: dashboardTypeID,\n      name: dashboardData.name,\n      information: dashboardData.information,\n      chaosEventQueryTemplate: dashboardData.chaosEventQueryTemplate,\n      chaosVerdictQueryTemplate: dashboardData.chaosVerdictQueryTemplate,\n      applicationMetadataMap: applicationMetadataMap,\n      panelGroupMap: panelGroupMap,\n      panelGroups: panelGroups\n    };\n    return exportedDashboard;\n  }; // Function to download the JSON\n\n\n  var downloadJSON = function downloadJSON() {\n    var element = document.createElement('a');\n    var file = new Blob([JSON.stringify(getDashboard(), null, 2)], {\n      type: 'text/json'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"\".concat(dashboardData.name, \".json\");\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttons,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, navButtonStates.isInfoToggled ? /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      setNavButtonStates(_objectSpread(_objectSpread({}, navButtonStates), {}, {\n        isInfoToggled: false\n      }));\n      switchIsInfoToggled(false);\n    },\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/infoWhite.svg\",\n    alt: \"Info icon\",\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoButtonText'))) : /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick() {\n      setNavButtonStates(_objectSpread(_objectSpread({}, navButtonStates), {}, {\n        isInfoToggled: true\n      }));\n      switchIsInfoToggled(true);\n    },\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/info.svg\",\n    alt: \"Info icon\",\n    className: classes.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoButtonText'))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: anchorRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, navButtonStates.isOptionsToggled ? /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      setAnchorEl(null);\n      setNavButtonStates(_objectSpread(_objectSpread({}, navButtonStates), {}, {\n        isOptionsToggled: false\n      }));\n    },\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/menu-active.svg\",\n    alt: \"Options icon\",\n    className: classes.menuIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(ButtonOutlined, {\n    onClick: function onClick(event) {\n      setAnchorEl(event.currentTarget);\n      setNavButtonStates(_objectSpread(_objectSpread({}, navButtonStates), {}, {\n        isOptionsToggled: true\n      }));\n    },\n    className: classes.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/menu.svg\",\n    alt: \"Options icon\",\n    className: classes.menuIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(StyledMenu, {\n    id: \"long-menu\",\n    anchorEl: anchorRef.current,\n    elevation: 0,\n    getContentAnchorEl: null,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: function onClose() {\n      setAnchorEl(null);\n      setNavButtonStates(_objectSpread(_objectSpread({}, navButtonStates), {}, {\n        isOptionsToggled: false\n      }));\n    },\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    className: classes.menuList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Configure\",\n    onClick: function onClick() {\n      dashboard.selectDashboard({\n        selectedDashboardID: dashboardData.id,\n        activePanelID: ''\n      });\n      history.push({\n        pathname: '/analytics/dashboard/configure',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    className: classes.menuItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.expDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/cogwheel.svg\",\n    alt: \"Configure\",\n    className: classes.btnImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"optionsConfigureDashboard\",\n    className: classes.btnText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.applicationDashboardTable.configure')))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Make a copy\",\n    onClick: function onClick() {\n      setCloneModalOpen(true);\n    },\n    className: classes.menuItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.expDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/copy-dashboard.svg\",\n    alt: \"Make a copy\",\n    className: classes.btnImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"optionsCopyDashboard\",\n    className: classes.btnText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.options.clone')))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Download json\",\n    onClick: function onClick() {\n      return downloadJSON();\n    },\n    className: classes.menuItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.expDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/download-dashboard.svg\",\n    alt: \"Download json\",\n    className: classes.btnImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"optionsDownloadDashboard\",\n    className: classes.btnText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.options.json')))), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Export pdf\",\n    onClick: function onClick() {},\n    className: classes.menuItem,\n    disabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.expDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/export-dashboard.svg\",\n    alt: \"Export pdf\",\n    className: classes.btnImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    \"data-cy\": \"optionsExportDashboard\",\n    className: classes.btnText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.options.pdf'))))), cloneModalOpen ? /*#__PURE__*/React.createElement(DashboardCloneModal, {\n    dashboardData: dashboardData,\n    onClose: function onClose() {\n      setCloneModalOpen(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default TopNavButtons;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/TopNavButtons/index.tsx"],"names":["MenuItem","Typography","ButtonFilled","ButtonOutlined","React","useTranslation","StyledMenu","useActions","DashboardActions","history","getProjectID","getProjectRole","DashboardCloneModal","useStyles","TopNavButtons","isInfoToggledState","switchIsInfoToggled","dashboardData","dashboardTypeID","classes","t","projectID","projectRole","dashboard","useState","isInfoToggled","isOptionsToggled","navButtonStates","setNavButtonStates","anchorEl","setAnchorEl","anchorRef","useRef","cloneModalOpen","setCloneModalOpen","getDashboard","panelGroupMap","panelGroups","metaData","panel_groups","forEach","panelGroup","push","groupName","panel_group_name","panels","len","length","selectedPanels","panel","panel_name","queries","prom_queries","query","prom_query_name","legend","resolution","minstep","line","close_area","options","points","panel_options","grids","left_axis","selectedPanel","y_axis_left","y_axis_right","x_axis_down","unit","applicationMetadataMap","applicationMetadata","applications","application","kind","names","namespace","exportedDashboard","dashboardID","name","information","chaosEventQueryTemplate","chaosVerdictQueryTemplate","downloadJSON","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","buttons","button","icon","infoText","menuIcon","event","currentTarget","current","Boolean","vertical","horizontal","menuList","selectDashboard","selectedDashboardID","id","activePanelID","pathname","search","menuItem","expDiv","btnImg","btnText"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { MenuItem, Typography } from '@material-ui/core';\nimport { ButtonFilled, ButtonOutlined } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StyledMenu } from '../../../../components/StyledMenu';\nimport {\n  DashboardExport,\n  PanelExport,\n  PanelGroupExport,\n  PanelGroupMap,\n  PromQueryExport,\n  SelectedDashboardInformation,\n} from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  PanelOption,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport useActions from '../../../../redux/actions';\nimport * as DashboardActions from '../../../../redux/actions/dashboards';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport DashboardCloneModal from '../DashboardCloneModal';\nimport useStyles from './styles';\n\ninterface TopNavButtonsProps {\n  isInfoToggledState: Boolean;\n  switchIsInfoToggled: (toggleState: Boolean) => void;\n  dashboardData: SelectedDashboardInformation;\n  dashboardTypeID: string;\n}\n\ninterface NavButtonStates {\n  isInfoToggled: Boolean;\n  isOptionsToggled: Boolean;\n}\n\nconst TopNavButtons: React.FC<TopNavButtonsProps> = ({\n  isInfoToggledState,\n  switchIsInfoToggled,\n  dashboardData,\n  dashboardTypeID,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const dashboard = useActions(DashboardActions);\n\n  const [navButtonStates, setNavButtonStates] = React.useState<NavButtonStates>(\n    {\n      isInfoToggled: isInfoToggledState,\n      isOptionsToggled: false,\n    }\n  );\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const anchorRef = React.useRef<HTMLDivElement>(null);\n  const [cloneModalOpen, setCloneModalOpen] = React.useState<Boolean>(false);\n\n  const getDashboard = () => {\n    const panelGroupMap: PanelGroupMap[] = [];\n    const panelGroups: PanelGroupExport[] = [];\n    dashboardData.metaData[0].panel_groups.forEach((panelGroup) => {\n      panelGroupMap.push({\n        groupName: panelGroup.panel_group_name,\n        panels: [],\n      });\n      const len: number = panelGroupMap.length;\n      const selectedPanels: PanelExport[] = [];\n      panelGroup.panels.forEach((panel) => {\n        panelGroupMap[len - 1].panels.push(panel.panel_name);\n        const queries: PromQueryExport[] = [];\n        panel.prom_queries.forEach((query) => {\n          queries.push({\n            prom_query_name: query.prom_query_name,\n            legend: query.legend,\n            resolution: query.resolution,\n            minstep: query.minstep,\n            line: query.line,\n            close_area: query.close_area,\n          });\n        });\n        const options: PanelOption = {\n          points: panel.panel_options.points,\n          grids: panel.panel_options.grids,\n          left_axis: panel.panel_options.left_axis,\n        };\n        const selectedPanel: PanelExport = {\n          prom_queries: queries,\n          panel_options: options,\n          panel_name: panel.panel_name,\n          y_axis_left: panel.y_axis_left,\n          y_axis_right: panel.y_axis_right,\n          x_axis_down: panel.x_axis_down,\n          unit: panel.unit,\n        };\n        selectedPanels.push(selectedPanel);\n      });\n      panelGroups.push({\n        panel_group_name: panelGroup.panel_group_name,\n        panels: selectedPanels,\n      });\n    });\n\n    const applicationMetadataMap: ApplicationMetadata[] = [];\n\n    dashboardData.applicationMetadataMap?.forEach((applicationMetadata) => {\n      const applications: Resource[] = [];\n\n      applicationMetadata.applications.forEach((application) => {\n        applications.push({\n          kind: application.kind,\n          names: application.names,\n        });\n      });\n      applicationMetadataMap.push({\n        namespace: applicationMetadata.namespace,\n        applications,\n      });\n    });\n\n    const exportedDashboard: DashboardExport = {\n      dashboardID: dashboardTypeID,\n      name: dashboardData.name,\n      information: dashboardData.information,\n      chaosEventQueryTemplate: dashboardData.chaosEventQueryTemplate,\n      chaosVerdictQueryTemplate: dashboardData.chaosVerdictQueryTemplate,\n      applicationMetadataMap,\n      panelGroupMap,\n      panelGroups,\n    };\n\n    return exportedDashboard;\n  };\n\n  // Function to download the JSON\n  const downloadJSON = () => {\n    const element = document.createElement('a');\n    const file = new Blob([JSON.stringify(getDashboard(), null, 2)], {\n      type: 'text/json',\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = `${dashboardData.name}.json`;\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return (\n    <div className={classes.buttons}>\n      {navButtonStates.isInfoToggled ? (\n        <ButtonFilled\n          onClick={() => {\n            setNavButtonStates({ ...navButtonStates, isInfoToggled: false });\n            switchIsInfoToggled(false);\n          }}\n          className={classes.button}\n        >\n          <img\n            src=\"/icons/infoWhite.svg\"\n            alt=\"Info icon\"\n            className={classes.icon}\n          />\n          <Typography className={classes.infoText}>\n            {t('analyticsDashboard.monitoringDashboardPage.infoButtonText')}\n          </Typography>\n        </ButtonFilled>\n      ) : (\n        <ButtonOutlined\n          onClick={() => {\n            setNavButtonStates({ ...navButtonStates, isInfoToggled: true });\n            switchIsInfoToggled(true);\n          }}\n          className={classes.button}\n        >\n          <img src=\"/icons/info.svg\" alt=\"Info icon\" className={classes.icon} />\n          <Typography className={classes.infoText}>\n            {t('analyticsDashboard.monitoringDashboardPage.infoButtonText')}\n          </Typography>\n        </ButtonOutlined>\n      )}\n      <div ref={anchorRef}>\n        {navButtonStates.isOptionsToggled ? (\n          <ButtonFilled\n            onClick={() => {\n              setAnchorEl(null);\n              setNavButtonStates({\n                ...navButtonStates,\n                isOptionsToggled: false,\n              });\n            }}\n            className={classes.button}\n          >\n            <img\n              src=\"/icons/menu-active.svg\"\n              alt=\"Options icon\"\n              className={classes.menuIcon}\n            />\n          </ButtonFilled>\n        ) : (\n          <ButtonOutlined\n            onClick={(event: React.MouseEvent<HTMLElement>) => {\n              setAnchorEl(event.currentTarget);\n              setNavButtonStates({\n                ...navButtonStates,\n                isOptionsToggled: true,\n              });\n            }}\n            className={classes.button}\n          >\n            <img\n              src=\"/icons/menu.svg\"\n              alt=\"Options icon\"\n              className={classes.menuIcon}\n            />\n          </ButtonOutlined>\n        )}\n      </div>\n      <StyledMenu\n        id=\"long-menu\"\n        anchorEl={anchorRef.current}\n        elevation={0}\n        getContentAnchorEl={null}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={() => {\n          setAnchorEl(null);\n          setNavButtonStates({ ...navButtonStates, isOptionsToggled: false });\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        className={classes.menuList}\n      >\n        <MenuItem\n          value=\"Configure\"\n          onClick={() => {\n            dashboard.selectDashboard({\n              selectedDashboardID: dashboardData.id,\n              activePanelID: '',\n            });\n            history.push({\n              pathname: '/analytics/dashboard/configure',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            });\n          }}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/cogwheel.svg\"\n              alt=\"Configure\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsConfigureDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.applicationDashboardTable.configure')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Make a copy\"\n          onClick={() => {\n            setCloneModalOpen(true);\n          }}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/copy-dashboard.svg\"\n              alt=\"Make a copy\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsCopyDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.clone')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Download json\"\n          onClick={() => downloadJSON()}\n          className={classes.menuItem}\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/download-dashboard.svg\"\n              alt=\"Download json\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsDownloadDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.json')}\n            </Typography>\n          </div>\n        </MenuItem>\n\n        <MenuItem\n          value=\"Export pdf\"\n          onClick={() => {}}\n          className={classes.menuItem}\n          disabled\n        >\n          <div className={classes.expDiv}>\n            <img\n              src=\"/icons/export-dashboard.svg\"\n              alt=\"Export pdf\"\n              className={classes.btnImg}\n            />\n            <Typography\n              data-cy=\"optionsExportDashboard\"\n              className={classes.btnText}\n            >\n              {t('analyticsDashboard.monitoringDashboardPage.options.pdf')}\n            </Typography>\n          </div>\n        </MenuItem>\n      </StyledMenu>\n      {cloneModalOpen ? (\n        <DashboardCloneModal\n          dashboardData={dashboardData}\n          onClose={() => {\n            setCloneModalOpen(false);\n          }}\n        />\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nexport default TopNavButtons;\n"]},"metadata":{},"sourceType":"module"}