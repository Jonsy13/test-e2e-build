{"ast":null,"code":"import _objectSpread from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/ArgoWorkflow/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DagreGraph from '../../../components/DagreGraph';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\nvar ArgoWorkflow = function ArgoWorkflow(_ref) {\n  var nodes = _ref.nodes,\n      setIsInfoToggled = _ref.setIsInfoToggled;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t; // Graph orientation\n\n\n  var horizontal = true;\n  var classes = useStyles({\n    horizontal: horizontal\n  }); // Redux action call for updating selected node\n\n  var nodeSelection = useActions(NodeSelectionActions);\n\n  var _useState = useState({\n    nodes: [],\n    links: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      graphData = _useState2[0],\n      setGraphData = _useState2[1]; // Get the selected Node\n\n\n  var _useState3 = useState(Object.keys(nodes)[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedNodeID = _useState4[0],\n      setSelectedNodeID = _useState4[1];\n\n  useEffect(function () {\n    var data = {\n      nodes: [],\n      links: []\n    };\n\n    var _loop = function _loop() {\n      var key = _Object$keys[_i];\n      var node = nodes[key];\n      data.nodes.push({\n        id: key,\n        class: node.type === 'StepGroup' ? 'StepGroup' : \"\".concat(node.phase, \" \").concat(node.type),\n        label: node.type !== 'StepGroup' ? createLabel({\n          currentNodeID: key,\n          selectedNodeID: selectedNodeID,\n          label: node.name,\n          tooltip: node.name,\n          phase: node.phase.toLowerCase(),\n          horizontal: horizontal\n        }) : '',\n        labelType: node.type !== 'StepGroup' ? 'svg' : 'string',\n        config: {\n          fullName: node.name\n        }\n      });\n\n      if (node.children) {\n        node.children.map(function (child) {\n          return data.links.push({\n            source: key,\n            target: child,\n            class: 'link',\n            config: {\n              arrowhead: nodes[child].type === 'StepGroup' ? 'undirected' : 'vee'\n            }\n          });\n        });\n      }\n    };\n\n    for (var _i = 0, _Object$keys = Object.keys(nodes); _i < _Object$keys.length; _i++) {\n      _loop();\n    }\n\n    setGraphData({\n      nodes: _toConsumableArray(data.nodes),\n      links: _toConsumableArray(data.links)\n    });\n  }, [nodes, horizontal]);\n  useEffect(function () {\n    nodeSelection.selectNode(_objectSpread(_objectSpread({}, nodes[selectedNodeID]), {}, {\n      pod_name: selectedNodeID\n    }));\n  }, [selectedNodeID]);\n  return graphData.nodes.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DagreGraph, {\n    className: classes.dagreGraph,\n    nodes: graphData.nodes,\n    links: graphData.links,\n    config: {\n      rankdir: horizontal ? 'LR' : 'TB',\n      // align: 'UR',\n      ranker: 'tight-tree'\n    },\n    animate: 1000,\n    shape: \"rect\",\n    fitBoundaries: true,\n    zoomable: true,\n    onNodeClick: function onNodeClick(_ref2) {\n      var original = _ref2.original;\n      var nodeID = Object.keys(nodes).filter(function (key) {\n        return key === (original === null || original === void 0 ? void 0 : original.id);\n      })[0];\n      setIsInfoToggled(true);\n      setSelectedNodeID(nodeID);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, t('workflowDetailsView.argoWorkflow.loading'));\n};\n\nexport default ArgoWorkflow;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/ArgoWorkflow/index.tsx"],"names":["React","useEffect","useState","useTranslation","DagreGraph","useActions","NodeSelectionActions","createLabel","useStyles","ArgoWorkflow","nodes","setIsInfoToggled","t","horizontal","classes","nodeSelection","links","graphData","setGraphData","Object","keys","selectedNodeID","setSelectedNodeID","data","key","node","push","id","class","type","phase","label","currentNodeID","name","tooltip","toLowerCase","labelType","config","fullName","children","map","child","source","target","arrowhead","selectNode","pod_name","length","dagreGraph","rankdir","ranker","original","nodeID","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DagreGraph, { d3Link, d3Node } from '../../../components/DagreGraph';\nimport { Nodes } from '../../../models/graphql/workflowData';\nimport useActions from '../../../redux/actions';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport { createLabel } from './createLabel';\nimport useStyles from './styles';\n\ninterface GraphData {\n  nodes: d3Node[];\n  links: d3Link[];\n}\ninterface ArgoWorkflowProps {\n  nodes: Nodes;\n  setIsInfoToggled: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst ArgoWorkflow: React.FC<ArgoWorkflowProps> = ({\n  nodes,\n  setIsInfoToggled,\n}) => {\n  const { t } = useTranslation();\n\n  // Graph orientation\n  const horizontal = true;\n\n  const classes = useStyles({ horizontal });\n  // Redux action call for updating selected node\n  const nodeSelection = useActions(NodeSelectionActions);\n\n  const [graphData, setGraphData] = useState<GraphData>({\n    nodes: [],\n    links: [],\n  });\n\n  // Get the selected Node\n  const [selectedNodeID, setSelectedNodeID] = useState<string>(\n    Object.keys(nodes)[0]\n  );\n\n  useEffect(() => {\n    const data: GraphData = {\n      nodes: [],\n      links: [],\n    };\n\n    for (const key of Object.keys(nodes)) {\n      const node = nodes[key];\n\n      data.nodes.push({\n        id: key,\n        class:\n          node.type === 'StepGroup'\n            ? 'StepGroup'\n            : `${node.phase} ${node.type}`,\n        label:\n          node.type !== 'StepGroup'\n            ? createLabel({\n                currentNodeID: key,\n                selectedNodeID,\n                label: node.name,\n                tooltip: node.name,\n                phase: node.phase.toLowerCase(),\n                horizontal,\n              })\n            : '',\n        labelType: node.type !== 'StepGroup' ? 'svg' : 'string',\n        config: { fullName: node.name },\n      });\n\n      if (node.children) {\n        node.children.map((child) =>\n          data.links.push({\n            source: key,\n            target: child,\n            class: 'link',\n            config: {\n              arrowhead:\n                nodes[child].type === 'StepGroup' ? 'undirected' : 'vee',\n            },\n          })\n        );\n      }\n    }\n\n    setGraphData({\n      nodes: [...data.nodes],\n      links: [...data.links],\n    });\n  }, [nodes, horizontal]);\n\n  useEffect(() => {\n    nodeSelection.selectNode({\n      ...nodes[selectedNodeID],\n      pod_name: selectedNodeID,\n    });\n  }, [selectedNodeID]);\n\n  return graphData.nodes.length ? (\n    <>\n      <DagreGraph\n        className={classes.dagreGraph}\n        nodes={graphData.nodes}\n        links={graphData.links}\n        config={{\n          rankdir: horizontal ? 'LR' : 'TB',\n          // align: 'UR',\n          ranker: 'tight-tree',\n        }}\n        animate={1000}\n        shape=\"rect\"\n        fitBoundaries\n        zoomable\n        onNodeClick={({ original }) => {\n          const nodeID = Object.keys(nodes).filter(\n            (key) => key === original?.id\n          )[0];\n\n          setIsInfoToggled(true);\n          setSelectedNodeID(nodeID);\n        }}\n      />\n    </>\n  ) : (\n    <div>{t('workflowDetailsView.argoWorkflow.loading')}</div>\n  );\n};\n\nexport default ArgoWorkflow;\n"]},"metadata":{},"sourceType":"module"}