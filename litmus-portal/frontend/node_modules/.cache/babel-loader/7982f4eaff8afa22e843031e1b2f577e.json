{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/MyHub/MyHubCharts/chartCard.tsx\";\n\nimport { Card, CardContent, Link, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport config from '../../../config';\nimport { history } from '../../../redux/configureStore';\nimport useStyles from './styles';\n\nvar ChartCard = function ChartCard(_ref) {\n  var expName = _ref.expName,\n      UserHub = _ref.UserHub,\n      setSearch = _ref.setSearch,\n      projectID = _ref.projectID,\n      userRole = _ref.userRole,\n      isPredefined = _ref.isPredefined;\n  var classes = useStyles();\n  var experimentDefaultImagePath = \"\".concat(config.grahqlEndpoint, \"/icon\");\n\n  var _useState = useState(\"\".concat(experimentDefaultImagePath, \"/\").concat(projectID, \"/\").concat(UserHub === null || UserHub === void 0 ? void 0 : UserHub.HubName, \"/\").concat(expName.ChaosName, \"/\").concat(expName.ExperimentName, \".png\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageURL = _useState2[0],\n      setImageURL = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    key: expName.ExperimentName,\n    elevation: 3,\n    className: classes.cardDiv,\n    onClick: function onClick() {\n      history.push({\n        pathname: \"\".concat(UserHub === null || UserHub === void 0 ? void 0 : UserHub.HubName, \"/\").concat(expName.ChaosName, \"/\").concat(expName.ExperimentName),\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(userRole)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.cardContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: imageURL,\n    onError: function onError() {\n      return setImageURL('/icons/default-experiment.svg');\n    },\n    alt: expName.ExperimentName,\n    className: classes.cardImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    href: \"#\",\n    onClick: function onClick(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearch(expName.ChaosName);\n    },\n    className: classes.categoryName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, !isPredefined && \"\".concat(expName.ChaosName, \"/\")), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.expName,\n    variant: \"h6\",\n    align: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, expName.ExperimentName))));\n};\n\nexport default ChartCard;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/MyHub/MyHubCharts/chartCard.tsx"],"names":["Card","CardContent","Link","Typography","React","useState","config","history","useStyles","ChartCard","expName","UserHub","setSearch","projectID","userRole","isPredefined","classes","experimentDefaultImagePath","grahqlEndpoint","HubName","ChaosName","ExperimentName","imageURL","setImageURL","cardDiv","push","pathname","search","cardContent","cardImage","e","preventDefault","stopPropagation","categoryName"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,WAAf,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,mBAApD;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAgBA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,OAOtC;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,YACI,QADJA,YACI;AACJ,MAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,MAAMS,0BAA0B,aAAMX,MAAM,CAACY,cAAb,UAAhC;;AAEA,kBAAgCb,QAAQ,WACnCY,0BADmC,cACLJ,SADK,cACQF,OADR,aACQA,OADR,uBACQA,OAAO,CAAEQ,OADjB,cAC4BT,OAAO,CAACU,SADpC,cACiDV,OAAO,CAACW,cADzD,UAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAGA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEb,OAAO,CAACW,cADf;AAEE,IAAA,SAAS,EAAE,CAFb;AAGE,IAAA,SAAS,EAAEL,OAAO,CAACQ,OAHrB;AAIE,IAAA,OAAO,EAAE,mBAAM;AACbjB,MAAAA,OAAO,CAACkB,IAAR,CAAa;AACXC,QAAAA,QAAQ,YAAKf,OAAL,aAAKA,OAAL,uBAAKA,OAAO,CAAEQ,OAAd,cAAyBT,OAAO,CAACU,SAAjC,cAA8CV,OAAO,CAACW,cAAtD,CADG;AAEXM,QAAAA,MAAM,uBAAgBd,SAAhB,0BAAyCC,QAAzC;AAFK,OAAb;AAID,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEE,OAAO,CAACY,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAEN,QADP;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMC,WAAW,CAAC,+BAAD,CAAjB;AAAA,KAFX;AAGE,IAAA,GAAG,EAAEb,OAAO,CAACW,cAHf;AAIE,IAAA,SAAS,EAAEL,OAAO,CAACa,SAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAC,GADP;AAEE,IAAA,OAAO,EAAE,iBAACC,CAAD,EAAY;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACAD,MAAAA,CAAC,CAACE,eAAF;AACApB,MAAAA,SAAS,CAACF,OAAO,CAACU,SAAT,CAAT;AACD,KANH;AAOE,IAAA,SAAS,EAAEJ,OAAO,CAACiB,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,CAAClB,YAAD,cAAoBL,OAAO,CAACU,SAA5B,MATH,CAPF,eAkBE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEJ,OAAO,CAACN,OAA/B;AAAwC,IAAA,OAAO,EAAC,IAAhD;AAAqD,IAAA,KAAK,EAAC,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACW,cADX,CAlBF,CAXF,CADF,CADF;AAsCD,CApDD;;AAqDA,eAAeZ,SAAf","sourcesContent":["import { Card, CardContent, Link, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport config from '../../../config';\nimport { HubDetails } from '../../../models/redux/myhub';\nimport { history } from '../../../redux/configureStore';\nimport useStyles from './styles';\n\ninterface ChartName {\n  ChaosName: string;\n  ExperimentName: string;\n}\n\ninterface ChartCardProps {\n  expName: ChartName;\n  UserHub: HubDetails | undefined;\n  setSearch: React.Dispatch<React.SetStateAction<string>>;\n  projectID: string;\n  userRole: string;\n  isPredefined?: boolean;\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({\n  expName,\n  UserHub,\n  setSearch,\n  projectID,\n  userRole,\n  isPredefined,\n}) => {\n  const classes = useStyles();\n  const experimentDefaultImagePath = `${config.grahqlEndpoint}/icon`;\n\n  const [imageURL, setImageURL] = useState(\n    `${experimentDefaultImagePath}/${projectID}/${UserHub?.HubName}/${expName.ChaosName}/${expName.ExperimentName}.png`\n  );\n  return (\n    <div>\n      <Card\n        key={expName.ExperimentName}\n        elevation={3}\n        className={classes.cardDiv}\n        onClick={() => {\n          history.push({\n            pathname: `${UserHub?.HubName}/${expName.ChaosName}/${expName.ExperimentName}`,\n            search: `?projectID=${projectID}&projectRole=${userRole}`,\n          });\n        }}\n      >\n        <CardContent className={classes.cardContent}>\n          <img\n            src={imageURL}\n            onError={() => setImageURL('/icons/default-experiment.svg')}\n            alt={expName.ExperimentName}\n            className={classes.cardImage}\n          />\n          <Link\n            href=\"#\"\n            onClick={(e: any) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setSearch(expName.ChaosName);\n            }}\n            className={classes.categoryName}\n          >\n            {!isPredefined && `${expName.ChaosName}/`}\n          </Link>\n          <Typography className={classes.expName} variant=\"h6\" align=\"center\">\n            {expName.ExperimentName}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\nexport default ChartCard;\n"]},"metadata":{},"sourceType":"module"}