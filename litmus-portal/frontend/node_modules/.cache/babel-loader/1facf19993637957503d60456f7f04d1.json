{"ast":null,"code":"import _toConsumableArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/InfoDropdown/index.tsx\";\n\nimport { FormControlLabel, Typography } from '@material-ui/core';\nimport { TextButton } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CheckBox } from '../../../../components/CheckBox';\nimport { ReactComponent as ExternalLinkIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/externalLink.svg\";\nimport { ReactComponent as PrometheusIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../svg/prometheus.svg\";\nimport useStyles, { FormGroupApplicationsGrid, FormGroupGrid } from './styles';\n\nvar InfoDropdown = function InfoDropdown(_ref) {\n  var dashboardConfigurationDetails = _ref.dashboardConfigurationDetails,\n      metricsToBeShown = _ref.metricsToBeShown,\n      applicationsToBeShown = _ref.applicationsToBeShown,\n      postPanelSelectionRoutine = _ref.postPanelSelectionRoutine,\n      postApplicationSelectionRoutine = _ref.postApplicationSelectionRoutine;\n  var classes = useStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedApplications = _React$useState2[0],\n      setSelectedApplications = _React$useState2[1];\n\n  var _React$useState3 = React.useState(metricsToBeShown.map(function (metric) {\n    return metric.id;\n  })),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedMetrics = _React$useState4[0],\n      setSelectedMetrics = _React$useState4[1];\n\n  var handleApplicationSelect = function handleApplicationSelect(selectedApplication) {\n    var newSelectedApps = (selectedApplications === null || selectedApplications === void 0 ? void 0 : selectedApplications.includes(selectedApplication)) ? selectedApplications === null || selectedApplications === void 0 ? void 0 : selectedApplications.filter(function (name) {\n      return name !== selectedApplication;\n    }) : [].concat(_toConsumableArray(selectedApplications !== null && selectedApplications !== void 0 ? selectedApplications : []), [selectedApplication]);\n    setSelectedApplications(newSelectedApps);\n    postApplicationSelectionRoutine(newSelectedApps);\n  };\n\n  var handleMetricSelect = function handleMetricSelect(selectedMetric) {\n    var newSelectedMetrics = (selectedMetrics === null || selectedMetrics === void 0 ? void 0 : selectedMetrics.includes(selectedMetric)) ? selectedMetrics === null || selectedMetrics === void 0 ? void 0 : selectedMetrics.filter(function (id) {\n      return id !== selectedMetric;\n    }) : [].concat(_toConsumableArray(selectedMetrics !== null && selectedMetrics !== void 0 ? selectedMetrics : []), [selectedMetric]);\n    setSelectedMetrics(newSelectedMetrics);\n    postPanelSelectionRoutine(newSelectedMetrics);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.headerText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.header'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.body,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.infoSectionElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.sectionHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading1')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dashboardMetaDataItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData1')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, dashboardConfigurationDetails.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dashboardMetaDataItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData2')), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.iconWithTextDiv,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/icons/\".concat(dashboardConfigurationDetails.typeID, \"_dashboard.svg\"),\n    alt: \"dashboard Icon\",\n    className: classes.inlineIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, dashboardConfigurationDetails.typeName))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dashboardMetaDataItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData3')), /*#__PURE__*/React.createElement(TextButton, {\n    className: classes.button,\n    onClick: function onClick() {\n      return window.open(dashboardConfigurationDetails.dataSourceURL);\n    },\n    startIcon: /*#__PURE__*/React.createElement(PrometheusIcon, {\n      className: classes.inlineIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 26\n      }\n    }),\n    endIcon: /*#__PURE__*/React.createElement(ExternalLinkIcon, {\n      className: classes.inlineIcon,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 24\n      }\n    }),\n    classes: {\n      label: classes.buttonLabel\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, dashboardConfigurationDetails.dataSourceName))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dashboardMetaDataItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData4')), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.infoValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, dashboardConfigurationDetails.agentName))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.infoSectionElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.sectionHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading2')), /*#__PURE__*/React.createElement(FormGroupApplicationsGrid, {\n    key: \"application-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, applicationsToBeShown === null || applicationsToBeShown === void 0 ? void 0 : applicationsToBeShown.map(function (applicationMetadata) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"\".concat(applicationMetadata.namespace, \"-namespace\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.namespaceBox,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.infoKey,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.infoKeyNamespace')), /*#__PURE__*/React.createElement(Typography, {\n      className: classes.infoValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, applicationMetadata.namespace)), applicationMetadata.applications.map(function (resource) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: \"\".concat(resource.kind, \"-resource\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 23\n        }\n      }, resource.names.map(function (name) {\n        return /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(CheckBox, {\n            checked: selectedApplications.includes(name),\n            onChange: function onChange() {\n              return handleApplicationSelect(name);\n            },\n            name: name,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 31\n            }\n          }),\n          label: /*#__PURE__*/React.createElement(Typography, {\n            className: classes.formControlLabel,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 31\n            }\n          }, \"\".concat(resource.kind, \" / \").concat(name)),\n          key: \"\".concat(resource.kind, \" / \").concat(name, \"-application-label\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 27\n          }\n        });\n      }));\n    }));\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.infoSectionElement,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.sectionHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading3')), /*#__PURE__*/React.createElement(FormGroupGrid, {\n    key: \"metric-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, metricsToBeShown.map(function (metric) {\n    return /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(CheckBox, {\n        checked: selectedMetrics.includes(metric.id),\n        onChange: function onChange() {\n          return handleMetricSelect(metric.id);\n        },\n        name: metric.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 19\n        }\n      }),\n      label: /*#__PURE__*/React.createElement(Typography, {\n        className: classes.formControlLabel,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 19\n        }\n      }, metric.name),\n      key: \"\".concat(metric, \"-metric-label\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    });\n  })))));\n};\n\nexport default InfoDropdown;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/ApplicationDashboard/InfoDropdown/index.tsx"],"names":["FormControlLabel","Typography","TextButton","React","useTranslation","CheckBox","useStyles","FormGroupApplicationsGrid","FormGroupGrid","InfoDropdown","dashboardConfigurationDetails","metricsToBeShown","applicationsToBeShown","postPanelSelectionRoutine","postApplicationSelectionRoutine","classes","t","useState","selectedApplications","setSelectedApplications","map","metric","id","selectedMetrics","setSelectedMetrics","handleApplicationSelect","selectedApplication","newSelectedApps","includes","filter","name","handleMetricSelect","selectedMetric","newSelectedMetrics","root","header","headerText","body","infoSectionElement","sectionHeader","dashboardMetaDataItem","infoKey","infoValue","iconWithTextDiv","typeID","inlineIcon","typeName","button","window","open","dataSourceURL","label","buttonLabel","dataSourceName","agentName","applicationMetadata","namespace","namespaceBox","applications","resource","kind","names","formControlLabel"],"mappings":"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","sourcesContent":["import { FormControlLabel, Typography } from '@material-ui/core';\nimport { TextButton } from 'litmus-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CheckBox } from '../../../../components/CheckBox';\nimport {\n  DashboardConfigurationDetails,\n  PanelNameAndID,\n} from '../../../../models/dashboardsData';\nimport {\n  ApplicationMetadata,\n  Resource,\n} from '../../../../models/graphql/dashboardsDetails';\nimport { ReactComponent as ExternalLinkIcon } from '../../../../svg/externalLink.svg';\nimport { ReactComponent as PrometheusIcon } from '../../../../svg/prometheus.svg';\nimport useStyles, { FormGroupApplicationsGrid, FormGroupGrid } from './styles';\n\ninterface InfoDropdownProps {\n  dashboardConfigurationDetails: DashboardConfigurationDetails;\n  metricsToBeShown: PanelNameAndID[];\n  applicationsToBeShown: ApplicationMetadata[];\n  postPanelSelectionRoutine: (selectedPanelList: string[]) => void;\n  postApplicationSelectionRoutine: (selectedApplicationList: string[]) => void;\n}\n\nconst InfoDropdown: React.FC<InfoDropdownProps> = ({\n  dashboardConfigurationDetails,\n  metricsToBeShown,\n  applicationsToBeShown,\n  postPanelSelectionRoutine,\n  postApplicationSelectionRoutine,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const [selectedApplications, setSelectedApplications] = React.useState<\n    string[]\n  >([]);\n\n  const [selectedMetrics, setSelectedMetrics] = React.useState<string[]>(\n    metricsToBeShown.map((metric) => metric.id)\n  );\n\n  const handleApplicationSelect = (selectedApplication: string) => {\n    const newSelectedApps = selectedApplications?.includes(selectedApplication)\n      ? selectedApplications?.filter((name) => name !== selectedApplication)\n      : [...(selectedApplications ?? []), selectedApplication];\n    setSelectedApplications(newSelectedApps);\n    postApplicationSelectionRoutine(newSelectedApps);\n  };\n\n  const handleMetricSelect = (selectedMetric: string) => {\n    const newSelectedMetrics = selectedMetrics?.includes(selectedMetric)\n      ? selectedMetrics?.filter((id) => id !== selectedMetric)\n      : [...(selectedMetrics ?? []), selectedMetric];\n    setSelectedMetrics(newSelectedMetrics);\n    postPanelSelectionRoutine(newSelectedMetrics);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography className={classes.headerText}>\n          {t('analyticsDashboard.monitoringDashboardPage.infoDropdown.header')}\n        </Typography>\n      </div>\n      <div className={classes.body}>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading1'\n            )}\n          </Typography>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData1'\n              )}\n            </Typography>\n            <Typography className={classes.infoValue}>\n              {dashboardConfigurationDetails.name}\n            </Typography>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData2'\n              )}\n            </Typography>\n            <div className={classes.iconWithTextDiv}>\n              <img\n                src={`/icons/${dashboardConfigurationDetails.typeID}_dashboard.svg`}\n                alt=\"dashboard Icon\"\n                className={classes.inlineIcon}\n              />\n              <Typography className={classes.infoValue}>\n                {dashboardConfigurationDetails.typeName}\n              </Typography>\n            </div>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData3'\n              )}\n            </Typography>\n            <TextButton\n              className={classes.button}\n              onClick={() =>\n                window.open(dashboardConfigurationDetails.dataSourceURL)\n              }\n              startIcon={<PrometheusIcon className={classes.inlineIcon} />}\n              endIcon={<ExternalLinkIcon className={classes.inlineIcon} />}\n              classes={{ label: classes.buttonLabel }}\n            >\n              <Typography className={classes.infoValue}>\n                {dashboardConfigurationDetails.dataSourceName}\n              </Typography>\n            </TextButton>\n          </div>\n          <div className={classes.dashboardMetaDataItem}>\n            <Typography className={classes.infoKey}>\n              {t(\n                'analyticsDashboard.monitoringDashboardPage.infoDropdown.metaData4'\n              )}\n            </Typography>\n            <Typography className={classes.infoValue}>\n              {dashboardConfigurationDetails.agentName}\n            </Typography>\n          </div>\n        </div>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading2'\n            )}\n          </Typography>\n          <FormGroupApplicationsGrid key=\"application-group\">\n            {applicationsToBeShown?.map(\n              (applicationMetadata: ApplicationMetadata) => (\n                <div key={`${applicationMetadata.namespace}-namespace`}>\n                  <div className={classes.namespaceBox}>\n                    <Typography className={classes.infoKey}>\n                      {t(\n                        'analyticsDashboard.monitoringDashboardPage.infoDropdown.infoKeyNamespace'\n                      )}\n                    </Typography>\n                    <Typography className={classes.infoValue}>\n                      {applicationMetadata.namespace}\n                    </Typography>\n                  </div>\n                  {applicationMetadata.applications.map(\n                    (resource: Resource) => (\n                      <div key={`${resource.kind}-resource`}>\n                        {resource.names.map((name: string) => (\n                          <FormControlLabel\n                            control={\n                              <CheckBox\n                                checked={selectedApplications.includes(name)}\n                                onChange={() => handleApplicationSelect(name)}\n                                name={name}\n                              />\n                            }\n                            label={\n                              <Typography className={classes.formControlLabel}>\n                                {`${resource.kind} / ${name}`}\n                              </Typography>\n                            }\n                            key={`${resource.kind} / ${name}-application-label`}\n                          />\n                        ))}\n                      </div>\n                    )\n                  )}\n                </div>\n              )\n            )}\n          </FormGroupApplicationsGrid>\n        </div>\n        <div className={classes.infoSectionElement}>\n          <Typography className={classes.sectionHeader}>\n            {t(\n              'analyticsDashboard.monitoringDashboardPage.infoDropdown.subHeading3'\n            )}\n          </Typography>\n          <FormGroupGrid key=\"metric-group\">\n            {metricsToBeShown.map((metric: PanelNameAndID) => (\n              <FormControlLabel\n                control={\n                  <CheckBox\n                    checked={selectedMetrics.includes(metric.id)}\n                    onChange={() => handleMetricSelect(metric.id)}\n                    name={metric.name}\n                  />\n                }\n                label={\n                  <Typography className={classes.formControlLabel}>\n                    {metric.name}\n                  </Typography>\n                }\n                key={`${metric}-metric-label`}\n              />\n            ))}\n          </FormGroupGrid>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoDropdown;\n"]},"metadata":{},"sourceType":"module"}