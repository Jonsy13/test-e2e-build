{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable jsx-a11y/click-events-have-key-events */ /* eslint-disable jsx-a11y/no-static-element-interactions */import{Typography}from'@material-ui/core';import{ButtonOutlined,Modal}from'litmus-ui';import React,{useState,useEffect}from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import useStyles from'./styles';import timeDifference from'../../../utils/datesModifier';import*as NodeSelectionActions from'../../../redux/actions/nodeSelection';import trimstring from'../../../utils/trim';import useActions from'../../../redux/actions';import WorkflowStatus from'../WorkflowStatus';import LogsSwitcher from'../LogsSwitcher';var NodeLogsModal=function NodeLogsModal(_ref){var logsOpen=_ref.logsOpen,handleClose=_ref.handleClose,cluster_id=_ref.cluster_id,workflow_run_id=_ref.workflow_run_id,data=_ref.data,workflow_name=_ref.workflow_name;var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var nodeSelection=useActions(NodeSelectionActions);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),nodesArray=_useState2[0],setNodesArray=_useState2[1];var _useSelector=useSelector(function(state){return state.selectedNode;}),pod_name=_useSelector.pod_name;var changeNodeLogs=function changeNodeLogs(selectedKey){nodeSelection.selectNode(_objectSpread(_objectSpread({},data.nodes[selectedKey]),{},{pod_name:selectedKey}));};useEffect(function(){var filteredNodes=[];Object.keys(data.nodes).forEach(function(key){if(data.nodes[key].type!=='StepGroup'&&data.nodes[key].type!=='Steps'){filteredNodes.push(_objectSpread(_objectSpread({},data.nodes[key]),{},{id:key}));}});setNodesArray([].concat(filteredNodes));},[data]);return/*#__PURE__*/React.createElement(Modal,{open:logsOpen,onClose:handleClose,modalActions:/*#__PURE__*/React.createElement(ButtonOutlined,{className:classes.closeButton,onClick:handleClose},\"\\u2715\")},/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(\"div\",{className:classes.header},/*#__PURE__*/React.createElement(Typography,{className:classes.title},t('workflowDetailsView.headerDesc'),\" \",workflow_name)),/*#__PURE__*/React.createElement(\"div\",{className:classes.section},/*#__PURE__*/React.createElement(\"div\",{className:classes.nodesData},nodesArray.map(function(node){return/*#__PURE__*/React.createElement(\"div\",{className:\"\".concat(classes.nodeData,\"\\n                  \").concat(node.id===pod_name&&classes.selectedNode),onClick:function onClick(){return changeNodeLogs(node.id);},key:node.id},/*#__PURE__*/React.createElement(\"div\",{className:classes.experiment},/*#__PURE__*/React.createElement(\"span\",{className:classes.icon},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/experiment_icon.svg\",alt:\"Experiment Icon\"})),/*#__PURE__*/React.createElement(Typography,{className:classes.nodeName},trimstring(node.name,20))),/*#__PURE__*/React.createElement(\"div\",{className:classes.statusWidth},/*#__PURE__*/React.createElement(WorkflowStatus,{phase:node.phase})));})),/*#__PURE__*/React.createElement(\"div\",{className:classes.logsPanel},/*#__PURE__*/React.createElement(\"div\",{className:classes.logsHeader},/*#__PURE__*/React.createElement(\"div\",{className:classes.experiment},/*#__PURE__*/React.createElement(\"span\",{className:classes.icon},/*#__PURE__*/React.createElement(\"img\",{src:\"/icons/experiment_icon.svg\",alt:\"Experiment Icon\"})),/*#__PURE__*/React.createElement(Typography,{className:classes.nodeName},/*#__PURE__*/React.createElement(\"strong\",null,trimstring(data.nodes[pod_name].name,30)))),/*#__PURE__*/React.createElement(WorkflowStatus,{phase:data.nodes[pod_name].phase}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Typography,{className:classes.subLogsHeader},/*#__PURE__*/React.createElement(\"strong\",null,t('workflowDetailsView.workflowInfo.runTime.startTime'))),/*#__PURE__*/React.createElement(Typography,null,data.nodes[pod_name].phase==='Pending'?'- -':timeDifference(data.nodes[pod_name].startedAt))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Typography,{className:classes.subLogsHeader},/*#__PURE__*/React.createElement(\"strong\",null,t('workflowDetailsView.workflowInfo.runTime.endTime'))),/*#__PURE__*/React.createElement(Typography,null,data.nodes[pod_name].finishedAt===''?/*#__PURE__*/React.createElement(\"span\",null,\"- -\"):/*#__PURE__*/React.createElement(\"span\",null,timeDifference(data.nodes[pod_name].finishedAt))))),/*#__PURE__*/React.createElement(\"div\",{className:classes.logsHeight},/*#__PURE__*/React.createElement(LogsSwitcher,{cluster_id:cluster_id,workflow_run_id:workflow_run_id,pod_namespace:data.namespace,pod_name:pod_name,pod_type:data.nodes[pod_name].type}))))));};export default NodeLogsModal;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/WorkflowDetails/LogsModal/index.tsx"],"names":["Typography","ButtonOutlined","Modal","React","useState","useEffect","useTranslation","useSelector","useStyles","timeDifference","NodeSelectionActions","trimstring","useActions","WorkflowStatus","LogsSwitcher","NodeLogsModal","logsOpen","handleClose","cluster_id","workflow_run_id","data","workflow_name","classes","t","nodeSelection","nodesArray","setNodesArray","state","selectedNode","pod_name","changeNodeLogs","selectedKey","selectNode","nodes","filteredNodes","Object","keys","forEach","key","type","push","id","closeButton","root","header","title","section","nodesData","map","node","nodeData","experiment","icon","nodeName","name","statusWidth","phase","logsPanel","logsHeader","subLogsHeader","startedAt","finishedAt","logsHeight","namespace"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { Typography } from '@material-ui/core';\nimport { ButtonOutlined, Modal } from 'litmus-ui';\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport timeDifference from '../../../utils/datesModifier';\nimport { RootState } from '../../../redux/reducers';\nimport { ExecutionData, Node } from '../../../models/graphql/workflowData';\nimport * as NodeSelectionActions from '../../../redux/actions/nodeSelection';\nimport trimstring from '../../../utils/trim';\nimport useActions from '../../../redux/actions';\nimport WorkflowStatus from '../WorkflowStatus';\nimport LogsSwitcher from '../LogsSwitcher';\n\ninterface NodeLogsModalProps {\n  logsOpen: boolean;\n  handleClose: () => void;\n  cluster_id: string;\n  workflow_run_id: string;\n  data: ExecutionData;\n  workflow_name: string;\n}\n\ninterface SelectedNodeType extends Node {\n  id: string;\n}\n\nconst NodeLogsModal: React.FC<NodeLogsModalProps> = ({\n  logsOpen,\n  handleClose,\n  cluster_id,\n  workflow_run_id,\n  data,\n  workflow_name,\n}) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const nodeSelection = useActions(NodeSelectionActions);\n  const [nodesArray, setNodesArray] = useState<SelectedNodeType[]>([]);\n\n  const { pod_name } = useSelector((state: RootState) => state.selectedNode);\n\n  const changeNodeLogs = (selectedKey: string) => {\n    nodeSelection.selectNode({\n      ...data.nodes[selectedKey],\n      pod_name: selectedKey,\n    });\n  };\n\n  useEffect(() => {\n    const filteredNodes: SelectedNodeType[] = [];\n    Object.keys(data.nodes).forEach((key) => {\n      if (\n        data.nodes[key].type !== 'StepGroup' &&\n        data.nodes[key].type !== 'Steps'\n      ) {\n        filteredNodes.push({ ...data.nodes[key], id: key });\n      }\n    });\n    setNodesArray([...filteredNodes]);\n  }, [data]);\n\n  return (\n    <Modal\n      open={logsOpen}\n      onClose={handleClose}\n      modalActions={\n        <ButtonOutlined className={classes.closeButton} onClick={handleClose}>\n          &#x2715;\n        </ButtonOutlined>\n      }\n    >\n      <div className={classes.root}>\n        <div className={classes.header}>\n          <Typography className={classes.title}>\n            {t('workflowDetailsView.headerDesc')} {workflow_name}\n          </Typography>\n        </div>\n        <div className={classes.section}>\n          <div className={classes.nodesData}>\n            {nodesArray.map((node: SelectedNodeType) => (\n              <div\n                className={`${classes.nodeData}\n                  ${node.id === pod_name && classes.selectedNode}`}\n                onClick={() => changeNodeLogs(node.id)}\n                key={node.id}\n              >\n                <div className={classes.experiment}>\n                  <span className={classes.icon}>\n                    <img\n                      src=\"/icons/experiment_icon.svg\"\n                      alt=\"Experiment Icon\"\n                    />\n                  </span>\n                  <Typography className={classes.nodeName}>\n                    {trimstring(node.name, 20)}\n                  </Typography>\n                </div>\n                <div className={classes.statusWidth}>\n                  <WorkflowStatus phase={node.phase} />\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className={classes.logsPanel}>\n            <div className={classes.logsHeader}>\n              <div className={classes.experiment}>\n                <span className={classes.icon}>\n                  <img src=\"/icons/experiment_icon.svg\" alt=\"Experiment Icon\" />\n                </span>\n                <Typography className={classes.nodeName}>\n                  <strong>{trimstring(data.nodes[pod_name].name, 30)}</strong>\n                </Typography>\n              </div>\n              <WorkflowStatus phase={data.nodes[pod_name].phase} />\n              <div>\n                <Typography className={classes.subLogsHeader}>\n                  <strong>\n                    {t('workflowDetailsView.workflowInfo.runTime.startTime')}\n                  </strong>\n                </Typography>\n                <Typography>\n                  {data.nodes[pod_name].phase === 'Pending'\n                    ? '- -'\n                    : timeDifference(data.nodes[pod_name].startedAt)}\n                </Typography>\n              </div>\n              <div>\n                <Typography className={classes.subLogsHeader}>\n                  <strong>\n                    {t('workflowDetailsView.workflowInfo.runTime.endTime')}\n                  </strong>\n                </Typography>\n                <Typography>\n                  {data.nodes[pod_name].finishedAt === '' ? (\n                    <span>- -</span>\n                  ) : (\n                    <span>\n                      {timeDifference(data.nodes[pod_name].finishedAt)}\n                    </span>\n                  )}\n                </Typography>\n              </div>\n            </div>\n            <div className={classes.logsHeight}>\n              <LogsSwitcher\n                cluster_id={cluster_id}\n                workflow_run_id={workflow_run_id}\n                pod_namespace={data.namespace}\n                pod_name={pod_name}\n                pod_type={data.nodes[pod_name].type}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default NodeLogsModal;\n"]},"metadata":{},"sourceType":"module"}