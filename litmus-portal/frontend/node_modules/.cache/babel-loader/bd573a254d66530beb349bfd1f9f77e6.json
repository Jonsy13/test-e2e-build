{"ast":null,"code":"import _regeneratorRuntime from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{AccordionDetails,Button,Paper,Typography}from'@material-ui/core';import{ButtonFilled}from'litmus-ui';import localforage from'localforage';import React,{useState}from'react';import{useTranslation}from'react-i18next';import{useSelector}from'react-redux';import YAML from'yaml';import useActions from'../../../redux/actions';import*as WorkflowActions from'../../../redux/actions/workflow';import{updateEngineName,updateNamespace}from'../../../utils/yamlUtils';import useStyles from'./styles';var UploadYAML=function UploadYAML(){var classes=useStyles();var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),uploadedYAML=_useState2[0],setUploadedYAML=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),fileName=_useState4[0],setFileName=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),uploadError=_useState6[0],setUploadError=_useState6[1];var workflowAction=useActions(WorkflowActions);var _useSelector=useSelector(function(state){return state.workflowData;}),namespace=_useSelector.namespace;var saveToLocalForage=function saveToLocalForage(){var selection={selected:'D'};localforage.setItem('selectedScheduleOption',selection);localforage.setItem('hasSetWorkflowData',false);};// Function to handle when a File is dragged on the upload field\nvar handleDrag=function handleDrag(e){Array.from(e.dataTransfer.files).filter(function(file){return file.name.split('.')[1]==='yaml'||file.name.split('.')[1]==='yml';}).forEach(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(file){var readFile,wfmanifest,updatedManifest;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return file.text();case 2:readFile=_context.sent;setUploadedYAML(readFile);setFileName(file.name);try{setUploadError(false);wfmanifest=updateEngineName(YAML.parse(readFile));updatedManifest=updateNamespace(wfmanifest,namespace);workflowAction.setWorkflowManifest({manifest:YAML.stringify(updatedManifest)});}catch(_unused){setUploadError(true);workflowAction.setWorkflowManifest({manifest:''});}case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());saveToLocalForage();};// Function to handle File upload on button click\nvar handleFileUpload=function handleFileUpload(e){var readFile=e.target.files&&e.target.files[0];setFileName(readFile&&readFile.name);var extension=readFile===null||readFile===void 0?void 0:readFile.name.substring(readFile.name.lastIndexOf('.')+1);if((extension==='yaml'||extension==='yml')&&readFile){readFile.text().then(function(response){setUploadedYAML(response);try{setUploadError(false);var wfmanifest=updateEngineName(YAML.parse(response));var updatedManifest=updateNamespace(wfmanifest,namespace);workflowAction.setWorkflowManifest({manifest:YAML.stringify(updatedManifest)});}catch(_unused2){setUploadError(true);workflowAction.setWorkflowManifest({manifest:''});}});}saveToLocalForage();};return/*#__PURE__*/React.createElement(AccordionDetails,null,/*#__PURE__*/React.createElement(Paper,{elevation:3,component:\"div\",onDragOver:function onDragOver(e){e.preventDefault();},onDrop:function onDrop(e){e.preventDefault();handleDrag(e);},className:classes.uploadYAMLDiv},uploadError?/*#__PURE__*/React.createElement(\"div\",{className:classes.uploadSuccessDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"./icons/error-upload.svg\",alt:\"upload error\",width:\"20\",height:\"20\"}),/*#__PURE__*/React.createElement(Typography,{className:classes.errorText},t('customWorkflow.createWorkflow.errorUpload')),/*#__PURE__*/React.createElement(ButtonFilled,{className:classes.errorBtn,onClick:function onClick(){setUploadedYAML('');setUploadError(false);}},/*#__PURE__*/React.createElement(\"img\",{src:\"./icons/retry.svg\",alt:\"Retry\"}),/*#__PURE__*/React.createElement(Typography,{className:classes.retryText},t('customWorkflow.createWorkflow.retryUpload')))):uploadedYAML===''?/*#__PURE__*/React.createElement(\"div\",{className:classes.uploadYAMLText,\"data-cy\":\"uploadYAMLInput\"},/*#__PURE__*/React.createElement(\"img\",{src:\"./icons/upload-yaml.svg\",alt:\"upload yaml\",className:classes.uploadImage}),/*#__PURE__*/React.createElement(Typography,{variant:\"h6\"},t('customWorkflow.createWorkflow.drag')),/*#__PURE__*/React.createElement(Typography,{className:classes.orText},\"or\"),/*#__PURE__*/React.createElement(\"input\",{accept:\".yaml\",style:{display:'none'},id:\"contained-button-file\",type:\"file\",onChange:function onChange(e){handleFileUpload(e);}}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"contained-button-file\"},/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"contained-button-file\"},/*#__PURE__*/React.createElement(Button,{variant:\"outlined\",className:classes.uploadBtn,component:\"span\"},t('customWorkflow.createWorkflow.uploadFile'))))):/*#__PURE__*/React.createElement(\"div\",{className:classes.uploadSuccessDiv},/*#__PURE__*/React.createElement(\"img\",{src:\"./icons/upload-success.svg\",alt:\"checkmark\",className:classes.uploadSuccessImg}),/*#__PURE__*/React.createElement(Typography,{className:classes.uploadSuccessText},t('customWorkflow.createWorkflow.uploadSuccess'),\" \",fileName))));};export default UploadYAML;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/CreateWorkflow/ChooseWorkflow/uploadYAML.tsx"],"names":["AccordionDetails","Button","Paper","Typography","ButtonFilled","localforage","React","useState","useTranslation","useSelector","YAML","useActions","WorkflowActions","updateEngineName","updateNamespace","useStyles","UploadYAML","classes","t","uploadedYAML","setUploadedYAML","fileName","setFileName","uploadError","setUploadError","workflowAction","state","workflowData","namespace","saveToLocalForage","selection","selected","setItem","handleDrag","e","Array","from","dataTransfer","files","filter","file","name","split","forEach","text","readFile","wfmanifest","parse","updatedManifest","setWorkflowManifest","manifest","stringify","handleFileUpload","target","extension","substring","lastIndexOf","then","response","preventDefault","uploadYAMLDiv","uploadSuccessDiv","errorText","errorBtn","retryText","uploadYAMLText","uploadImage","orText","display","uploadBtn","uploadSuccessImg","uploadSuccessText"],"mappings":"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","sourcesContent":["import { AccordionDetails, Button, Paper, Typography } from '@material-ui/core';\nimport { ButtonFilled } from 'litmus-ui';\nimport localforage from 'localforage';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport YAML from 'yaml';\nimport useActions from '../../../redux/actions';\nimport * as WorkflowActions from '../../../redux/actions/workflow';\nimport { RootState } from '../../../redux/reducers';\nimport { updateEngineName, updateNamespace } from '../../../utils/yamlUtils';\nimport useStyles from './styles';\n\ninterface ChooseWorkflowRadio {\n  selected: string;\n}\n\nconst UploadYAML = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [uploadedYAML, setUploadedYAML] = useState('');\n  const [fileName, setFileName] = useState<string | null>('');\n  const [uploadError, setUploadError] = useState(false);\n  const workflowAction = useActions(WorkflowActions);\n  const { namespace } = useSelector((state: RootState) => state.workflowData);\n\n  const saveToLocalForage = () => {\n    const selection: ChooseWorkflowRadio = {\n      selected: 'D',\n    };\n    localforage.setItem('selectedScheduleOption', selection);\n    localforage.setItem('hasSetWorkflowData', false);\n  };\n\n  // Function to handle when a File is dragged on the upload field\n  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {\n    Array.from(e.dataTransfer.files)\n      .filter(\n        (file) =>\n          file.name.split('.')[1] === 'yaml' ||\n          file.name.split('.')[1] === 'yml'\n      )\n      .forEach(async (file) => {\n        const readFile = await file.text();\n        setUploadedYAML(readFile);\n        setFileName(file.name);\n        try {\n          setUploadError(false);\n          const wfmanifest = updateEngineName(YAML.parse(readFile));\n          const updatedManifest = updateNamespace(wfmanifest, namespace);\n          workflowAction.setWorkflowManifest({\n            manifest: YAML.stringify(updatedManifest),\n          });\n        } catch {\n          setUploadError(true);\n          workflowAction.setWorkflowManifest({\n            manifest: '',\n          });\n        }\n      });\n    saveToLocalForage();\n  };\n\n  // Function to handle File upload on button click\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const readFile = e.target.files && e.target.files[0];\n    setFileName(readFile && readFile.name);\n    const extension = readFile?.name.substring(\n      readFile.name.lastIndexOf('.') + 1\n    );\n    if ((extension === 'yaml' || extension === 'yml') && readFile) {\n      readFile.text().then((response) => {\n        setUploadedYAML(response);\n        try {\n          setUploadError(false);\n          const wfmanifest = updateEngineName(YAML.parse(response));\n          const updatedManifest = updateNamespace(wfmanifest, namespace);\n          workflowAction.setWorkflowManifest({\n            manifest: YAML.stringify(updatedManifest),\n          });\n        } catch {\n          setUploadError(true);\n          workflowAction.setWorkflowManifest({\n            manifest: '',\n          });\n        }\n      });\n    }\n    saveToLocalForage();\n  };\n  return (\n    <AccordionDetails>\n      <Paper\n        elevation={3}\n        component=\"div\"\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          handleDrag(e);\n        }}\n        className={classes.uploadYAMLDiv}\n      >\n        {uploadError ? (\n          <div className={classes.uploadSuccessDiv}>\n            <img\n              src=\"./icons/error-upload.svg\"\n              alt=\"upload error\"\n              width=\"20\"\n              height=\"20\"\n            />\n            <Typography className={classes.errorText}>\n              {t('customWorkflow.createWorkflow.errorUpload')}\n            </Typography>\n            <ButtonFilled\n              className={classes.errorBtn}\n              onClick={() => {\n                setUploadedYAML('');\n                setUploadError(false);\n              }}\n            >\n              <img src=\"./icons/retry.svg\" alt=\"Retry\" />\n              <Typography className={classes.retryText}>\n                {t('customWorkflow.createWorkflow.retryUpload')}\n              </Typography>\n            </ButtonFilled>\n          </div>\n        ) : uploadedYAML === '' ? (\n          <div className={classes.uploadYAMLText} data-cy=\"uploadYAMLInput\">\n            <img\n              src=\"./icons/upload-yaml.svg\"\n              alt=\"upload yaml\"\n              className={classes.uploadImage}\n            />\n            <Typography variant=\"h6\">\n              {t('customWorkflow.createWorkflow.drag')}\n            </Typography>\n            <Typography className={classes.orText}>or</Typography>\n            <input\n              accept=\".yaml\"\n              style={{ display: 'none' }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={(e) => {\n                handleFileUpload(e);\n              }}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <label htmlFor=\"contained-button-file\">\n                <Button\n                  variant=\"outlined\"\n                  className={classes.uploadBtn}\n                  component=\"span\"\n                >\n                  {t('customWorkflow.createWorkflow.uploadFile')}\n                </Button>\n              </label>\n            </label>\n          </div>\n        ) : (\n          <div className={classes.uploadSuccessDiv}>\n            <img\n              src=\"./icons/upload-success.svg\"\n              alt=\"checkmark\"\n              className={classes.uploadSuccessImg}\n            />\n            <Typography className={classes.uploadSuccessText}>\n              {t('customWorkflow.createWorkflow.uploadSuccess')} {fileName}\n            </Typography>\n          </div>\n        )}\n      </Paper>\n    </AccordionDetails>\n  );\n};\nexport default UploadYAML;\n"]},"metadata":{},"sourceType":"module"}