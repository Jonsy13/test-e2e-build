{"ast":null,"code":"import _objectSpread from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable @typescript-eslint/no-unused-vars */import{useQuery}from'@apollo/client';import{IconButton,Menu,MenuItem,Typography}from'@material-ui/core';import KeyboardArrowDownIcon from'@material-ui/icons/KeyboardArrowDown';import React,{useEffect}from'react';import{useSelector}from'react-redux';import BackButton from'../../components/Button/BackButton';import Scaffold from'../../containers/layouts/Scaffold';import{LIST_DASHBOARD,LIST_DATASOURCE}from'../../graphql';import useActions from'../../redux/actions';import*as DashboardActions from'../../redux/actions/dashboards';import*as DataSourceActions from'../../redux/actions/dataSource';import{getProjectID}from'../../utils/getSearchParams';import DataSourceInactiveModal from'../../views/Analytics/ApplicationDashboard/DataSourceInactiveModal';import InfoDropdown from'../../views/Analytics/ApplicationDashboard/InfoDropdown';import DashboardPanelGroup from'../../views/Analytics/ApplicationDashboard/Panel/DashboardPanelGroup';import ToolBar from'../../views/Analytics/ApplicationDashboard/ToolBar';import TopNavButtons from'../../views/Analytics/ApplicationDashboard/TopNavButtons';import{ACTIVE}from'./constants';import useStyles from'./styles';var DashboardPage=function DashboardPage(){var _selectedDashboard$se;var classes=useStyles();var dataSource=useActions(DataSourceActions);var dashboard=useActions(DashboardActions);// get ProjectID\nvar projectID=getProjectID();var selectedDashboard=useSelector(function(state){return state.selectDashboard;});var selectedDataSource=useSelector(function(state){return state.selectDataSource;});var _React$useState=React.useState({id:(_selectedDashboard$se=selectedDashboard.selectedDashboardID)!==null&&_selectedDashboard$se!==void 0?_selectedDashboard$se:'',name:'',typeName:'',typeID:'',agentID:'',agentName:'',urlToIcon:'',information:'',chaosEventQueryTemplate:'',chaosVerdictQueryTemplate:'',applicationMetadataMap:[],dashboardListForAgent:[],metaData:[],dashboardKey:'Default',panelNameAndIDList:[]}),_React$useState2=_slicedToArray(_React$useState,2),selectedDashboardInformation=_React$useState2[0],setSelectedDashboardInformation=_React$useState2[1];var _React$useState3=React.useState(null),_React$useState4=_slicedToArray(_React$useState3,2),anchorEl=_React$useState4[0],setAnchorEl=_React$useState4[1];var _React$useState5=React.useState('ACTIVE'),_React$useState6=_slicedToArray(_React$useState5,2),dataSourceStatus=_React$useState6[0],setDataSourceStatus=_React$useState6[1];var open=Boolean(anchorEl);var handleClick=function handleClick(event){setAnchorEl(event.currentTarget);};var handleClose=function handleClose(){setAnchorEl(null);};var _React$useState7=React.useState(false),_React$useState8=_slicedToArray(_React$useState7,2),isInfoOpen=_React$useState8[0],setIsInfoOpen=_React$useState8[1];var _React$useState9=React.useState([]),_React$useState10=_slicedToArray(_React$useState9,2),selectedPanels=_React$useState10[0],setSelectedPanels=_React$useState10[1];// Apollo query to get the dashboards data\nvar _useQuery=useQuery(LIST_DASHBOARD,{variables:{projectID:projectID},fetchPolicy:'no-cache'}),dashboards=_useQuery.data;// Apollo query to get the datasources data\nvar _useQuery2=useQuery(LIST_DATASOURCE,{variables:{projectID:projectID},fetchPolicy:'no-cache'}),dataSources=_useQuery2.data;useEffect(function(){if(dashboards&&dashboards.ListDashboard.length){if(selectedDashboardInformation.id!==selectedDashboardInformation.dashboardKey){var _selectedDashboard=dashboards.ListDashboard.filter(function(data){return data.db_id===selectedDashboardInformation.id;})[0];var selectedPanelNameAndIDList=[];if(_selectedDashboard){var _selectedDashboard$pa;((_selectedDashboard$pa=_selectedDashboard.panel_groups)!==null&&_selectedDashboard$pa!==void 0?_selectedDashboard$pa:[]).forEach(function(panelGroup){var _panelGroup$panels;((_panelGroup$panels=panelGroup.panels)!==null&&_panelGroup$panels!==void 0?_panelGroup$panels:[]).forEach(function(panel){selectedPanelNameAndIDList.push({name:panel.panel_name,id:panel.panel_id});});});}var availableDashboards=_selectedDashboard?dashboards.ListDashboard.filter(function(data){return data.cluster_id===_selectedDashboard.cluster_id;}):[];if(_selectedDashboard){setSelectedDashboardInformation(_objectSpread(_objectSpread({},selectedDashboardInformation),{},{dashboardListForAgent:availableDashboards,metaData:[_selectedDashboard],dashboardKey:selectedDashboardInformation.id,panelNameAndIDList:selectedPanelNameAndIDList,name:_selectedDashboard.db_name,typeName:_selectedDashboard.db_type_name,typeID:_selectedDashboard.db_type_id,agentID:_selectedDashboard.cluster_id,agentName:_selectedDashboard.cluster_name,urlToIcon:\"/icons/\".concat(_selectedDashboard.db_type_id,\"_dashboard.svg\"),information:_selectedDashboard.db_information,chaosEventQueryTemplate:_selectedDashboard.chaos_event_query_template,chaosVerdictQueryTemplate:_selectedDashboard.chaos_verdict_query_template,applicationMetadataMap:_selectedDashboard.application_metadata_map}));setSelectedPanels(selectedPanelNameAndIDList.map(function(panel){return panel.id;}));}}}},[dashboards,selectedDashboardInformation.id]);useEffect(function(){if(dataSources&&dataSources.ListDataSource.length){dashboard.selectDashboard({refreshRate:0});if(selectedDataSource.selectedDataSourceID===''){if(selectedDashboardInformation.metaData&&selectedDashboardInformation.metaData[0]&&dataSources.ListDataSource){var _selectedDataSource=dataSources.ListDataSource.filter(function(data){return data.ds_id===selectedDashboardInformation.metaData[0].ds_id;})[0];if(_selectedDataSource){dataSource.selectDataSource({selectedDataSourceURL:_selectedDataSource.ds_url,selectedDataSourceID:_selectedDataSource.ds_id,selectedDataSourceName:_selectedDataSource.ds_name});}if(_selectedDataSource&&_selectedDataSource.health_status!==ACTIVE){setDataSourceStatus(_selectedDataSource.health_status);}}}}},[selectedDashboardInformation.dashboardKey,dataSources]);return/*#__PURE__*/React.createElement(Scaffold,null,/*#__PURE__*/React.createElement(\"div\",{className:classes.rootContainer},/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(\"div\",{className:classes.button},/*#__PURE__*/React.createElement(BackButton,null)),/*#__PURE__*/React.createElement(\"div\",{className:classes.controlsDiv},/*#__PURE__*/React.createElement(Typography,{variant:\"h4\",className:classes.weightedFont},selectedDashboardInformation.agentName,\" /\",' ',/*#__PURE__*/React.createElement(Typography,{variant:\"h4\",display:\"inline\",className:classes.italic},selectedDashboardInformation.name),/*#__PURE__*/React.createElement(IconButton,{\"aria-label\":\"more\",\"aria-controls\":\"long-menu\",\"aria-haspopup\":\"true\",onClick:handleClick,\"data-cy\":\"browseDashboardListOptions\",className:classes.iconButton},/*#__PURE__*/React.createElement(KeyboardArrowDownIcon,{className:classes.dashboardSwitchIcon})),/*#__PURE__*/React.createElement(Menu,{id:\"long-menu\",anchorEl:anchorEl,keepMounted:true,open:open,onClose:handleClose},selectedDashboardInformation.dashboardListForAgent.map(function(data){return/*#__PURE__*/React.createElement(MenuItem,{key:\"\".concat(data.db_id,\"-monitoringDashboard\"),value:data.db_id,onClick:function onClick(){setSelectedDashboardInformation(_objectSpread(_objectSpread({},selectedDashboardInformation),{},{id:data.db_id,name:data.db_name,typeName:data.db_type_name,typeID:data.db_type_id,urlToIcon:\"/icons/\".concat(data.db_type_id,\"_dashboard.svg\"),information:data.db_information,chaosEventQueryTemplate:data.chaos_event_query_template,chaosVerdictQueryTemplate:data.chaos_verdict_query_template,applicationMetadataMap:data.application_metadata_map}));dataSource.selectDataSource({selectedDataSourceURL:'',selectedDataSourceID:'',selectedDataSourceName:''});setAnchorEl(null);},className:data.db_id===selectedDashboardInformation.id?classes.menuItemSelected:classes.menuItem},/*#__PURE__*/React.createElement(\"div\",{className:classes.expDiv},/*#__PURE__*/React.createElement(Typography,{\"data-cy\":\"switchDashboard\",className:\"\".concat(classes.btnText,\" \").concat(classes.italic),variant:\"h5\"},data.db_name)));}))),/*#__PURE__*/React.createElement(TopNavButtons,{isInfoToggledState:isInfoOpen,switchIsInfoToggled:function switchIsInfoToggled(toggleState){setIsInfoOpen(toggleState);},dashboardData:selectedDashboardInformation,dashboardTypeID:selectedDashboardInformation.typeID})),isInfoOpen&&/*#__PURE__*/React.createElement(InfoDropdown,{dashboardConfigurationDetails:{name:selectedDashboardInformation.name,typeID:selectedDashboardInformation.typeID,dataSourceName:selectedDataSource.selectedDataSourceName,dataSourceURL:selectedDataSource.selectedDataSourceURL,agentName:selectedDashboardInformation.agentName},metricsToBeShown:selectedDashboardInformation.panelNameAndIDList,applicationsToBeShown:[],postPanelSelectionRoutine:function postPanelSelectionRoutine(selectedPanelList){setSelectedPanels(selectedPanelList);},postApplicationSelectionRoutine:function postApplicationSelectionRoutine(selectedApplicationList){}}),/*#__PURE__*/React.createElement(ToolBar,null),/*#__PURE__*/React.createElement(\"div\",{className:classes.analyticsDiv,key:selectedDashboardInformation.dashboardKey},selectedDashboardInformation.metaData[0]&&selectedDashboardInformation.metaData[0].panel_groups.length>0&&selectedDashboardInformation.metaData[0].panel_groups.map(function(panelGroup){return/*#__PURE__*/React.createElement(\"div\",{key:\"\".concat(panelGroup.panel_group_id,\"-dashboardPage-div\"),\"data-cy\":\"dashboardPanelGroup\"},/*#__PURE__*/React.createElement(DashboardPanelGroup,{key:\"\".concat(panelGroup.panel_group_id,\"-dashboardPage-component\"),panel_group_id:panelGroup.panel_group_id,panel_group_name:panelGroup.panel_group_name,panels:panelGroup.panels,selectedPanels:selectedPanels}));})))),dataSourceStatus!=='ACTIVE'?/*#__PURE__*/React.createElement(DataSourceInactiveModal,{dataSourceStatus:dataSourceStatus,dashboardID:selectedDashboardInformation.id}):/*#__PURE__*/React.createElement(\"div\",null));};export default DashboardPage;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/pages/ApplicationDashboard/index.tsx"],"names":["useQuery","IconButton","Menu","MenuItem","Typography","KeyboardArrowDownIcon","React","useEffect","useSelector","BackButton","Scaffold","LIST_DASHBOARD","LIST_DATASOURCE","useActions","DashboardActions","DataSourceActions","getProjectID","DataSourceInactiveModal","InfoDropdown","DashboardPanelGroup","ToolBar","TopNavButtons","ACTIVE","useStyles","DashboardPage","classes","dataSource","dashboard","projectID","selectedDashboard","state","selectDashboard","selectedDataSource","selectDataSource","useState","id","selectedDashboardID","name","typeName","typeID","agentID","agentName","urlToIcon","information","chaosEventQueryTemplate","chaosVerdictQueryTemplate","applicationMetadataMap","dashboardListForAgent","metaData","dashboardKey","panelNameAndIDList","selectedDashboardInformation","setSelectedDashboardInformation","anchorEl","setAnchorEl","dataSourceStatus","setDataSourceStatus","open","Boolean","handleClick","event","currentTarget","handleClose","isInfoOpen","setIsInfoOpen","selectedPanels","setSelectedPanels","variables","fetchPolicy","dashboards","data","dataSources","ListDashboard","length","filter","db_id","selectedPanelNameAndIDList","panel_groups","forEach","panelGroup","panels","panel","push","panel_name","panel_id","availableDashboards","cluster_id","db_name","db_type_name","db_type_id","cluster_name","db_information","chaos_event_query_template","chaos_verdict_query_template","application_metadata_map","map","ListDataSource","refreshRate","selectedDataSourceID","ds_id","selectedDataSourceURL","ds_url","selectedDataSourceName","ds_name","health_status","rootContainer","root","button","controlsDiv","weightedFont","italic","iconButton","dashboardSwitchIcon","menuItemSelected","menuItem","expDiv","btnText","toggleState","dataSourceName","dataSourceURL","selectedPanelList","selectedApplicationList","analyticsDiv","panel_group_id","panel_group_name"],"mappings":"qWAAA,sDACA,OAASA,QAAT,KAAyB,gBAAzB,CACA,OAASC,UAAT,CAAqBC,IAArB,CAA2BC,QAA3B,CAAqCC,UAArC,KAAuD,mBAAvD,CACA,MAAOC,CAAAA,qBAAP,KAAkC,sCAAlC,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,oCAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,mCAArB,CACA,OAASC,cAAT,CAAyBC,eAAzB,KAAgD,eAAhD,CAiBA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,MAAO,GAAKC,CAAAA,gBAAZ,KAAkC,gCAAlC,CACA,MAAO,GAAKC,CAAAA,iBAAZ,KAAmC,gCAAnC,CAEA,OAASC,YAAT,KAA6B,6BAA7B,CACA,MAAOC,CAAAA,uBAAP,KAAoC,oEAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,yDAAzB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,sEAAhC,CACA,MAAOC,CAAAA,OAAP,KAAoB,oDAApB,CACA,MAAOC,CAAAA,aAAP,KAA0B,0DAA1B,CACA,OAASC,MAAT,KAAuB,aAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAEA,GAAMC,CAAAA,aAAuB,CAAG,QAA1BA,CAAAA,aAA0B,EAAM,2BACpC,GAAMC,CAAAA,OAAO,CAAGF,SAAS,EAAzB,CACA,GAAMG,CAAAA,UAAU,CAAGb,UAAU,CAACE,iBAAD,CAA7B,CACA,GAAMY,CAAAA,SAAS,CAAGd,UAAU,CAACC,gBAAD,CAA5B,CACA;AACA,GAAMc,CAAAA,SAAS,CAAGZ,YAAY,EAA9B,CACA,GAAMa,CAAAA,iBAAiB,CAAGrB,WAAW,CACnC,SAACsB,KAAD,QAAsBA,CAAAA,KAAK,CAACC,eAA5B,EADmC,CAArC,CAGA,GAAMC,CAAAA,kBAAkB,CAAGxB,WAAW,CACpC,SAACsB,KAAD,QAAsBA,CAAAA,KAAK,CAACG,gBAA5B,EADoC,CAAtC,CAIA,oBACE3B,KAAK,CAAC4B,QAAN,CAA6C,CAC3CC,EAAE,wBAAEN,iBAAiB,CAACO,mBAApB,+DAA2C,EADF,CAE3CC,IAAI,CAAE,EAFqC,CAG3CC,QAAQ,CAAE,EAHiC,CAI3CC,MAAM,CAAE,EAJmC,CAK3CC,OAAO,CAAE,EALkC,CAM3CC,SAAS,CAAE,EANgC,CAO3CC,SAAS,CAAE,EAPgC,CAQ3CC,WAAW,CAAE,EAR8B,CAS3CC,uBAAuB,CAAE,EATkB,CAU3CC,yBAAyB,CAAE,EAVgB,CAW3CC,sBAAsB,CAAE,EAXmB,CAY3CC,qBAAqB,CAAE,EAZoB,CAa3CC,QAAQ,CAAE,EAbiC,CAc3CC,YAAY,CAAE,SAd6B,CAe3CC,kBAAkB,CAAE,EAfuB,CAA7C,CADF,oDAAOC,4BAAP,qBAAqCC,+BAArC,qBAkBA,qBAAgC9C,KAAK,CAAC4B,QAAN,CAAmC,IAAnC,CAAhC,qDAAOmB,QAAP,qBAAiBC,WAAjB,qBACA,qBACEhD,KAAK,CAAC4B,QAAN,CAAuB,QAAvB,CADF,qDAAOqB,gBAAP,qBAAyBC,mBAAzB,qBAEA,GAAMC,CAAAA,IAAI,CAAGC,OAAO,CAACL,QAAD,CAApB,CACA,GAAMM,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAA0C,CAC5DN,WAAW,CAACM,KAAK,CAACC,aAAP,CAAX,CACD,CAFD,CAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBR,WAAW,CAAC,IAAD,CAAX,CACD,CAFD,CAGA,qBAAoChD,KAAK,CAAC4B,QAAN,CAAwB,KAAxB,CAApC,qDAAO6B,UAAP,qBAAmBC,aAAnB,qBACA,qBAA4C1D,KAAK,CAAC4B,QAAN,CAAyB,EAAzB,CAA5C,sDAAO+B,cAAP,sBAAuBC,iBAAvB,sBAEA;AACA,cAA6BlE,QAAQ,CACnCW,cADmC,CAEnC,CACEwD,SAAS,CAAE,CAAEvC,SAAS,CAATA,SAAF,CADb,CAEEwC,WAAW,CAAE,UAFf,CAFmC,CAArC,CAAcC,UAAd,WAAQC,IAAR,CAQA;AACA,eAA8BtE,QAAQ,CACpCY,eADoC,CAEpC,CACEuD,SAAS,CAAE,CAAEvC,SAAS,CAATA,SAAF,CADb,CAEEwC,WAAW,CAAE,UAFf,CAFoC,CAAtC,CAAcG,WAAd,YAAQD,IAAR,CAQA/D,SAAS,CAAC,UAAM,CACd,GAAI8D,UAAU,EAAIA,UAAU,CAACG,aAAX,CAAyBC,MAA3C,CAAmD,CACjD,GACEtB,4BAA4B,CAAChB,EAA7B,GACAgB,4BAA4B,CAACF,YAF/B,CAGE,CACA,GAAMpB,CAAAA,kBAAwC,CAC5CwC,UAAU,CAACG,aAAX,CAAyBE,MAAzB,CAAgC,SAACJ,IAAD,CAAU,CACxC,MAAOA,CAAAA,IAAI,CAACK,KAAL,GAAexB,4BAA4B,CAAChB,EAAnD,CACD,CAFD,EAEG,CAFH,CADF,CAIA,GAAMyC,CAAAA,0BAA4C,CAAG,EAArD,CACA,GAAI/C,kBAAJ,CAAuB,2BACrB,wBAACA,kBAAiB,CAACgD,YAAnB,+DAAmC,EAAnC,EAAuCC,OAAvC,CACE,SAACC,UAAD,CAAoC,wBAClC,qBAACA,UAAU,CAACC,MAAZ,yDAAsB,EAAtB,EAA0BF,OAA1B,CAAkC,SAACG,KAAD,CAA0B,CAC1DL,0BAA0B,CAACM,IAA3B,CAAgC,CAC9B7C,IAAI,CAAE4C,KAAK,CAACE,UADkB,CAE9BhD,EAAE,CAAE8C,KAAK,CAACG,QAFoB,CAAhC,EAID,CALD,EAMD,CARH,EAUD,CACD,GAAMC,CAAAA,mBAA4C,CAAGxD,kBAAiB,CAClEwC,UAAU,CAACG,aAAX,CAAyBE,MAAzB,CAAgC,SAACJ,IAAD,CAAU,CACxC,MAAOA,CAAAA,IAAI,CAACgB,UAAL,GAAoBzD,kBAAiB,CAACyD,UAA7C,CACD,CAFD,CADkE,CAIlE,EAJJ,CAKA,GAAIzD,kBAAJ,CAAuB,CACrBuB,+BAA+B,gCAC1BD,4BAD0B,MAE7BJ,qBAAqB,CAAEsC,mBAFM,CAG7BrC,QAAQ,CAAE,CAACnB,kBAAD,CAHmB,CAI7BoB,YAAY,CAAEE,4BAA4B,CAAChB,EAJd,CAK7Be,kBAAkB,CAAE0B,0BALS,CAM7BvC,IAAI,CAAER,kBAAiB,CAAC0D,OANK,CAO7BjD,QAAQ,CAAET,kBAAiB,CAAC2D,YAPC,CAQ7BjD,MAAM,CAAEV,kBAAiB,CAAC4D,UARG,CAS7BjD,OAAO,CAAEX,kBAAiB,CAACyD,UATE,CAU7B7C,SAAS,CAAEZ,kBAAiB,CAAC6D,YAVA,CAW7BhD,SAAS,kBAAYb,kBAAiB,CAAC4D,UAA9B,kBAXoB,CAY7B9C,WAAW,CAAEd,kBAAiB,CAAC8D,cAZF,CAa7B/C,uBAAuB,CACrBf,kBAAiB,CAAC+D,0BAdS,CAe7B/C,yBAAyB,CACvBhB,kBAAiB,CAACgE,4BAhBS,CAiB7B/C,sBAAsB,CAAEjB,kBAAiB,CAACiE,wBAjBb,GAA/B,CAmBA5B,iBAAiB,CACfU,0BAA0B,CAACmB,GAA3B,CAA+B,SAACd,KAAD,QAA2BA,CAAAA,KAAK,CAAC9C,EAAjC,EAA/B,CADe,CAAjB,CAGD,CACF,CACF,CACF,CAtDQ,CAsDN,CAACkC,UAAD,CAAalB,4BAA4B,CAAChB,EAA1C,CAtDM,CAAT,CAwDA5B,SAAS,CAAC,UAAM,CACd,GAAIgE,WAAW,EAAIA,WAAW,CAACyB,cAAZ,CAA2BvB,MAA9C,CAAsD,CACpD9C,SAAS,CAACI,eAAV,CAA0B,CACxBkE,WAAW,CAAE,CADW,CAA1B,EAGA,GAAIjE,kBAAkB,CAACkE,oBAAnB,GAA4C,EAAhD,CAAoD,CAClD,GACE/C,4BAA4B,CAACH,QAA7B,EACAG,4BAA4B,CAACH,QAA7B,CAAsC,CAAtC,CADA,EAEAuB,WAAW,CAACyB,cAHd,CAIE,CACA,GAAMhE,CAAAA,mBAA0C,CAC9CuC,WAAW,CAACyB,cAAZ,CAA2BtB,MAA3B,CAAkC,SAACJ,IAAD,CAAU,CAC1C,MACEA,CAAAA,IAAI,CAAC6B,KAAL,GAAehD,4BAA4B,CAACH,QAA7B,CAAsC,CAAtC,EAAyCmD,KAD1D,CAGD,CAJD,EAIG,CAJH,CADF,CAMA,GAAInE,mBAAJ,CAAwB,CACtBN,UAAU,CAACO,gBAAX,CAA4B,CAC1BmE,qBAAqB,CAAEpE,mBAAkB,CAACqE,MADhB,CAE1BH,oBAAoB,CAAElE,mBAAkB,CAACmE,KAFf,CAG1BG,sBAAsB,CAAEtE,mBAAkB,CAACuE,OAHjB,CAA5B,EAKD,CACD,GACEvE,mBAAkB,EAClBA,mBAAkB,CAACwE,aAAnB,GAAqClF,MAFvC,CAGE,CACAkC,mBAAmB,CAACxB,mBAAkB,CAACwE,aAApB,CAAnB,CACD,CACF,CACF,CACF,CACF,CAjCQ,CAiCN,CAACrD,4BAA4B,CAACF,YAA9B,CAA4CsB,WAA5C,CAjCM,CAAT,CAmCA,mBACE,oBAAC,QAAD,mBACE,2BAAK,SAAS,CAAE9C,OAAO,CAACgF,aAAxB,eACE,2BAAK,SAAS,CAAEhF,OAAO,CAACiF,IAAxB,eACE,2BAAK,SAAS,CAAEjF,OAAO,CAACkF,MAAxB,eACE,oBAAC,UAAD,MADF,CADF,cAKE,2BAAK,SAAS,CAAElF,OAAO,CAACmF,WAAxB,eACE,oBAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,SAAS,CAAEnF,OAAO,CAACoF,YAA5C,EACG1D,4BAA4B,CAACV,SADhC,MAC6C,GAD7C,cAEE,oBAAC,UAAD,EACE,OAAO,CAAC,IADV,CAEE,OAAO,CAAC,QAFV,CAGE,SAAS,CAAEhB,OAAO,CAACqF,MAHrB,EAKG3D,4BAA4B,CAACd,IALhC,CAFF,cASE,oBAAC,UAAD,EACE,aAAW,MADb,CAEE,gBAAc,WAFhB,CAGE,gBAAc,MAHhB,CAIE,OAAO,CAAEsB,WAJX,CAKE,UAAQ,4BALV,CAME,SAAS,CAAElC,OAAO,CAACsF,UANrB,eAQE,oBAAC,qBAAD,EACE,SAAS,CAAEtF,OAAO,CAACuF,mBADrB,EARF,CATF,cAqBE,oBAAC,IAAD,EACE,EAAE,CAAC,WADL,CAEE,QAAQ,CAAE3D,QAFZ,CAGE,WAAW,KAHb,CAIE,IAAI,CAAEI,IAJR,CAKE,OAAO,CAAEK,WALX,EAOGX,4BAA4B,CAACJ,qBAA7B,CAAmDgD,GAAnD,CACC,SAACzB,IAAD,CAAiC,CAC/B,mBACE,oBAAC,QAAD,EACE,GAAG,WAAKA,IAAI,CAACK,KAAV,wBADL,CAEE,KAAK,CAAEL,IAAI,CAACK,KAFd,CAGE,OAAO,CAAE,kBAAM,CACbvB,+BAA+B,gCAC1BD,4BAD0B,MAE7BhB,EAAE,CAAEmC,IAAI,CAACK,KAFoB,CAG7BtC,IAAI,CAAEiC,IAAI,CAACiB,OAHkB,CAI7BjD,QAAQ,CAAEgC,IAAI,CAACkB,YAJc,CAK7BjD,MAAM,CAAE+B,IAAI,CAACmB,UALgB,CAM7B/C,SAAS,kBAAY4B,IAAI,CAACmB,UAAjB,kBANoB,CAO7B9C,WAAW,CAAE2B,IAAI,CAACqB,cAPW,CAQ7B/C,uBAAuB,CACrB0B,IAAI,CAACsB,0BATsB,CAU7B/C,yBAAyB,CACvByB,IAAI,CAACuB,4BAXsB,CAY7B/C,sBAAsB,CACpBwB,IAAI,CAACwB,wBAbsB,GAA/B,CAeApE,UAAU,CAACO,gBAAX,CAA4B,CAC1BmE,qBAAqB,CAAE,EADG,CAE1BF,oBAAoB,CAAE,EAFI,CAG1BI,sBAAsB,CAAE,EAHE,CAA5B,EAKAhD,WAAW,CAAC,IAAD,CAAX,CACD,CAzBH,CA0BE,SAAS,CACPgB,IAAI,CAACK,KAAL,GAAexB,4BAA4B,CAAChB,EAA5C,CACIV,OAAO,CAACwF,gBADZ,CAEIxF,OAAO,CAACyF,QA7BhB,eAgCE,2BAAK,SAAS,CAAEzF,OAAO,CAAC0F,MAAxB,eACE,oBAAC,UAAD,EACE,UAAQ,iBADV,CAEE,SAAS,WAAK1F,OAAO,CAAC2F,OAAb,aAAwB3F,OAAO,CAACqF,MAAhC,CAFX,CAGE,OAAO,CAAC,IAHV,EAKGxC,IAAI,CAACiB,OALR,CADF,CAhCF,CADF,CA4CD,CA9CF,CAPH,CArBF,CADF,cAgFE,oBAAC,aAAD,EACE,kBAAkB,CAAExB,UADtB,CAEE,mBAAmB,CAAE,6BAACsD,WAAD,CAA0B,CAC7CrD,aAAa,CAACqD,WAAD,CAAb,CACD,CAJH,CAKE,aAAa,CAAElE,4BALjB,CAME,eAAe,CAAEA,4BAA4B,CAACZ,MANhD,EAhFF,CALF,CA8FGwB,UAAU,eACT,oBAAC,YAAD,EACE,6BAA6B,CAAE,CAC7B1B,IAAI,CAAEc,4BAA4B,CAACd,IADN,CAE7BE,MAAM,CAAEY,4BAA4B,CAACZ,MAFR,CAG7B+E,cAAc,CAAEtF,kBAAkB,CAACsE,sBAHN,CAI7BiB,aAAa,CAAEvF,kBAAkB,CAACoE,qBAJL,CAK7B3D,SAAS,CAAEU,4BAA4B,CAACV,SALX,CADjC,CAQE,gBAAgB,CAAEU,4BAA4B,CAACD,kBARjD,CASE,qBAAqB,CAAE,EATzB,CAUE,yBAAyB,CAAE,mCAACsE,iBAAD,CAAiC,CAC1DtD,iBAAiB,CAACsD,iBAAD,CAAjB,CACD,CAZH,CAaE,+BAA+B,CAAE,yCAC/BC,uBAD+B,CAE5B,CAAE,CAfT,EA/FJ,cAiHE,oBAAC,OAAD,MAjHF,cAkHE,2BACE,SAAS,CAAEhG,OAAO,CAACiG,YADrB,CAEE,GAAG,CAAEvE,4BAA4B,CAACF,YAFpC,EAWGE,4BAA4B,CAACH,QAA7B,CAAsC,CAAtC,GACCG,4BAA4B,CAACH,QAA7B,CAAsC,CAAtC,EAAyC6B,YAAzC,CAAsDJ,MAAtD,CACE,CAFH,EAGCtB,4BAA4B,CAACH,QAA7B,CAAsC,CAAtC,EAAyC6B,YAAzC,CAAsDkB,GAAtD,CACE,SAAChB,UAAD,qBACE,2BACE,GAAG,WAAKA,UAAU,CAAC4C,cAAhB,sBADL,CAEE,UAAQ,qBAFV,eAIE,oBAAC,mBAAD,EACE,GAAG,WAAK5C,UAAU,CAAC4C,cAAhB,4BADL,CAEE,cAAc,CAAE5C,UAAU,CAAC4C,cAF7B,CAGE,gBAAgB,CAAE5C,UAAU,CAAC6C,gBAH/B,CAIE,MAAM,CAAE7C,UAAU,CAACC,MAJrB,CAKE,cAAc,CAAEf,cALlB,EAJF,CADF,EADF,CAdJ,CAlHF,CADF,CADF,CAqJGV,gBAAgB,GAAK,QAArB,cACC,oBAAC,uBAAD,EACE,gBAAgB,CAAEA,gBADpB,CAEE,WAAW,CAAEJ,4BAA4B,CAAChB,EAF5C,EADD,cAMC,+BA3JJ,CADF,CAgKD,CAzTD,CA2TA,cAAeX,CAAAA,aAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useQuery } from '@apollo/client';\nimport { IconButton, Menu, MenuItem, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport BackButton from '../../components/Button/BackButton';\nimport Scaffold from '../../containers/layouts/Scaffold';\nimport { LIST_DASHBOARD, LIST_DATASOURCE } from '../../graphql';\nimport {\n  PanelNameAndID,\n  SelectedDashboardInformation,\n} from '../../models/dashboardsData';\nimport {\n  DashboardList,\n  ListDashboardResponse,\n  ListDashboardVars,\n  PanelGroupResponse,\n  PanelResponse,\n} from '../../models/graphql/dashboardsDetails';\nimport {\n  DataSourceList,\n  ListDataSourceResponse,\n  ListDataSourceVars,\n} from '../../models/graphql/dataSourceDetails';\nimport useActions from '../../redux/actions';\nimport * as DashboardActions from '../../redux/actions/dashboards';\nimport * as DataSourceActions from '../../redux/actions/dataSource';\nimport { RootState } from '../../redux/reducers';\nimport { getProjectID } from '../../utils/getSearchParams';\nimport DataSourceInactiveModal from '../../views/Analytics/ApplicationDashboard/DataSourceInactiveModal';\nimport InfoDropdown from '../../views/Analytics/ApplicationDashboard/InfoDropdown';\nimport DashboardPanelGroup from '../../views/Analytics/ApplicationDashboard/Panel/DashboardPanelGroup';\nimport ToolBar from '../../views/Analytics/ApplicationDashboard/ToolBar';\nimport TopNavButtons from '../../views/Analytics/ApplicationDashboard/TopNavButtons';\nimport { ACTIVE } from './constants';\nimport useStyles from './styles';\n\nconst DashboardPage: React.FC = () => {\n  const classes = useStyles();\n  const dataSource = useActions(DataSourceActions);\n  const dashboard = useActions(DashboardActions);\n  // get ProjectID\n  const projectID = getProjectID();\n  const selectedDashboard = useSelector(\n    (state: RootState) => state.selectDashboard\n  );\n  const selectedDataSource = useSelector(\n    (state: RootState) => state.selectDataSource\n  );\n\n  const [selectedDashboardInformation, setSelectedDashboardInformation] =\n    React.useState<SelectedDashboardInformation>({\n      id: selectedDashboard.selectedDashboardID ?? '',\n      name: '',\n      typeName: '',\n      typeID: '',\n      agentID: '',\n      agentName: '',\n      urlToIcon: '',\n      information: '',\n      chaosEventQueryTemplate: '',\n      chaosVerdictQueryTemplate: '',\n      applicationMetadataMap: [],\n      dashboardListForAgent: [],\n      metaData: [],\n      dashboardKey: 'Default',\n      panelNameAndIDList: [],\n    });\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [dataSourceStatus, setDataSourceStatus] =\n    React.useState<string>('ACTIVE');\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isInfoOpen, setIsInfoOpen] = React.useState<Boolean>(false);\n  const [selectedPanels, setSelectedPanels] = React.useState<string[]>([]);\n\n  // Apollo query to get the dashboards data\n  const { data: dashboards } = useQuery<DashboardList, ListDashboardVars>(\n    LIST_DASHBOARD,\n    {\n      variables: { projectID },\n      fetchPolicy: 'no-cache',\n    }\n  );\n\n  // Apollo query to get the datasources data\n  const { data: dataSources } = useQuery<DataSourceList, ListDataSourceVars>(\n    LIST_DATASOURCE,\n    {\n      variables: { projectID },\n      fetchPolicy: 'no-cache',\n    }\n  );\n\n  useEffect(() => {\n    if (dashboards && dashboards.ListDashboard.length) {\n      if (\n        selectedDashboardInformation.id !==\n        selectedDashboardInformation.dashboardKey\n      ) {\n        const selectedDashboard: ListDashboardResponse =\n          dashboards.ListDashboard.filter((data) => {\n            return data.db_id === selectedDashboardInformation.id;\n          })[0];\n        const selectedPanelNameAndIDList: PanelNameAndID[] = [];\n        if (selectedDashboard) {\n          (selectedDashboard.panel_groups ?? []).forEach(\n            (panelGroup: PanelGroupResponse) => {\n              (panelGroup.panels ?? []).forEach((panel: PanelResponse) => {\n                selectedPanelNameAndIDList.push({\n                  name: panel.panel_name,\n                  id: panel.panel_id,\n                });\n              });\n            }\n          );\n        }\n        const availableDashboards: ListDashboardResponse[] = selectedDashboard\n          ? dashboards.ListDashboard.filter((data) => {\n              return data.cluster_id === selectedDashboard.cluster_id;\n            })\n          : [];\n        if (selectedDashboard) {\n          setSelectedDashboardInformation({\n            ...selectedDashboardInformation,\n            dashboardListForAgent: availableDashboards,\n            metaData: [selectedDashboard],\n            dashboardKey: selectedDashboardInformation.id,\n            panelNameAndIDList: selectedPanelNameAndIDList,\n            name: selectedDashboard.db_name,\n            typeName: selectedDashboard.db_type_name,\n            typeID: selectedDashboard.db_type_id,\n            agentID: selectedDashboard.cluster_id,\n            agentName: selectedDashboard.cluster_name,\n            urlToIcon: `/icons/${selectedDashboard.db_type_id}_dashboard.svg`,\n            information: selectedDashboard.db_information,\n            chaosEventQueryTemplate:\n              selectedDashboard.chaos_event_query_template,\n            chaosVerdictQueryTemplate:\n              selectedDashboard.chaos_verdict_query_template,\n            applicationMetadataMap: selectedDashboard.application_metadata_map,\n          });\n          setSelectedPanels(\n            selectedPanelNameAndIDList.map((panel: PanelNameAndID) => panel.id)\n          );\n        }\n      }\n    }\n  }, [dashboards, selectedDashboardInformation.id]);\n\n  useEffect(() => {\n    if (dataSources && dataSources.ListDataSource.length) {\n      dashboard.selectDashboard({\n        refreshRate: 0,\n      });\n      if (selectedDataSource.selectedDataSourceID === '') {\n        if (\n          selectedDashboardInformation.metaData &&\n          selectedDashboardInformation.metaData[0] &&\n          dataSources.ListDataSource\n        ) {\n          const selectedDataSource: ListDataSourceResponse =\n            dataSources.ListDataSource.filter((data) => {\n              return (\n                data.ds_id === selectedDashboardInformation.metaData[0].ds_id\n              );\n            })[0];\n          if (selectedDataSource) {\n            dataSource.selectDataSource({\n              selectedDataSourceURL: selectedDataSource.ds_url,\n              selectedDataSourceID: selectedDataSource.ds_id,\n              selectedDataSourceName: selectedDataSource.ds_name,\n            });\n          }\n          if (\n            selectedDataSource &&\n            selectedDataSource.health_status !== ACTIVE\n          ) {\n            setDataSourceStatus(selectedDataSource.health_status);\n          }\n        }\n      }\n    }\n  }, [selectedDashboardInformation.dashboardKey, dataSources]);\n\n  return (\n    <Scaffold>\n      <div className={classes.rootContainer}>\n        <div className={classes.root}>\n          <div className={classes.button}>\n            <BackButton />\n          </div>\n\n          <div className={classes.controlsDiv}>\n            <Typography variant=\"h4\" className={classes.weightedFont}>\n              {selectedDashboardInformation.agentName} /{' '}\n              <Typography\n                variant=\"h4\"\n                display=\"inline\"\n                className={classes.italic}\n              >\n                {selectedDashboardInformation.name}\n              </Typography>\n              <IconButton\n                aria-label=\"more\"\n                aria-controls=\"long-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                data-cy=\"browseDashboardListOptions\"\n                className={classes.iconButton}\n              >\n                <KeyboardArrowDownIcon\n                  className={classes.dashboardSwitchIcon}\n                />\n              </IconButton>\n              <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={handleClose}\n              >\n                {selectedDashboardInformation.dashboardListForAgent.map(\n                  (data: ListDashboardResponse) => {\n                    return (\n                      <MenuItem\n                        key={`${data.db_id}-monitoringDashboard`}\n                        value={data.db_id}\n                        onClick={() => {\n                          setSelectedDashboardInformation({\n                            ...selectedDashboardInformation,\n                            id: data.db_id,\n                            name: data.db_name,\n                            typeName: data.db_type_name,\n                            typeID: data.db_type_id,\n                            urlToIcon: `/icons/${data.db_type_id}_dashboard.svg`,\n                            information: data.db_information,\n                            chaosEventQueryTemplate:\n                              data.chaos_event_query_template,\n                            chaosVerdictQueryTemplate:\n                              data.chaos_verdict_query_template,\n                            applicationMetadataMap:\n                              data.application_metadata_map,\n                          });\n                          dataSource.selectDataSource({\n                            selectedDataSourceURL: '',\n                            selectedDataSourceID: '',\n                            selectedDataSourceName: '',\n                          });\n                          setAnchorEl(null);\n                        }}\n                        className={\n                          data.db_id === selectedDashboardInformation.id\n                            ? classes.menuItemSelected\n                            : classes.menuItem\n                        }\n                      >\n                        <div className={classes.expDiv}>\n                          <Typography\n                            data-cy=\"switchDashboard\"\n                            className={`${classes.btnText} ${classes.italic}`}\n                            variant=\"h5\"\n                          >\n                            {data.db_name}\n                          </Typography>\n                        </div>\n                      </MenuItem>\n                    );\n                  }\n                )}\n              </Menu>\n            </Typography>\n\n            <TopNavButtons\n              isInfoToggledState={isInfoOpen}\n              switchIsInfoToggled={(toggleState: Boolean) => {\n                setIsInfoOpen(toggleState);\n              }}\n              dashboardData={selectedDashboardInformation}\n              dashboardTypeID={selectedDashboardInformation.typeID}\n            />\n          </div>\n          {isInfoOpen && (\n            <InfoDropdown\n              dashboardConfigurationDetails={{\n                name: selectedDashboardInformation.name,\n                typeID: selectedDashboardInformation.typeID,\n                dataSourceName: selectedDataSource.selectedDataSourceName,\n                dataSourceURL: selectedDataSource.selectedDataSourceURL,\n                agentName: selectedDashboardInformation.agentName,\n              }}\n              metricsToBeShown={selectedDashboardInformation.panelNameAndIDList}\n              applicationsToBeShown={[]}\n              postPanelSelectionRoutine={(selectedPanelList: string[]) => {\n                setSelectedPanels(selectedPanelList);\n              }}\n              postApplicationSelectionRoutine={(\n                selectedApplicationList: string[]\n              ) => {}}\n            />\n          )}\n          <ToolBar />\n          <div\n            className={classes.analyticsDiv}\n            key={selectedDashboardInformation.dashboardKey}\n          >\n            {/* <div className={classes.chaosTableSection}>\n              <ChaosAccordion\n                dashboardKey={selectedDashboardInformation.dashboardKey}\n                chaosEventsToBeShown={prometheusQueryData?.chaosEventsToBeShown}\n                postEventSelectionRoutine={postEventSelectionRoutine}\n              />\n            </div> */}\n            {selectedDashboardInformation.metaData[0] &&\n              selectedDashboardInformation.metaData[0].panel_groups.length >\n                0 &&\n              selectedDashboardInformation.metaData[0].panel_groups.map(\n                (panelGroup: PanelGroupResponse) => (\n                  <div\n                    key={`${panelGroup.panel_group_id}-dashboardPage-div`}\n                    data-cy=\"dashboardPanelGroup\"\n                  >\n                    <DashboardPanelGroup\n                      key={`${panelGroup.panel_group_id}-dashboardPage-component`}\n                      panel_group_id={panelGroup.panel_group_id}\n                      panel_group_name={panelGroup.panel_group_name}\n                      panels={panelGroup.panels}\n                      selectedPanels={selectedPanels}\n                    />\n                  </div>\n                )\n              )}\n          </div>\n        </div>\n      </div>\n      {dataSourceStatus !== 'ACTIVE' ? (\n        <DataSourceInactiveModal\n          dataSourceStatus={dataSourceStatus}\n          dashboardID={selectedDashboardInformation.id}\n        />\n      ) : (\n        <div />\n      )}\n    </Scaffold>\n  );\n};\n\nexport default DashboardPage;\n"]},"metadata":{},"sourceType":"module"}