{"ast":null,"code":"import _slicedToArray from \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/DataSources/Table/TableToolbar.tsx\";\n\nimport { Button, FormControl, IconButton, InputLabel, MenuItem, OutlinedInput, Select, Typography } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { ButtonFilled, Search } from 'litmus-ui';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport { history } from '../../../../redux/configureStore';\nimport { getProjectID, getProjectRole } from '../../../../utils/getSearchParams';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\nvar TableToolBar = function TableToolBar(_ref) {\n  var handleSearch = _ref.handleSearch,\n      searchToken = _ref.searchToken,\n      dataSourceTypes = _ref.dataSourceTypes,\n      statuses = _ref.statuses,\n      callbackToSetDataSourceType = _ref.callbackToSetDataSourceType,\n      callbackToSetRange = _ref.callbackToSetRange,\n      callbackToSetStatus = _ref.callbackToSetStatus;\n  var classes = useStyles();\n  var projectID = getProjectID();\n  var projectRole = getProjectRole();\n  var outlinedInputClasses = useOutlinedInputStyles();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _React$useState = React.useState('All'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dataSourceType = _React$useState2[0],\n      setDataSourceType = _React$useState2[1];\n\n  var _React$useState3 = React.useState('All'),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      status = _React$useState4[0],\n      setStatus = _React$useState4[1];\n\n  var dateRangeSelectorRef = useRef(null);\n\n  var _React$useState5 = React.useState({\n    startDate: ' ',\n    endDate: ' '\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      range = _React$useState6[0],\n      setRange = _React$useState6[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDateRangeSelectorPopoverOpen = _useState2[0],\n      setDateRangeSelectorPopoverOpen = _useState2[1];\n\n  var handleDataSourceTypeChange = function handleDataSourceTypeChange(event) {\n    setDataSourceType(event.target.value);\n    callbackToSetDataSourceType(event.target.value);\n  };\n\n  var handleStatusChange = function handleStatusChange(event) {\n    setStatus(event.target.value);\n    callbackToSetStatus(event.target.value);\n  };\n\n  var CallbackFromRangeSelector = function CallbackFromRangeSelector(selectedStartDate, selectedEndDate) {\n    setRange({\n      startDate: selectedStartDate,\n      endDate: selectedEndDate\n    });\n    callbackToSetRange(\"\".concat(\"\".concat(selectedStartDate.split(' ')[2], \" \").concat(selectedStartDate.split(' ')[1], \" \").concat(selectedStartDate.split(' ')[3])), \"\".concat(\"\".concat(selectedEndDate.split(' ')[2], \" \").concat(selectedEndDate.split(' ')[1], \" \").concat(selectedEndDate.split(' ')[3])));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerSection,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.search,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    id: \"input-with-icon-textfield\",\n    placeholder: t('analyticsDashboard.dataSourceTable.search'),\n    value: searchToken,\n    onChange: handleSearch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.headerSection,\n    style: {\n      justifyContent: 'flex-end'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: \"\".concat(classes.formControl, \" \").concat(classes.dataSourceStatusForm),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.dataSourceTable.tableHead1')), /*#__PURE__*/React.createElement(Select, {\n    label: t('analyticsDashboard.dataSourceTable.tableHead1'),\n    value: status,\n    onChange: handleStatusChange,\n    className: classes.selectText,\n    input: /*#__PURE__*/React.createElement(OutlinedInput, {\n      classes: outlinedInputClasses,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 20\n      }\n    }),\n    IconComponent: KeyboardArrowDownIcon,\n    MenuProps: {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      getContentAnchorEl: null,\n      classes: {\n        paper: classes.menuList\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"All\",\n    className: classes.menuListItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.dataSourceTable.all')), statuses.map(function (availableStatus) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(availableStatus, \"-analyticsDashboard-dataSource-toolbar\"),\n      value: availableStatus,\n      className: classes.menuListItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, availableStatus);\n  }))), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: \"\".concat(classes.formControl, \" \").concat(classes.dataSourceNameForm),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.selectText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.dataSourceTable.tableHead3')), /*#__PURE__*/React.createElement(Select, {\n    label: t('analyticsDashboard.dataSourceTable.tableHead3'),\n    value: dataSourceType,\n    onChange: handleDataSourceTypeChange,\n    className: classes.selectText,\n    input: /*#__PURE__*/React.createElement(OutlinedInput, {\n      classes: outlinedInputClasses,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 20\n      }\n    }),\n    IconComponent: KeyboardArrowDownIcon,\n    MenuProps: {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      getContentAnchorEl: null,\n      classes: {\n        paper: classes.menuList\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"All\",\n    className: classes.menuListItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, t('analyticsDashboard.dataSourceTable.all')), dataSourceTypes.map(function (availableDataSourceType) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: \"\".concat(availableDataSourceType, \"-analyticsDashboard-dataSource-tableToolbar\"),\n      value: availableDataSourceType,\n      className: classes.menuListItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }, availableDataSourceType);\n  }))), /*#__PURE__*/React.createElement(Button, {\n    className: \"\".concat(classes.selectDate, \" \").concat(isDateRangeSelectorPopoverOpen ? classes.selectDateFocused : ''),\n    onClick: function onClick() {\n      return setDateRangeSelectorPopoverOpen(true);\n    },\n    ref: dateRangeSelectorRef,\n    \"aria-label\": \"time range\",\n    \"aria-haspopup\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.displayDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, range.startDate === ' ' ? t('analyticsDashboard.dataSourceTable.selectPeriod') : \"\".concat(range.startDate.split(' ')[2], \" \").concat(range.startDate.split(' ')[1], \" \").concat(range.startDate.split(' ')[3], \" - \").concat(range.endDate.split(' ')[2], \" \").concat(range.endDate.split(' ')[1], \" \").concat(range.endDate.split(' ')[3]), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.rangeSelectorIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, isDateRangeSelectorPopoverOpen ? /*#__PURE__*/React.createElement(KeyboardArrowUpIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(KeyboardArrowDownIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(ButtonFilled, {\n    onClick: function onClick() {\n      return history.push({\n        pathname: '/analytics/datasource/create',\n        search: \"?projectID=\".concat(projectID, \"&projectRole=\").concat(projectRole)\n      });\n    },\n    className: classes.addButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, t('analyticsDashboard.dataSourceTable.addDataSource'))), /*#__PURE__*/React.createElement(DateRangeSelector, {\n    anchorEl: dateRangeSelectorRef.current,\n    isOpen: isDateRangeSelectorPopoverOpen,\n    onClose: function onClose() {\n      return setDateRangeSelectorPopoverOpen(false);\n    },\n    callbackToSetRange: CallbackFromRangeSelector,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TableToolBar;","map":{"version":3,"sources":["/home/vedant/go/src/github.com/litmus/litmus-portal/frontend/src/views/Analytics/DataSources/Table/TableToolbar.tsx"],"names":["Button","FormControl","IconButton","InputLabel","MenuItem","OutlinedInput","Select","Typography","KeyboardArrowDownIcon","KeyboardArrowUpIcon","ButtonFilled","Search","React","useRef","useState","useTranslation","DateRangeSelector","history","getProjectID","getProjectRole","useStyles","useOutlinedInputStyles","TableToolBar","handleSearch","searchToken","dataSourceTypes","statuses","callbackToSetDataSourceType","callbackToSetRange","callbackToSetStatus","classes","projectID","projectRole","outlinedInputClasses","t","dataSourceType","setDataSourceType","status","setStatus","dateRangeSelectorRef","startDate","endDate","range","setRange","isDateRangeSelectorPopoverOpen","setDateRangeSelectorPopoverOpen","handleDataSourceTypeChange","event","target","value","handleStatusChange","CallbackFromRangeSelector","selectedStartDate","selectedEndDate","split","headerSection","search","justifyContent","formControl","dataSourceStatusForm","selectText","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","paper","menuList","menuListItem","map","availableStatus","dataSourceNameForm","availableDataSourceType","selectDate","selectDateFocused","displayDate","rangeSelectorIcon","push","pathname","addButton","buttonText","current"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  Typography,\n} from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { ButtonFilled, Search } from 'litmus-ui';\nimport React, { ChangeEvent, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DateRangeSelector from '../../../../components/DateRangeSelector';\nimport { history } from '../../../../redux/configureStore';\nimport {\n  getProjectID,\n  getProjectRole,\n} from '../../../../utils/getSearchParams';\nimport useStyles, { useOutlinedInputStyles } from './styles';\n\ninterface DataSourceTypeCallBackType {\n  (dataSourceType: string): void;\n}\n\ninterface StatusCallBackType {\n  (status: string): void;\n}\n\ninterface RangeCallBackType {\n  (selectedStartDate: string, selectedEndDate: string): void;\n}\n\ninterface TableToolBarProps {\n  searchToken: string;\n  handleSearch: (\n    event?: ChangeEvent<{ value: unknown }>,\n    token?: string\n  ) => void;\n  dataSourceTypes: string[];\n  statuses: string[];\n  callbackToSetDataSourceType: DataSourceTypeCallBackType;\n  callbackToSetRange: RangeCallBackType;\n  callbackToSetStatus: StatusCallBackType;\n}\n\ninterface RangeType {\n  startDate: string;\n  endDate: string;\n}\n\nconst TableToolBar: React.FC<TableToolBarProps> = ({\n  handleSearch,\n  searchToken,\n  dataSourceTypes,\n  statuses,\n  callbackToSetDataSourceType,\n  callbackToSetRange,\n  callbackToSetStatus,\n}) => {\n  const classes = useStyles();\n  const projectID = getProjectID();\n  const projectRole = getProjectRole();\n  const outlinedInputClasses = useOutlinedInputStyles();\n  const { t } = useTranslation();\n  const [dataSourceType, setDataSourceType] = React.useState<String>('All');\n  const [status, setStatus] = React.useState<String>('All');\n  const dateRangeSelectorRef = useRef<HTMLButtonElement>(null);\n  const [range, setRange] = React.useState<RangeType>({\n    startDate: ' ',\n    endDate: ' ',\n  });\n  const [isDateRangeSelectorPopoverOpen, setDateRangeSelectorPopoverOpen] =\n    useState(false);\n\n  const handleDataSourceTypeChange = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    setDataSourceType(event.target.value as String);\n    callbackToSetDataSourceType(event.target.value as string);\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setStatus(event.target.value as String);\n    callbackToSetStatus(event.target.value as string);\n  };\n\n  const CallbackFromRangeSelector = (\n    selectedStartDate: string,\n    selectedEndDate: string\n  ) => {\n    setRange({ startDate: selectedStartDate, endDate: selectedEndDate });\n    callbackToSetRange(\n      `${`${selectedStartDate.split(' ')[2]} ${\n        selectedStartDate.split(' ')[1]\n      } ${selectedStartDate.split(' ')[3]}`}`,\n      `${`${selectedEndDate.split(' ')[2]} ${selectedEndDate.split(' ')[1]} ${\n        selectedEndDate.split(' ')[3]\n      }`}`\n    );\n  };\n\n  return (\n    <div className={classes.headerSection}>\n      <div className={classes.search}>\n        <Search\n          id=\"input-with-icon-textfield\"\n          placeholder={t('analyticsDashboard.dataSourceTable.search')}\n          value={searchToken}\n          onChange={handleSearch}\n        />\n      </div>\n      <div\n        className={classes.headerSection}\n        style={{ justifyContent: 'flex-end' }}\n      >\n        <FormControl\n          variant=\"outlined\"\n          className={`${classes.formControl} ${classes.dataSourceStatusForm}`}\n        >\n          <InputLabel className={classes.selectText}>\n            {t('analyticsDashboard.dataSourceTable.tableHead1')}\n          </InputLabel>\n          <Select\n            label={t('analyticsDashboard.dataSourceTable.tableHead1')}\n            value={status}\n            onChange={handleStatusChange}\n            className={classes.selectText}\n            input={<OutlinedInput classes={outlinedInputClasses} />}\n            IconComponent={KeyboardArrowDownIcon}\n            MenuProps={{\n              anchorOrigin: {\n                vertical: 'bottom',\n                horizontal: 'right',\n              },\n              transformOrigin: {\n                vertical: 'top',\n                horizontal: 'right',\n              },\n              getContentAnchorEl: null,\n              classes: { paper: classes.menuList },\n            }}\n          >\n            <MenuItem value=\"All\" className={classes.menuListItem}>\n              {t('analyticsDashboard.dataSourceTable.all')}\n            </MenuItem>\n            {statuses.map((availableStatus: string) => (\n              <MenuItem\n                key={`${availableStatus}-analyticsDashboard-dataSource-toolbar`}\n                value={availableStatus}\n                className={classes.menuListItem}\n              >\n                {availableStatus}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <FormControl\n          variant=\"outlined\"\n          className={`${classes.formControl} ${classes.dataSourceNameForm}`}\n        >\n          <InputLabel className={classes.selectText}>\n            {t('analyticsDashboard.dataSourceTable.tableHead3')}\n          </InputLabel>\n          <Select\n            label={t('analyticsDashboard.dataSourceTable.tableHead3')}\n            value={dataSourceType}\n            onChange={handleDataSourceTypeChange}\n            className={classes.selectText}\n            input={<OutlinedInput classes={outlinedInputClasses} />}\n            IconComponent={KeyboardArrowDownIcon}\n            MenuProps={{\n              anchorOrigin: {\n                vertical: 'bottom',\n                horizontal: 'right',\n              },\n              transformOrigin: {\n                vertical: 'top',\n                horizontal: 'right',\n              },\n              getContentAnchorEl: null,\n              classes: { paper: classes.menuList },\n            }}\n          >\n            <MenuItem value=\"All\" className={classes.menuListItem}>\n              {t('analyticsDashboard.dataSourceTable.all')}\n            </MenuItem>\n            {dataSourceTypes.map((availableDataSourceType: string) => (\n              <MenuItem\n                key={`${availableDataSourceType}-analyticsDashboard-dataSource-tableToolbar`}\n                value={availableDataSourceType}\n                className={classes.menuListItem}\n              >\n                {availableDataSourceType}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <Button\n          className={`${classes.selectDate} ${\n            isDateRangeSelectorPopoverOpen ? classes.selectDateFocused : ''\n          }`}\n          onClick={() => setDateRangeSelectorPopoverOpen(true)}\n          ref={dateRangeSelectorRef}\n          aria-label=\"time range\"\n          aria-haspopup=\"true\"\n        >\n          <Typography className={classes.displayDate}>\n            {range.startDate === ' '\n              ? t('analyticsDashboard.dataSourceTable.selectPeriod')\n              : `${range.startDate.split(' ')[2]} ${\n                  range.startDate.split(' ')[1]\n                } ${range.startDate.split(' ')[3]} - ${\n                  range.endDate.split(' ')[2]\n                } ${range.endDate.split(' ')[1]} ${\n                  range.endDate.split(' ')[3]\n                }`}\n\n            <IconButton className={classes.rangeSelectorIcon}>\n              {isDateRangeSelectorPopoverOpen ? (\n                <KeyboardArrowUpIcon />\n              ) : (\n                <KeyboardArrowDownIcon />\n              )}\n            </IconButton>\n          </Typography>\n        </Button>\n        <ButtonFilled\n          onClick={() =>\n            history.push({\n              pathname: '/analytics/datasource/create',\n              search: `?projectID=${projectID}&projectRole=${projectRole}`,\n            })\n          }\n          className={classes.addButton}\n        >\n          <Typography className={classes.buttonText}>\n            {t('analyticsDashboard.dataSourceTable.addDataSource')}\n          </Typography>\n        </ButtonFilled>\n        <DateRangeSelector\n          anchorEl={dateRangeSelectorRef.current as HTMLElement}\n          isOpen={isDateRangeSelectorPopoverOpen}\n          onClose={() => setDateRangeSelectorPopoverOpen(false)}\n          callbackToSetRange={CallbackFromRangeSelector}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TableToolBar;\n"]},"metadata":{},"sourceType":"module"}