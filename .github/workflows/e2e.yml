name: Litmus-CI
on:
  issue_comment:
    types: [created]
    branches:
      - master

jobs:
  # Job for finding last commit sha of pull-request
  find-commit:
    runs-on: ubuntu-latest
    outputs:
      commit-sha: ${{ steps.getcommit.outputs.sha }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_PR_commits
        with:
          route: GET /repos/:repo/pulls/:pull_number/commits
          repo: ${{ github.repository }}
          pull_number: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: set commit to output
        id: getcommit
        run: |
          prsha=$(echo $response | jq '.[-1].sha'  | tr -d '"')
          echo "::set-output name=sha::$prsha"
        env:
          response: ${{ steps.get_PR_commits.outputs.data }}

  changes:
    runs-on: ubuntu-latest
    needs: find-commit
    # Set job outputs to values from filter step
    outputs:
      changed-paths: ${{ steps.filter.outputs.changes }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.find-commit.outputs.commit-sha }}
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          ref: ${{ needs.find-commit.outputs.commit-sha }}
          filters: |
            frontend:
              - 'litmus-portal/frontend/**'
            graphql-server:
              - 'litmus-portal/graphql-server/**'
            authentication:
              - 'litmus-portal/authentication/**'

  image-build:
    runs-on: ubuntu-latest
    needs: [find-commit, changes]
    strategy:
      matrix:
        path: ${{ fromJSON(needs.changes.outputs.changed-paths) }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.find-commit.outputs.commit-sha }}
          fetch-depth: 0
      - name: Building Docker-Image for ${{ matrix.path }}
        run: |
          chmod 755 ./.github/filter_and_build.sh
          ./.github/filter_and_build.sh
        env:
          directory: ${{ matrix.path }}
      - name: upload docker artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Docker-Images
          path: Images

  tests:
    needs: [find-commit, image-build]
    runs-on: ubuntu-20.04
    steps:
      - name: download docker artifacts
        uses: actions/download-artifact@v2
        with:
          name: Docker-Images
          path: Images

      - name: load the images
        run: |
          cd Images
          ls -1 *.tar | xargs --no-run-if-empty -L 1 docker load -i
          docker image ls -a

      # - name: Notification for Starting Testing.
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     comment-id: "${{ github.event.comment.id }}"
      #     body: |
      #       ****
      #       **Test Status:** The testing has been started please wait for the results ...

      # - uses: actions/checkout@v2
      #   with:
      #     ref: ${{ needs.find-commit.outputs.commit-sha }}
      #     fetch-depth: 0

      # - name: Setting up KinD Cluster
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   uses: engineerd/setup-kind@v0.5.0
      #   with:
      #     version: "v0.7.0"

      # - name: Configuring and Testing the Cluster Installation
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: |
      #     kubectl cluster-info --context kind-kind
      #     kind get kubeconfig --internal >$HOME/.kube/config
      #     kubectl get nodes
      #     kubectl get pods -n kube-system

      # - name: Loading images build from Pull-request
      #   run: |
      #   env:

      # - name: Deploying the litmus-portal for E2E testing
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: |
      #     wget https://raw.githubusercontent.com/litmuschaos/litmus/master/litmus-portal/cluster-k8s-manifest.yml
      #     sed -i 's/Always/IfNotPresent/g' cluster-k8s-manifest.yml
      #     kubectl apply -f cluster-k8s-manifest.yml
      #     kubectl get pods -n litmus
      #     kubectl get deployments -o wide -n litmus
      #     kubectl wait --for=condition=Ready pods --all --namespace litmus --timeout=120s

      # - name: Getting the ENV variables for using while testing
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: |
      #     export frontendPodName=$(kubectl get pods -l component=litmusportal-frontend --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' -n litmus)
      #     export frontendPodPort=$(kubectl get pod $frontendPodName --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}' --namespace litmus)
      #     kubectl port-forward $frontendPodName -n litmus 3001:$frontendPodPort &

      # # Cloning the litmus-e2e repo for E2E tests.
      # - name: Cloning the litmus-e2e Repo
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: |
      #     git clone https://github.com/litmuschaos/litmus-e2e.git -b litmus-portal

      # - name: Portal Authentication Tests
      #   if: startsWith(github.event.comment.body, '/run-e2e-AuthTests') || startsWith(github.event.comment.body, '/run-e2e')
      #   uses: cypress-io/github-action@v2
      #   continue-on-error: false
      #   with:
      #     spec: cypress/integration/Basic_Setup/**/*.spec.js
      #     working-directory: litmus-e2e/CypressE2E/
      #     config-file: cypress.prod.json

      # - name: Run all E2E tests
      #   if: startsWith(github.event.comment.body, '/run-e2e-all')
      #   uses: cypress-io/github-action@v2
      #   continue-on-error: false
      #   with:
      #     spec: cypress/integration/Parallel_Tests/**/*.spec.js
      #     working-directory: litmus-e2e/CypressE2E
      #     config-file: cypress.prod.json

      # - name: Check the test run
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: |
      #     echo "TEST_RUN=true" >> $GITHUB_ENV

      # - name: Check for all the jobs are succeeded
      #   if: ${{ success() && env.TEST_RUN == 'true' }}
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     comment-id: "${{ github.event.comment.id }}"
      #     body: |
      #       **Test Result:** All tests are passed
      #       **Run ID:** [${{ env.RUN_ID }}](https://github.com/litmuschaos/litmus/actions/runs/${{ env.RUN_ID }})
      #     reactions: hooray
      #   env:
      #     RUN_ID: ${{ github.run_id }}

      # - name: Check for any job failed
      #   if: ${{ failure() }}
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     comment-id: "${{ github.event.comment.id }}"
      #     body: |
      #       **Test Failed:** Some tests are failed please check
      #       **Run ID:** [${{ env.RUN_ID }}](https://github.com/litmuschaos/litmus/actions/runs/${{ env.RUN_ID }})
      #     reactions: confused
      #   env:
      #     RUN_ID: ${{ github.run_id }}

      # - name: Check if any test ran or not
      #   if: env.TEST_RUN != 'true'
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     comment-id: "${{ github.event.comment.id }}"
      #     body: |
      #       **Test Result:** No test found
      #       **Run ID:** [${{ env.RUN_ID }}](https://github.com/litmuschaos/litmus/actions/runs/${{ env.RUN_ID }})
      #     reactions: eyes
      #   env:
      #     RUN_ID: ${{ github.run_id }}

      # - name: Deleting KinD cluster
      #   if: startsWith(github.event.comment.body, '/run-e2e')
      #   run: kind delete cluster

  merge:
    if: contains(github.event.comment.html_url, '/pull/') && startsWith(github.event.comment.body, '/merge')
    runs-on: ubuntu-latest
    steps:
      - name: Add a merge label when all jobs are passed
        uses: actions-ecosystem/action-add-labels@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          labels: merge
